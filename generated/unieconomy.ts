import * as rt from 'runtypes';
import { buildCall } from 'typical-fetch';

function pickQueryValues<T extends Record<string, unknown>, K extends keyof T>(
  subject: T,
  ...keys: K[]
): [key: string, val: string][] {
  return keys
    .map((key) => [key, subject[key]])
    .filter(([, val]) => val !== undefined)
    .map(([key, val]) => [key.toString(), val.toString()]);
}

function pickFromObject<T extends Record<string, unknown>, K extends keyof T>(
  subject: T,
  ...keys: K[]
): Pick<T, K> {
  const pairs = keys
    .map((key) => [key, subject[key]])
    .filter(([, val]) => val !== undefined)
    .map(([key, val]) => [key, val]);
  return Object.fromEntries(pairs);
}

function withRuntype<T>(validator: rt.Runtype<T>) {
  return (data: unknown) => {
    return validator.check(data);
  };
}

const customValuesRt = rt.Dictionary(rt.Unknown);

type CustomValues = rt.Static<typeof customValuesRt>;

const auditLogRt = rt
  .Record({
    ClientID: rt.String,
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    NewValue: rt.String,
    CreatedAt: rt.String,
    OldValue: rt.String,
    Field: rt.String,
    Verb: rt.String,
    Action: rt.String,
    Transaction: rt.String,
    UpdatedBy: rt.String,
    Route: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AuditLog = rt.Static<typeof auditLogRt>;

const workBalanceRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Balancetype: rt.String,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    IsStartBalance: rt.Boolean,
    Days: rt.Number,
    ValidTimeOff: rt.Number,
    BalanceFrom: rt.String,
    StatusCode: rt.Number,
    BalanceDate: rt.String,
    Minutes: rt.Number,
    UpdatedBy: rt.String,
    WorkRelationID: rt.Number,
    ActualMinutes: rt.Number,
    Description: rt.String,
    ExpectedMinutes: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkBalance = rt.Static<typeof workBalanceRt>;

type Contact = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  ParentBusinessRelationID?: number;
  Comment?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  InfoID?: number;
  Role?: string;
  UpdatedBy?: string;
  ParentBusinessRelation?: BusinessRelation;
  Info?: BusinessRelation;
  CustomValues?: CustomValues;
};

const contactRt: rt.Runtype<Contact> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      ParentBusinessRelationID: rt.Number,
      Comment: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      InfoID: rt.Number,
      Role: rt.String,
      UpdatedBy: rt.String,
      ParentBusinessRelation: businessRelationRt,
      Info: businessRelationRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Address = {
  Region?: string;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AddressLine3?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  CountryCode?: string;
  AddressLine2?: string;
  StatusCode?: number;
  City?: string;
  PostalCode?: string;
  AddressLine1?: string;
  BusinessRelationID?: number;
  Country?: string;
  UpdatedBy?: string;
  BusinessRelation?: BusinessRelation;
  CustomValues?: CustomValues;
};

const addressRt: rt.Runtype<Address> = rt.Lazy(() =>
  rt
    .Record({
      Region: rt.String,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      AddressLine3: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      CountryCode: rt.String,
      AddressLine2: rt.String,
      StatusCode: rt.Number,
      City: rt.String,
      PostalCode: rt.String,
      AddressLine1: rt.String,
      BusinessRelationID: rt.Number,
      Country: rt.String,
      UpdatedBy: rt.String,
      BusinessRelation: businessRelationRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const phoneRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CountryCode: rt.String,
    StatusCode: rt.Number,
    BusinessRelationID: rt.Number,
    UpdatedBy: rt.String,
    Type: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Phone = rt.Static<typeof phoneRt>;

const emailRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    BusinessRelationID: rt.Number,
    UpdatedBy: rt.String,
    Type: rt.String,
    Description: rt.String,
    EmailAddress: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Email = rt.Static<typeof emailRt>;

const bankAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountNumber: rt.String,
    Locked: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    BankID: rt.Number,
    StatusCode: rt.Number,
    IntegrationStatus: rt.Number,
    Label: rt.String,
    IntegrationSettings: rt.String,
    IBAN: rt.String,
    BusinessRelationID: rt.Number,
    UpdatedBy: rt.String,
    CompanySettingsID: rt.Number,
    AccountID: rt.Number,
    BankAccountType: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankAccount = rt.Static<typeof bankAccountRt>;

type BusinessRelation = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  ShippingAddressID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  DefaultEmailID?: number;
  DefaultBankAccountID?: number;
  StatusCode?: number;
  DefaultContactID?: number;
  Name?: string;
  InvoiceAddressID?: number;
  UpdatedBy?: string;
  DefaultPhoneID?: number;
  DefaultContact?: Contact;
  Contacts?: Contact[];
  Addresses?: Address[];
  Phones?: Phone[];
  Emails?: Email[];
  BankAccounts?: BankAccount[];
  InvoiceAddress?: Address;
  ShippingAddress?: Address;
  DefaultPhone?: Phone;
  DefaultEmail?: Email;
  DefaultBankAccount?: BankAccount;
  CustomValues?: CustomValues;
};

const businessRelationRt: rt.Runtype<BusinessRelation> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      ShippingAddressID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      DefaultEmailID: rt.Number,
      DefaultBankAccountID: rt.Number,
      StatusCode: rt.Number,
      DefaultContactID: rt.Number,
      Name: rt.String,
      InvoiceAddressID: rt.Number,
      UpdatedBy: rt.String,
      DefaultPhoneID: rt.Number,
      DefaultContact: contactRt,
      Contacts: rt.Array(contactRt),
      Addresses: rt.Array(addressRt),
      Phones: rt.Array(phoneRt),
      Emails: rt.Array(emailRt),
      BankAccounts: rt.Array(bankAccountRt),
      InvoiceAddress: addressRt,
      ShippingAddress: addressRt,
      DefaultPhone: phoneRt,
      DefaultEmail: emailRt,
      DefaultBankAccount: bankAccountRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const dimensionsRt = rt
  .Record({
    Dimension5ID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ProjectTaskID: rt.Number,
    CreatedBy: rt.String,
    Dimension9ID: rt.Number,
    CreatedAt: rt.String,
    ResponsibleID: rt.Number,
    Dimension7ID: rt.Number,
    Dimension6ID: rt.Number,
    StatusCode: rt.Number,
    Dimension8ID: rt.Number,
    DepartmentID: rt.Number,
    UpdatedBy: rt.String,
    Dimension10ID: rt.Number,
    ProjectID: rt.Number,
    RegionID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimensions = rt.Static<typeof dimensionsRt>;

const workItemRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    WorkItemGroupID: rt.Number,
    TransferedToOrder: rt.Boolean,
    Date: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    MinutesToOrder: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    LunchInMinutes: rt.Number,
    CustomerID: rt.Number,
    Label: rt.String,
    Invoiceable: rt.Boolean,
    WorkTypeID: rt.Number,
    StartTime: rt.String,
    TransferedToPayroll: rt.Boolean,
    Minutes: rt.Number,
    UpdatedBy: rt.String,
    WorkRelationID: rt.Number,
    CustomerOrderID: rt.Number,
    OrderItemId: rt.Number,
    Description: rt.String,
    PriceExVat: rt.Number,
    PayrollTrackingID: rt.Number,
    EndTime: rt.String,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkItem = rt.Static<typeof workItemRt>;

const workRelationRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IsPrivate: rt.Boolean,
    IsActive: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    WorkProfileID: rt.Number,
    CompanyName: rt.String,
    StartDate: rt.String,
    StatusCode: rt.Number,
    WorkPercentage: rt.Number,
    UpdatedBy: rt.String,
    WorkerID: rt.Number,
    Description: rt.String,
    EndTime: rt.String,
    TeamID: rt.Number,
    Items: rt.Array(workItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkRelation = rt.Static<typeof workRelationRt>;

const workerRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeID: rt.Number,
    UserID: rt.Number,
    StatusCode: rt.Number,
    BusinessRelationID: rt.Number,
    UpdatedBy: rt.String,
    Info: businessRelationRt,
    Relations: rt.Array(workRelationRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Worker = rt.Static<typeof workerRt>;

const workItemGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    WorkRelationID: rt.Number,
    Items: rt.Array(workItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkItemGroup = rt.Static<typeof workItemGroupRt>;

const workProfileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    MinutesPerWeek: rt.Number,
    MinutesPerYear: rt.Number,
    StatusCode: rt.Number,
    IsShared: rt.Boolean,
    Name: rt.String,
    UpdatedBy: rt.String,
    MinutesPerMonth: rt.Number,
    LunchIncluded: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkProfile = rt.Static<typeof workProfileRt>;

const workTimeOffRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    TimeoffType: rt.Number,
    CreatedAt: rt.String,
    IsHalfDay: rt.Boolean,
    StatusCode: rt.Number,
    ToDate: rt.String,
    RegionKey: rt.String,
    UpdatedBy: rt.String,
    WorkRelationID: rt.Number,
    Description: rt.String,
    SystemKey: rt.String,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkTimeOff = rt.Static<typeof workTimeOffRt>;

const workTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Price: rt.Number,
    SystemType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    ProductID: rt.Number,
    UpdatedBy: rt.String,
    WagetypeNumber: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkType = rt.Static<typeof workTypeRt>;

const fileTagRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    FileID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Status: rt.Number,
    TagName: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FileTag = rt.Static<typeof fileTagRt>;

type FileEntityLink = {
  EntityID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  EntityType?: string;
  FileID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  IsAttachment?: boolean;
  UpdatedBy?: string;
  File?: File;
  CustomValues?: CustomValues;
};

const fileEntityLinkRt: rt.Runtype<FileEntityLink> = rt.Lazy(() =>
  rt
    .Record({
      EntityID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      EntityType: rt.String,
      FileID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      IsAttachment: rt.Boolean,
      UpdatedBy: rt.String,
      File: fileRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type File = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Pages?: number;
  CreatedBy?: string;
  PermaLink?: string;
  StorageReference?: string;
  encryptionID?: number;
  CreatedAt?: string;
  ContentType?: string;
  Size?: string;
  StatusCode?: number;
  Name?: string;
  Md5?: string;
  UpdatedBy?: string;
  OCRData?: string;
  Description?: string;
  FileTags?: FileTag[];
  EntityLinks?: FileEntityLink[];
  CustomValues?: CustomValues;
};

const fileRt: rt.Runtype<File> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Pages: rt.Number,
      CreatedBy: rt.String,
      PermaLink: rt.String,
      StorageReference: rt.String,
      encryptionID: rt.Number,
      CreatedAt: rt.String,
      ContentType: rt.String,
      Size: rt.String,
      StatusCode: rt.Number,
      Name: rt.String,
      Md5: rt.String,
      UpdatedBy: rt.String,
      OCRData: rt.String,
      Description: rt.String,
      FileTags: rt.Array(fileTagRt),
      EntityLinks: rt.Array(fileEntityLinkRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const distributionPlanElementTypeLegalEntityRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DistributionPlanElementTypeID: rt.Number,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionPlanElementTypeLegalEntity = rt.Static<
  typeof distributionPlanElementTypeLegalEntityRt
>;

const distributionPlanElementTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    LegalEntities: rt.Array(distributionPlanElementTypeLegalEntityRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionPlanElementType = rt.Static<
  typeof distributionPlanElementTypeRt
>;

const distributionPlanElementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DistributionPlanElementTypeID: rt.Number,
    StatusCode: rt.Number,
    Priority: rt.Number,
    UpdatedBy: rt.String,
    DistributionPlanID: rt.Number,
    ElementType: distributionPlanElementTypeRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionPlanElement = rt.Static<typeof distributionPlanElementRt>;

const distributionPlanRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Elements: rt.Array(distributionPlanElementRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionPlan = rt.Static<typeof distributionPlanRt>;

const distributionsRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    PayCheckDistributionPlanID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CustomerInvoiceReminderDistributionPlanID: rt.Number,
    CustomerInvoiceDistributionPlanID: rt.Number,
    StatusCode: rt.Number,
    CustomerOrderDistributionPlanID: rt.Number,
    AnnualStatementDistributionPlanID: rt.Number,
    CustomerQuoteDistributionPlanID: rt.Number,
    UpdatedBy: rt.String,
    CustomerInvoiceDistributionPlan: distributionPlanRt,
    CustomerOrderDistributionPlan: distributionPlanRt,
    CustomerQuoteDistributionPlan: distributionPlanRt,
    CustomerInvoiceReminderDistributionPlan: distributionPlanRt,
    PayCheckDistributionPlan: distributionPlanRt,
    AnnualStatementDistributionPlan: distributionPlanRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Distributions = rt.Static<typeof distributionsRt>;

const termsRt = rt
  .Record({
    CreditDays: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    TermsType: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Terms = rt.Static<typeof termsRt>;

const customerQuoteItemRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    ItemText: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    SumVatCurrency: rt.Number,
    VatTypeID: rt.Number,
    CustomerQuoteID: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SortIndex: rt.Number,
    Comment: rt.String,
    DiscountPercent: rt.Number,
    NumberOfItems: rt.Number,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    PriceExVatCurrency: rt.Number,
    DiscountCurrency: rt.Number,
    CreatedAt: rt.String,
    SumTotalIncVat: rt.Number,
    CurrencyExchangeRate: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    PriceSetByUser: rt.Boolean,
    Discount: rt.Number,
    SumVat: rt.Number,
    ProductID: rt.Number,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    AccountID: rt.Number,
    PriceExVat: rt.Number,
    VatPercent: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerQuoteItem = rt.Static<typeof customerQuoteItemRt>;

const sellerRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeID: rt.Number,
    UserID: rt.Number,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    DefaultDimensionsID: rt.Number,
    TeamID: rt.Number,
    DefaultDimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Seller = rt.Static<typeof sellerRt>;

const sellerLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CustomerQuoteID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    SellerID: rt.Number,
    CustomerInvoiceID: rt.Number,
    RecurringInvoiceID: rt.Number,
    StatusCode: rt.Number,
    CustomerID: rt.Number,
    Percent: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    CustomerOrderID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SellerLink = rt.Static<typeof sellerLinkRt>;

const customerQuoteRt = rt
  .Record({
    InternalNote: rt.String,
    Requisition: rt.String,
    CreditDays: rt.Number,
    Deleted: rt.Boolean,
    OurReference: rt.String,
    ID: rt.Number,
    InvoicePostalCode: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    DeliveryMethod: rt.String,
    TaxExclusiveAmount: rt.Number,
    ShippingCountry: rt.String,
    UpdateCurrencyAmountsOnDateChange: rt.Boolean,
    ShippingAddressLine3: rt.String,
    SupplierOrgNumber: rt.String,
    TaxInclusiveAmount: rt.Number,
    Comment: rt.String,
    ShippingPostalCode: rt.String,
    CustomerName: rt.String,
    CreatedBy: rt.String,
    PaymentTermsID: rt.Number,
    InvoiceCountryCode: rt.String,
    InvoiceCountry: rt.String,
    CreatedAt: rt.String,
    UpdateCurrencyOnToInvoice: rt.Boolean,
    YourReference: rt.String,
    ShippingCity: rt.String,
    CurrencyExchangeRate: rt.Number,
    QuoteNumber: rt.Number,
    DefaultSellerID: rt.Number,
    VatTotalsAmountCurrency: rt.Number,
    ShippingCountryCode: rt.String,
    DeliveryTerm: rt.String,
    InvoiceReceiverName: rt.String,
    InvoiceAddressLine2: rt.String,
    PayableRoundingAmount: rt.Number,
    FreeTxt: rt.String,
    DeliveryTermsID: rt.Number,
    CustomerPerson: rt.String,
    TaxInclusiveAmountCurrency: rt.Number,
    StatusCode: rt.Number,
    VatTotalsAmount: rt.Number,
    PrintStatus: rt.Number,
    DeliveryName: rt.String,
    CustomerID: rt.Number,
    PayableRoundingCurrencyAmount: rt.Number,
    TaxExclusiveAmountCurrency: rt.Number,
    CustomerOrgNumber: rt.String,
    ShippingAddressLine2: rt.String,
    SalesPerson: rt.String,
    UpdateCurrencyOnToOrder: rt.Boolean,
    ValidUntilDate: rt.String,
    PaymentInfoTypeID: rt.Number,
    InvoiceAddressLine1: rt.String,
    QuoteDate: rt.String,
    UpdatedBy: rt.String,
    DistributionPlanID: rt.Number,
    UseReportID: rt.Number,
    DefaultDimensionsID: rt.Number,
    QuoteNumberSeriesID: rt.Number,
    DeliveryDate: rt.String,
    InvoiceCity: rt.String,
    InquiryReference: rt.Number,
    PaymentTerm: rt.String,
    ShippingAddressLine1: rt.String,
    EmailAddress: rt.String,
    InvoiceAddressLine3: rt.String,
    PaymentTerms: termsRt,
    DeliveryTerms: termsRt,
    DefaultDimensions: dimensionsRt,
    Items: rt.Array(customerQuoteItemRt),
    DefaultSeller: sellerRt,
    Sellers: rt.Array(sellerLinkRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerQuote = rt.Static<typeof customerQuoteRt>;

type JournalEntryLineDraft = {
  AccrualID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  TaxBasisAmountCurrency?: number;
  InvoiceNumber?: string;
  VatTypeID?: number;
  BatchNumber?: number;
  TaxBasisAmount?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  PostPostJournalEntryLineID?: number;
  PaymentReferenceID?: number;
  CurrencyExchangeRate?: number;
  JournalEntryTypeID?: number;
  RegisteredDate?: string;
  PaymentID?: string;
  CustomerInvoiceID?: number;
  VatPeriodID?: number;
  DimensionsID?: number;
  StatusCode?: number;
  VatDeductionPercent?: number;
  AmountCurrency?: number;
  DueDate?: string;
  SubAccountID?: number;
  PeriodID?: number;
  FinancialDate?: string;
  Amount?: number;
  PaymentInfoTypeID?: number;
  JournalEntryNumber?: string;
  VatDate?: string;
  UpdatedBy?: string;
  Signature?: string;
  SupplierInvoiceID?: number;
  CustomerOrderID?: number;
  Description?: string;
  AccountID?: number;
  VatPercent?: number;
  JournalEntryID?: number;
  JournalEntryNumberNumeric?: number;
  Dimensions?: Dimensions;
  Accrual?: Accrual;
  CustomValues?: CustomValues;
};

const journalEntryLineDraftRt: rt.Runtype<JournalEntryLineDraft> = rt.Lazy(() =>
  rt
    .Record({
      AccrualID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      TaxBasisAmountCurrency: rt.Number,
      InvoiceNumber: rt.String,
      VatTypeID: rt.Number,
      BatchNumber: rt.Number,
      TaxBasisAmount: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      PostPostJournalEntryLineID: rt.Number,
      PaymentReferenceID: rt.Number,
      CurrencyExchangeRate: rt.Number,
      JournalEntryTypeID: rt.Number,
      RegisteredDate: rt.String,
      PaymentID: rt.String,
      CustomerInvoiceID: rt.Number,
      VatPeriodID: rt.Number,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      VatDeductionPercent: rt.Number,
      AmountCurrency: rt.Number,
      DueDate: rt.String,
      SubAccountID: rt.Number,
      PeriodID: rt.Number,
      FinancialDate: rt.String,
      Amount: rt.Number,
      PaymentInfoTypeID: rt.Number,
      JournalEntryNumber: rt.String,
      VatDate: rt.String,
      UpdatedBy: rt.String,
      Signature: rt.String,
      SupplierInvoiceID: rt.Number,
      CustomerOrderID: rt.Number,
      Description: rt.String,
      AccountID: rt.Number,
      VatPercent: rt.Number,
      JournalEntryID: rt.Number,
      JournalEntryNumberNumeric: rt.Number,
      Dimensions: dimensionsRt,
      Accrual: accrualRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type AccrualPeriod = {
  AccrualID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  PeriodNo?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  JournalEntryDraftLineID?: number;
  Amount?: number;
  UpdatedBy?: string;
  AccountYear?: number;
  Accrual?: Accrual;
  JournalEntryLineDraft?: JournalEntryLineDraft;
  CustomValues?: CustomValues;
};

const accrualPeriodRt: rt.Runtype<AccrualPeriod> = rt.Lazy(() =>
  rt
    .Record({
      AccrualID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      PeriodNo: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      JournalEntryDraftLineID: rt.Number,
      Amount: rt.Number,
      UpdatedBy: rt.String,
      AccountYear: rt.Number,
      Accrual: accrualRt,
      JournalEntryLineDraft: journalEntryLineDraftRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Accrual = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  JournalEntryLineDraftID?: number;
  ResultAccountID?: number;
  BalanceAccountID?: number;
  UpdatedBy?: string;
  AccrualJournalEntryMode?: number;
  AccrualAmount?: number;
  JournalEntryLineDraft?: JournalEntryLineDraft;
  Periods?: AccrualPeriod[];
  CustomValues?: CustomValues;
};

const accrualRt: rt.Runtype<Accrual> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      JournalEntryLineDraftID: rt.Number,
      ResultAccountID: rt.Number,
      BalanceAccountID: rt.Number,
      UpdatedBy: rt.String,
      AccrualJournalEntryMode: rt.Number,
      AccrualAmount: rt.Number,
      JournalEntryLineDraft: journalEntryLineDraftRt,
      Periods: rt.Array(accrualPeriodRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const itemSourceDetailRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    SourceType: rt.String,
    StatusCode: rt.Number,
    ItemSourceID: rt.Number,
    SourceFK: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    Tag: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ItemSourceDetail = rt.Static<typeof itemSourceDetailRt>;

const itemSourceRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Details: rt.Array(itemSourceDetailRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ItemSource = rt.Static<typeof itemSourceRt>;

const customerOrderItemRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    ItemText: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    SumVatCurrency: rt.Number,
    VatTypeID: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SortIndex: rt.Number,
    Comment: rt.String,
    DiscountPercent: rt.Number,
    NumberOfItems: rt.Number,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    PriceExVatCurrency: rt.Number,
    DiscountCurrency: rt.Number,
    CreatedAt: rt.String,
    SumTotalIncVat: rt.Number,
    CurrencyExchangeRate: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    PriceSetByUser: rt.Boolean,
    ReadyToInvoice: rt.Boolean,
    ItemSourceID: rt.Number,
    Discount: rt.Number,
    SumVat: rt.Number,
    ProductID: rt.Number,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    CustomerOrderID: rt.Number,
    AccountID: rt.Number,
    PriceExVat: rt.Number,
    VatPercent: rt.Number,
    Dimensions: dimensionsRt,
    ItemSource: itemSourceRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerOrderItem = rt.Static<typeof customerOrderItemRt>;

const customerOrderRt = rt
  .Record({
    InternalNote: rt.String,
    Requisition: rt.String,
    AccrualID: rt.Number,
    CreditDays: rt.Number,
    Deleted: rt.Boolean,
    OurReference: rt.String,
    ID: rt.Number,
    InvoicePostalCode: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    DeliveryMethod: rt.String,
    TaxExclusiveAmount: rt.Number,
    ShippingCountry: rt.String,
    UpdateCurrencyAmountsOnDateChange: rt.Boolean,
    ShippingAddressLine3: rt.String,
    SupplierOrgNumber: rt.String,
    TaxInclusiveAmount: rt.Number,
    Comment: rt.String,
    ShippingPostalCode: rt.String,
    CustomerName: rt.String,
    CreatedBy: rt.String,
    RestExclusiveAmountCurrency: rt.Number,
    PaymentTermsID: rt.Number,
    InvoiceCountryCode: rt.String,
    InvoiceCountry: rt.String,
    CreatedAt: rt.String,
    UpdateCurrencyOnToInvoice: rt.Boolean,
    YourReference: rt.String,
    ShippingCity: rt.String,
    CurrencyExchangeRate: rt.Number,
    DefaultSellerID: rt.Number,
    VatTotalsAmountCurrency: rt.Number,
    ShippingCountryCode: rt.String,
    DeliveryTerm: rt.String,
    InvoiceReceiverName: rt.String,
    OrderNumber: rt.Number,
    InvoiceAddressLine2: rt.String,
    PayableRoundingAmount: rt.Number,
    FreeTxt: rt.String,
    DeliveryTermsID: rt.Number,
    CustomerPerson: rt.String,
    TaxInclusiveAmountCurrency: rt.Number,
    StatusCode: rt.Number,
    VatTotalsAmount: rt.Number,
    ReadyToInvoice: rt.Boolean,
    PrintStatus: rt.Number,
    DeliveryName: rt.String,
    CustomerID: rt.Number,
    PayableRoundingCurrencyAmount: rt.Number,
    TaxExclusiveAmountCurrency: rt.Number,
    CustomerOrgNumber: rt.String,
    ShippingAddressLine2: rt.String,
    SalesPerson: rt.String,
    PaymentInfoTypeID: rt.Number,
    InvoiceAddressLine1: rt.String,
    OrderDate: rt.String,
    UpdatedBy: rt.String,
    DistributionPlanID: rt.Number,
    UseReportID: rt.Number,
    DefaultDimensionsID: rt.Number,
    DeliveryDate: rt.String,
    OrderNumberSeriesID: rt.Number,
    RestAmountCurrency: rt.Number,
    InvoiceCity: rt.String,
    PaymentTerm: rt.String,
    ShippingAddressLine1: rt.String,
    EmailAddress: rt.String,
    InvoiceAddressLine3: rt.String,
    Accrual: accrualRt,
    PaymentTerms: termsRt,
    DeliveryTerms: termsRt,
    DefaultDimensions: dimensionsRt,
    Items: rt.Array(customerOrderItemRt),
    DefaultSeller: sellerRt,
    Sellers: rt.Array(sellerLinkRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerOrder = rt.Static<typeof customerOrderRt>;

type JournalEntryLine = {
  AccrualID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  TaxBasisAmountCurrency?: number;
  InvoiceNumber?: string;
  VatTypeID?: number;
  BatchNumber?: number;
  TaxBasisAmount?: number;
  VatJournalEntryPostID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  PostPostJournalEntryLineID?: number;
  PaymentReferenceID?: number;
  VatReportID?: number;
  CurrencyExchangeRate?: number;
  JournalEntryTypeID?: number;
  RegisteredDate?: string;
  ReferenceCreditPostID?: number;
  PaymentID?: string;
  CustomerInvoiceID?: number;
  VatPeriodID?: number;
  DimensionsID?: number;
  StatusCode?: number;
  VatDeductionPercent?: number;
  JournalEntryLineDraftID?: number;
  RestAmount?: number;
  AmountCurrency?: number;
  DueDate?: string;
  SubAccountID?: number;
  OriginalReferencePostID?: number;
  PeriodID?: number;
  ReferenceOriginalPostID?: number;
  FinancialDate?: string;
  Amount?: number;
  PaymentInfoTypeID?: number;
  JournalEntryNumber?: string;
  VatDate?: string;
  UpdatedBy?: string;
  Signature?: string;
  SupplierInvoiceID?: number;
  RestAmountCurrency?: number;
  CustomerOrderID?: number;
  OriginalJournalEntryPost?: number;
  Description?: string;
  AccountID?: number;
  VatPercent?: number;
  JournalEntryID?: number;
  JournalEntryNumberNumeric?: number;
  JournalEntry?: JournalEntry;
  VatJournalEntryPost?: JournalEntryLine;
  ReferenceCreditPost?: JournalEntryLine;
  OriginalReferencePost?: JournalEntryLine;
  ReferenceOriginalPost?: JournalEntryLine;
  Dimensions?: Dimensions;
  Accrual?: Accrual;
  JournalEntryLineDraft?: JournalEntryLineDraft;
  CustomValues?: CustomValues;
};

const journalEntryLineRt: rt.Runtype<JournalEntryLine> = rt.Lazy(() =>
  rt
    .Record({
      AccrualID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      TaxBasisAmountCurrency: rt.Number,
      InvoiceNumber: rt.String,
      VatTypeID: rt.Number,
      BatchNumber: rt.Number,
      TaxBasisAmount: rt.Number,
      VatJournalEntryPostID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      PostPostJournalEntryLineID: rt.Number,
      PaymentReferenceID: rt.Number,
      VatReportID: rt.Number,
      CurrencyExchangeRate: rt.Number,
      JournalEntryTypeID: rt.Number,
      RegisteredDate: rt.String,
      ReferenceCreditPostID: rt.Number,
      PaymentID: rt.String,
      CustomerInvoiceID: rt.Number,
      VatPeriodID: rt.Number,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      VatDeductionPercent: rt.Number,
      JournalEntryLineDraftID: rt.Number,
      RestAmount: rt.Number,
      AmountCurrency: rt.Number,
      DueDate: rt.String,
      SubAccountID: rt.Number,
      OriginalReferencePostID: rt.Number,
      PeriodID: rt.Number,
      ReferenceOriginalPostID: rt.Number,
      FinancialDate: rt.String,
      Amount: rt.Number,
      PaymentInfoTypeID: rt.Number,
      JournalEntryNumber: rt.String,
      VatDate: rt.String,
      UpdatedBy: rt.String,
      Signature: rt.String,
      SupplierInvoiceID: rt.Number,
      RestAmountCurrency: rt.Number,
      CustomerOrderID: rt.Number,
      OriginalJournalEntryPost: rt.Number,
      Description: rt.String,
      AccountID: rt.Number,
      VatPercent: rt.Number,
      JournalEntryID: rt.Number,
      JournalEntryNumberNumeric: rt.Number,
      JournalEntry: journalEntryRt,
      VatJournalEntryPost: journalEntryLineRt,
      ReferenceCreditPost: journalEntryLineRt,
      OriginalReferencePost: journalEntryLineRt,
      ReferenceOriginalPost: journalEntryLineRt,
      Dimensions: dimensionsRt,
      Accrual: accrualRt,
      JournalEntryLineDraft: journalEntryLineDraftRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type JournalEntry = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  JournalEntryAccrualID?: number;
  JournalEntryDraftGroup?: string;
  FinancialYearID?: number;
  NumberSeriesTaskID?: number;
  StatusCode?: number;
  JournalEntryNumber?: string;
  UpdatedBy?: string;
  NumberSeriesID?: number;
  Description?: string;
  JournalEntryNumberNumeric?: number;
  Lines?: JournalEntryLine[];
  DraftLines?: JournalEntryLineDraft[];
  JournalEntryAccrual?: Accrual;
  CustomValues?: CustomValues;
};

const journalEntryRt: rt.Runtype<JournalEntry> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      JournalEntryAccrualID: rt.Number,
      JournalEntryDraftGroup: rt.String,
      FinancialYearID: rt.Number,
      NumberSeriesTaskID: rt.Number,
      StatusCode: rt.Number,
      JournalEntryNumber: rt.String,
      UpdatedBy: rt.String,
      NumberSeriesID: rt.Number,
      Description: rt.String,
      JournalEntryNumberNumeric: rt.Number,
      Lines: rt.Array(journalEntryLineRt),
      DraftLines: rt.Array(journalEntryLineDraftRt),
      JournalEntryAccrual: accrualRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const accountGroupSetRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    System: rt.Boolean,
    Shared: rt.Boolean,
    FromAccountNumber: rt.Number,
    Name: rt.String,
    ToAccountNumber: rt.Number,
    UpdatedBy: rt.String,
    SubAccountAllowed: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountGroupSet = rt.Static<typeof accountGroupSetRt>;

type AccountGroup = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AccountGroupSetupID?: number;
  MainGroupID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  AccountGroupSetID?: number;
  CompatibleAccountID?: number;
  Summable?: boolean;
  StatusCode?: number;
  Name?: string;
  UpdatedBy?: string;
  AccountID?: number;
  GroupNumber?: string;
  MainGroup?: AccountGroup;
  AccountGroupSet?: AccountGroupSet;
  CustomValues?: CustomValues;
};

const accountGroupRt: rt.Runtype<AccountGroup> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      AccountGroupSetupID: rt.Number,
      MainGroupID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      AccountGroupSetID: rt.Number,
      CompatibleAccountID: rt.Number,
      Summable: rt.Boolean,
      StatusCode: rt.Number,
      Name: rt.String,
      UpdatedBy: rt.String,
      AccountID: rt.Number,
      GroupNumber: rt.String,
      MainGroup: accountGroupRt,
      AccountGroupSet: accountGroupSetRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const vatCodeGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    No: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatCodeGroup = rt.Static<typeof vatCodeGroupRt>;

type VatReportReference = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  VatPostID?: number;
  VatTypeID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  UpdatedBy?: string;
  AccountID?: number;
  Account?: Account;
  CustomValues?: CustomValues;
};

const vatReportReferenceRt: rt.Runtype<VatReportReference> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      VatPostID: rt.Number,
      VatTypeID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      UpdatedBy: rt.String,
      AccountID: rt.Number,
      Account: accountRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const vatTypePercentageRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    VatTypeID: rt.Number,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    ValidTo: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    VatPercent: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatTypePercentage = rt.Static<typeof vatTypePercentageRt>;

type VatType = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  IncomingAccountID?: number;
  DirectJournalEntryOnly?: boolean;
  Locked?: boolean;
  VatCodeGroupID?: number;
  CreatedBy?: string;
  ReversedTaxDutyVat?: boolean;
  CreatedAt?: string;
  Visible?: boolean;
  VatCode?: string;
  StatusCode?: number;
  InUse?: boolean;
  OutputVat?: boolean;
  Name?: string;
  Alias?: string;
  VatCodeGroupingValue?: string;
  OutgoingAccountID?: number;
  UpdatedBy?: string;
  VatTypeSetupID?: number;
  AvailableInModules?: boolean;
  IncomingAccount?: Account;
  OutgoingAccount?: Account;
  VatCodeGroup?: VatCodeGroup;
  VatReportReferences?: VatReportReference[];
  VatTypePercentages?: VatTypePercentage[];
  CustomValues?: CustomValues;
};

const vatTypeRt: rt.Runtype<VatType> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      IncomingAccountID: rt.Number,
      DirectJournalEntryOnly: rt.Boolean,
      Locked: rt.Boolean,
      VatCodeGroupID: rt.Number,
      CreatedBy: rt.String,
      ReversedTaxDutyVat: rt.Boolean,
      CreatedAt: rt.String,
      Visible: rt.Boolean,
      VatCode: rt.String,
      StatusCode: rt.Number,
      InUse: rt.Boolean,
      OutputVat: rt.Boolean,
      Name: rt.String,
      Alias: rt.String,
      VatCodeGroupingValue: rt.String,
      OutgoingAccountID: rt.Number,
      UpdatedBy: rt.String,
      VatTypeSetupID: rt.Number,
      AvailableInModules: rt.Boolean,
      IncomingAccount: accountRt,
      OutgoingAccount: accountRt,
      VatCodeGroup: vatCodeGroupRt,
      VatReportReferences: rt.Array(vatReportReferenceRt),
      VatTypePercentages: rt.Array(vatTypePercentageRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type EmployeeLeave = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AffectsOtp?: boolean;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  ToDate?: string;
  EmploymentID?: number;
  UpdatedBy?: string;
  LeaveType?: string;
  Description?: string;
  FromDate?: string;
  LeavePercent?: number;
  Employment?: Employment;
  CustomValues?: CustomValues;
};

const employeeLeaveRt: rt.Runtype<EmployeeLeave> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      AffectsOtp: rt.Boolean,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      ToDate: rt.String,
      EmploymentID: rt.Number,
      UpdatedBy: rt.String,
      LeaveType: rt.String,
      Description: rt.String,
      FromDate: rt.String,
      LeavePercent: rt.Number,
      Employment: employmentRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Employment = {
  TradeArea?: string;
  LastWorkPercentChangeDate?: string;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  WorkingHoursScheme?: string;
  ShipReg?: string;
  RegulativeStepNr?: number;
  LastSalaryChangeDate?: string;
  Standard?: boolean;
  HourRate?: number;
  CreatedBy?: string;
  MonthRate?: number;
  CreatedAt?: string;
  UserDefinedRate?: number;
  EmployeeID?: number;
  RegulativeGroupID?: number;
  StartDate?: string;
  RemunerationType?: string;
  DimensionsID?: number;
  StatusCode?: number;
  ShipType?: string;
  JobName?: string;
  WorkPercent?: number;
  EndDate?: string;
  EmployeeNumber?: number;
  EndDateReason?: string;
  SubEntityID?: number;
  EmploymentType?: string;
  HoursPerWeek?: number;
  UpdatedBy?: string;
  LedgerAccount?: string;
  TypeOfEmployment?: string;
  JobCode?: string;
  SeniorityDate?: string;
  PayGrade?: string;
  Employee?: Employee;
  Dimensions?: Dimensions;
  Leaves?: EmployeeLeave[];
  CustomValues?: CustomValues;
};

const employmentRt: rt.Runtype<Employment> = rt.Lazy(() =>
  rt
    .Record({
      TradeArea: rt.String,
      LastWorkPercentChangeDate: rt.String,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      WorkingHoursScheme: rt.String,
      ShipReg: rt.String,
      RegulativeStepNr: rt.Number,
      LastSalaryChangeDate: rt.String,
      Standard: rt.Boolean,
      HourRate: rt.Number,
      CreatedBy: rt.String,
      MonthRate: rt.Number,
      CreatedAt: rt.String,
      UserDefinedRate: rt.Number,
      EmployeeID: rt.Number,
      RegulativeGroupID: rt.Number,
      StartDate: rt.String,
      RemunerationType: rt.String,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      ShipType: rt.String,
      JobName: rt.String,
      WorkPercent: rt.Number,
      EndDate: rt.String,
      EmployeeNumber: rt.Number,
      EndDateReason: rt.String,
      SubEntityID: rt.Number,
      EmploymentType: rt.String,
      HoursPerWeek: rt.Number,
      UpdatedBy: rt.String,
      LedgerAccount: rt.String,
      TypeOfEmployment: rt.String,
      JobCode: rt.String,
      SeniorityDate: rt.String,
      PayGrade: rt.String,
      Employee: employeeRt,
      Dimensions: dimensionsRt,
      Leaves: rt.Array(employeeLeaveRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const vacationRateEmployeeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Rate60: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeID: rt.Number,
    StartDate: rt.String,
    StatusCode: rt.Number,
    EndDate: rt.String,
    UpdatedBy: rt.String,
    Rate: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VacationRateEmployee = rt.Static<typeof vacationRateEmployeeRt>;

const taxCardRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AntallMaanederForTrekk: rt.Number,
    NonTaxableAmount: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Table: rt.String,
    freeAmountType: rt.String,
    Percent: rt.Number,
    UpdatedBy: rt.String,
    tabellType: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TaxCard = rt.Static<typeof taxCardRt>;

const employeeTaxCardRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    loennKunTrygdeavgiftTilUtenlandskBorgerID: rt.Number,
    loennFraBiarbeidsgiverID: rt.Number,
    NonTaxableAmount: rt.Number,
    NotMainEmployer: rt.Boolean,
    CreatedBy: rt.String,
    Tilleggsopplysning: rt.String,
    ResultatStatus: rt.String,
    loennFraHovedarbeidsgiverID: rt.Number,
    CreatedAt: rt.String,
    Table: rt.String,
    EmployeeID: rt.Number,
    StatusCode: rt.Number,
    SecondaryTable: rt.String,
    SKDXml: rt.String,
    pensjonID: rt.Number,
    loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjengerID: rt.Number,
    SecondaryPercent: rt.Number,
    Percent: rt.Number,
    EmployeeNumber: rt.Number,
    ufoereYtelserAndreID: rt.Number,
    Year: rt.Number,
    loennTilUtenrikstjenestemannID: rt.Number,
    UpdatedBy: rt.String,
    IssueDate: rt.String,
    TaxcardId: rt.Number,
    loennFraHovedarbeidsgiver: taxCardRt,
    loennFraBiarbeidsgiver: taxCardRt,
    pensjon: taxCardRt,
    loennTilUtenrikstjenestemann: taxCardRt,
    loennKunTrygdeavgiftTilUtenlandskBorger: taxCardRt,
    loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger: taxCardRt,
    ufoereYtelserAndre: taxCardRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmployeeTaxCard = rt.Static<typeof employeeTaxCardRt>;

type Employee = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  PaymentInterval?: string;
  AdvancePaymentAmount?: number;
  FreeText?: string;
  InternasjonalIDType?: string;
  PhotoID?: number;
  ForeignWorker?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  IncludeOtpUntilYear?: number;
  EmployeeLanguageID?: number;
  BirthDate?: string;
  EndDateOtp?: string;
  IncludeOtpUntilMonth?: number;
  InternasjonalIDCountry?: string;
  UserID?: number;
  InternationalID?: string;
  OtpExport?: boolean;
  EmploymentDate?: string;
  StatusCode?: number;
  EmploymentDateOtp?: string;
  OtpStatus?: string;
  EndDate?: string;
  EmployeeNumber?: number;
  Sex?: string;
  SubEntityID?: number;
  BusinessRelationID?: number;
  SocialSecurityNumber?: string;
  UpdatedBy?: string;
  Active?: boolean;
  TypeOfPaymentOtp?: string;
  MunicipalityNo?: string;
  BusinessRelationInfo?: BusinessRelation;
  Employments?: Employment[];
  VacationRateEmployees?: VacationRateEmployee[];
  TaxCards?: EmployeeTaxCard[];
  CustomValues?: CustomValues;
};

const employeeRt: rt.Runtype<Employee> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      PaymentInterval: rt.String,
      AdvancePaymentAmount: rt.Number,
      FreeText: rt.String,
      InternasjonalIDType: rt.String,
      PhotoID: rt.Number,
      ForeignWorker: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      IncludeOtpUntilYear: rt.Number,
      EmployeeLanguageID: rt.Number,
      BirthDate: rt.String,
      EndDateOtp: rt.String,
      IncludeOtpUntilMonth: rt.Number,
      InternasjonalIDCountry: rt.String,
      UserID: rt.Number,
      InternationalID: rt.String,
      OtpExport: rt.Boolean,
      EmploymentDate: rt.String,
      StatusCode: rt.Number,
      EmploymentDateOtp: rt.String,
      OtpStatus: rt.String,
      EndDate: rt.String,
      EmployeeNumber: rt.Number,
      Sex: rt.String,
      SubEntityID: rt.Number,
      BusinessRelationID: rt.Number,
      SocialSecurityNumber: rt.String,
      UpdatedBy: rt.String,
      Active: rt.Boolean,
      TypeOfPaymentOtp: rt.String,
      MunicipalityNo: rt.String,
      BusinessRelationInfo: businessRelationRt,
      Employments: rt.Array(employmentRt),
      VacationRateEmployees: rt.Array(vacationRateEmployeeRt),
      TaxCards: rt.Array(employeeTaxCardRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const accountAliasRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountAlias = rt.Static<typeof accountAliasRt>;

const accountMandatoryDimensionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    DimensionNo: rt.Number,
    MandatoryType: rt.Number,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountMandatoryDimension = rt.Static<typeof accountMandatoryDimensionRt>;

type Account = {
  TopLevelAccountGroupID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  AccountNumber?: number;
  Keywords?: string;
  VatTypeID?: number;
  Locked?: boolean;
  CreatedBy?: string;
  DoSynchronize?: boolean;
  CreatedAt?: string;
  Visible?: boolean;
  AccountSetupID?: number;
  AccountGroupID?: number;
  EmployeeID?: number;
  LockManualPosts?: boolean;
  DimensionsID?: number;
  StatusCode?: number;
  SupplierID?: number;
  UsePostPost?: boolean;
  CustomerID?: number;
  SaftMappingAccountID?: number;
  UseVatDeductionGroupID?: number;
  SystemAccount?: boolean;
  AccountName?: string;
  CostAllocationID?: number;
  UpdatedBy?: string;
  Active?: boolean;
  Description?: string;
  AccountID?: number;
  AccountGroup?: AccountGroup;
  TopLevelAccountGroup?: AccountGroup;
  VatType?: VatType;
  MainAccount?: Account;
  Customer?: Customer;
  Supplier?: Supplier;
  Employee?: Employee;
  Dimensions?: Dimensions;
  Alias?: AccountAlias[];
  MandatoryDimensions?: AccountMandatoryDimension[];
  CompatibleAccountGroups?: AccountGroup[];
  SubAccounts?: Account[];
  CostAllocation?: CostAllocation;
  CustomValues?: CustomValues;
};

const accountRt: rt.Runtype<Account> = rt.Lazy(() =>
  rt
    .Record({
      TopLevelAccountGroupID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      AccountNumber: rt.Number,
      Keywords: rt.String,
      VatTypeID: rt.Number,
      Locked: rt.Boolean,
      CreatedBy: rt.String,
      DoSynchronize: rt.Boolean,
      CreatedAt: rt.String,
      Visible: rt.Boolean,
      AccountSetupID: rt.Number,
      AccountGroupID: rt.Number,
      EmployeeID: rt.Number,
      LockManualPosts: rt.Boolean,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      SupplierID: rt.Number,
      UsePostPost: rt.Boolean,
      CustomerID: rt.Number,
      SaftMappingAccountID: rt.Number,
      UseVatDeductionGroupID: rt.Number,
      SystemAccount: rt.Boolean,
      AccountName: rt.String,
      CostAllocationID: rt.Number,
      UpdatedBy: rt.String,
      Active: rt.Boolean,
      Description: rt.String,
      AccountID: rt.Number,
      AccountGroup: accountGroupRt,
      TopLevelAccountGroup: accountGroupRt,
      VatType: vatTypeRt,
      MainAccount: accountRt,
      Customer: customerRt,
      Supplier: supplierRt,
      Employee: employeeRt,
      Dimensions: dimensionsRt,
      Alias: rt.Array(accountAliasRt),
      MandatoryDimensions: rt.Array(accountMandatoryDimensionRt),
      CompatibleAccountGroups: rt.Array(accountGroupRt),
      SubAccounts: rt.Array(accountRt),
      CostAllocation: costAllocationRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type CostAllocationItem = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  VatTypeID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  DimensionsID?: number;
  StatusCode?: number;
  Percent?: number;
  Amount?: number;
  CostAllocationID?: number;
  UpdatedBy?: string;
  Description?: string;
  AccountID?: number;
  Account?: Account;
  VatType?: VatType;
  Dimensions?: Dimensions;
  CustomValues?: CustomValues;
};

const costAllocationItemRt: rt.Runtype<CostAllocationItem> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      VatTypeID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      Percent: rt.Number,
      Amount: rt.Number,
      CostAllocationID: rt.Number,
      UpdatedBy: rt.String,
      Description: rt.String,
      AccountID: rt.Number,
      Account: accountRt,
      VatType: vatTypeRt,
      Dimensions: dimensionsRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type CostAllocation = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  StatusCode?: number;
  Name?: string;
  UpdatedBy?: string;
  Items?: CostAllocationItem[];
  CustomValues?: CustomValues;
};

const costAllocationRt: rt.Runtype<CostAllocation> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      Name: rt.String,
      UpdatedBy: rt.String,
      Items: rt.Array(costAllocationItemRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Supplier = {
  CreditDays?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  Localization?: string;
  GLN?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  PeppolAddress?: string;
  DimensionsID?: number;
  SubAccountNumberSeriesID?: number;
  StatusCode?: number;
  SupplierNumber?: number;
  BusinessRelationID?: number;
  OrgNumber?: string;
  CostAllocationID?: number;
  UpdatedBy?: string;
  SelfEmployed?: boolean;
  WebUrl?: string;
  Info?: BusinessRelation;
  Dimensions?: Dimensions;
  CostAllocation?: CostAllocation;
  CustomValues?: CustomValues;
};

const supplierRt: rt.Runtype<Supplier> = rt.Lazy(() =>
  rt
    .Record({
      CreditDays: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      Localization: rt.String,
      GLN: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      PeppolAddress: rt.String,
      DimensionsID: rt.Number,
      SubAccountNumberSeriesID: rt.Number,
      StatusCode: rt.Number,
      SupplierNumber: rt.Number,
      BusinessRelationID: rt.Number,
      OrgNumber: rt.String,
      CostAllocationID: rt.Number,
      UpdatedBy: rt.String,
      SelfEmployed: rt.Boolean,
      WebUrl: rt.String,
      Info: businessRelationRt,
      Dimensions: dimensionsRt,
      CostAllocation: costAllocationRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const supplierInvoiceItemRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    ItemText: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    SumVatCurrency: rt.Number,
    VatTypeID: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SortIndex: rt.Number,
    Comment: rt.String,
    DiscountPercent: rt.Number,
    NumberOfItems: rt.Number,
    CreatedBy: rt.String,
    PriceExVatCurrency: rt.Number,
    DiscountCurrency: rt.Number,
    CreatedAt: rt.String,
    SumTotalIncVat: rt.Number,
    CurrencyExchangeRate: rt.Number,
    InvoicePeriodStartDate: rt.String,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    PriceSetByUser: rt.Boolean,
    Discount: rt.Number,
    SumVat: rt.Number,
    ProductID: rt.Number,
    InvoicePeriodEndDate: rt.String,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    AccountingCost: rt.String,
    SupplierInvoiceID: rt.Number,
    PriceExVat: rt.Number,
    VatPercent: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SupplierInvoiceItem = rt.Static<typeof supplierInvoiceItemRt>;

const productCategoryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Rght: rt.Number,
    Comment: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ParentID: rt.Number,
    Status: rt.Number,
    StatusCode: rt.Number,
    Lft: rt.Number,
    Name: rt.String,
    Depth: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProductCategory = rt.Static<typeof productCategoryRt>;

const productCategoryLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    ProductID: rt.Number,
    UpdatedBy: rt.String,
    ProductCategoryID: rt.Number,
    ProductCategory: productCategoryRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProductCategoryLink = rt.Static<typeof productCategoryLinkRt>;

const productRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    VatTypeID: rt.Number,
    DefaultProductCategoryID: rt.Number,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    AverageCost: rt.Number,
    CreatedAt: rt.String,
    VariansParentID: rt.Number,
    DimensionsID: rt.Number,
    ListPrice: rt.Number,
    StatusCode: rt.Number,
    Name: rt.String,
    PartName: rt.String,
    ImageFileID: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    Type: rt.String,
    Description: rt.String,
    AccountID: rt.Number,
    PriceExVat: rt.Number,
    ProductCategoryLinks: rt.Array(productCategoryLinkRt),
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Product = rt.Static<typeof productRt>;

type ReInvoiceItem = {
  Deleted?: boolean;
  ID?: number;
  Surcharge?: number;
  UpdatedAt?: string;
  NetAmount?: number;
  ReInvoiceID?: number;
  Vat?: number;
  CreatedBy?: string;
  GrossAmount?: number;
  CreatedAt?: string;
  StatusCode?: number;
  CustomerID?: number;
  Share?: number;
  UpdatedBy?: string;
  Customer?: Customer;
  CustomValues?: CustomValues;
};

const reInvoiceItemRt: rt.Runtype<ReInvoiceItem> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      Surcharge: rt.Number,
      UpdatedAt: rt.String,
      NetAmount: rt.Number,
      ReInvoiceID: rt.Number,
      Vat: rt.Number,
      CreatedBy: rt.String,
      GrossAmount: rt.Number,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      CustomerID: rt.Number,
      Share: rt.Number,
      UpdatedBy: rt.String,
      Customer: customerRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type ReInvoice = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  TaxExclusiveAmount?: number;
  OwnCostShare?: number;
  TaxInclusiveAmount?: number;
  CreatedBy?: string;
  ReInvoicingType?: number;
  CreatedAt?: string;
  StatusCode?: number;
  ProductID?: number;
  OwnCostAmount?: number;
  UpdatedBy?: string;
  SupplierInvoiceID?: number;
  SupplierInvoice?: SupplierInvoice;
  Product?: Product;
  Items?: ReInvoiceItem[];
  CustomValues?: CustomValues;
};

const reInvoiceRt: rt.Runtype<ReInvoice> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      TaxExclusiveAmount: rt.Number,
      OwnCostShare: rt.Number,
      TaxInclusiveAmount: rt.Number,
      CreatedBy: rt.String,
      ReInvoicingType: rt.Number,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      ProductID: rt.Number,
      OwnCostAmount: rt.Number,
      UpdatedBy: rt.String,
      SupplierInvoiceID: rt.Number,
      SupplierInvoice: supplierInvoiceRt,
      Product: productRt,
      Items: rt.Array(reInvoiceItemRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type SupplierInvoice = {
  InternalNote?: string;
  Requisition?: string;
  InvoiceType?: number;
  CreditDays?: number;
  Deleted?: boolean;
  OurReference?: string;
  ID?: number;
  InvoicePostalCode?: string;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  DeliveryMethod?: string;
  Payment?: string;
  TaxExclusiveAmount?: number;
  ShippingCountry?: string;
  InvoiceNumber?: string;
  ReInvoiceID?: number;
  ShippingAddressLine3?: string;
  SupplierOrgNumber?: string;
  TaxInclusiveAmount?: number;
  Comment?: string;
  ShippingPostalCode?: string;
  CreatedBy?: string;
  PaymentTermsID?: number;
  InvoiceCountryCode?: string;
  InvoiceCountry?: string;
  CreatedAt?: string;
  Credited?: boolean;
  YourReference?: string;
  ShippingCity?: string;
  CurrencyExchangeRate?: number;
  VatTotalsAmountCurrency?: number;
  ShippingCountryCode?: string;
  PaymentDueDate?: string;
  PaymentID?: string;
  DeliveryTerm?: string;
  InvoiceReceiverName?: string;
  InvoiceAddressLine2?: string;
  PayableRoundingAmount?: number;
  FreeTxt?: string;
  DeliveryTermsID?: number;
  CustomerPerson?: string;
  TaxInclusiveAmountCurrency?: number;
  InvoiceDate?: string;
  StatusCode?: number;
  SupplierID?: number;
  VatTotalsAmount?: number;
  BankAccountID?: number;
  RestAmount?: number;
  PrintStatus?: number;
  IsSentToPayment?: boolean;
  DeliveryName?: string;
  PayableRoundingCurrencyAmount?: number;
  TaxExclusiveAmountCurrency?: number;
  ReInvoiced?: boolean;
  CustomerOrgNumber?: string;
  ShippingAddressLine2?: string;
  SalesPerson?: string;
  InvoiceAddressLine1?: string;
  PaymentStatus?: number;
  AmountRegards?: string;
  PaymentInformation?: string;
  InvoiceOriginType?: string;
  UpdatedBy?: string;
  DefaultDimensionsID?: number;
  DeliveryDate?: string;
  CreditedAmount?: number;
  CreditedAmountCurrency?: number;
  RestAmountCurrency?: number;
  InvoiceCity?: string;
  PaymentTerm?: string;
  JournalEntryID?: number;
  ProjectID?: number;
  ShippingAddressLine1?: string;
  InvoiceReferenceID?: number;
  InvoiceAddressLine3?: string;
  Payments?: Payment[];
  JournalEntry?: JournalEntry;
  DefaultDimensions?: Dimensions;
  Supplier?: Supplier;
  Items?: SupplierInvoiceItem[];
  ReInvoice?: ReInvoice;
  CustomValues?: CustomValues;
};

const supplierInvoiceRt: rt.Runtype<SupplierInvoice> = rt.Lazy(() =>
  rt
    .Record({
      InternalNote: rt.String,
      Requisition: rt.String,
      InvoiceType: rt.Number,
      CreditDays: rt.Number,
      Deleted: rt.Boolean,
      OurReference: rt.String,
      ID: rt.Number,
      InvoicePostalCode: rt.String,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      DeliveryMethod: rt.String,
      Payment: rt.String,
      TaxExclusiveAmount: rt.Number,
      ShippingCountry: rt.String,
      InvoiceNumber: rt.String,
      ReInvoiceID: rt.Number,
      ShippingAddressLine3: rt.String,
      SupplierOrgNumber: rt.String,
      TaxInclusiveAmount: rt.Number,
      Comment: rt.String,
      ShippingPostalCode: rt.String,
      CreatedBy: rt.String,
      PaymentTermsID: rt.Number,
      InvoiceCountryCode: rt.String,
      InvoiceCountry: rt.String,
      CreatedAt: rt.String,
      Credited: rt.Boolean,
      YourReference: rt.String,
      ShippingCity: rt.String,
      CurrencyExchangeRate: rt.Number,
      VatTotalsAmountCurrency: rt.Number,
      ShippingCountryCode: rt.String,
      PaymentDueDate: rt.String,
      PaymentID: rt.String,
      DeliveryTerm: rt.String,
      InvoiceReceiverName: rt.String,
      InvoiceAddressLine2: rt.String,
      PayableRoundingAmount: rt.Number,
      FreeTxt: rt.String,
      DeliveryTermsID: rt.Number,
      CustomerPerson: rt.String,
      TaxInclusiveAmountCurrency: rt.Number,
      InvoiceDate: rt.String,
      StatusCode: rt.Number,
      SupplierID: rt.Number,
      VatTotalsAmount: rt.Number,
      BankAccountID: rt.Number,
      RestAmount: rt.Number,
      PrintStatus: rt.Number,
      IsSentToPayment: rt.Boolean,
      DeliveryName: rt.String,
      PayableRoundingCurrencyAmount: rt.Number,
      TaxExclusiveAmountCurrency: rt.Number,
      ReInvoiced: rt.Boolean,
      CustomerOrgNumber: rt.String,
      ShippingAddressLine2: rt.String,
      SalesPerson: rt.String,
      InvoiceAddressLine1: rt.String,
      PaymentStatus: rt.Number,
      AmountRegards: rt.String,
      PaymentInformation: rt.String,
      InvoiceOriginType: rt.String,
      UpdatedBy: rt.String,
      DefaultDimensionsID: rt.Number,
      DeliveryDate: rt.String,
      CreditedAmount: rt.Number,
      CreditedAmountCurrency: rt.Number,
      RestAmountCurrency: rt.Number,
      InvoiceCity: rt.String,
      PaymentTerm: rt.String,
      JournalEntryID: rt.Number,
      ProjectID: rt.Number,
      ShippingAddressLine1: rt.String,
      InvoiceReferenceID: rt.Number,
      InvoiceAddressLine3: rt.String,
      Payments: rt.Array(paymentRt),
      JournalEntry: journalEntryRt,
      DefaultDimensions: dimensionsRt,
      Supplier: supplierRt,
      Items: rt.Array(supplierInvoiceItemRt),
      ReInvoice: reInvoiceRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type CustomerInvoiceReminder = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  RemindedDate?: string;
  Notified?: boolean;
  CreatedBy?: string;
  InterestFee?: number;
  CreatedAt?: string;
  CreatedByReminderRuleID?: number;
  InterestFeeCurrency?: number;
  DebtCollectionFee?: number;
  CurrencyExchangeRate?: number;
  ReminderFee?: number;
  ReminderFeeCurrency?: number;
  CustomerInvoiceID?: number;
  DimensionsID?: number;
  StatusCode?: number;
  RestAmount?: number;
  DueDate?: string;
  ReminderNumber?: number;
  DebtCollectionFeeCurrency?: number;
  UpdatedBy?: string;
  ReminderRuleType?: number;
  RestAmountCurrency?: number;
  Description?: string;
  Title?: string;
  RunNumber?: number;
  EmailAddress?: string;
  Payments?: Payment[];
  CustomValues?: CustomValues;
};

const customerInvoiceReminderRt: rt.Runtype<CustomerInvoiceReminder> = rt.Lazy(
  () =>
    rt
      .Record({
        Deleted: rt.Boolean,
        ID: rt.Number,
        UpdatedAt: rt.String,
        CurrencyCodeID: rt.Number,
        RemindedDate: rt.String,
        Notified: rt.Boolean,
        CreatedBy: rt.String,
        InterestFee: rt.Number,
        CreatedAt: rt.String,
        CreatedByReminderRuleID: rt.Number,
        InterestFeeCurrency: rt.Number,
        DebtCollectionFee: rt.Number,
        CurrencyExchangeRate: rt.Number,
        ReminderFee: rt.Number,
        ReminderFeeCurrency: rt.Number,
        CustomerInvoiceID: rt.Number,
        DimensionsID: rt.Number,
        StatusCode: rt.Number,
        RestAmount: rt.Number,
        DueDate: rt.String,
        ReminderNumber: rt.Number,
        DebtCollectionFeeCurrency: rt.Number,
        UpdatedBy: rt.String,
        ReminderRuleType: rt.Number,
        RestAmountCurrency: rt.Number,
        Description: rt.String,
        Title: rt.String,
        RunNumber: rt.Number,
        EmailAddress: rt.String,
        Payments: rt.Array(paymentRt),
        CustomValues: customValuesRt,
      })
      .asPartial(),
);

type Payment = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  XmlTagPmtInfIdReference?: string;
  ReconcilePayment?: boolean;
  InvoiceNumber?: string;
  InPaymentID?: string;
  IsExternal?: boolean;
  PaymentBatchID?: number;
  CreatedBy?: string;
  ExternalBankAccountNumber?: string;
  PaymentNotificationReportFileID?: number;
  CreatedAt?: string;
  IsCustomerPayment?: boolean;
  IsPaymentClaim?: boolean;
  OcrPaymentStrings?: string;
  Debtor?: string;
  CurrencyExchangeRate?: number;
  TransactionID?: string;
  StatusText?: string;
  PaymentStatusReportFileID?: number;
  IsPaymentCancellationRequest?: boolean;
  PaymentID?: string;
  CustomerInvoiceID?: number;
  SerialNumberOrAcctSvcrRef?: string;
  StatusCode?: number;
  AmountCurrency?: number;
  Domain?: string;
  DueDate?: string;
  XmlTagEndToEndIdReference?: string;
  PaymentDate?: string;
  FromBankAccountID?: number;
  CustomerInvoiceReminderID?: number;
  Amount?: number;
  BusinessRelationID?: number;
  ToBankAccountID?: number;
  PaymentCodeID?: number;
  Proprietary?: string;
  AutoJournal?: boolean;
  UpdatedBy?: string;
  SupplierInvoiceID?: number;
  BankChargeAmount?: number;
  Description?: string;
  JournalEntryID?: number;
  CustomerInvoice?: CustomerInvoice;
  SupplierInvoice?: SupplierInvoice;
  CustomerInvoiceReminder?: CustomerInvoiceReminder;
  CustomValues?: CustomValues;
};

const paymentRt: rt.Runtype<Payment> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      XmlTagPmtInfIdReference: rt.String,
      ReconcilePayment: rt.Boolean,
      InvoiceNumber: rt.String,
      InPaymentID: rt.String,
      IsExternal: rt.Boolean,
      PaymentBatchID: rt.Number,
      CreatedBy: rt.String,
      ExternalBankAccountNumber: rt.String,
      PaymentNotificationReportFileID: rt.Number,
      CreatedAt: rt.String,
      IsCustomerPayment: rt.Boolean,
      IsPaymentClaim: rt.Boolean,
      OcrPaymentStrings: rt.String,
      Debtor: rt.String,
      CurrencyExchangeRate: rt.Number,
      TransactionID: rt.String,
      StatusText: rt.String,
      PaymentStatusReportFileID: rt.Number,
      IsPaymentCancellationRequest: rt.Boolean,
      PaymentID: rt.String,
      CustomerInvoiceID: rt.Number,
      SerialNumberOrAcctSvcrRef: rt.String,
      StatusCode: rt.Number,
      AmountCurrency: rt.Number,
      Domain: rt.String,
      DueDate: rt.String,
      XmlTagEndToEndIdReference: rt.String,
      PaymentDate: rt.String,
      FromBankAccountID: rt.Number,
      CustomerInvoiceReminderID: rt.Number,
      Amount: rt.Number,
      BusinessRelationID: rt.Number,
      ToBankAccountID: rt.Number,
      PaymentCodeID: rt.Number,
      Proprietary: rt.String,
      AutoJournal: rt.Boolean,
      UpdatedBy: rt.String,
      SupplierInvoiceID: rt.Number,
      BankChargeAmount: rt.Number,
      Description: rt.String,
      JournalEntryID: rt.Number,
      CustomerInvoice: customerInvoiceRt,
      SupplierInvoice: supplierInvoiceRt,
      CustomerInvoiceReminder: customerInvoiceReminderRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const customerInvoiceItemRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    ItemText: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    SumVatCurrency: rt.Number,
    VatTypeID: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SortIndex: rt.Number,
    Comment: rt.String,
    DiscountPercent: rt.Number,
    NumberOfItems: rt.Number,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    PriceExVatCurrency: rt.Number,
    DiscountCurrency: rt.Number,
    CreatedAt: rt.String,
    SumTotalIncVat: rt.Number,
    CurrencyExchangeRate: rt.Number,
    InvoicePeriodStartDate: rt.String,
    CustomerInvoiceID: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    PriceSetByUser: rt.Boolean,
    ItemSourceID: rt.Number,
    Discount: rt.Number,
    SumVat: rt.Number,
    ProductID: rt.Number,
    InvoicePeriodEndDate: rt.String,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    AccountingCost: rt.String,
    AccountID: rt.Number,
    PriceExVat: rt.Number,
    VatPercent: rt.Number,
    Dimensions: dimensionsRt,
    ItemSource: itemSourceRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerInvoiceItem = rt.Static<typeof customerInvoiceItemRt>;

type CustomerInvoice = {
  InternalNote?: string;
  Requisition?: string;
  InvoiceType?: number;
  AccrualID?: number;
  CreditDays?: number;
  Deleted?: boolean;
  OurReference?: string;
  ID?: number;
  InvoicePostalCode?: string;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  DeliveryMethod?: string;
  Payment?: string;
  TaxExclusiveAmount?: number;
  ShippingCountry?: string;
  InvoiceNumber?: string;
  UpdateCurrencyAmountsOnDateChange?: boolean;
  ShippingAddressLine3?: string;
  SupplierOrgNumber?: string;
  TaxInclusiveAmount?: number;
  Comment?: string;
  ShippingPostalCode?: string;
  CustomerName?: string;
  CreatedBy?: string;
  PaymentTermsID?: number;
  InvoiceCountryCode?: string;
  InvoiceCountry?: string;
  CreatedAt?: string;
  Credited?: boolean;
  YourReference?: string;
  ShippingCity?: string;
  InvoiceNumberSeriesID?: number;
  CurrencyExchangeRate?: number;
  DefaultSellerID?: number;
  VatTotalsAmountCurrency?: number;
  ShippingCountryCode?: string;
  PaymentDueDate?: string;
  PaymentID?: string;
  DeliveryTerm?: string;
  InvoiceReceiverName?: string;
  InvoiceAddressLine2?: string;
  PayableRoundingAmount?: number;
  FreeTxt?: string;
  DeliveryTermsID?: number;
  CustomerPerson?: string;
  TaxInclusiveAmountCurrency?: number;
  InvoiceDate?: string;
  StatusCode?: number;
  ExternalDebtCollectionNotes?: string;
  CollectorStatusCode?: number;
  VatTotalsAmount?: number;
  LastPaymentDate?: string;
  BankAccountID?: number;
  RestAmount?: number;
  PrintStatus?: number;
  DeliveryName?: string;
  CustomerID?: number;
  PayableRoundingCurrencyAmount?: number;
  TaxExclusiveAmountCurrency?: number;
  CustomerOrgNumber?: string;
  ShippingAddressLine2?: string;
  SalesPerson?: string;
  ExternalDebtCollectionReference?: string;
  PaymentInfoTypeID?: number;
  InvoiceAddressLine1?: string;
  ExternalReference?: string;
  ExternalStatus?: number;
  AmountRegards?: string;
  PaymentInformation?: string;
  UpdatedBy?: string;
  ExternalDebtCollectionUrl?: string;
  DistributionPlanID?: number;
  UseReportID?: number;
  DefaultDimensionsID?: number;
  DeliveryDate?: string;
  CreditedAmount?: number;
  CreditedAmountCurrency?: number;
  RestAmountCurrency?: number;
  DontSendReminders?: boolean;
  InvoiceCity?: string;
  PaymentTerm?: string;
  JournalEntryID?: number;
  ShippingAddressLine1?: string;
  EmailAddress?: string;
  InvoiceReferenceID?: number;
  InvoiceAddressLine3?: string;
  Payments?: Payment[];
  PaymentTerms?: Terms;
  DeliveryTerms?: Terms;
  Items?: CustomerInvoiceItem[];
  DefaultDimensions?: Dimensions;
  Accrual?: Accrual;
  DefaultSeller?: Seller;
  CustomerInvoiceReminders?: CustomerInvoiceReminder[];
  Sellers?: SellerLink[];
  DistributionPlan?: DistributionPlan;
  CustomValues?: CustomValues;
};

const customerInvoiceRt: rt.Runtype<CustomerInvoice> = rt.Lazy(() =>
  rt
    .Record({
      InternalNote: rt.String,
      Requisition: rt.String,
      InvoiceType: rt.Number,
      AccrualID: rt.Number,
      CreditDays: rt.Number,
      Deleted: rt.Boolean,
      OurReference: rt.String,
      ID: rt.Number,
      InvoicePostalCode: rt.String,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      DeliveryMethod: rt.String,
      Payment: rt.String,
      TaxExclusiveAmount: rt.Number,
      ShippingCountry: rt.String,
      InvoiceNumber: rt.String,
      UpdateCurrencyAmountsOnDateChange: rt.Boolean,
      ShippingAddressLine3: rt.String,
      SupplierOrgNumber: rt.String,
      TaxInclusiveAmount: rt.Number,
      Comment: rt.String,
      ShippingPostalCode: rt.String,
      CustomerName: rt.String,
      CreatedBy: rt.String,
      PaymentTermsID: rt.Number,
      InvoiceCountryCode: rt.String,
      InvoiceCountry: rt.String,
      CreatedAt: rt.String,
      Credited: rt.Boolean,
      YourReference: rt.String,
      ShippingCity: rt.String,
      InvoiceNumberSeriesID: rt.Number,
      CurrencyExchangeRate: rt.Number,
      DefaultSellerID: rt.Number,
      VatTotalsAmountCurrency: rt.Number,
      ShippingCountryCode: rt.String,
      PaymentDueDate: rt.String,
      PaymentID: rt.String,
      DeliveryTerm: rt.String,
      InvoiceReceiverName: rt.String,
      InvoiceAddressLine2: rt.String,
      PayableRoundingAmount: rt.Number,
      FreeTxt: rt.String,
      DeliveryTermsID: rt.Number,
      CustomerPerson: rt.String,
      TaxInclusiveAmountCurrency: rt.Number,
      InvoiceDate: rt.String,
      StatusCode: rt.Number,
      ExternalDebtCollectionNotes: rt.String,
      CollectorStatusCode: rt.Number,
      VatTotalsAmount: rt.Number,
      LastPaymentDate: rt.String,
      BankAccountID: rt.Number,
      RestAmount: rt.Number,
      PrintStatus: rt.Number,
      DeliveryName: rt.String,
      CustomerID: rt.Number,
      PayableRoundingCurrencyAmount: rt.Number,
      TaxExclusiveAmountCurrency: rt.Number,
      CustomerOrgNumber: rt.String,
      ShippingAddressLine2: rt.String,
      SalesPerson: rt.String,
      ExternalDebtCollectionReference: rt.String,
      PaymentInfoTypeID: rt.Number,
      InvoiceAddressLine1: rt.String,
      ExternalReference: rt.String,
      ExternalStatus: rt.Number,
      AmountRegards: rt.String,
      PaymentInformation: rt.String,
      UpdatedBy: rt.String,
      ExternalDebtCollectionUrl: rt.String,
      DistributionPlanID: rt.Number,
      UseReportID: rt.Number,
      DefaultDimensionsID: rt.Number,
      DeliveryDate: rt.String,
      CreditedAmount: rt.Number,
      CreditedAmountCurrency: rt.Number,
      RestAmountCurrency: rt.Number,
      DontSendReminders: rt.Boolean,
      InvoiceCity: rt.String,
      PaymentTerm: rt.String,
      JournalEntryID: rt.Number,
      ShippingAddressLine1: rt.String,
      EmailAddress: rt.String,
      InvoiceReferenceID: rt.Number,
      InvoiceAddressLine3: rt.String,
      Payments: rt.Array(paymentRt),
      PaymentTerms: termsRt,
      DeliveryTerms: termsRt,
      Items: rt.Array(customerInvoiceItemRt),
      DefaultDimensions: dimensionsRt,
      Accrual: accrualRt,
      DefaultSeller: sellerRt,
      CustomerInvoiceReminders: rt.Array(customerInvoiceReminderRt),
      Sellers: rt.Array(sellerLinkRt),
      DistributionPlan: distributionPlanRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Customer = {
  AvtaleGiroNotification?: boolean;
  CreditDays?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CurrencyCodeID?: number;
  DefaultCustomerQuoteReportID?: number;
  DefaultCustomerInvoiceReportID?: number;
  Localization?: string;
  IsPrivate?: boolean;
  GLN?: string;
  CreatedBy?: string;
  PaymentTermsID?: number;
  CreatedAt?: string;
  EfakturaIdentifier?: string;
  FactoringNumber?: number;
  DefaultSellerID?: number;
  AvtaleGiro?: boolean;
  PeppolAddress?: string;
  DimensionsID?: number;
  DeliveryTermsID?: number;
  SubAccountNumberSeriesID?: number;
  StatusCode?: number;
  CustomerNumber?: number;
  AcceptableDelta4CustomerPaymentAccountID?: number;
  EInvoiceAgreementReference?: string;
  CustomerNumberKidAlias?: string;
  DefaultDistributionsID?: number;
  BusinessRelationID?: number;
  OrgNumber?: string;
  SocialSecurityNumber?: string;
  UpdatedBy?: string;
  WebUrl?: string;
  DontSendReminders?: boolean;
  ReminderEmailAddress?: string;
  DefaultCustomerOrderReportID?: number;
  AcceptableDelta4CustomerPayment?: number;
  Info?: BusinessRelation;
  Distributions?: Distributions;
  PaymentTerms?: Terms;
  DeliveryTerms?: Terms;
  Dimensions?: Dimensions;
  CustomerQuotes?: CustomerQuote[];
  CustomerOrders?: CustomerOrder[];
  CustomerInvoices?: CustomerInvoice[];
  DefaultSeller?: Seller;
  Sellers?: SellerLink[];
  Companies?: SubCompany[];
  Account?: Account;
  CustomValues?: CustomValues;
};

const customerRt: rt.Runtype<Customer> = rt.Lazy(() =>
  rt
    .Record({
      AvtaleGiroNotification: rt.Boolean,
      CreditDays: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CurrencyCodeID: rt.Number,
      DefaultCustomerQuoteReportID: rt.Number,
      DefaultCustomerInvoiceReportID: rt.Number,
      Localization: rt.String,
      IsPrivate: rt.Boolean,
      GLN: rt.String,
      CreatedBy: rt.String,
      PaymentTermsID: rt.Number,
      CreatedAt: rt.String,
      EfakturaIdentifier: rt.String,
      FactoringNumber: rt.Number,
      DefaultSellerID: rt.Number,
      AvtaleGiro: rt.Boolean,
      PeppolAddress: rt.String,
      DimensionsID: rt.Number,
      DeliveryTermsID: rt.Number,
      SubAccountNumberSeriesID: rt.Number,
      StatusCode: rt.Number,
      CustomerNumber: rt.Number,
      AcceptableDelta4CustomerPaymentAccountID: rt.Number,
      EInvoiceAgreementReference: rt.String,
      CustomerNumberKidAlias: rt.String,
      DefaultDistributionsID: rt.Number,
      BusinessRelationID: rt.Number,
      OrgNumber: rt.String,
      SocialSecurityNumber: rt.String,
      UpdatedBy: rt.String,
      WebUrl: rt.String,
      DontSendReminders: rt.Boolean,
      ReminderEmailAddress: rt.String,
      DefaultCustomerOrderReportID: rt.Number,
      AcceptableDelta4CustomerPayment: rt.Number,
      Info: businessRelationRt,
      Distributions: distributionsRt,
      PaymentTerms: termsRt,
      DeliveryTerms: termsRt,
      Dimensions: dimensionsRt,
      CustomerQuotes: rt.Array(customerQuoteRt),
      CustomerOrders: rt.Array(customerOrderRt),
      CustomerInvoices: rt.Array(customerInvoiceRt),
      DefaultSeller: sellerRt,
      Sellers: rt.Array(sellerLinkRt),
      Companies: rt.Array(subCompanyRt),
      Account: accountRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type SubCompany = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CompanyKey?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  CompanyID?: number;
  CompanyName?: string;
  StatusCode?: number;
  CustomerID?: number;
  CompanyType?: string;
  UpdatedBy?: string;
  Customer?: Customer;
  CustomValues?: CustomValues;
};

const subCompanyRt: rt.Runtype<SubCompany> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CompanyKey: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      CompanyID: rt.Number,
      CompanyName: rt.String,
      StatusCode: rt.Number,
      CustomerID: rt.Number,
      CompanyType: rt.String,
      UpdatedBy: rt.String,
      Customer: customerRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const bankFileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Accountnumber: rt.String,
    FileID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ParentFileid: rt.Number,
    StatusCode: rt.Number,
    SubCompanyID: rt.Number,
    UpdatedBy: rt.String,
    File: fileRt,
    SubCompany: subCompanyRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankFile = rt.Static<typeof bankFileRt>;

const batchInvoiceItemRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    BatchNumber: rt.Number,
    CreatedBy: rt.String,
    BatchInvoiceID: rt.Number,
    CreatedAt: rt.String,
    CustomerInvoiceID: rt.Number,
    StatusCode: rt.String,
    CustomerID: rt.Number,
    CommentID: rt.Number,
    UpdatedBy: rt.String,
    CustomerOrderID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BatchInvoiceItem = rt.Static<typeof batchInvoiceItemRt>;

const batchInvoiceRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Comment: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    OurRef: rt.String,
    SellerID: rt.Number,
    Operation: rt.String,
    NotifyEmail: rt.Boolean,
    FreeTxt: rt.String,
    CopyFromEntityId: rt.Number,
    InvoiceDate: rt.String,
    StatusCode: rt.Number,
    Processed: rt.Number,
    DueDate: rt.String,
    UpdatedBy: rt.String,
    NumberOfBatches: rt.Number,
    MinAmount: rt.Number,
    YourRef: rt.String,
    TotalToProcess: rt.Number,
    Items: rt.Array(batchInvoiceItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type BatchInvoice = rt.Static<typeof batchInvoiceRt>;

const campaignTemplateRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityName: rt.String,
    ExpandEntities: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Template: rt.String,
    UpdatedBy: rt.String,
    RespondToEmail: rt.String,
    BodyTemplate: rt.String,
    SubjectTemplate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CampaignTemplate = rt.Static<typeof campaignTemplateRt>;

const customerInvoiceReminderRuleRt = rt
  .Record({
    CreditDays: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ReminderFee: rt.Number,
    StatusCode: rt.Number,
    DistributeAutomatically: rt.Boolean,
    ReminderNumber: rt.Number,
    UseMaximumLegalReminderFee: rt.Boolean,
    CustomerInvoiceReminderSettingsID: rt.Number,
    UpdatedBy: rt.String,
    ReminderRuleType: rt.Number,
    RunAutomatically: rt.Boolean,
    MinimumDaysFromDueDate: rt.Number,
    Description: rt.String,
    Title: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerInvoiceReminderRule = rt.Static<
  typeof customerInvoiceReminderRuleRt
>;

const debtCollectionSettingsRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreditorNumber: rt.Number,
    DebtCollectionAutomationID: rt.Number,
    IntegrateWithDebtCollection: rt.Boolean,
    DebtCollectionFormat: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    CustomerInvoiceReminderSettingsID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DebtCollectionSettings = rt.Static<typeof debtCollectionSettingsRt>;

const customerInvoiceReminderSettingsRt = rt
  .Record({
    RuleSetType: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    RemindersBeforeDebtCollection: rt.Number,
    CreatedBy: rt.String,
    DebtCollectionSettingsID: rt.Number,
    CreatedAt: rt.String,
    AcceptPaymentWithoutReminderFee: rt.Boolean,
    StatusCode: rt.Number,
    DefaultReminderFeeAccountID: rt.Number,
    UpdatedBy: rt.String,
    MinimumAmountToRemind: rt.Number,
    UseReminderRuleTextsInEmails: rt.Boolean,
    CustomerInvoiceReminderRules: rt.Array(customerInvoiceReminderRuleRt),
    DebtCollectionSettings: debtCollectionSettingsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerInvoiceReminderSettings = rt.Static<
  typeof customerInvoiceReminderSettingsRt
>;

const paymentInfoTypePartRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SortIndex: rt.Number,
    CreatedBy: rt.String,
    Part: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Length: rt.Number,
    PaymentInfoTypeID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentInfoTypePart = rt.Static<typeof paymentInfoTypePartRt>;

const paymentInfoTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Locked: rt.Boolean,
    Control: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Length: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    PaymentInfoTypeParts: rt.Array(paymentInfoTypePartRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentInfoType = rt.Static<typeof paymentInfoTypeRt>;

const recurringInvoiceItemRt = rt
  .Record({
    CalculateGrossPriceBasedOnNetPrice: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    ItemText: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    SumVatCurrency: rt.Number,
    TimeFactor: rt.String,
    VatTypeID: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SortIndex: rt.Number,
    Comment: rt.String,
    DiscountPercent: rt.Number,
    NumberOfItems: rt.Number,
    CreatedBy: rt.String,
    PriceExVatCurrency: rt.Number,
    DiscountCurrency: rt.Number,
    CreatedAt: rt.String,
    SumTotalIncVat: rt.Number,
    CurrencyExchangeRate: rt.Number,
    RecurringInvoiceID: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    PriceSetByUser: rt.Boolean,
    Discount: rt.Number,
    SumVat: rt.Number,
    ReduceIncompletePeriod: rt.Boolean,
    ProductID: rt.Number,
    PricingSource: rt.String,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    Unit: rt.String,
    UpdatedBy: rt.String,
    PriceIncVat: rt.Number,
    AccountID: rt.Number,
    PriceExVat: rt.Number,
    VatPercent: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type RecurringInvoiceItem = rt.Static<typeof recurringInvoiceItemRt>;

const recurringInvoiceRt = rt
  .Record({
    InternalNote: rt.String,
    Requisition: rt.String,
    CreditDays: rt.Number,
    Deleted: rt.Boolean,
    OurReference: rt.String,
    ID: rt.Number,
    InvoicePostalCode: rt.String,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    DeliveryMethod: rt.String,
    NotifyWhenOrdersArePrepared: rt.Boolean,
    Payment: rt.String,
    PreparationDays: rt.Number,
    TaxExclusiveAmount: rt.Number,
    ShippingCountry: rt.String,
    UpdateCurrencyAmountsOnDateChange: rt.Boolean,
    ShippingAddressLine3: rt.String,
    SupplierOrgNumber: rt.String,
    TaxInclusiveAmount: rt.Number,
    Comment: rt.String,
    ShippingPostalCode: rt.String,
    CustomerName: rt.String,
    CreatedBy: rt.String,
    NextInvoiceDate: rt.String,
    PaymentTermsID: rt.Number,
    InvoiceCountryCode: rt.String,
    InvoiceCountry: rt.String,
    CreatedAt: rt.String,
    TimePeriod: rt.String,
    YourReference: rt.String,
    ShippingCity: rt.String,
    InvoiceNumberSeriesID: rt.Number,
    CurrencyExchangeRate: rt.Number,
    ProduceAs: rt.String,
    DefaultSellerID: rt.Number,
    VatTotalsAmountCurrency: rt.Number,
    ShippingCountryCode: rt.String,
    DeliveryTerm: rt.String,
    InvoiceReceiverName: rt.String,
    InvoiceAddressLine2: rt.String,
    PayableRoundingAmount: rt.Number,
    StartDate: rt.String,
    FreeTxt: rt.String,
    DeliveryTermsID: rt.Number,
    CustomerPerson: rt.String,
    TaxInclusiveAmountCurrency: rt.Number,
    StatusCode: rt.Number,
    VatTotalsAmount: rt.Number,
    PrintStatus: rt.Number,
    DeliveryName: rt.String,
    CustomerID: rt.Number,
    PayableRoundingCurrencyAmount: rt.Number,
    TaxExclusiveAmountCurrency: rt.Number,
    CustomerOrgNumber: rt.String,
    ShippingAddressLine2: rt.String,
    EndDate: rt.String,
    SalesPerson: rt.String,
    NoCreditDays: rt.Boolean,
    MaxIterations: rt.Number,
    PaymentInfoTypeID: rt.Number,
    InvoiceAddressLine1: rt.String,
    NotifyUser: rt.String,
    Interval: rt.Number,
    AmountRegards: rt.String,
    PaymentInformation: rt.String,
    UpdatedBy: rt.String,
    DistributionPlanID: rt.Number,
    UseReportID: rt.Number,
    DefaultDimensionsID: rt.Number,
    DeliveryDate: rt.String,
    InvoiceCity: rt.String,
    NotifyWhenRecurringEnds: rt.Boolean,
    PaymentTerm: rt.String,
    ShippingAddressLine1: rt.String,
    EmailAddress: rt.String,
    InvoiceAddressLine3: rt.String,
    PaymentTerms: termsRt,
    DeliveryTerms: termsRt,
    Customer: customerRt,
    Items: rt.Array(recurringInvoiceItemRt),
    DefaultDimensions: dimensionsRt,
    DefaultSeller: sellerRt,
    Sellers: rt.Array(sellerLinkRt),
    DistributionPlan: distributionPlanRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type RecurringInvoice = rt.Static<typeof recurringInvoiceRt>;

const recurringInvoiceLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Comment: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    NotifiedOrdersPrepared: rt.Boolean,
    InvoiceID: rt.Number,
    RecurringInvoiceID: rt.Number,
    InvoiceDate: rt.String,
    StatusCode: rt.Number,
    CreationDate: rt.String,
    IterationNumber: rt.Number,
    OrderID: rt.Number,
    UpdatedBy: rt.String,
    NotifiedRecurringEnds: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type RecurringInvoiceLog = rt.Static<typeof recurringInvoiceLogRt>;

const tOFCurrencySettingsRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    UpdateCurrencyAmountsOnOrderToInvoice: rt.Boolean,
    UpdateCurrencyAmountsOnInvoicedateChange: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdateCurrencyAmountsOnQuoteToOrder: rt.Boolean,
    StatusCode: rt.Number,
    UpdateCurrencyAmountsOnQuoteToInvoice: rt.Boolean,
    UpdateCurrencyAmountsOnQuotedateChange: rt.Boolean,
    UpdatedBy: rt.String,
    UpdateCurrencyAmountsOnOrderdateChange: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TOFCurrencySettings = rt.Static<typeof tOFCurrencySettingsRt>;

type SubEntity = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  AgaRule?: number;
  CreatedAt?: string;
  StatusCode?: number;
  AgaZone?: number;
  SuperiorOrganizationID?: number;
  freeAmount?: number;
  BusinessRelationID?: number;
  OrgNumber?: string;
  UpdatedBy?: string;
  MunicipalityNo?: string;
  BusinessRelationInfo?: BusinessRelation;
  SuperiorOrganization?: SubEntity;
  CustomValues?: CustomValues;
};

const subEntityRt: rt.Runtype<SubEntity> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      AgaRule: rt.Number,
      CreatedAt: rt.String,
      StatusCode: rt.Number,
      AgaZone: rt.Number,
      SuperiorOrganizationID: rt.Number,
      freeAmount: rt.Number,
      BusinessRelationID: rt.Number,
      OrgNumber: rt.String,
      UpdatedBy: rt.String,
      MunicipalityNo: rt.String,
      BusinessRelationInfo: businessRelationRt,
      SuperiorOrganization: subEntityRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const freeAmountUsedRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    freeAmount: rt.Number,
    SubEntityID: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FreeAmountUsed = rt.Static<typeof freeAmountUsedRt>;

const aGATaxRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    agaRate: rt.Number,
    StatusCode: rt.Number,
    AGARateID: rt.Number,
    SubEntityID: rt.Number,
    zone: rt.Number,
    agaBase: rt.Number,
    beregningsKode: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGATax = rt.Static<typeof aGATaxRt>;

const aGADrawRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    agaRate: rt.Number,
    StatusCode: rt.Number,
    AGARateID: rt.Number,
    SubEntityID: rt.Number,
    zone: rt.Number,
    agaBase: rt.Number,
    beregningsKode: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGADraw = rt.Static<typeof aGADrawRt>;

const aGAPensionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    agaRate: rt.Number,
    StatusCode: rt.Number,
    AGARateID: rt.Number,
    SubEntityID: rt.Number,
    zone: rt.Number,
    agaBase: rt.Number,
    beregningsKode: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGAPension = rt.Static<typeof aGAPensionRt>;

const foreignerWithPercentRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    agaRate: rt.Number,
    StatusCode: rt.Number,
    SubEntityID: rt.Number,
    agaBase: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ForeignerWithPercent = rt.Static<typeof foreignerWithPercentRt>;

const drawForeignerWithPercentRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    agaRate: rt.Number,
    StatusCode: rt.Number,
    SubEntityID: rt.Number,
    agaBase: rt.Number,
    UpdatedBy: rt.String,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DrawForeignerWithPercent = rt.Static<typeof drawForeignerWithPercentRt>;

const foreignerWithAmountRt = rt
  .Record({
    Deleted: rt.Boolean,
    aga: rt.Number,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AGACalculationID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    SubEntityID: rt.Number,
    UpdatedBy: rt.String,
    persons: rt.Number,
    subEntity: subEntityRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ForeignerWithAmount = rt.Static<typeof foreignerWithAmountRt>;

const salaryTransactionSupplementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ValueBool: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    SalaryTransactionID: rt.Number,
    CreatedAt: rt.String,
    ValueMoney: rt.Number,
    ValueDate: rt.String,
    StatusCode: rt.Number,
    ValueDate2: rt.String,
    WageTypeSupplementID: rt.Number,
    UpdatedBy: rt.String,
    ValueString: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionSupplement = rt.Static<
  typeof salaryTransactionSupplementRt
>;

const taxBasisRt = rt
  .Record({
    DisabilityOtherBasis: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ForeignBorderCommuterBasis: rt.Number,
    PensionBasis: rt.Number,
    SailorBasis: rt.Number,
    CreatedBy: rt.String,
    JanMayenBasis: rt.Number,
    SalaryTransactionID: rt.Number,
    ForeignCitizenInsuranceBasis: rt.Number,
    CreatedAt: rt.String,
    ChildPensionBasis: rt.Number,
    StatusCode: rt.Number,
    SvalbardBasis: rt.Number,
    Basis: rt.Number,
    UpdatedBy: rt.String,
    PensionSourcetaxBasis: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TaxBasis = rt.Static<typeof taxBasisRt>;

const salaryTransactionCarInfoRt = rt
  .Record({
    Deleted: rt.Boolean,
    IsLongRange: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IsElectric: rt.Boolean,
    CreatedBy: rt.String,
    RegistrationYear: rt.Number,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionCarInfo = rt.Static<typeof salaryTransactionCarInfoRt>;

type SalaryTransaction = {
  Deleted?: boolean;
  Text?: string;
  ID?: number;
  UpdatedAt?: string;
  SalaryBalanceID?: number;
  VatTypeID?: number;
  SystemType?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  ChildSalaryTransactionID?: number;
  recurringPostValidTo?: string;
  EmployeeID?: number;
  DimensionsID?: number;
  StatusCode?: number;
  ToDate?: string;
  WageTypeID?: number;
  TaxbasisID?: number;
  Sum?: number;
  HolidayPayDeduction?: boolean;
  SalaryTransactionCarInfoID?: number;
  EmployeeNumber?: number;
  Amount?: number;
  RecurringID?: number;
  IsRecurringPost?: boolean;
  EmploymentID?: number;
  calcAGA?: number;
  recurringPostValidFrom?: string;
  UpdatedBy?: string;
  WageTypeNumber?: number;
  PayrollRunID?: number;
  Account?: number;
  Rate?: number;
  FromDate?: string;
  MunicipalityNo?: string;
  payrollrun?: PayrollRun;
  Employee?: Employee;
  employment?: Employment;
  Dimensions?: Dimensions;
  Supplements?: SalaryTransactionSupplement[];
  Taxbasis?: TaxBasis;
  VatType?: VatType;
  CarInfo?: SalaryTransactionCarInfo;
  CustomValues?: CustomValues;
};

const salaryTransactionRt: rt.Runtype<SalaryTransaction> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      Text: rt.String,
      ID: rt.Number,
      UpdatedAt: rt.String,
      SalaryBalanceID: rt.Number,
      VatTypeID: rt.Number,
      SystemType: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ChildSalaryTransactionID: rt.Number,
      recurringPostValidTo: rt.String,
      EmployeeID: rt.Number,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      ToDate: rt.String,
      WageTypeID: rt.Number,
      TaxbasisID: rt.Number,
      Sum: rt.Number,
      HolidayPayDeduction: rt.Boolean,
      SalaryTransactionCarInfoID: rt.Number,
      EmployeeNumber: rt.Number,
      Amount: rt.Number,
      RecurringID: rt.Number,
      IsRecurringPost: rt.Boolean,
      EmploymentID: rt.Number,
      calcAGA: rt.Number,
      recurringPostValidFrom: rt.String,
      UpdatedBy: rt.String,
      WageTypeNumber: rt.Number,
      PayrollRunID: rt.Number,
      Account: rt.Number,
      Rate: rt.Number,
      FromDate: rt.String,
      MunicipalityNo: rt.String,
      payrollrun: payrollRunRt,
      Employee: employeeRt,
      employment: employmentRt,
      Dimensions: dimensionsRt,
      Supplements: rt.Array(salaryTransactionSupplementRt),
      Taxbasis: taxBasisRt,
      VatType: vatTypeRt,
      CarInfo: salaryTransactionCarInfoRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type PayrollRun = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AGAonRun?: number;
  FreeText?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  PayDate?: string;
  StatusCode?: number;
  ToDate?: string;
  HolidayPayDeduction?: boolean;
  taxdrawfactor?: string;
  JournalEntryNumber?: string;
  PaycheckFileID?: number;
  needsRecalc?: boolean;
  UpdatedBy?: string;
  SettlementDate?: string;
  AGAFreeAmount?: number;
  Description?: string;
  FromDate?: string;
  ExcludeRecurringPosts?: boolean;
  transactions?: SalaryTransaction[];
  agacalculation?: AGACalculation[];
  CustomValues?: CustomValues;
};

const payrollRunRt: rt.Runtype<PayrollRun> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      AGAonRun: rt.Number,
      FreeText: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      PayDate: rt.String,
      StatusCode: rt.Number,
      ToDate: rt.String,
      HolidayPayDeduction: rt.Boolean,
      taxdrawfactor: rt.String,
      JournalEntryNumber: rt.String,
      PaycheckFileID: rt.Number,
      needsRecalc: rt.Boolean,
      UpdatedBy: rt.String,
      SettlementDate: rt.String,
      AGAFreeAmount: rt.Number,
      Description: rt.String,
      FromDate: rt.String,
      ExcludeRecurringPosts: rt.Boolean,
      transactions: rt.Array(salaryTransactionRt),
      agacalculation: rt.Array(aGACalculationRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type AGACalculation = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  DimensionsID?: number;
  StatusCode?: number;
  UpdatedBy?: string;
  PayrollRunID?: number;
  freeAmountUsed?: FreeAmountUsed[];
  agaTax?: AGATax[];
  agaDraw?: AGADraw[];
  agaPension?: AGAPension[];
  foreignerWithPercent?: ForeignerWithPercent[];
  drawForeignerWithPercent?: DrawForeignerWithPercent[];
  foreignerWithAmount?: ForeignerWithAmount[];
  payrollRun?: PayrollRun;
  Dimensions?: Dimensions;
  CustomValues?: CustomValues;
};

const aGACalculationRt: rt.Runtype<AGACalculation> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      UpdatedBy: rt.String,
      PayrollRunID: rt.Number,
      freeAmountUsed: rt.Array(freeAmountUsedRt),
      agaTax: rt.Array(aGATaxRt),
      agaDraw: rt.Array(aGADrawRt),
      agaPension: rt.Array(aGAPensionRt),
      foreignerWithPercent: rt.Array(foreignerWithPercentRt),
      drawForeignerWithPercent: rt.Array(drawForeignerWithPercentRt),
      foreignerWithAmount: rt.Array(foreignerWithAmountRt),
      payrollRun: payrollRunRt,
      Dimensions: dimensionsRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const taxAndAgaSumsRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    GarnishmentTax: rt.Number,
    StatusCode: rt.Number,
    WithholdingTax: rt.Number,
    UpdatedBy: rt.String,
    FinancialTax: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TaxAndAgaSums = rt.Static<typeof taxAndAgaSumsRt>;

const ameldingDataRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    messageID: rt.String,
    CreatedAt: rt.String,
    feedbackFileID: rt.Number,
    status: rt.Number,
    created: rt.String,
    period: rt.Number,
    initiated: rt.String,
    StatusCode: rt.Number,
    attachmentFileID: rt.Number,
    OppgaveHash: rt.String,
    year: rt.Number,
    altinnStatus: rt.String,
    sent: rt.String,
    UpdatedBy: rt.String,
    PayrollRunID: rt.Number,
    type: rt.String,
    mainFileID: rt.Number,
    replacesID: rt.Number,
    receiptID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmeldingData = rt.Static<typeof ameldingDataRt>;

const ameldingLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    key: rt.Number,
    registry: rt.String,
    AmeldingsID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmeldingLog = rt.Static<typeof ameldingLogRt>;

const basicAmountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AveragePrYear: rt.Number,
    BasicAmountPrYear: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    ConversionFactor: rt.Number,
    BasicAmountPrMonth: rt.Number,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BasicAmount = rt.Static<typeof basicAmountRt>;

const companySalaryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    MainAccountAllocatedVacation: rt.Number,
    Base_JanMayenAndBiCountries: rt.Boolean,
    Base_NettoPayment: rt.Boolean,
    PaymentInterval: rt.String,
    Base_Svalbard: rt.Boolean,
    InterrimRemitAccount: rt.Number,
    CreatedBy: rt.String,
    WagetypeAdvancePaymentAuto: rt.Number,
    CreatedAt: rt.String,
    OtpExportActive: rt.Boolean,
    Base_PayAsYouEarnTaxOnPensions: rt.Boolean,
    WageDeductionDueToHoliday: rt.String,
    MainAccountAllocatedFinancialVacation: rt.Number,
    MainAccountAllocatedAGA: rt.Number,
    WagetypeAdvancePayment: rt.Number,
    RateFinancialTax: rt.Number,
    PaycheckZipReportID: rt.Number,
    CalculateFinancialTax: rt.Boolean,
    StatusCode: rt.Number,
    MainAccountAllocatedFinancial: rt.Number,
    HourFTEs: rt.Number,
    Base_TaxFreeOrganization: rt.Boolean,
    AnnualStatementZipReportID: rt.Number,
    PostToTaxDraw: rt.Boolean,
    AllowOver6G: rt.Boolean,
    Base_NettoPaymentForMaritim: rt.Boolean,
    FreeAmount: rt.Number,
    MainAccountCostFinancial: rt.Number,
    HoursPerMonth: rt.Number,
    Base_SpesialDeductionForMaritim: rt.Boolean,
    UpdatedBy: rt.String,
    PostGarnishmentToTaxAccount: rt.Boolean,
    MainAccountCostFinancialVacation: rt.Number,
    MainAccountCostAGA: rt.Number,
    MainAccountCostAGAVacation: rt.Number,
    MainAccountCostVacation: rt.Number,
    MainAccountAllocatedAGAVacation: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanySalary = rt.Static<typeof companySalaryRt>;

const companyVacationRateRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Rate60: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Rate: rt.Number,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyVacationRate = rt.Static<typeof companyVacationRateRt>;

const employeeCategoryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    EmployeeCategoryLinkID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmployeeCategory = rt.Static<typeof employeeCategoryRt>;

const employeeCategoryLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeID: rt.Number,
    StatusCode: rt.Number,
    EmployeeNumber: rt.Number,
    EmployeeCategoryID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmployeeCategoryLink = rt.Static<typeof employeeCategoryLinkRt>;

const grantRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AffectsAGA: rt.Boolean,
    StatusCode: rt.Number,
    Amount: rt.Number,
    SubentityID: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Grant = rt.Static<typeof grantRt>;

const incomeReportDataRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    MonthlyRefund: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    EmploymentID: rt.Number,
    AltinnReceiptID: rt.Number,
    UpdatedBy: rt.String,
    Xml: rt.String,
    Type: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type IncomeReportData = rt.Static<typeof incomeReportDataRt>;

const otpExportWagetypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type OtpExportWagetype = rt.Static<typeof otpExportWagetypeRt>;

const payrollRunCategoryLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    EmployeeCategoryID: rt.Number,
    UpdatedBy: rt.String,
    PayrollRunID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PayrollRunCategoryLink = rt.Static<typeof payrollRunCategoryLinkRt>;

const postingSummaryDraftRt = rt
  .Record({
    PayrollID: rt.Number,
    ID: rt.Number,
    draftBasic: rt.String,
    status: rt.String,
    JobInfoID: rt.Number,
    draftWithDimsOnBalance: rt.String,
    draftWithDims: rt.String,
    statusTime: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PostingSummaryDraft = rt.Static<typeof postingSummaryDraftRt>;

const regulativeStepRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Step: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    RegulativeID: rt.Number,
    StatusCode: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type RegulativeStep = rt.Static<typeof regulativeStepRt>;

const regulativeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    RegulativeGroupID: rt.Number,
    StartDate: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Steps: rt.Array(regulativeStepRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Regulative = rt.Static<typeof regulativeRt>;

const regulativeGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Regulatives: rt.Array(regulativeRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type RegulativeGroup = rt.Static<typeof regulativeGroupRt>;

const salaryBalanceLineRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SalaryBalanceID: rt.Number,
    Date: rt.String,
    CreatedBy: rt.String,
    SalaryTransactionID: rt.Number,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryBalanceLine = rt.Static<typeof salaryBalanceLineRt>;

const salaryBalanceRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SalaryBalanceTemplateID: rt.Number,
    Source: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    InstalmentType: rt.String,
    InstalmentPercent: rt.Number,
    EmployeeID: rt.Number,
    Instalment: rt.Number,
    StatusCode: rt.Number,
    SupplierID: rt.Number,
    ToDate: rt.String,
    Name: rt.String,
    MaxAmount: rt.Number,
    EmploymentID: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    MinAmount: rt.Number,
    Type: rt.String,
    FromDate: rt.String,
    CreatePayment: rt.Boolean,
    KID: rt.String,
    Transactions: rt.Array(salaryBalanceLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryBalance = rt.Static<typeof salaryBalanceRt>;

const salaryBalanceTemplateRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    InstalmentType: rt.String,
    InstalmentPercent: rt.Number,
    Instalment: rt.Number,
    StatusCode: rt.Number,
    SupplierID: rt.Number,
    SalarytransactionDescription: rt.String,
    Name: rt.String,
    MaxAmount: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    MinAmount: rt.Number,
    Account: rt.Number,
    CreatePayment: rt.Boolean,
    KID: rt.String,
    SalaryBalances: rt.Array(salaryBalanceRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryBalanceTemplate = rt.Static<typeof salaryBalanceTemplateRt>;

const salaryYearRt = rt
  .Record({
    CurrentYear: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryYear = rt.Static<typeof salaryYearRt>;

const travelTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ForeignDescription: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ForeignTypeID: rt.String,
    StatusCode: rt.Number,
    InvoiceAccount: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TravelType = rt.Static<typeof travelTypeRt>;

type TravelLine = {
  CostType?: string;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AccountNumber?: number;
  VatTypeID?: number;
  From?: string;
  CreatedBy?: string;
  TravelIdentificator?: string;
  CreatedAt?: string;
  To?: string;
  DimensionsID?: number;
  StatusCode?: number;
  InvoiceAccount?: number;
  LineState?: string;
  Amount?: number;
  UpdatedBy?: string;
  TypeID?: number;
  TravelID?: number;
  paytransID?: number;
  Rate?: number;
  Description?: string;
  Travel?: Travel;
  VatType?: VatType;
  travelType?: TravelType;
  CustomValues?: CustomValues;
};

const travelLineRt: rt.Runtype<TravelLine> = rt.Lazy(() =>
  rt
    .Record({
      CostType: rt.String,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      AccountNumber: rt.Number,
      VatTypeID: rt.Number,
      From: rt.String,
      CreatedBy: rt.String,
      TravelIdentificator: rt.String,
      CreatedAt: rt.String,
      To: rt.String,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      InvoiceAccount: rt.Number,
      LineState: rt.String,
      Amount: rt.Number,
      UpdatedBy: rt.String,
      TypeID: rt.Number,
      TravelID: rt.Number,
      paytransID: rt.Number,
      Rate: rt.Number,
      Description: rt.String,
      Travel: travelRt,
      VatType: vatTypeRt,
      travelType: travelTypeRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Travel = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  PersonID?: string;
  Comment?: string;
  Email?: string;
  CreatedBy?: string;
  TravelIdentificator?: string;
  CreatedAt?: string;
  SourceSystem?: string;
  Phone?: string;
  DimensionsID?: number;
  StatusCode?: number;
  SupplierID?: number;
  State?: string;
  Purpose?: string;
  Name?: string;
  EmployeeNumber?: number;
  UpdatedBy?: string;
  Description?: string;
  TravelLines?: TravelLine[];
  CustomValues?: CustomValues;
};

const travelRt: rt.Runtype<Travel> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      PersonID: rt.String,
      Comment: rt.String,
      Email: rt.String,
      CreatedBy: rt.String,
      TravelIdentificator: rt.String,
      CreatedAt: rt.String,
      SourceSystem: rt.String,
      Phone: rt.String,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      SupplierID: rt.Number,
      State: rt.String,
      Purpose: rt.String,
      Name: rt.String,
      EmployeeNumber: rt.Number,
      UpdatedBy: rt.String,
      Description: rt.String,
      TravelLines: rt.Array(travelLineRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const vacationPayLineRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ManualVacationPayBase: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeID: rt.Number,
    StatusCode: rt.Number,
    Year: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VacationPayLine = rt.Static<typeof vacationPayLineRt>;

const wageTypeSupplementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ameldingType: rt.String,
    CreatedBy: rt.String,
    ValueType: rt.String,
    CreatedAt: rt.String,
    SuggestedValue: rt.String,
    StatusCode: rt.Number,
    WageTypeID: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    GetValueFromTrans: rt.Boolean,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WageTypeSupplement = rt.Static<typeof wageTypeSupplementRt>;

const wageTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    DaysOnBoard: rt.Boolean,
    ID: rt.Number,
    Limit_WageTypeNumber: rt.Number,
    UpdatedAt: rt.String,
    RateFactor: rt.Number,
    StandardWageTypeFor: rt.String,
    AccountNumber: rt.Number,
    taxtype: rt.String,
    SupplementPackage: rt.String,
    Systemtype: rt.String,
    WageTypeName: rt.String,
    Base_div2: rt.Boolean,
    GetRateFrom: rt.String,
    IncomeType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Benefit: rt.String,
    SystemRequiredWageType: rt.Number,
    Base_div3: rt.Boolean,
    SpecialAgaRule: rt.String,
    Postnr: rt.String,
    StatusCode: rt.Number,
    Limit_value: rt.Number,
    Limit_newRate: rt.Number,
    Base_Payment: rt.Boolean,
    HideFromPaycheck: rt.Boolean,
    RatetypeColumn: rt.String,
    ValidYear: rt.Number,
    Base_EmploymentTax: rt.Boolean,
    SpecialTaxHandling: rt.String,
    Base_Vacation: rt.Boolean,
    AccountNumber_balance: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    FixedSalaryHolidayDeduction: rt.Boolean,
    Limit_type: rt.String,
    NoNumberOfHours: rt.Boolean,
    Rate: rt.Number,
    Description: rt.String,
    SpecialTaxAndContributionsRule: rt.String,
    SupplementaryInformations: rt.Array(wageTypeSupplementRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type WageType = rt.Static<typeof wageTypeRt>;

const wageTypeTranslationRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    WageTypeName: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EmployeeLanguageID: rt.Number,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    WageTypeNumber: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type WageTypeTranslation = rt.Static<typeof wageTypeTranslationRt>;

const pensionSchemeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Identificator: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Period: rt.Number,
    StatusCode: rt.Number,
    Year: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PensionScheme = rt.Static<typeof pensionSchemeRt>;

const pensionSchemeSupplierRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Identificator: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PensionSchemeSupplier = rt.Static<typeof pensionSchemeSupplierRt>;

const standardPensionSchemeSupplierRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Identificator: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type StandardPensionSchemeSupplier = rt.Static<
  typeof standardPensionSchemeSupplierRt
>;

const employeeLanguageRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    LanguageCode: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmployeeLanguage = rt.Static<typeof employeeLanguageRt>;

const fieldLayoutRt = rt
  .Record({
    Section: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    Options: rt.String,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    Hidden: rt.Boolean,
    Combo: rt.Number,
    Placement: rt.Number,
    ComponentLayoutID: rt.Number,
    Placeholder: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Property: rt.String,
    Legend: rt.String,
    StatusCode: rt.Number,
    LineBreak: rt.Boolean,
    DisplayField: rt.String,
    Label: rt.String,
    Alignment: rt.String,
    FieldSet: rt.Number,
    Width: rt.String,
    Sectionheader: rt.String,
    FieldType: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    HelpText: rt.String,
    LookupField: rt.Boolean,
    ReadOnly: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FieldLayout = rt.Static<typeof fieldLayoutRt>;

const componentLayoutRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    BaseEntity: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Fields: rt.Array(fieldLayoutRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ComponentLayout = rt.Static<typeof componentLayoutRt>;

const currencyOverrideRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Source: rt.String,
    Factor: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    FromCurrencyCodeID: rt.Number,
    ExchangeRate: rt.Number,
    ToCurrencyCodeID: rt.Number,
    ToDate: rt.String,
    UpdatedBy: rt.String,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CurrencyOverride = rt.Static<typeof currencyOverrideRt>;

const accountAssetGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AssetGroupCode: rt.String,
    FromAccountNumber: rt.Number,
    ToAccountNumber: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountAssetGroup = rt.Static<typeof accountAssetGroupRt>;

type AccountGroupSetup = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  PlanType?: string;
  CreatedAt?: string;
  ParentID?: number;
  Name?: string;
  ExternalReference?: string;
  UpdatedBy?: string;
  Parent?: AccountGroupSetup;
  CustomValues?: CustomValues;
};

const accountGroupSetupRt: rt.Runtype<AccountGroupSetup> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      PlanType: rt.String,
      CreatedAt: rt.String,
      ParentID: rt.Number,
      Name: rt.String,
      ExternalReference: rt.String,
      UpdatedBy: rt.String,
      Parent: accountGroupSetupRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const saftMappingAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    AccountID: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SaftMappingAccount = rt.Static<typeof saftMappingAccountRt>;

const accountSetupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountGroupSetupID: rt.Number,
    AccountNumber: rt.Number,
    Keywords: rt.String,
    CreatedBy: rt.String,
    PlanType: rt.String,
    CreatedAt: rt.String,
    Visible: rt.Boolean,
    VatCode: rt.String,
    ExpectedDebitBalance: rt.Boolean,
    SaftMappingAccountID: rt.Number,
    AccountName: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    AccountGroup: accountGroupSetupRt,
    SaftMappingAccount: saftMappingAccountRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountSetup = rt.Static<typeof accountSetupRt>;

const accountVisibilityGroupAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AccountSetupID: rt.Number,
    AccountVisibilityGroupID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountVisibilityGroupAccount = rt.Static<
  typeof accountVisibilityGroupAccountRt
>;

const accountVisibilityGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Accounts: rt.Array(accountVisibilityGroupAccountRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountVisibilityGroup = rt.Static<typeof accountVisibilityGroupRt>;

const aGASectorRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    Sector: rt.String,
    SectorID: rt.Number,
    freeAmount: rt.Number,
    RateID: rt.Number,
    UpdatedBy: rt.String,
    Rate: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGASector = rt.Static<typeof aGASectorRt>;

const aGARateRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ZoneID: rt.Number,
    RateValidFrom: rt.String,
    UpdatedBy: rt.String,
    Rate: rt.Number,
    sector: rt.Array(aGASectorRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGARate = rt.Static<typeof aGARateRt>;

const municipalAGAZoneRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Startdate: rt.String,
    ZoneID: rt.Number,
    UpdatedBy: rt.String,
    MunicipalityNo: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MunicipalAGAZone = rt.Static<typeof municipalAGAZoneRt>;

const aGAZoneRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    ZoneName: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    rates: rt.Array(aGARateRt),
    municipalsOnZone: rt.Array(municipalAGAZoneRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGAZone = rt.Static<typeof aGAZoneRt>;

const agreementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    AppliesTo: rt.Number,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    Template: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Agreement = rt.Static<typeof agreementRt>;

const altinnAccountFormLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountNumber: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    Ref: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnAccountFormLink = rt.Static<typeof altinnAccountFormLinkRt>;

const assetGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    DepreciationYears: rt.Number,
    CreatedBy: rt.String,
    DepreciationRate: rt.Number,
    CreatedAt: rt.String,
    Code: rt.String,
    ToDate: rt.String,
    Name: rt.String,
    DepreciationAccountNumber: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AssetGroup = rt.Static<typeof assetGroupRt>;

const bankIdentifierCodeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Bic: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    BankName: rt.String,
    UpdatedBy: rt.String,
    BankIdentifier: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankIdentifierCode = rt.Static<typeof bankIdentifierCodeRt>;

const companyTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    DefaultPlanType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Priority: rt.Boolean,
    Name: rt.String,
    FullName: rt.String,
    DefaultAccountVisibilityGroupID: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyType = rt.Static<typeof companyTypeRt>;

const confirmationRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ContractType: rt.String,
    Email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    CompanyName: rt.String,
    Phone: rt.String,
    StatusCode: rt.Number,
    ExpirationDate: rt.String,
    SignUpReferrer: rt.String,
    DisplayName: rt.String,
    PostalCode: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Confirmation = rt.Static<typeof confirmationRt>;

const countryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CountryCode: rt.String,
    CurrencyRateSource: rt.String,
    Name: rt.String,
    DefaultCurrencyCode: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Country = rt.Static<typeof countryRt>;

const currencyRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CurrencyDate: rt.String,
    Source: rt.String,
    Factor: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    FromCurrencyCodeID: rt.Number,
    ExchangeRate: rt.Number,
    ToCurrencyCodeID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Currency = rt.Static<typeof currencyRt>;

const currencyCodeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    ShortCode: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CurrencyCode = rt.Static<typeof currencyCodeRt>;

const debtCollectionAutomationRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    DebtCollectionSettingsID: rt.Number,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DebtCollectionAutomation = rt.Static<typeof debtCollectionAutomationRt>;

const employmentValidValuesRt = rt
  .Record({
    TradeArea: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    WorkingHoursScheme: rt.Boolean,
    ShipReg: rt.Boolean,
    LastSalaryChangeDate: rt.Boolean,
    HourRate: rt.Boolean,
    CreatedBy: rt.String,
    MonthRate: rt.Boolean,
    CreatedAt: rt.String,
    UserDefinedRate: rt.Boolean,
    employment: rt.String,
    StartDate: rt.Boolean,
    RemunerationType: rt.Boolean,
    ShipType: rt.Boolean,
    JobName: rt.Boolean,
    WorkPercent: rt.Boolean,
    LastWorkPercentChange: rt.Boolean,
    EndDate: rt.Boolean,
    PaymentType: rt.String,
    HoursPerWeek: rt.Boolean,
    UpdatedBy: rt.String,
    typeOfEmployment: rt.Boolean,
    JobCode: rt.Boolean,
    SeniorityDate: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmploymentValidValues = rt.Static<typeof employmentValidValuesRt>;

const financialDeadlineRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    PassableDueDate: rt.Number,
    Name: rt.String,
    AdditionalInfo: rt.String,
    UpdatedBy: rt.String,
    Deadline: rt.String,
    Type: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FinancialDeadline = rt.Static<typeof financialDeadlineRt>;

const jobTicketRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    JobStatus: rt.String,
    JobId: rt.String,
    JobName: rt.String,
    UpdatedBy: rt.String,
    GlobalIdentity: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JobTicket = rt.Static<typeof jobTicketRt>;

const languageCodeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type LanguageCode = rt.Static<typeof languageCodeRt>;

const municipalRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CountyName: rt.String,
    MunicipalityName: rt.String,
    Retired: rt.Boolean,
    CountyNo: rt.String,
    UpdatedBy: rt.String,
    MunicipalityNo: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Municipal = rt.Static<typeof municipalRt>;

const paymentBatchTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentBatchType = rt.Static<typeof paymentBatchTypeRt>;

const paymentCodeRt = rt
  .Record({
    PaymentGroup: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentCode = rt.Static<typeof paymentCodeRt>;

const postalCodeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    StatusCode: rt.Number,
    City: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PostalCode = rt.Static<typeof postalCodeRt>;

const reconcileTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Interval: rt.String,
    ReconcileName: rt.String,
    MaxIntervalNumber: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReconcileType = rt.Static<typeof reconcileTypeRt>;

const staticRegisterRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Registry: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    stamp: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type StaticRegister = rt.Static<typeof staticRegisterRt>;

const sTYRKCodeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    tittel: rt.String,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    lnr: rt.Number,
    ynr: rt.Number,
    UpdatedBy: rt.String,
    styrk: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type STYRKCode = rt.Static<typeof sTYRKCodeRt>;

type Translatable = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Module?: string;
  Value?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  Model?: string;
  UpdatedBy?: string;
  Meaning?: string;
  Column?: string;
  Static?: boolean;
  Description?: string;
  Translations?: Translation[];
  CustomValues?: CustomValues;
};

const translatableRt: rt.Runtype<Translatable> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Module: rt.String,
      Value: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Model: rt.String,
      UpdatedBy: rt.String,
      Meaning: rt.String,
      Column: rt.String,
      Static: rt.Boolean,
      Description: rt.String,
      Translations: rt.Array(translationRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Translation = {
  LanguageID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Value?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  UpdatedBy?: string;
  TranslatableID?: number;
  Language?: Language;
  Translatable?: Translatable;
  CustomValues?: CustomValues;
};

const translationRt: rt.Runtype<Translation> = rt.Lazy(() =>
  rt
    .Record({
      LanguageID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Value: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      UpdatedBy: rt.String,
      TranslatableID: rt.Number,
      Language: languageRt,
      Translatable: translatableRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Language = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  FallBackLanguageID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  Code?: string;
  Name?: string;
  UpdatedBy?: string;
  Translations?: Translation[];
  CustomValues?: CustomValues;
};

const languageRt: rt.Runtype<Language> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      FallBackLanguageID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Code: rt.String,
      Name: rt.String,
      UpdatedBy: rt.String,
      Translations: rt.Array(translationRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const vatCodeGroupSetupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    No: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatCodeGroupSetup = rt.Static<typeof vatCodeGroupSetupRt>;

const vatPostSetupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    HasTaxAmount: rt.Boolean,
    No: rt.String,
    VatCodeGroupSetupNo: rt.String,
    HasTaxBasis: rt.Boolean,
    ReportAsNegativeAmount: rt.Boolean,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatPostSetup = rt.Static<typeof vatPostSetupRt>;

const vatReportFormRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportForm = rt.Static<typeof vatReportFormRt>;

const vatReportReferenceSetupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountNumber: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    VatCode: rt.String,
    VatPostNo: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportReferenceSetup = rt.Static<typeof vatReportReferenceSetupRt>;

const vatTypeSetupPercentageRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    ValidTo: rt.String,
    UpdatedBy: rt.String,
    VatTypeSetupID: rt.Number,
    VatPercent: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatTypeSetupPercentage = rt.Static<typeof vatTypeSetupPercentageRt>;

const vatTypeSetupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    VatCodeGroupNo: rt.String,
    DirectJournalEntryOnly: rt.Boolean,
    OutgoingAccountNumber: rt.Number,
    CreatedBy: rt.String,
    ReversedTaxDutyVat: rt.Boolean,
    CreatedAt: rt.String,
    VatCode: rt.String,
    DefaultVisible: rt.Boolean,
    IncomingAccountNumber: rt.Number,
    IsCompensated: rt.Boolean,
    OutputVat: rt.Boolean,
    Name: rt.String,
    UpdatedBy: rt.String,
    IsNotVatRegistered: rt.Boolean,
    VatTypeSetupPercentages: rt.Array(vatTypeSetupPercentageRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatTypeSetup = rt.Static<typeof vatTypeSetupRt>;

const companyReportRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ContractId: rt.Number,
    UpdatedBy: rt.String,
    ReportDefinitionID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyReport = rt.Static<typeof companyReportRt>;

const reportDefinitionRt = rt
  .Record({
    UniqueReportID: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Category: rt.String,
    CreatedBy: rt.String,
    CategoryLabel: rt.String,
    TemplateLinkId: rt.String,
    CreatedAt: rt.String,
    Visible: rt.Boolean,
    IsStandard: rt.Boolean,
    Name: rt.String,
    Md5: rt.String,
    UpdatedBy: rt.String,
    Version: rt.String,
    ReportType: rt.Number,
    Description: rt.String,
    ReportSource: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReportDefinition = rt.Static<typeof reportDefinitionRt>;

const reportDefinitionDataSourceRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    ReportDefinitionId: rt.Number,
    DataSourceUrl: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReportDefinitionDataSource = rt.Static<
  typeof reportDefinitionDataSourceRt
>;

const reportDefinitionParameterRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SortIndex: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Visible: rt.Boolean,
    DefaultValue: rt.String,
    DefaultValueLookupType: rt.String,
    Label: rt.String,
    Name: rt.String,
    SearchModel: rt.String,
    DefaultValueList: rt.String,
    UpdatedBy: rt.String,
    ReportDefinitionId: rt.Number,
    DefaultValueSource: rt.String,
    Type: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReportDefinitionParameter = rt.Static<typeof reportDefinitionParameterRt>;

const periodSeriesRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    SeriesType: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Active: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PeriodSeries = rt.Static<typeof periodSeriesRt>;

const periodTemplateRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    No: rt.Number,
    PeriodSeriesID: rt.Number,
    ToDate: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    FromDate: rt.String,
    PeriodSeries: periodSeriesRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PeriodTemplate = rt.Static<typeof periodTemplateRt>;

const fieldRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ModelID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Label: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    HelpText: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Field = rt.Static<typeof fieldRt>;

const modelRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Admin: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    LabelPlural: rt.String,
    Shared: rt.Boolean,
    Label: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    Fields: rt.Array(fieldRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Model = rt.Static<typeof modelRt>;

const notificationRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyName: rt.String,
    SenderDisplayName: rt.String,
    StatusCode: rt.Number,
    RecipientID: rt.String,
    Message: rt.String,
    UpdatedBy: rt.String,
    SourceEntityType: rt.String,
    SourceEntityID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Notification = rt.Static<typeof notificationRt>;

const accessPointFormatRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IncommingID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Label: rt.String,
    Name: rt.String,
    OutgoingID: rt.Number,
    ResourceName: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccessPointFormat = rt.Static<typeof accessPointFormatRt>;

const companySettingsRt = rt
  .Record({
    FactoringEmailID: rt.Number,
    InterrimPaymentAccountID: rt.Number,
    BaseCurrencyCodeID: rt.Number,
    DefaultAddressID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    DefaultCustomerQuoteReportID: rt.Number,
    DefaultCustomerInvoiceReportID: rt.Number,
    CompanyTypeID: rt.Number,
    VatLockedDate: rt.String,
    APIncludeAttachment: rt.Boolean,
    OnlyJournalMatchedPayments: rt.Boolean,
    AgioGainAccountID: rt.Number,
    HideInActiveCustomers: rt.Boolean,
    Localization: rt.String,
    LogoAlign: rt.Number,
    AutoJournalPayment: rt.String,
    PeriodSeriesVatID: rt.Number,
    InterrimRemitAccountID: rt.Number,
    GLN: rt.String,
    PaymentBankAgreementNumber: rt.String,
    UseOcrInterpretation: rt.Boolean,
    TaxableFromLimit: rt.Number,
    SAFTimportAccountID: rt.Number,
    CustomerCreditDays: rt.Number,
    TaxBankAccountID: rt.Number,
    CreatedBy: rt.String,
    AccountingLockedDate: rt.String,
    CreatedAt: rt.String,
    SettlementVatAccountID: rt.Number,
    DefaultCustomerInvoiceReminderReportID: rt.Number,
    VatReportFormID: rt.Number,
    AccountGroupSetID: rt.Number,
    OfficeMunicipalityNo: rt.String,
    DefaultEmailID: rt.Number,
    UsePaymentBankValues: rt.Boolean,
    TaxMandatory: rt.Boolean,
    CompanyRegistered: rt.Boolean,
    AccountVisibilityGroupID: rt.Number,
    EnableSendPaymentBeforeJournaled: rt.Boolean,
    FactoringNumber: rt.Number,
    AutoDistributeInvoice: rt.Boolean,
    APContactID: rt.Number,
    ShowNumberOfDecimals: rt.Number,
    HasAutobank: rt.Boolean,
    ShowKIDOnCustomerInvoice: rt.Boolean,
    NetsIntegrationActivated: rt.Boolean,
    DefaultTOFCurrencySettingsID: rt.Number,
    CompanyName: rt.String,
    EnableArchiveSupplierInvoice: rt.Boolean,
    TaxMandatoryType: rt.Number,
    UseNetsIntegration: rt.Boolean,
    BankChargeAccountID: rt.Number,
    AgioLossAccountID: rt.Number,
    StatusCode: rt.Number,
    CompanyBankAccountID: rt.Number,
    RoundingNumberOfDecimals: rt.Number,
    UseXtraPaymentOrgXmlTag: rt.Boolean,
    APActivated: rt.Boolean,
    LogoHideField: rt.Number,
    AcceptableDelta4CustomerPaymentAccountID: rt.Number,
    SaveCustomersFromQuoteAsLead: rt.Boolean,
    WebAddress: rt.String,
    DefaultSalesAccountID: rt.Number,
    EnableAdvancedJournalEntry: rt.Boolean,
    RoundingType: rt.String,
    TaxableFromDate: rt.String,
    StoreDistributedInvoice: rt.Boolean,
    SalaryBankAccountID: rt.Number,
    UseFinancialDateToCalculateVatPercent: rt.Boolean,
    TwoStageAutobankEnabled: rt.Boolean,
    DefaultDistributionsID: rt.Number,
    SupplierAccountID: rt.Number,
    APGuid: rt.String,
    EnableApprovalFlow: rt.Boolean,
    ForceSupplierInvoiceApproval: rt.Boolean,
    BatchInvoiceMinAmount: rt.Number,
    PeriodSeriesAccountID: rt.Number,
    UseAssetRegister: rt.Boolean,
    PaymentBankIdentification: rt.String,
    CustomerInvoiceReminderSettingsID: rt.Number,
    UpdatedBy: rt.String,
    PersonNumber: rt.String,
    EnableCheckboxesForSupplierInvoiceList: rt.Boolean,
    XtraPaymentOrgXmlTagValue: rt.String,
    DefaultPhoneID: rt.Number,
    BookCustomerInvoiceOnDeliveryDate: rt.Boolean,
    OrganizationNumber: rt.String,
    IgnorePaymentsWithoutEndToEndID: rt.Boolean,
    LogoFileID: rt.Number,
    Factoring: rt.Number,
    DefaultCustomerOrderReportID: rt.Number,
    CustomerAccountID: rt.Number,
    AllowAvtalegiroRegularInvoice: rt.Boolean,
    AcceptableDelta4CustomerPayment: rt.Number,
    HideInActiveSuppliers: rt.Boolean,
    DefaultAccrualAccountID: rt.Number,
    DefaultAddress: addressRt,
    DefaultPhone: phoneRt,
    DefaultEmail: emailRt,
    SAFTimportAccount: accountRt,
    BankAccounts: rt.Array(bankAccountRt),
    CompanyBankAccount: bankAccountRt,
    TaxBankAccount: bankAccountRt,
    SalaryBankAccount: bankAccountRt,
    APContact: contactRt,
    APIncomming: rt.Array(accessPointFormatRt),
    APOutgoing: rt.Array(accessPointFormatRt),
    Distributions: distributionsRt,
    CustomerInvoiceReminderSettings: customerInvoiceReminderSettingsRt,
    DefaultTOFCurrencySettings: tOFCurrencySettingsRt,
    FactoringEmail: emailRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanySettings = rt.Static<typeof companySettingsRt>;

const distributionTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionType = rt.Static<typeof distributionTypeRt>;

const emailLogRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    From: rt.String,
    ExternalMessage: rt.String,
    EntityDisplayValue: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    To: rt.String,
    StatusCode: rt.Number,
    Subject: rt.String,
    JobRunExternalRef: rt.String,
    ExternalReference: rt.String,
    DistributeAt: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    JobRunID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmailLog = rt.Static<typeof emailLogRt>;

type ExpressionFilter = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  EntityName?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  EventplanID?: number;
  StatusCode?: number;
  Expression?: string;
  UpdatedBy?: string;
  Eventplan?: Eventplan;
  CustomValues?: CustomValues;
};

const expressionFilterRt: rt.Runtype<ExpressionFilter> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      EntityName: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      EventplanID: rt.Number,
      StatusCode: rt.Number,
      Expression: rt.String,
      UpdatedBy: rt.String,
      Eventplan: eventplanRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type EventSubscriber = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  Authorization?: string;
  CreatedAt?: string;
  EventplanID?: number;
  StatusCode?: number;
  Endpoint?: string;
  Headers?: string;
  Name?: string;
  UpdatedBy?: string;
  Active?: boolean;
  Eventplan?: Eventplan;
  CustomValues?: CustomValues;
};

const eventSubscriberRt: rt.Runtype<EventSubscriber> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      Authorization: rt.String,
      CreatedAt: rt.String,
      EventplanID: rt.Number,
      StatusCode: rt.Number,
      Endpoint: rt.String,
      Headers: rt.String,
      Name: rt.String,
      UpdatedBy: rt.String,
      Active: rt.Boolean,
      Eventplan: eventplanRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Eventplan = {
  Deleted?: boolean;
  ID?: number;
  ModelFilter?: string;
  UpdatedAt?: string;
  JobNames?: string;
  CreatedBy?: string;
  PlanType?: string;
  CreatedAt?: string;
  Cargo?: string;
  IsSystemPlan?: boolean;
  StatusCode?: number;
  Name?: string;
  OperationFilter?: string;
  SigningKey?: string;
  UpdatedBy?: string;
  Active?: boolean;
  ExpressionFilters?: ExpressionFilter[];
  Subscribers?: EventSubscriber[];
  CustomValues?: CustomValues;
};

const eventplanRt: rt.Runtype<Eventplan> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      ModelFilter: rt.String,
      UpdatedAt: rt.String,
      JobNames: rt.String,
      CreatedBy: rt.String,
      PlanType: rt.String,
      CreatedAt: rt.String,
      Cargo: rt.String,
      IsSystemPlan: rt.Boolean,
      StatusCode: rt.Number,
      Name: rt.String,
      OperationFilter: rt.String,
      SigningKey: rt.String,
      UpdatedBy: rt.String,
      Active: rt.Boolean,
      ExpressionFilters: rt.Array(expressionFilterRt),
      Subscribers: rt.Array(eventSubscriberRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const periodRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    No: rt.Number,
    PeriodSeriesID: rt.Number,
    StatusCode: rt.Number,
    ToDate: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    AccountYear: rt.Number,
    PeriodTemplateID: rt.Number,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Period = rt.Static<typeof periodRt>;

const predefinedDescriptionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Type: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PredefinedDescription = rt.Static<typeof predefinedDescriptionRt>;

const sharingRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    From: rt.String,
    ExternalMessage: rt.String,
    EntityDisplayValue: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    To: rt.String,
    StatusCode: rt.Number,
    Subject: rt.String,
    JobRunExternalRef: rt.String,
    ExternalReference: rt.String,
    DistributeAt: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    JobRunID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Sharing = rt.Static<typeof sharingRt>;

const statusLogRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    ToStatus: rt.Number,
    FromStatus: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type StatusLog = rt.Static<typeof statusLogRt>;

const tracelinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Date: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DestinationInstanceID: rt.Number,
    StatusCode: rt.Number,
    SourceEntityName: rt.String,
    DestinationEntityName: rt.String,
    UpdatedBy: rt.String,
    SourceInstanceID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Tracelink = rt.Static<typeof tracelinkRt>;

const userRt = rt
  .Record({
    IsAutobankAdmin: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Protected: rt.Boolean,
    Email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserName: rt.String,
    StatusCode: rt.Number,
    LastLogin: rt.String,
    PhoneNumber: rt.String,
    DisplayName: rt.String,
    BankIntegrationUserName: rt.String,
    UpdatedBy: rt.String,
    GlobalIdentity: rt.String,
    HasAgreedToImportDisclaimer: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type User = rt.Static<typeof userRt>;

const uniQueryFilterRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Value: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Operator: rt.String,
    StatusCode: rt.Number,
    Field: rt.String,
    UniQueryDefinitionID: rt.Number,
    Group: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UniQueryFilter = rt.Static<typeof uniQueryFilterRt>;

const uniQueryFieldRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Path: rt.String,
    CreatedBy: rt.String,
    Header: rt.String,
    CreatedAt: rt.String,
    Index: rt.Number,
    StatusCode: rt.Number,
    Field: rt.String,
    Alias: rt.String,
    Width: rt.String,
    UniQueryDefinitionID: rt.Number,
    FieldType: rt.Number,
    UpdatedBy: rt.String,
    SumFunction: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UniQueryField = rt.Static<typeof uniQueryFieldRt>;

const uniQueryDefinitionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Category: rt.String,
    SortIndex: rt.Number,
    CreatedBy: rt.String,
    ClickUrl: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    UserID: rt.Number,
    StatusCode: rt.Number,
    IsShared: rt.Boolean,
    ClickParam: rt.String,
    Name: rt.String,
    ModuleID: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    SystemGeneratedQuery: rt.Boolean,
    MainModelName: rt.String,
    UniQueryFilters: rt.Array(uniQueryFilterRt),
    UniQueryFields: rt.Array(uniQueryFieldRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type UniQueryDefinition = rt.Static<typeof uniQueryDefinitionRt>;

type TeamPosition = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Position?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  RelatedSharedRoleId?: number;
  UserID?: number;
  StatusCode?: number;
  ToDate?: string;
  ApproveOrder?: number;
  UpdatedBy?: string;
  TeamID?: number;
  FromDate?: string;
  Team?: Team;
  CustomValues?: CustomValues;
};

const teamPositionRt: rt.Runtype<TeamPosition> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Position: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      RelatedSharedRoleId: rt.Number,
      UserID: rt.Number,
      StatusCode: rt.Number,
      ToDate: rt.String,
      ApproveOrder: rt.Number,
      UpdatedBy: rt.String,
      TeamID: rt.Number,
      FromDate: rt.String,
      Team: teamRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Team = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Rght?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  ParentID?: number;
  DimensionsID?: number;
  StatusCode?: number;
  Lft?: number;
  Name?: string;
  Depth?: number;
  UpdatedBy?: string;
  Dimensions?: Dimensions;
  Positions?: TeamPosition[];
  CustomValues?: CustomValues;
};

const teamRt: rt.Runtype<Team> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Rght: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ParentID: rt.Number,
      DimensionsID: rt.Number,
      StatusCode: rt.Number,
      Lft: rt.Number,
      Name: rt.String,
      Depth: rt.Number,
      UpdatedBy: rt.String,
      Dimensions: dimensionsRt,
      Positions: rt.Array(teamPositionRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const approvalRuleStepRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    StepNumber: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ApprovalRuleID: rt.Number,
    UserID: rt.Number,
    StatusCode: rt.Number,
    Limit: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApprovalRuleStep = rt.Static<typeof approvalRuleStepRt>;

const approvalRuleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Keywords: rt.String,
    IndustryCodes: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    RuleType: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    Steps: rt.Array(approvalRuleStepRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApprovalRule = rt.Static<typeof approvalRuleRt>;

const approvalSubstituteRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserID: rt.Number,
    StatusCode: rt.Number,
    ToDate: rt.String,
    UpdatedBy: rt.String,
    SubstituteUserID: rt.Number,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApprovalSubstitute = rt.Static<typeof approvalSubstituteRt>;

type Approval = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  UserID?: number;
  StatusCode?: number;
  SharedRoleId?: number;
  CurrencyCode?: string;
  Amount?: number;
  UpdatedBy?: string;
  TaskID?: number;
  Task?: Task;
  CustomValues?: CustomValues;
};

const approvalRt: rt.Runtype<Approval> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      UserID: rt.Number,
      StatusCode: rt.Number,
      SharedRoleId: rt.Number,
      CurrencyCode: rt.String,
      Amount: rt.Number,
      UpdatedBy: rt.String,
      TaskID: rt.Number,
      Task: taskRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Task = {
  EntityID?: number;
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  SharedApproveTransitionId?: number;
  ModelID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  UserID?: number;
  StatusCode?: number;
  SharedRoleId?: number;
  SharedRejectTransitionId?: number;
  UpdatedBy?: string;
  Type?: string;
  Title?: string;
  RejectStatusCode?: number;
  Approvals?: Approval[];
  ApprovalPlan?: TaskApprovalPlan[];
  CustomValues?: CustomValues;
};

const taskRt: rt.Runtype<Task> = rt.Lazy(() =>
  rt
    .Record({
      EntityID: rt.Number,
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      SharedApproveTransitionId: rt.Number,
      ModelID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      UserID: rt.Number,
      StatusCode: rt.Number,
      SharedRoleId: rt.Number,
      SharedRejectTransitionId: rt.Number,
      UpdatedBy: rt.String,
      Type: rt.String,
      Title: rt.String,
      RejectStatusCode: rt.Number,
      Approvals: rt.Array(approvalRt),
      ApprovalPlan: rt.Array(taskApprovalPlanRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type TaskApprovalPlan = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Comment?: string;
  StepNumber?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  ApprovalRuleID?: number;
  UserID?: number;
  StatusCode?: number;
  CurrencyCode?: string;
  Limit?: number;
  Amount?: number;
  UpdatedBy?: string;
  TaskID?: number;
  ApprovalID?: number;
  Task?: Task;
  Approval?: Approval;
  ApprovalRule?: ApprovalRule;
  CustomValues?: CustomValues;
};

const taskApprovalPlanRt: rt.Runtype<TaskApprovalPlan> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Comment: rt.String,
      StepNumber: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ApprovalRuleID: rt.Number,
      UserID: rt.Number,
      StatusCode: rt.Number,
      CurrencyCode: rt.String,
      Limit: rt.Number,
      Amount: rt.Number,
      UpdatedBy: rt.String,
      TaskID: rt.Number,
      ApprovalID: rt.Number,
      Task: taskRt,
      Approval: approvalRt,
      ApprovalRule: approvalRuleRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const statusCategoryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    StatusCategoryCode: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type StatusCategory = rt.Static<typeof statusCategoryRt>;

const statusRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    Order: rt.Number,
    CreatedAt: rt.String,
    IsDepricated: rt.Boolean,
    StatusCode: rt.Number,
    System: rt.Boolean,
    UpdatedBy: rt.String,
    StatusCategoryID: rt.Number,
    Description: rt.String,
    StatusCategory: statusCategoryRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Status = rt.Static<typeof statusRt>;

const statusRemarkRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    Remark: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type StatusRemark = rt.Static<typeof statusRemarkRt>;

const transitionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Controller: rt.String,
    MethodName: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Transition = rt.Static<typeof transitionRt>;

const transitionThresholdRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SharedApproveTransitionId: rt.Number,
    Value: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PropertyName: rt.String,
    Operation: rt.String,
    Operator: rt.String,
    SharedRoleId: rt.Number,
    SharedRejectTransitionId: rt.Number,
    UpdatedBy: rt.String,
    Disabled: rt.Boolean,
    RejectStatusCode: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TransitionThreshold = rt.Static<typeof transitionThresholdRt>;

const transitionThresholdApprovalRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SharedApproveTransitionId: rt.Number,
    Value: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PropertyName: rt.String,
    Operation: rt.String,
    Operator: rt.String,
    SharedRoleId: rt.Number,
    SharedRejectTransitionId: rt.Number,
    UpdatedBy: rt.String,
    ApprovalID: rt.Number,
    RejectStatusCode: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TransitionThresholdApproval = rt.Static<
  typeof transitionThresholdApprovalRt
>;

const transitionFlowRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    IsDepricated: rt.Boolean,
    ExpiresDate: rt.String,
    ToStatusID: rt.Number,
    TransitionID: rt.Number,
    UpdatedBy: rt.String,
    FromStatusID: rt.Number,
    FromStatus: statusRt,
    ToStatus: statusRt,
    Transition: transitionRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TransitionFlow = rt.Static<typeof transitionFlowRt>;

const projectResourceScheduleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ProjectTaskID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ProjectTaskScheduleID: rt.Number,
    StatusCode: rt.Number,
    ProjectResourceID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProjectResourceSchedule = rt.Static<typeof projectResourceScheduleRt>;

const projectTaskScheduleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ProjectTaskID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StartDate: rt.String,
    StatusCode: rt.Number,
    EndDate: rt.String,
    UpdatedBy: rt.String,
    ScheduleResources: rt.Array(projectResourceScheduleRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProjectTaskSchedule = rt.Static<typeof projectTaskScheduleRt>;

const projectTaskRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Price: rt.Number,
    Number: rt.String,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Total: rt.Number,
    StartDate: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    EndDate: rt.String,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    SuggestedNumber: rt.String,
    Description: rt.String,
    ProjectID: rt.Number,
    ProjectTaskSchedules: rt.Array(projectTaskScheduleRt),
    ProjectTaskResources: rt.Array(projectResourceScheduleRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProjectTask = rt.Static<typeof projectTaskRt>;

const projectResourceRt = rt
  .Record({
    Responsibility: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserID: rt.Number,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    ProjectID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProjectResource = rt.Static<typeof projectResourceRt>;

const projectRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Price: rt.Number,
    ProjectNumberSeriesID: rt.Number,
    CostPrice: rt.Number,
    CreatedBy: rt.String,
    ProjectLeadName: rt.String,
    CreatedAt: rt.String,
    PlannedStartdate: rt.String,
    Total: rt.Number,
    StartDate: rt.String,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    ProjectNumber: rt.String,
    ProjectCustomerID: rt.Number,
    Name: rt.String,
    EndDate: rt.String,
    WorkPlaceAddressID: rt.Number,
    ProjectNumberNumeric: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    PlannedEnddate: rt.String,
    ProjectCustomer: customerRt,
    WorkPlaceAddress: addressRt,
    ProjectTasks: rt.Array(projectTaskRt),
    ProjectResources: rt.Array(projectResourceRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Project = rt.Static<typeof projectRt>;

const barnepassProductRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    ProductID: rt.Number,
    UpdatedBy: rt.String,
    Product: productRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BarnepassProduct = rt.Static<typeof barnepassProductRt>;

type NumberSeriesType = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  EntityType?: string;
  CanHaveSeveralActiveSeries?: boolean;
  CreatedBy?: string;
  EntitySeriesIDField?: string;
  CreatedAt?: string;
  Yearly?: boolean;
  StatusCode?: number;
  System?: boolean;
  Name?: string;
  EntityField?: string;
  UpdatedBy?: string;
  Series?: NumberSeries[];
  CustomValues?: CustomValues;
};

const numberSeriesTypeRt: rt.Runtype<NumberSeriesType> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      EntityType: rt.String,
      CanHaveSeveralActiveSeries: rt.Boolean,
      CreatedBy: rt.String,
      EntitySeriesIDField: rt.String,
      CreatedAt: rt.String,
      Yearly: rt.Boolean,
      StatusCode: rt.Number,
      System: rt.Boolean,
      Name: rt.String,
      EntityField: rt.String,
      UpdatedBy: rt.String,
      Series: rt.Array(numberSeriesRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const numberSeriesTaskRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type NumberSeriesTask = rt.Static<typeof numberSeriesTaskRt>;

type NumberSeries = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  NumberLock?: boolean;
  Comment?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  FromNumber?: number;
  IsDefaultForTask?: boolean;
  NextNumber?: number;
  UseNumbersFromNumberSeriesID?: number;
  NumberSeriesTaskID?: number;
  StatusCode?: number;
  System?: boolean;
  DisplayName?: string;
  Name?: string;
  MainAccountID?: number;
  ToNumber?: number;
  UpdatedBy?: string;
  AccountYear?: number;
  Empty?: boolean;
  NumberSeriesTypeID?: number;
  Disabled?: boolean;
  NumberSeriesType?: NumberSeriesType;
  UseNumbersFromNumberSeries?: NumberSeries;
  NumberSeriesTask?: NumberSeriesTask;
  MainAccount?: Account;
  CustomValues?: CustomValues;
};

const numberSeriesRt: rt.Runtype<NumberSeries> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      NumberLock: rt.Boolean,
      Comment: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      FromNumber: rt.Number,
      IsDefaultForTask: rt.Boolean,
      NextNumber: rt.Number,
      UseNumbersFromNumberSeriesID: rt.Number,
      NumberSeriesTaskID: rt.Number,
      StatusCode: rt.Number,
      System: rt.Boolean,
      DisplayName: rt.String,
      Name: rt.String,
      MainAccountID: rt.Number,
      ToNumber: rt.Number,
      UpdatedBy: rt.String,
      AccountYear: rt.Number,
      Empty: rt.Boolean,
      NumberSeriesTypeID: rt.Number,
      Disabled: rt.Boolean,
      NumberSeriesType: numberSeriesTypeRt,
      UseNumbersFromNumberSeries: numberSeriesRt,
      NumberSeriesTask: numberSeriesTaskRt,
      MainAccount: accountRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const numberSeriesInvalidOverlapRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    NumberSerieTypeBID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    NumberSerieTypeAID: rt.Number,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    NumberSerieTypeA: numberSeriesTypeRt,
    NumberSerieTypeB: numberSeriesTypeRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type NumberSeriesInvalidOverlap = rt.Static<
  typeof numberSeriesInvalidOverlapRt
>;

const encryptionInfoRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    password: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    type: rt.String,
    description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EncryptionInfo = rt.Static<typeof encryptionInfoRt>;

const elsaUsageLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Quantity: rt.Number,
    ProductType: rt.String,
    DateLogged: rt.String,
    ExternalReference: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ElsaUsageLog = rt.Static<typeof elsaUsageLogRt>;

const eHFLogRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    From: rt.String,
    ExternalMessage: rt.String,
    EntityDisplayValue: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    To: rt.String,
    StatusCode: rt.Number,
    Subject: rt.String,
    JobRunExternalRef: rt.String,
    ExternalReference: rt.String,
    DistributeAt: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    JobRunID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EHFLog = rt.Static<typeof eHFLogRt>;

const departmentRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DepartmentManagerName: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    DepartmentNumberNumeric: rt.Number,
    UpdatedBy: rt.String,
    DepartmentNumber: rt.String,
    DepartmentNumberSeriesID: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Department = rt.Static<typeof departmentRt>;

const dimension10Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension10 = rt.Static<typeof dimension10Rt>;

const dimension5Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension5 = rt.Static<typeof dimension5Rt>;

const dimension6Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension6 = rt.Static<typeof dimension6Rt>;

const dimension7Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension7 = rt.Static<typeof dimension7Rt>;

const dimension8Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension8 = rt.Static<typeof dimension8Rt>;

const dimension9Rt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.String,
    NumberNumeric: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Dimension9 = rt.Static<typeof dimension9Rt>;

const dimensionsInfoRt = rt
  .Record({
    ResponsibleName: rt.String,
    ID: rt.Number,
    ProjectTaskNumber: rt.String,
    Dimension5Name: rt.String,
    Dimension6Name: rt.String,
    Dimension10Number: rt.String,
    DepartmentName: rt.String,
    ProjectName: rt.String,
    Dimension10Name: rt.String,
    DimensionsID: rt.Number,
    RegionCode: rt.String,
    ProjectNumber: rt.String,
    Dimension7Name: rt.String,
    Dimension6Number: rt.String,
    Dimension9Number: rt.String,
    Dimension8Name: rt.String,
    RegionName: rt.String,
    Dimension5Number: rt.String,
    Dimension9Name: rt.String,
    Dimension7Number: rt.String,
    ProjectTaskName: rt.String,
    DepartmentNumber: rt.String,
    Dimension8Number: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DimensionsInfo = rt.Static<typeof dimensionsInfoRt>;

const dimensionSettingsRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IsActive: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Label: rt.String,
    UpdatedBy: rt.String,
    Dimension: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DimensionSettings = rt.Static<typeof dimensionSettingsRt>;

const regionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CountryCode: rt.String,
    StatusCode: rt.Number,
    RegionCode: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Region = rt.Static<typeof regionRt>;

const responsibleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    NameOfResponsible: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Responsible = rt.Static<typeof responsibleRt>;

type ContractParameter = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Value?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  ContractID?: number;
  StatusCode?: number;
  Name?: string;
  UpdatedBy?: string;
  Contract?: Contract;
  CustomValues?: CustomValues;
};

const contractParameterRt: rt.Runtype<ContractParameter> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Value: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ContractID: rt.Number,
      StatusCode: rt.Number,
      Name: rt.String,
      UpdatedBy: rt.String,
      Contract: contractRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type ContractTrigger = {
  Deleted?: boolean;
  ID?: number;
  ModelFilter?: string;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  ContractID?: number;
  StatusCode?: number;
  OperationFilter?: string;
  UpdatedBy?: string;
  ExpressionFilter?: string;
  Type?: string;
  Contract?: Contract;
  CustomValues?: CustomValues;
};

const contractTriggerRt: rt.Runtype<ContractTrigger> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      ModelFilter: rt.String,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ContractID: rt.Number,
      StatusCode: rt.Number,
      OperationFilter: rt.String,
      UpdatedBy: rt.String,
      ExpressionFilter: rt.String,
      Type: rt.String,
      Contract: contractRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type ContractRunLog = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  ContractID?: number;
  RunTime?: string;
  StatusCode?: number;
  Message?: string;
  UpdatedBy?: string;
  Type?: string;
  ContractTriggerID?: number;
  Contract?: Contract;
  CustomValues?: CustomValues;
};

const contractRunLogRt: rt.Runtype<ContractRunLog> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      ContractID: rt.Number,
      RunTime: rt.String,
      StatusCode: rt.Number,
      Message: rt.String,
      UpdatedBy: rt.String,
      Type: rt.String,
      ContractTriggerID: rt.Number,
      Contract: contractRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Contract = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  HashTransactionAddress?: string;
  CreatedBy?: string;
  TeamsUri?: string;
  CreatedAt?: string;
  Engine?: string;
  StatusCode?: number;
  Name?: string;
  ContractCode?: string;
  UpdatedBy?: string;
  Hash?: string;
  Description?: string;
  Parameters?: ContractParameter[];
  Triggers?: ContractTrigger[];
  RunLogs?: ContractRunLog[];
  CustomValues?: CustomValues;
};

const contractRt: rt.Runtype<Contract> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      HashTransactionAddress: rt.String,
      CreatedBy: rt.String,
      TeamsUri: rt.String,
      CreatedAt: rt.String,
      Engine: rt.String,
      StatusCode: rt.Number,
      Name: rt.String,
      ContractCode: rt.String,
      UpdatedBy: rt.String,
      Hash: rt.String,
      Description: rt.String,
      Parameters: rt.Array(contractParameterRt),
      Triggers: rt.Array(contractTriggerRt),
      RunLogs: rt.Array(contractRunLogRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const contractAssetRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IsTransferrable: rt.Boolean,
    IsCosignedByDefiner: rt.Boolean,
    IsPrivate: rt.Boolean,
    IsIssuedByDefinerOnly: rt.Boolean,
    CreatedBy: rt.String,
    IsFixedDenominations: rt.Boolean,
    CreatedAt: rt.String,
    Cap: rt.Number,
    ContractID: rt.Number,
    StatusCode: rt.Number,
    IsAutoDestroy: rt.Boolean,
    UpdatedBy: rt.String,
    Type: rt.String,
    SpenderAttested: rt.Boolean,
    Contract: contractRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractAsset = rt.Static<typeof contractAssetRt>;

const contractAddressRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ContractID: rt.Number,
    ContractAssetID: rt.Number,
    StatusCode: rt.Number,
    AssetAddress: rt.String,
    Address: rt.String,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    Type: rt.String,
    Contract: contractRt,
    ContractAsset: contractAssetRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractAddress = rt.Static<typeof contractAddressRt>;

const contractDebugLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ContractRunLogID: rt.Number,
    ContractID: rt.Number,
    StatusCode: rt.Number,
    Message: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    Contract: contractRt,
    ContractRunLog: contractRunLogRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractDebugLog = rt.Static<typeof contractDebugLogRt>;

const contractTransactionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ReceiverAddress: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ContractID: rt.Number,
    StatusCode: rt.Number,
    AssetAddress: rt.String,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    ContractAddressID: rt.Number,
    SenderAddress: rt.String,
    Contract: contractRt,
    ContractAddress: contractAddressRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractTransaction = rt.Static<typeof contractTransactionRt>;

const mentionedRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserID: rt.Number,
    StatusCode: rt.Number,
    CommentID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Mentioned = rt.Static<typeof mentionedRt>;

const commentRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    Text: rt.String,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    AuthorID: rt.Number,
    UpdatedBy: rt.String,
    Mentioned: rt.Array(mentionedRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Comment = rt.Static<typeof commentRt>;

const apiKeyRt = rt
  .Record({
    Encrypt: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    FilterDate: rt.String,
    Url: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ExternalId: rt.String,
    IntegrationKey: rt.String,
    StatusCode: rt.Number,
    IntegrationType: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApiKey = rt.Static<typeof apiKeyRt>;

const altinnRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    PreferredLogin: rt.String,
    SystemID: rt.String,
    UpdatedBy: rt.String,
    Language: rt.String,
    SystemPw: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Altinn = rt.Static<typeof altinnRt>;

const altinnSigningRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    DateSigned: rt.String,
    CreatedAt: rt.String,
    StatusText: rt.String,
    StatusCode: rt.Number,
    SignatureText: rt.String,
    AltinnReceiptID: rt.Number,
    UpdatedBy: rt.String,
    SignatureReference: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnSigning = rt.Static<typeof altinnSigningRt>;

const altinnReceiptRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    HasBeenRegistered: rt.Boolean,
    AltinnResponseData: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Form: rt.String,
    StatusCode: rt.Number,
    ErrorText: rt.String,
    TimeStamp: rt.String,
    UpdatedBy: rt.String,
    XmlReceipt: rt.String,
    UserSign: rt.String,
    ReceiptID: rt.Number,
    Signings: rt.Array(altinnSigningRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnReceipt = rt.Static<typeof altinnReceiptRt>;

const barnepassOppgaveRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    foedselsnummer: rt.String,
    email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    paaloeptBeloep: rt.Number,
    navn: rt.String,
    StatusCode: rt.Number,
    BarnepassID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BarnepassOppgave = rt.Static<typeof barnepassOppgaveRt>;

const barnepassRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    inntektsaar: rt.Number,
    UpdatedBy: rt.String,
    oppgave: rt.Array(barnepassOppgaveRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Barnepass = rt.Static<typeof barnepassRt>;

const userRoleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserID: rt.Number,
    SharedRoleName: rt.String,
    SharedRoleId: rt.Number,
    UpdatedBy: rt.String,
    User: userRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UserRole = rt.Static<typeof userRoleRt>;

type Permission = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  Name?: string;
  UpdatedBy?: string;
  RolePermissions?: RolePermission[];
  CustomValues?: CustomValues;
};

const permissionRt: rt.Runtype<Permission> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Name: rt.String,
      UpdatedBy: rt.String,
      RolePermissions: rt.Array(rolePermissionRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type RolePermission = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  PermissionID?: number;
  CreatedBy?: string;
  CreatedAt?: string;
  UpdatedBy?: string;
  RoleID?: number;
  Role?: Role;
  Permission?: Permission;
  CustomValues?: CustomValues;
};

const rolePermissionRt: rt.Runtype<RolePermission> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      PermissionID: rt.Number,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      UpdatedBy: rt.String,
      RoleID: rt.Number,
      Role: roleRt,
      Permission: permissionRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type Role = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  Label?: string;
  Name?: string;
  UpdatedBy?: string;
  Description?: string;
  RolePermissions?: RolePermission[];
  CustomValues?: CustomValues;
};

const roleRt: rt.Runtype<Role> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Label: rt.String,
      Name: rt.String,
      UpdatedBy: rt.String,
      Description: rt.String,
      RolePermissions: rt.Array(rolePermissionRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const apiMessageRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Service: rt.String,
    StatusCode: rt.Number,
    ToDate: rt.String,
    Message: rt.String,
    UpdatedBy: rt.String,
    Type: rt.String,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApiMessage = rt.Static<typeof apiMessageRt>;

const autobankTransferLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Status: rt.Number,
    DocumentsId: rt.Number,
    UpdatedBy: rt.String,
    DateInserted: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AutobankTransferLog = rt.Static<typeof autobankTransferLogRt>;

const avtaleGiroAgreementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    KeyPath: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DataSender: rt.String,
    NextNumber: rt.Number,
    Thumbprint: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AvtaleGiroAgreement = rt.Static<typeof avtaleGiroAgreementRt>;

const companyRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    WebHookSubscriberId: rt.String,
    Key: rt.String,
    CreatedBy: rt.String,
    IsTest: rt.Boolean,
    CreatedAt: rt.String,
    FileFlowEmail: rt.String,
    ClientNumber: rt.Number,
    IsTemplate: rt.Boolean,
    StatusCode: rt.String,
    Name: rt.String,
    FileFlowOrgnrEmail: rt.String,
    MigrationVersion: rt.String,
    SchemaName: rt.String,
    IsGlobalTemplate: rt.Boolean,
    UpdatedBy: rt.String,
    LastActivity: rt.String,
    OrganizationNumber: rt.String,
    ConnectionString: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Company = rt.Static<typeof companyRt>;

const avtaleGiroBankAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AvtaleGiroAgreementID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    BankAccountNumber: rt.String,
    UpdatedBy: rt.String,
    Company: companyRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AvtaleGiroBankAccount = rt.Static<typeof avtaleGiroBankAccountRt>;

const avtaleGiroFileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AvtaleGiroAgreementID: rt.Number,
    AvtaleGiroMergedFileID: rt.Number,
    FileID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    UpdatedBy: rt.String,
    AvtaleGiroContent: rt.String,
    Company: companyRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AvtaleGiroFile = rt.Static<typeof avtaleGiroFileRt>;

const avtaleGiroMergedFileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UpdatedBy: rt.String,
    TransmissionNumber: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AvtaleGiroMergedFile = rt.Static<typeof avtaleGiroMergedFileRt>;

const serviceAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    KeyPath: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DataSender: rt.String,
    NextNumber: rt.Number,
    Thumbprint: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ServiceAccount = rt.Static<typeof serviceAccountRt>;

type BankServiceBankAccount = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  AccountNumber?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  UpdatedBy?: string;
  BankServiceID?: number;
  BankService?: BankService;
  CustomValues?: CustomValues;
};

const bankServiceBankAccountRt: rt.Runtype<BankServiceBankAccount> = rt.Lazy(
  () =>
    rt
      .Record({
        Deleted: rt.Boolean,
        ID: rt.Number,
        UpdatedAt: rt.String,
        AccountNumber: rt.String,
        CreatedBy: rt.String,
        CreatedAt: rt.String,
        UpdatedBy: rt.String,
        BankServiceID: rt.Number,
        BankService: bankServiceRt,
        CustomValues: customValuesRt,
      })
      .asPartial(),
);

type BankService = {
  DivisionName?: string;
  Deleted?: boolean;
  ID?: number;
  ServiceType?: number;
  ConfirmInNetbank?: boolean;
  UpdatedAt?: string;
  CreatedBy?: string;
  FileType?: string;
  CreatedAt?: string;
  BankAgreementID?: number;
  DivisionID?: number;
  UpdatedBy?: string;
  KidRule?: string;
  BankAgreement?: BankAgreement;
  BankAccounts?: BankServiceBankAccount[];
  CustomValues?: CustomValues;
};

const bankServiceRt: rt.Runtype<BankService> = rt.Lazy(() =>
  rt
    .Record({
      DivisionName: rt.String,
      Deleted: rt.Boolean,
      ID: rt.Number,
      ServiceType: rt.Number,
      ConfirmInNetbank: rt.Boolean,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      FileType: rt.String,
      CreatedAt: rt.String,
      BankAgreementID: rt.Number,
      DivisionID: rt.Number,
      UpdatedBy: rt.String,
      KidRule: rt.String,
      BankAgreement: bankAgreementRt,
      BankAccounts: rt.Array(bankServiceBankAccountRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type BankAgreement = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CustomerName?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  CompanyID?: number;
  ServiceID?: string;
  OrderEmail?: string;
  OrderMobile?: string;
  OrderName?: string;
  CustomerOrgNumber?: string;
  ReceiptDate?: string;
  AccountOwnerOrgNumber?: string;
  UpdatedBy?: string;
  AccountOwnerName?: string;
  ServiceAccountID?: number;
  ReceiptID?: string;
  ServiceAccount?: ServiceAccount;
  Company?: Company;
  Services?: BankService[];
  CustomValues?: CustomValues;
};

const bankAgreementRt: rt.Runtype<BankAgreement> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CustomerName: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      CompanyID: rt.Number,
      ServiceID: rt.String,
      OrderEmail: rt.String,
      OrderMobile: rt.String,
      OrderName: rt.String,
      CustomerOrgNumber: rt.String,
      ReceiptDate: rt.String,
      AccountOwnerOrgNumber: rt.String,
      UpdatedBy: rt.String,
      AccountOwnerName: rt.String,
      ServiceAccountID: rt.Number,
      ReceiptID: rt.String,
      ServiceAccount: serviceAccountRt,
      Company: companyRt,
      Services: rt.Array(bankServiceRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const companyAccessRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Roles: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    StartDate: rt.String,
    StatusCode: rt.Number,
    EndDate: rt.String,
    UpdatedBy: rt.String,
    GlobalIdentity: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyAccess = rt.Static<typeof companyAccessRt>;

const companyBackupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    ScheduledForDeleteAt: rt.String,
    ContractType: rt.Number,
    CustomerName: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CopyFiles: rt.Boolean,
    BackupStatus: rt.String,
    Environment: rt.String,
    CloudBlobName: rt.String,
    ContractID: rt.Number,
    CompanyName: rt.String,
    Reason: rt.String,
    ContainerName: rt.String,
    OrgNumber: rt.String,
    SchemaName: rt.String,
    Message: rt.String,
    DeletedAt: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyBackup = rt.Static<typeof companyBackupRt>;

const contractCronRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    ContractID: rt.Number,
    Expression: rt.String,
    UpdatedBy: rt.String,
    ContractTriggerID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractCron = rt.Static<typeof contractCronRt>;

const contractObyteRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    ContractID: rt.Number,
    AssetAddress: rt.String,
    Address: rt.String,
    UpdatedBy: rt.String,
    ContractAddressID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractObyte = rt.Static<typeof contractObyteRt>;

const deniedUserAccessLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Occurred: rt.String,
    Email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    Username: rt.String,
    CompanyName: rt.String,
    Message: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DeniedUserAccessLog = rt.Static<typeof deniedUserAccessLogRt>;

const failedBankFileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    FileContent: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    FailedReason: rt.String,
    FileName: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FailedBankFile = rt.Static<typeof failedBankFileRt>;

const hangfireJobRt = rt
  .Record({
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    Status: rt.Number,
    HasError: rt.Boolean,
    JobId: rt.String,
    Year: rt.Number,
    Completed: rt.Boolean,
    GlobalIdentity: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type HangfireJob = rt.Static<typeof hangfireJobRt>;

const hangfireJobContextRt = rt
  .Record({
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    Status: rt.Number,
    HasError: rt.Boolean,
    JobId: rt.String,
    Year: rt.Number,
    SchemaName: rt.String,
    Completed: rt.Boolean,
    GlobalIdentity: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type HangfireJobContext = rt.Static<typeof hangfireJobContextRt>;

const hangfireResponseRt = rt
  .Record({
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    ProgressUrl: rt.String,
    Status: rt.Number,
    HasError: rt.Boolean,
    JobId: rt.String,
    State: rt.String,
    Year: rt.Number,
    Completed: rt.Boolean,
    GlobalIdentity: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type HangfireResponse = rt.Static<typeof hangfireResponseRt>;

const kpiDefinitionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    Application: rt.String,
    ValueType: rt.String,
    IsPerUser: rt.Boolean,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    SourceType: rt.String,
    RefreshModels: rt.String,
    Name: rt.String,
    Interval: rt.String,
    RoleNames: rt.String,
    UpdatedBy: rt.String,
    Route: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type KpiDefinition = rt.Static<typeof kpiDefinitionRt>;

const kpiValueRt = rt
  .Record({
    Deleted: rt.Boolean,
    Text: rt.String,
    ID: rt.Number,
    UpdatedAt: rt.String,
    KpiName: rt.String,
    ValueStatus: rt.String,
    LastUpdated: rt.String,
    KpiDefinitionID: rt.Number,
    Counter: rt.Number,
    CreatedBy: rt.String,
    UserIdentity: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    Total: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type KpiValue = rt.Static<typeof kpiValueRt>;

const outgoingInvoiceRt = rt
  .Record({
    InvoiceType: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ISPOrganizationNumber: rt.String,
    CreatedBy: rt.String,
    RecipientOrganizationNumber: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    RecipientPhoneNumber: rt.String,
    Status: rt.Number,
    InvoiceID: rt.Number,
    StatusCode: rt.Number,
    DueDate: rt.String,
    MetaJson: rt.String,
    Amount: rt.Number,
    ExternalReference: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type OutgoingInvoice = rt.Static<typeof outgoingInvoiceRt>;

const processFileLogRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CompanyKey: rt.String,
    EntityName: rt.String,
    FileID: rt.Number,
    CreatedBy: rt.String,
    FileType: rt.Number,
    UserIdentity: rt.String,
    CreatedAt: rt.String,
    CompanyID: rt.Number,
    CompanyName: rt.String,
    EntityCount: rt.Number,
    StatusCode: rt.Number,
    Message: rt.String,
    FileName: rt.String,
    UpdatedBy: rt.String,
    EntityInstanceID: rt.String,
    Company: companyRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ProcessFileLog = rt.Static<typeof processFileLogRt>;

const userVerificationRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    CompanyId: rt.Number,
    UserId: rt.Number,
    StatusCode: rt.Number,
    ExpirationDate: rt.String,
    VerificationCode: rt.String,
    VerificationDate: rt.String,
    DisplayName: rt.String,
    UserType: rt.String,
    UpdatedBy: rt.String,
    RequestOrigin: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UserVerification = rt.Static<typeof userVerificationRt>;

const altinnAccountLinkRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountNumber: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AccountingType: rt.Number,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    AltinnAccountNumber: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnAccountLink = rt.Static<typeof altinnAccountLinkRt>;

const approvalDataRt = rt
  .Record({
    EntityID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityName: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EntityReference: rt.String,
    IPAddress: rt.String,
    EntityCount: rt.Number,
    VerificationMethod: rt.String,
    VerificationReference: rt.String,
    UpdatedBy: rt.String,
    EntityHash: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ApprovalData = rt.Static<typeof approvalDataRt>;

const depreciationLineRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AssetJELineID: rt.Number,
    StatusCode: rt.Number,
    DepreciationJELineID: rt.Number,
    DepreciationType: rt.Number,
    UpdatedBy: rt.String,
    AssetID: rt.Number,
    DepreciationJELine: journalEntryLineRt,
    AssetJELine: journalEntryLineRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DepreciationLine = rt.Static<typeof depreciationLineRt>;

const assetRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Kommunenr: rt.String,
    PurchaseAmount: rt.Number,
    NetFinancialValue: rt.Number,
    IBValue1984: rt.Number,
    Bnr: rt.Number,
    ScrapValue: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    LowerDepreciationValue: rt.Number,
    Lifetime: rt.Number,
    HistoricalCostPrice: rt.Number,
    DimensionsID: rt.Number,
    AssetGroupCode: rt.String,
    StatusCode: rt.Number,
    BalanceAccountID: rt.Number,
    Name: rt.String,
    PurchaseDate: rt.String,
    AutoDepreciation: rt.Boolean,
    IncomingFinancialValue: rt.Number,
    UpdatedBy: rt.String,
    Gnr: rt.Number,
    DepreciationCycle: rt.Number,
    DepreciationStartDate: rt.String,
    DepreciationAccountID: rt.Number,
    BalanceAccount: accountRt,
    DepreciationAccount: accountRt,
    Dimensions: dimensionsRt,
    DepreciationLines: rt.Array(depreciationLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Asset = rt.Static<typeof assetRt>;

const assetTaxbasedIBRt = rt
  .Record({
    GroupCode: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Value: rt.Number,
    PurchaseAmount: rt.Number,
    TaxbasedDepreciation: rt.Number,
    TaxBasedUB: rt.Number,
    Movement: rt.Number,
    CreatedBy: rt.String,
    DepreciationRate: rt.Number,
    CreatedAt: rt.String,
    PurchaseYear: rt.Number,
    StatusCode: rt.Number,
    Name: rt.String,
    Year: rt.Number,
    UpdatedBy: rt.String,
    AssetID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AssetTaxbasedIB = rt.Static<typeof assetTaxbasedIBRt>;

const bankRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EmailID: rt.Number,
    BIC: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Web: rt.String,
    InitialBIC: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    PhoneID: rt.Number,
    AddressID: rt.Number,
    UpdatedBy: rt.String,
    Address: addressRt,
    Phone: phoneRt,
    Email: emailRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Bank = rt.Static<typeof bankRt>;

const bankIntegrationAgreementRt = rt
  .Record({
    HasOrderedIntegrationChange: rt.Boolean,
    Deleted: rt.Boolean,
    PropertiesJson: rt.String,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ServiceProvider: rt.Number,
    IsBankBalance: rt.Boolean,
    PreApprovedBankPayments: rt.String,
    Email: rt.String,
    IsInbound: rt.Boolean,
    DefaultAgreement: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    IsOutgoing: rt.Boolean,
    ServiceID: rt.String,
    StatusCode: rt.Number,
    BankAccountID: rt.Number,
    HasNewAccountInformation: rt.Boolean,
    Name: rt.String,
    UpdatedBy: rt.String,
    BankAcceptance: rt.Boolean,
    ServiceTemplateID: rt.String,
    BankAccount: bankAccountRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankIntegrationAgreement = rt.Static<typeof bankIntegrationAgreementRt>;

const bankRuleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Rule: rt.String,
    IsActive: rt.Boolean,
    CreatedBy: rt.String,
    ActionCode: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Priority: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankRule = rt.Static<typeof bankRuleRt>;

const bankStatementEntryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    StructuredReference: rt.String,
    InvoiceNumber: rt.String,
    Category: rt.String,
    CreatedBy: rt.String,
    SenderName: rt.String,
    CreatedAt: rt.String,
    OpenAmountCurrency: rt.Number,
    TransactionId: rt.String,
    ValueDate: rt.String,
    StatusCode: rt.Number,
    BookingDate: rt.String,
    AmountCurrency: rt.Number,
    SenderAccount: rt.String,
    CurrencyCode: rt.String,
    ArchiveReference: rt.String,
    Receivername: rt.String,
    CID: rt.String,
    Amount: rt.Number,
    StatementID: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    OpenAmount: rt.Number,
    BankStatementID: rt.Number,
    ReceiverAccount: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankStatementEntry = rt.Static<typeof bankStatementEntryRt>;

const bankStatementRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    FileID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    EndBalance: rt.Number,
    StatusCode: rt.Number,
    BankAccountID: rt.Number,
    StartBalance: rt.Number,
    ToDate: rt.String,
    AmountCurrency: rt.Number,
    CurrencyCode: rt.String,
    ArchiveReference: rt.String,
    Amount: rt.Number,
    StatementID: rt.String,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    FromDate: rt.String,
    Entries: rt.Array(bankStatementEntryRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankStatement = rt.Static<typeof bankStatementRt>;

const bankStatementMatchRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Batch: rt.String,
    StatusCode: rt.Number,
    Amount: rt.Number,
    Group: rt.String,
    JournalEntryLineID: rt.Number,
    UpdatedBy: rt.String,
    BankStatementEntryID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankStatementMatch = rt.Static<typeof bankStatementMatchRt>;

const bankStatementRuleRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Rule: rt.String,
    IsActive: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    Priority: rt.Number,
    Name: rt.String,
    EntryText: rt.String,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankStatementRule = rt.Static<typeof bankStatementRuleRt>;

const budgetEntryRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PeriodNumber: rt.Number,
    BudgetID: rt.Number,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    AccountID: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BudgetEntry = rt.Static<typeof budgetEntryRt>;

const budgetRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    AccountingYear: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    Entries: rt.Array(budgetEntryRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Budget = rt.Static<typeof budgetRt>;

const companyAccountingSettingsRt = rt
  .Record({
    AssetSaleProfitNoVatAccountID: rt.Number,
    AssetSaleProductID: rt.Number,
    AssetSaleLossNoVatAccountID: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AssetSaleProfitVatAccountID: rt.Number,
    CreatedBy: rt.String,
    AssetSaleProfitBalancingAccountID: rt.Number,
    CreatedAt: rt.String,
    ReInvoicingCostsharingProductID: rt.Number,
    ReInvoicingMethod: rt.Number,
    StatusCode: rt.Number,
    ReInvoicingTurnoverProductID: rt.Number,
    AssetSaleLossVatAccountID: rt.Number,
    AssetWriteoffAccountID: rt.Number,
    UpdatedBy: rt.String,
    AssetSaleLossBalancingAccountID: rt.Number,
    ReInvoicingCostsharingProduct: productRt,
    ReInvoicingTurnoverProduct: productRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyAccountingSettings = rt.Static<typeof companyAccountingSettingsRt>;

const companyBankAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    IsSalary: rt.Boolean,
    IsTax: rt.Boolean,
    CreatedAt: rt.String,
    IsOutgoing: rt.Boolean,
    StatusCode: rt.Number,
    BankAccountID: rt.Number,
    Name: rt.String,
    CreditAmount: rt.Number,
    UpdatedBy: rt.String,
    IsIncomming: rt.Boolean,
    AccountID: rt.Number,
    BankAccount: bankAccountRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyBankAccount = rt.Static<typeof companyBankAccountRt>;

const customLiquidityPaymentRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    IsCustomerPayment: rt.Boolean,
    StatusCode: rt.Number,
    AmountCurrency: rt.Number,
    DueDate: rt.String,
    EndDate: rt.String,
    CustomLiquidityPaymentType: rt.String,
    Amount: rt.Number,
    UpdatedBy: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomLiquidityPayment = rt.Static<typeof customLiquidityPaymentRt>;

const financialYearRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    ValidTo: rt.String,
    StatusCode: rt.Number,
    Year: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FinancialYear = rt.Static<typeof financialYearRt>;

const journalEntryModeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ColumnSetUp: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    TraceLinkTypes: rt.String,
    StatusCode: rt.Number,
    VisibleModules: rt.String,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntryMode = rt.Static<typeof journalEntryModeRt>;

const journalEntrySourceSerieRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    JournalEntrySourceID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntrySourceSerie = rt.Static<typeof journalEntrySourceSerieRt>;

const journalEntryTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Number: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    MainName: rt.String,
    DisplayName: rt.String,
    Name: rt.String,
    ExpectNegativeAmount: rt.Boolean,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntryType = rt.Static<typeof journalEntryTypeRt>;

const ledgerSuggestionRt = rt
  .Record({
    ID: rt.Number,
    Source: rt.String,
    IndustryCode: rt.String,
    Name: rt.String,
    IndustryName: rt.String,
    OrgNumber: rt.String,
    BusinessType: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type LedgerSuggestion = rt.Static<typeof ledgerSuggestionRt>;

const paymentBatchRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    TotalAmount: rt.Number,
    CreatedBy: rt.String,
    Camt054CMsgId: rt.String,
    CreatedAt: rt.String,
    IsCustomerPayment: rt.Boolean,
    PaymentReferenceID: rt.String,
    PaymentStatusReportFileID: rt.Number,
    PaymentFileID: rt.Number,
    OcrHeadingStrings: rt.String,
    StatusCode: rt.Number,
    NumberOfPayments: rt.Number,
    ReceiptDate: rt.String,
    OcrTransmissionNumber: rt.Number,
    TransferredDate: rt.String,
    HashValue: rt.String,
    UpdatedBy: rt.String,
    PaymentBatchTypeID: rt.Number,
    Payments: rt.Array(paymentRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentBatch = rt.Static<typeof paymentBatchRt>;

const postPostRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CurrencyCodeID: rt.Number,
    Date: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    JournalEntryLine2ID: rt.Number,
    CurrencyExchangeRate: rt.Number,
    StatusCode: rt.Number,
    AmountCurrency: rt.Number,
    Amount: rt.Number,
    JournalEntryLine1ID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PostPost = rt.Static<typeof postPostRt>;

const vatDeductionRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    VatDeductionGroupID: rt.Number,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    ValidTo: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    DeductionPercent: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatDeduction = rt.Static<typeof vatDeductionRt>;

const vatDeductionGroupRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatDeductionGroup = rt.Static<typeof vatDeductionGroupRt>;

const vatPostRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    VatCodeGroupID: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    HasTaxAmount: rt.Boolean,
    No: rt.String,
    StatusCode: rt.Number,
    HasTaxBasis: rt.Boolean,
    ReportAsNegativeAmount: rt.Boolean,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatPost = rt.Static<typeof vatPostRt>;

const vatReportTypeRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportType = rt.Static<typeof vatReportTypeRt>;

const vatReportRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Comment: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    TerminPeriodID: rt.Number,
    ReportedDate: rt.String,
    StatusCode: rt.Number,
    VatReportTypeID: rt.Number,
    UpdatedBy: rt.String,
    InternalComment: rt.String,
    ExternalRefNo: rt.String,
    ExecutedDate: rt.String,
    Title: rt.String,
    JournalEntryID: rt.Number,
    VatReportArchivedSummaryID: rt.Number,
    VatReportType: vatReportTypeRt,
    JournalEntry: journalEntryRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReport = rt.Static<typeof vatReportRt>;

const vatReportArchivedSummaryRt = rt
  .Record({
    Deleted: rt.Boolean,
    PaymentToDescription: rt.String,
    ID: rt.Number,
    UpdatedAt: rt.String,
    PaymentPeriod: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    AmountToBeReceived: rt.Number,
    PaymentYear: rt.Number,
    PaymentDueDate: rt.String,
    SummaryHeader: rt.String,
    PaymentID: rt.String,
    ReportName: rt.String,
    StatusCode: rt.Number,
    UpdatedBy: rt.String,
    AmountToBePayed: rt.Number,
    PaymentBankAccountNumber: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportArchivedSummary = rt.Static<typeof vatReportArchivedSummaryRt>;

const reconcileAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    ApprovedAt: rt.String,
    Comment: rt.String,
    HasAttachements: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    ReconcileID: rt.Number,
    StatusCode: rt.Number,
    Balance: rt.Number,
    UpdatedBy: rt.String,
    ApprovedBy: rt.String,
    AccountID: rt.Number,
    IsApproved: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReconcileAccount = rt.Static<typeof reconcileAccountRt>;

const reconcileRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IntervalNumber: rt.Number,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    ToDate: rt.String,
    ReconcileType: rt.String,
    Interval: rt.String,
    UpdatedBy: rt.String,
    AccountYear: rt.Number,
    FromDate: rt.String,
    Accounts: rt.Array(reconcileAccountRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Reconcile = rt.Static<typeof reconcileRt>;

const annualSettlementCheckListRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    IsAllCustomerInvoicesPaid: rt.Boolean,
    CreatedBy: rt.String,
    IsAmeldingOK: rt.Boolean,
    CreatedAt: rt.String,
    IsAllJournalsDone: rt.Boolean,
    StatusCode: rt.Number,
    AreAllPreviousYearsEndedAndBalances: rt.Boolean,
    IsOnAllowList: rt.Boolean,
    IsAssetsOK: rt.Boolean,
    IsStockOK: rt.Boolean,
    IsShareCapitalOK: rt.Boolean,
    UpdatedBy: rt.String,
    IsAllSupplierInvoicesPaid: rt.Boolean,
    IsVatReportOK: rt.Boolean,
    IsCalculativeDepreciationsOK: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualSettlementCheckList = rt.Static<typeof annualSettlementCheckListRt>;

const annualSettlementRt = rt
  .Record({
    Deleted: rt.Boolean,
    AnnualSettlementJSONData: rt.String,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SkjermingsfradragBasisJSONData: rt.String,
    CreatedBy: rt.String,
    TransportJSONData: rt.String,
    CreatedAt: rt.String,
    ReconcileID: rt.Number,
    ValidationResponse: rt.String,
    AnnualSettlementCheckListID: rt.Number,
    StatusCode: rt.Number,
    SendStatus: rt.String,
    UpdatedBy: rt.String,
    AccountYear: rt.Number,
    Type: rt.Number,
    AutoJournalPostPonedTax: rt.Boolean,
    JournalEntryID: rt.Number,
    ReceiptID: rt.Number,
    Reconcile: reconcileRt,
    JournalEntry: journalEntryRt,
    AnnualSettlementCheckList: annualSettlementCheckListRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualSettlement = rt.Static<typeof annualSettlementRt>;

const annualAccountNoteInfoRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Done: rt.Boolean,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PropertyName: rt.String,
    StatusCode: rt.Number,
    NoteData: rt.String,
    AnnualAccountID: rt.Number,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualAccountNoteInfo = rt.Static<typeof annualAccountNoteInfoRt>;

const annualAccountRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    SendStatus: rt.String,
    UpdatedBy: rt.String,
    AnnualSettlementID: rt.Number,
    MainFileID: rt.Number,
    ReceiptID: rt.Number,
    AnnualSettlement: annualSettlementRt,
    AnnualAccountNoteInfo: rt.Array(annualAccountNoteInfoRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualAccount = rt.Static<typeof annualAccountRt>;

const taxReportRt = rt
  .Record({
    Data: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Code: rt.String,
    StatusCode: rt.Number,
    Year: rt.Number,
    UpdatedBy: rt.String,
    AnnualSettlementID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TaxReport = rt.Static<typeof taxReportRt>;

const entityValidationRuleRt = rt
  .Record({
    Level: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Value: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PropertyName: rt.String,
    Operation: rt.String,
    Operator: rt.String,
    OnConflict: rt.String,
    System: rt.Boolean,
    SyncKey: rt.String,
    ChangedByCompany: rt.Boolean,
    Message: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EntityValidationRule = rt.Static<typeof entityValidationRuleRt>;

const entityValidationRuleTemplateRt = rt
  .Record({
    Level: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Value: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    PropertyName: rt.String,
    Operation: rt.String,
    Operator: rt.String,
    OnConflict: rt.String,
    System: rt.Boolean,
    SyncKey: rt.String,
    ChangedByCompany: rt.Boolean,
    Message: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EntityValidationRuleTemplate = rt.Static<
  typeof entityValidationRuleTemplateRt
>;

const complexValidationRuleRt = rt
  .Record({
    Level: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Operation: rt.String,
    OnConflict: rt.String,
    ValidationCode: rt.Number,
    System: rt.Boolean,
    SyncKey: rt.String,
    ChangedByCompany: rt.Boolean,
    Message: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ComplexValidationRule = rt.Static<typeof complexValidationRuleRt>;

const complexValidationRuleTemplateRt = rt
  .Record({
    Level: rt.String,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Operation: rt.String,
    OnConflict: rt.String,
    ValidationCode: rt.Number,
    System: rt.Boolean,
    SyncKey: rt.String,
    ChangedByCompany: rt.Boolean,
    Message: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ComplexValidationRuleTemplate = rt.Static<
  typeof complexValidationRuleTemplateRt
>;

const customFieldRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Nullable: rt.Boolean,
    ModelID: rt.Number,
    DataType: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    StatusCode: rt.Number,
    Name: rt.String,
    UpdatedBy: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomField = rt.Static<typeof customFieldRt>;

type ValueItem = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  Value?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  Code?: string;
  Index?: number;
  ValueListID?: number;
  Name?: string;
  UpdatedBy?: string;
  Description?: string;
  ValueList?: ValueList;
  CustomValues?: CustomValues;
};

const valueItemRt: rt.Runtype<ValueItem> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      Value: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Code: rt.String,
      Index: rt.Number,
      ValueListID: rt.Number,
      Name: rt.String,
      UpdatedBy: rt.String,
      Description: rt.String,
      ValueList: valueListRt,
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

type ValueList = {
  Deleted?: boolean;
  ID?: number;
  UpdatedAt?: string;
  CreatedBy?: string;
  CreatedAt?: string;
  Code?: string;
  Name?: string;
  UpdatedBy?: string;
  Description?: string;
  Items?: ValueItem[];
  CustomValues?: CustomValues;
};

const valueListRt: rt.Runtype<ValueList> = rt.Lazy(() =>
  rt
    .Record({
      Deleted: rt.Boolean,
      ID: rt.Number,
      UpdatedAt: rt.String,
      CreatedBy: rt.String,
      CreatedAt: rt.String,
      Code: rt.String,
      Name: rt.String,
      UpdatedBy: rt.String,
      Description: rt.String,
      Items: rt.Array(valueItemRt),
      CustomValues: customValuesRt,
    })
    .asPartial(),
);

const fieldLayoutDtoRt = rt
  .Record({
    Section: rt.Number,
    Deleted: rt.Boolean,
    ID: rt.Number,
    Options: rt.String,
    UpdatedAt: rt.String,
    EntityType: rt.String,
    Hidden: rt.Boolean,
    Combo: rt.Number,
    Placement: rt.Number,
    ComponentLayoutID: rt.Number,
    Placeholder: rt.String,
    Url: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    Property: rt.String,
    Legend: rt.String,
    StatusCode: rt.Number,
    LineBreak: rt.Boolean,
    DisplayField: rt.String,
    Label: rt.String,
    Alignment: rt.String,
    LookupEntityType: rt.String,
    FieldSet: rt.Number,
    ValueList: rt.String,
    Width: rt.String,
    Sectionheader: rt.String,
    FieldType: rt.String,
    UpdatedBy: rt.String,
    Description: rt.String,
    HelpText: rt.String,
    LookupField: rt.Boolean,
    ReadOnly: rt.Boolean,
    Validations: rt.Array(entityValidationRuleRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type FieldLayoutDto = rt.Static<typeof fieldLayoutDtoRt>;

const componentLayoutDtoRt = rt
  .Record({
    Url: rt.String,
    BaseEntity: rt.String,
    Name: rt.String,
    Fields: rt.Array(fieldLayoutDtoRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ComponentLayoutDto = rt.Static<typeof componentLayoutDtoRt>;

const assignmentDetailsRt = rt
  .Record({ Message: rt.String, CustomValues: customValuesRt })
  .asPartial();

type AssignmentDetails = rt.Static<typeof assignmentDetailsRt>;

const timeSheetItemRt = rt
  .Record({
    WeekNumber: rt.Number,
    Overtime: rt.Number,
    SickTime: rt.Number,
    Date: rt.String,
    Status: rt.String,
    ValidTimeOff: rt.Number,
    WeekDay: rt.Number,
    Invoicable: rt.Number,
    Workflow: rt.String,
    IsWeekend: rt.Boolean,
    StartTime: rt.String,
    ExpectedTime: rt.Number,
    ValidTime: rt.Number,
    TotalTime: rt.Number,
    TimeOff: rt.Number,
    Flextime: rt.Number,
    EndTime: rt.String,
    Projecttime: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TimeSheetItem = rt.Static<typeof timeSheetItemRt>;

const timeSheetRt = rt
  .Record({
    Workflow: rt.String,
    ToDate: rt.String,
    FromDate: rt.String,
    Relation: workRelationRt,
    Items: rt.Array(timeSheetItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type TimeSheet = rt.Static<typeof timeSheetRt>;

const balanceInfoRt = rt
  .Record({
    ID: rt.Number,
    BalanceDate: rt.String,
    Minutes: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BalanceInfo = rt.Static<typeof balanceInfoRt>;

const flexDetailRt = rt
  .Record({
    Date: rt.String,
    ValidTimeOff: rt.Number,
    IsWeekend: rt.Boolean,
    WorkedMinutes: rt.Number,
    ExpectedMinutes: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FlexDetail = rt.Static<typeof flexDetailRt>;

const workBalanceDtoRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    SumOvertime: rt.Number,
    Balancetype: rt.String,
    CreatedBy: rt.String,
    ValidFrom: rt.String,
    CreatedAt: rt.String,
    IsStartBalance: rt.Boolean,
    Days: rt.Number,
    LastDayExpected: rt.Number,
    ValidTimeOff: rt.Number,
    BalanceFrom: rt.String,
    StatusCode: rt.Number,
    BalanceDate: rt.String,
    Minutes: rt.Number,
    UpdatedBy: rt.String,
    LastDayActual: rt.Number,
    WorkRelationID: rt.Number,
    ActualMinutes: rt.Number,
    Description: rt.String,
    ExpectedMinutes: rt.Number,
    WorkRelation: workRelationRt,
    Previous: balanceInfoRt,
    Details: rt.Array(flexDetailRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkBalanceDto = rt.Static<typeof workBalanceDtoRt>;

const contactSearchServiceResponseRt = rt
  .Record({
    ObjectName: rt.String,
    ErrorMessage: rt.String,
    Success: rt.Boolean,
    Method: rt.String,
    ErrorCode: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContactSearchServiceResponse = rt.Static<
  typeof contactSearchServiceResponseRt
>;

const campaignTemplateDataModelRt = rt
  .Record({
    CompanySettings: companySettingsRt,
    Invoice: customerInvoiceRt,
    Order: customerOrderRt,
    Quote: customerQuoteRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CampaignTemplateDataModel = rt.Static<typeof campaignTemplateDataModelRt>;

const iActionResultRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type IActionResult = rt.Static<typeof iActionResultRt>;

const invoiceAndReminderStatusRt = rt
  .Record({
    CurrencyCodeID: rt.Number,
    CurrencyCodeShortCode: rt.String,
    InvoiceNumber: rt.Number,
    NextReminderType: rt.Number,
    LastReminderType: rt.Number,
    LastRemindedDate: rt.String,
    InvoiceEmailAddress: rt.String,
    DebtCollectionCount: rt.Number,
    TaxInclusiveAmount: rt.Number,
    CustomerName: rt.String,
    LastDistributionStatusCode: rt.Number,
    TotalFeeCurrency: rt.Number,
    CurrencyExchangeRate: rt.Number,
    DepartmentName: rt.String,
    ProjectName: rt.String,
    CustomerInvoiceID: rt.Number,
    RestAmountInclFeeAndInterest: rt.Number,
    RestAmountInclFeeAndInterestCurrency: rt.Number,
    TaxInclusiveAmountCurrency: rt.Number,
    InvoiceDate: rt.String,
    StatusCode: rt.Number,
    ReminderCount: rt.Number,
    CustomerNumber: rt.Number,
    NextDueDate: rt.String,
    RestAmount: rt.Number,
    TotalInterestFeeCurrency: rt.Number,
    ProjectNumber: rt.String,
    Fee: rt.Number,
    CreateNextReminderDate: rt.String,
    TotalInterestFee: rt.Number,
    CustomerID: rt.Number,
    NextReminderNumber: rt.Number,
    CustomerEmailAddress: rt.String,
    LastReminderID: rt.Number,
    ExternalReference: rt.String,
    TotalFee: rt.Number,
    RestAmountCurrency: rt.Number,
    LastReminderNumber: rt.Number,
    DepartmentNumber: rt.String,
    DontSendReminders: rt.Boolean,
    InvoicePaymentDueDate: rt.String,
    CurrencyCodeCode: rt.String,
    FeeCurrency: rt.Number,
    DebtCollectionNoticeCount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type InvoiceAndReminderStatus = rt.Static<typeof invoiceAndReminderStatusRt>;

const invoicesAndRemindersReadyToRemindRt = rt
  .Record({
    CurrencyCodeID: rt.Number,
    Interest: rt.Number,
    CurrencyCodeShortCode: rt.String,
    InvoiceNumber: rt.Number,
    TaxInclusiveAmount: rt.Number,
    CustomerName: rt.String,
    CurrencyExchangeRate: rt.Number,
    CustomerInvoiceID: rt.Number,
    TaxInclusiveAmountCurrency: rt.Number,
    InvoiceDate: rt.String,
    StatusCode: rt.Number,
    CustomerNumber: rt.Number,
    RestAmount: rt.Number,
    Fee: rt.Number,
    DueDate: rt.String,
    CustomerID: rt.Number,
    CustomerInvoiceReminderID: rt.Number,
    ReminderNumber: rt.Number,
    ExternalReference: rt.String,
    RestAmountCurrency: rt.Number,
    DontSendReminders: rt.Boolean,
    EmailAddress: rt.String,
    CurrencyCodeCode: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type InvoicesAndRemindersReadyToRemind = rt.Static<
  typeof invoicesAndRemindersReadyToRemindRt
>;

const prerunInvoiceReminderResultRuleRt = rt
  .Record({
    Reminders: rt.Number,
    ReminderNumber: rt.Number,
    RuleTitle: rt.String,
    ReminderRuleType: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PrerunInvoiceReminderResultRule = rt.Static<
  typeof prerunInvoiceReminderResultRuleRt
>;

const prerunInvoiceReminderResultRt = rt
  .Record({
    NotDueInvoices: rt.Number,
    InvoicesWithReminderStop: rt.Number,
    InvoicesWithNoMoreRules: rt.Number,
    Rules: rt.Array(prerunInvoiceReminderResultRuleRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type PrerunInvoiceReminderResult = rt.Static<
  typeof prerunInvoiceReminderResultRt
>;

const canDistributeReminderResultRt = rt
  .Record({
    RemindersWithDistributionPlan: rt.Number,
    HasPrintService: rt.Boolean,
    RemindersWithEmail: rt.Number,
    CanDistributeAllRemindersUsingPlan: rt.Boolean,
    RemindersWithPrint: rt.Number,
    AlreadySentCount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CanDistributeReminderResult = rt.Static<
  typeof canDistributeReminderResultRt
>;

const distributeInvoiceReminderInputRt = rt
  .Record({
    SendByPrintServiceIfPossible: rt.Boolean,
    SendByEmailIfPossible: rt.Boolean,
    SendByDistributionPlanFirst: rt.Boolean,
    SendRemainingToCasehandler: rt.Boolean,
    CasehandlerEmail: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributeInvoiceReminderInput = rt.Static<
  typeof distributeInvoiceReminderInputRt
>;

const tradeHeaderCalculationSummaryRt = rt
  .Record({
    SumVatBasisCurrency: rt.Number,
    SumVatCurrency: rt.Number,
    SumTotalExVatCurrency: rt.Number,
    SumDiscount: rt.Number,
    DecimalRoundingCurrency: rt.Number,
    SumTotalIncVat: rt.Number,
    DecimalRounding: rt.Number,
    SumDiscountCurrency: rt.Number,
    SumVat: rt.Number,
    SumNoVatBasisCurrency: rt.Number,
    SumTotalIncVatCurrency: rt.Number,
    SumTotalExVat: rt.Number,
    SumNoVatBasis: rt.Number,
    SumVatBasis: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TradeHeaderCalculationSummary = rt.Static<
  typeof tradeHeaderCalculationSummaryRt
>;

const vatCalculationSummaryRt = rt
  .Record({
    SumVatBasisCurrency: rt.Number,
    SumVatCurrency: rt.Number,
    SumVat: rt.Number,
    SumVatBasis: rt.Number,
    VatPercent: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatCalculationSummary = rt.Static<typeof vatCalculationSummaryRt>;

const invoicePaymentDataRt = rt
  .Record({
    CurrencyCodeID: rt.Number,
    AgioAmount: rt.Number,
    CurrencyExchangeRate: rt.Number,
    PaymentID: rt.String,
    BankChargeAccountID: rt.Number,
    DimensionsID: rt.Number,
    AmountCurrency: rt.Number,
    PaymentDate: rt.String,
    FromBankAccountID: rt.Number,
    Amount: rt.Number,
    AgioAccountID: rt.Number,
    BankChargeAmount: rt.Number,
    AccountID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type InvoicePaymentData = rt.Static<typeof invoicePaymentDataRt>;

const invoiceSummaryRt = rt
  .Record({
    SumCreditedAmount: rt.Number,
    SumTotalAmount: rt.Number,
    SumRestAmount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type InvoiceSummary = rt.Static<typeof invoiceSummaryRt>;

const customerNoAndNameRt = rt
  .Record({ Number: rt.String, Name: rt.String, CustomValues: customValuesRt })
  .asPartial();

type CustomerNoAndName = rt.Static<typeof customerNoAndNameRt>;

const invoicePaymentRt = rt
  .Record({
    AmountCurrency: rt.Number,
    FinancialDate: rt.String,
    Amount: rt.Number,
    JournalEntryNumber: rt.String,
    JournalEntryLineID: rt.Number,
    Description: rt.String,
    JournalEntryID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type InvoicePayment = rt.Static<typeof invoicePaymentRt>;

const reasonRt = rt
  .Record({
    ReasonHelpLink: rt.String,
    ReasonDescription: rt.String,
    ReasonCode: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Reason = rt.Static<typeof reasonRt>;

const amountDetailRt = rt
  .Record({
    Currency: rt.String,
    Amount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmountDetail = rt.Static<typeof amountDetailRt>;

const limitsRt = rt
  .Record({
    RemainingLimit: rt.Number,
    MaxInvoiceAmount: rt.Number,
    Limit: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Limits = rt.Static<typeof limitsRt>;

const orderOfferRt = rt
  .Record({
    CostPercentage: rt.Number,
    Status: rt.String,
    Message: rt.String,
    OrderId: rt.String,
    Reasons: rt.Array(reasonRt),
    PurchaseAmount: amountDetailRt,
    InvoiceAmount: amountDetailRt,
    FinancialCost: amountDetailRt,
    Fee: amountDetailRt,
    TotalCost: amountDetailRt,
    DisbursementAmount: amountDetailRt,
    Limits: limitsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type OrderOffer = rt.Static<typeof orderOfferRt>;

const ameldingAgaAndTaxSumsRt = rt
  .Record({
    AccountNumber: rt.String,
    KIDFinancialTax: rt.String,
    MessageID: rt.String,
    GarnishmentTax: rt.Number,
    period: rt.Number,
    KIDGarnishment: rt.String,
    TaxDraw: rt.Number,
    DueDate: rt.String,
    KIDEmploymentTax: rt.String,
    KIDTaxDraw: rt.String,
    FinancialTax: rt.Number,
    EmploymentTax: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmeldingAgaAndTaxSums = rt.Static<typeof ameldingAgaAndTaxSumsRt>;

const payrollRunInAmeldingPeriodRt = rt
  .Record({
    PayrollrunDescription: rt.String,
    PayrollrunPaydate: rt.String,
    CanGenerateAddition: rt.Boolean,
    AmeldingSentdate: rt.String,
    PayrollrunID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PayrollRunInAmeldingPeriod = rt.Static<
  typeof payrollRunInAmeldingPeriodRt
>;

const payAgaTaxDTORt = rt
  .Record({
    correctPennyDiff: rt.Boolean,
    payDate: rt.String,
    payFinancialTax: rt.Boolean,
    payGarnishment: rt.Boolean,
    payAga: rt.Boolean,
    payTaxDraw: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PayAgaTaxDTO = rt.Static<typeof payAgaTaxDTORt>;

const validationMessageRt = rt
  .Record({
    Level: rt.String,
    EntityID: rt.Number,
    ID: rt.Number,
    EntityType: rt.String,
    PropertyName: rt.String,
    Message: rt.String,
    EntityValidationRule: entityValidationRuleRt,
    ComplexValidationRule: complexValidationRuleRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ValidationMessage = rt.Static<typeof validationMessageRt>;

const sumsRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type Sums = rt.Static<typeof sumsRt>;

const employmentLeavesRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type EmploymentLeaves = rt.Static<typeof employmentLeavesRt>;

const employmentsRt = rt
  .Record({
    permisjon: rt.Array(employmentLeavesRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Employments = rt.Static<typeof employmentsRt>;

const employeesRt = rt
  .Record({
    arbeidsforhold: rt.Array(employmentsRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Employees = rt.Static<typeof employeesRt>;

const transactionTypesRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type TransactionTypes = rt.Static<typeof transactionTypesRt>;

const ameldingEntityRt = rt
  .Record({
    sums: sumsRt,
    employees: rt.Array(employeesRt),
    transactionTypes: rt.Array(transactionTypesRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmeldingEntity = rt.Static<typeof ameldingEntityRt>;

const aGADetailsRt = rt
  .Record({
    zoneName: rt.String,
    baseAmount: rt.Number,
    sectorName: rt.String,
    type: rt.String,
    rate: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGADetails = rt.Static<typeof aGADetailsRt>;

const totalsRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type Totals = rt.Static<typeof totalsRt>;

const ameldingSumUpRt = rt
  .Record({
    entities: rt.Array(ameldingEntityRt),
    agadetails: rt.Array(aGADetailsRt),
    totals: totalsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AmeldingSumUp = rt.Static<typeof ameldingSumUpRt>;

const supplementInfoRt = rt
  .Record({
    ValueBool: rt.Boolean,
    ValueType: rt.String,
    ValueMoney: rt.Number,
    ValueDate: rt.String,
    Name: rt.String,
    ValueDate2: rt.String,
    WageTypeSupplementID: rt.Number,
    ValueString: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SupplementInfo = rt.Static<typeof supplementInfoRt>;

const annualStatementLineRt = rt
  .Record({
    TaxReturnPost: rt.String,
    LineIndex: rt.Number,
    SupplementPackageName: rt.String,
    IsDeduction: rt.Boolean,
    Sum: rt.Number,
    Amount: rt.Number,
    Description: rt.String,
    Supplements: rt.Array(supplementInfoRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualStatementLine = rt.Static<typeof annualStatementLineRt>;

const annualStatementRt = rt
  .Record({
    EmployerCountryCode: rt.String,
    EmployerWebAddress: rt.String,
    EmployeeSSn: rt.String,
    EmployerEmail: rt.String,
    EmployerCity: rt.String,
    EmployeeName: rt.String,
    VacationPayBase: rt.Number,
    EmployeeAddress: rt.String,
    EmployerTaxMandatory: rt.Boolean,
    EmployerName: rt.String,
    EmployerOrgNr: rt.String,
    EmployeeCity: rt.String,
    EmployeeMunicipalNumber: rt.String,
    EmployerAddress: rt.String,
    EmployeeNumber: rt.Number,
    EmployerPostCode: rt.String,
    Year: rt.Number,
    EmployerCountry: rt.String,
    EmployeeMunicipalName: rt.String,
    EmployeePostCode: rt.String,
    EmployerPhoneNumber: rt.String,
    Contributions: rt.Array(annualStatementLineRt),
    PensionOrBenefits: rt.Array(annualStatementLineRt),
    Deductions: rt.Array(annualStatementLineRt),
    Draws: rt.Array(annualStatementLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualStatement = rt.Static<typeof annualStatementRt>;

const annualStatementEmailInfoRt = rt
  .Record({
    Subject: rt.String,
    Message: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualStatementEmailInfo = rt.Static<typeof annualStatementEmailInfoRt>;

const annualStatementReportSetupRt = rt
  .Record({ Mail: annualStatementEmailInfoRt, CustomValues: customValuesRt })
  .asPartial();

type AnnualStatementReportSetup = rt.Static<
  typeof annualStatementReportSetupRt
>;

const handleStateRt = rt
  .Record({ inState: rt.String, CustomValues: customValuesRt })
  .asPartial();

type HandleState = rt.Static<typeof handleStateRt>;

const fieldsChangedRt = rt
  .Record({
    valFrom: rt.String,
    valTo: rt.String,
    fieldName: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type FieldsChanged = rt.Static<typeof fieldsChangedRt>;

const employeeStatusRt = rt
  .Record({
    ssn: rt.String,
    status: rt.String,
    employeeID: rt.Number,
    employeeNumber: rt.Number,
    year: rt.Number,
    info: rt.String,
    changedFields: rt.Array(fieldsChangedRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmployeeStatus = rt.Static<typeof employeeStatusRt>;

const taxCardReadStatusRt = rt
  .Record({
    Text: rt.String,
    mainStatus: rt.String,
    IsJob: rt.Boolean,
    Title: rt.String,
    employeestatus: rt.Array(employeeStatusRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type TaxCardReadStatus = rt.Static<typeof taxCardReadStatusRt>;

const employmentHistoryRecordRt = rt
  .Record({
    RegulativeStepNr: rt.Number,
    HourRate: rt.Number,
    MonthRate: rt.Number,
    RegulativeGroupID: rt.Number,
    WorkPercent: rt.Number,
    ChangedAt: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmploymentHistoryRecord = rt.Static<typeof employmentHistoryRecordRt>;

const codeListRowsCodeListRowRt = rt
  .Record({
    Value2: rt.String,
    Code: rt.String,
    Value1: rt.String,
    Value3: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CodeListRowsCodeListRow = rt.Static<typeof codeListRowsCodeListRowRt>;

const monthlyPayRt = rt
  .Record({
    BasicPay: rt.Number,
    PeriodText: rt.String,
    Period: rt.Number,
    SalaryTransactions: rt.Array(salaryTransactionRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type MonthlyPay = rt.Static<typeof monthlyPayRt>;

const sumOnRunRt = rt
  .Record({
    tax: rt.Number,
    employeeID: rt.Number,
    grossPayment: rt.Number,
    netPayment: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SumOnRun = rt.Static<typeof sumOnRunRt>;

const sumOnYearRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type SumOnYear = rt.Static<typeof sumOnYearRt>;

const vacationPayLastYearRt = rt
  .Record({
    paidHolidayPay: rt.Number,
    baseVacation: rt.Number,
    employeeID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VacationPayLastYear = rt.Static<typeof vacationPayLastYearRt>;

const paycheckRt = rt
  .Record({
    employee: employeeRt,
    payroll: payrollRunRt,
    transactions: rt.Array(salaryTransactionRt),
    sumOnPay: sumOnRunRt,
    sumOnYear: sumOnYearRt,
    sumVacationLastYear: vacationPayLastYearRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Paycheck = rt.Static<typeof paycheckRt>;

const salaryTransactionPayLineRt = rt
  .Record({
    EmployeeName: rt.String,
    Tax: rt.Number,
    City: rt.String,
    Address: rt.String,
    PostalCode: rt.String,
    EmployeeNumber: rt.Number,
    Account: rt.String,
    NetPayment: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionPayLine = rt.Static<typeof salaryTransactionPayLineRt>;

const salaryBalancePayLineRt = rt
  .Record({
    Text: rt.String,
    Sum: rt.Number,
    Account: rt.String,
    Kid: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryBalancePayLine = rt.Static<typeof salaryBalancePayLineRt>;

const salaryTransactionPayRt = rt
  .Record({
    TaxBankAccountID: rt.Number,
    CompanyCity: rt.String,
    CompanyAddress: rt.String,
    CompanyName: rt.String,
    Withholding: rt.Number,
    CompanyBankAccountID: rt.Number,
    CompanyPostalCode: rt.String,
    PaymentDate: rt.String,
    SalaryBankAccountID: rt.Number,
    PayList: rt.Array(salaryTransactionPayLineRt),
    SalaryBalancePayList: rt.Array(salaryBalancePayLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionPay = rt.Static<typeof salaryTransactionPayRt>;

const postingSummaryRt = rt
  .Record({
    SubEntity: subEntityRt,
    PayrollRun: payrollRunRt,
    PostList: rt.Array(journalEntryLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type PostingSummary = rt.Static<typeof postingSummaryRt>;

const paycheckEmailInfoRt = rt
  .Record({
    GroupByWageType: rt.Boolean,
    Subject: rt.String,
    Message: rt.String,
    ReportID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaycheckEmailInfo = rt.Static<typeof paycheckEmailInfoRt>;

const paycheckReportSetupRt = rt
  .Record({ Mail: paycheckEmailInfoRt, CustomValues: customValuesRt })
  .asPartial();

type PaycheckReportSetup = rt.Static<typeof paycheckReportSetupRt>;

const workItemToSalaryRt = rt
  .Record({
    PayrollRunID: rt.Number,
    Rate: rt.Number,
    WageType: wageTypeRt,
    Employment: employmentRt,
    WorkItems: rt.Array(workItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type WorkItemToSalary = rt.Static<typeof workItemToSalaryRt>;

const reconciliationLineRt = rt
  .Record({
    HasEmploymentTax: rt.Boolean,
    WageTypeName: rt.String,
    IncomeType: rt.String,
    Benefit: rt.String,
    Sum: rt.Number,
    WageTypeNumber: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReconciliationLine = rt.Static<typeof reconciliationLineRt>;

const reconciliationGroupRt = rt
  .Record({
    AccountNumber: rt.String,
    Sum: rt.Number,
    Lines: rt.Array(reconciliationLineRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReconciliationGroup = rt.Static<typeof reconciliationGroupRt>;

const reconciliationRt = rt
  .Record({
    ToPeriod: rt.Number,
    BookedPayruns: rt.Number,
    CreatedPayruns: rt.Number,
    FromPeriod: rt.Number,
    CalculatedPayruns: rt.Number,
    Year: rt.Number,
    Groups: rt.Array(reconciliationGroupRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type Reconciliation = rt.Static<typeof reconciliationRt>;

const unionMemberRt = rt
  .Record({
    Ensurance: rt.Number,
    OUO: rt.Number,
    Name: rt.String,
    UnionDraw: rt.Number,
    MemberNumber: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UnionMember = rt.Static<typeof unionMemberRt>;

const unionSummaryRt = rt
  .Record({
    SupplierID: rt.Number,
    Supplier: supplierRt,
    Members: rt.Array(unionMemberRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type UnionSummary = rt.Static<typeof unionSummaryRt>;

const unionReportRt = rt
  .Record({
    ToDate: rt.String,
    Year: rt.Number,
    FromDate: rt.String,
    Summaries: rt.Array(unionSummaryRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type UnionReport = rt.Static<typeof unionReportRt>;

const salaryTransactionSumsRt = rt
  .Record({
    baseTableTax: rt.Number,
    Payrun: rt.Number,
    percentTax: rt.Number,
    baseAGA: rt.Number,
    calculatedVacationPay: rt.Number,
    baseVacation: rt.Number,
    paidAdvance: rt.Number,
    Employee: rt.Number,
    paidPension: rt.Number,
    calculatedAGA: rt.Number,
    calculatedFinancialTax: rt.Number,
    tableTax: rt.Number,
    manualTax: rt.Number,
    grossPayment: rt.Number,
    basePercentTax: rt.Number,
    netPayment: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionSums = rt.Static<typeof salaryTransactionSumsRt>;

const salaryTransactionPeriodSumsRt = rt
  .Record({
    ToPeriod: rt.Number,
    AgaRate: rt.Number,
    AgaZone: rt.String,
    FromPeriod: rt.Number,
    Year: rt.Number,
    OrgNumber: rt.String,
    MunicipalName: rt.String,
    Sums: salaryTransactionSumsRt,
    Aga: aGACalculationRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SalaryTransactionPeriodSums = rt.Static<
  typeof salaryTransactionPeriodSumsRt
>;

const loennsinntektRt = rt
  .Record({
    antall: rt.Number,
    antallSpecified: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Loennsinntekt = rt.Static<typeof loennsinntektRt>;

const ytelseFraOffentligeRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type YtelseFraOffentlige = rt.Static<typeof ytelseFraOffentligeRt>;

const pensjonEllerTrygdRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type PensjonEllerTrygd = rt.Static<typeof pensjonEllerTrygdRt>;

const naeringsinntektRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type Naeringsinntekt = rt.Static<typeof naeringsinntektRt>;

const fradragRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type Fradrag = rt.Static<typeof fradragRt>;

const forskuddstrekkRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type Forskuddstrekk = rt.Static<typeof forskuddstrekkRt>;

const utleggstrekkRt = rt.Record({ CustomValues: customValuesRt }).asPartial();

type Utleggstrekk = rt.Static<typeof utleggstrekkRt>;

const codeRt = rt
  .Record({
    inngaarIGrunnlagForTrekk: rt.String,
    gyldigtil: rt.String,
    fordel: rt.String,
    skatteOgAvgiftregel: rt.String,
    gmlcode: rt.String,
    postnr: rt.String,
    kunfranav: rt.String,
    gyldigfom: rt.String,
    uninavn: rt.String,
    utloeserArbeidsgiveravgift: rt.String,
    loennsinntekt: loennsinntektRt,
    ytelseFraOffentlige: ytelseFraOffentligeRt,
    pensjonEllerTrygd: pensjonEllerTrygdRt,
    naeringsinntekt: naeringsinntektRt,
    fradrag: fradragRt,
    forskuddstrekk: forskuddstrekkRt,
    utleggstrekk: utleggstrekkRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Code = rt.Static<typeof codeRt>;

const createCompanyDetailsRt = rt
  .Record({
    ContractType: rt.Number,
    IsTest: rt.Boolean,
    CopyFiles: rt.Boolean,
    LicenseKey: rt.String,
    ContractID: rt.Number,
    CompanyName: rt.String,
    TemplateCompanyKey: rt.String,
    IsTemplate: rt.Boolean,
    ProductNames: rt.String,
    CompanySettings: companySettingsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CreateCompanyDetails = rt.Static<typeof createCompanyDetailsRt>;

const customerInfoRt = rt
  .Record({
    CustomerType: rt.Number,
    IsRoamingUser: rt.Boolean,
    HasExternalAccountant: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerInfo = rt.Static<typeof customerInfoRt>;

const customerLicenseAgreementInfoRt = rt
  .Record({
    HasAgreedToLicense: rt.Boolean,
    CanAgreeToLicense: rt.Boolean,
    AgreementId: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CustomerLicenseAgreementInfo = rt.Static<
  typeof customerLicenseAgreementInfoRt
>;

const userLicenseTypeRt = rt
  .Record({
    EndDate: rt.String,
    TypeName: rt.String,
    TypeID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UserLicenseType = rt.Static<typeof userLicenseTypeRt>;

const agencyRt = rt
  .Record({
    CompanyKey: rt.String,
    Name: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Agency = rt.Static<typeof agencyRt>;

const companyLicenseInfomationRt = rt
  .Record({
    ID: rt.Number,
    Key: rt.String,
    ContactPerson: rt.String,
    ContractID: rt.Number,
    StatusCode: rt.String,
    Name: rt.String,
    EndDate: rt.String,
    ContactEmail: rt.String,
    Agency: agencyRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CompanyLicenseInfomation = rt.Static<typeof companyLicenseInfomationRt>;

const contractLicenseTypeRt = rt
  .Record({
    TrialExpiration: rt.String,
    StartDate: rt.String,
    TypeName: rt.String,
    TypeID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ContractLicenseType = rt.Static<typeof contractLicenseTypeRt>;

const licenseAgreementInfoRt = rt
  .Record({
    HasAgreedToLicense: rt.Boolean,
    AgreementId: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type LicenseAgreementInfo = rt.Static<typeof licenseAgreementInfoRt>;

const userLicenseInformationRt = rt
  .Record({
    Comment: rt.String,
    UserLicenseKey: rt.String,
    Name: rt.String,
    UserLicenseEndDate: rt.String,
    GlobalIdentity: rt.String,
    CustomerInfo: customerInfoRt,
    CustomerAgreement: customerLicenseAgreementInfoRt,
    UserType: userLicenseTypeRt,
    Company: companyLicenseInfomationRt,
    ContractType: contractLicenseTypeRt,
    UserLicenseAgreement: licenseAgreementInfoRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UserLicenseInformation = rt.Static<typeof userLicenseInformationRt>;

const userDtoRt = rt
  .Record({
    IsAutobankAdmin: rt.Boolean,
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    Protected: rt.Boolean,
    Email: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    UserName: rt.String,
    PermissionHandling: rt.String,
    StatusCode: rt.Number,
    LastLogin: rt.String,
    PhoneNumber: rt.String,
    DisplayName: rt.String,
    BankIntegrationUserName: rt.String,
    UpdatedBy: rt.String,
    PhoneNumberConfirmed: rt.Boolean,
    GlobalIdentity: rt.String,
    HasAgreedToImportDisclaimer: rt.Boolean,
    License: userLicenseInformationRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UserDto = rt.Static<typeof userDtoRt>;

const createBankUserDTORt = rt
  .Record({
    Password: rt.String,
    AdminPassword: rt.String,
    IsAdmin: rt.Boolean,
    Phone: rt.String,
    AdminUserId: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CreateBankUserDTO = rt.Static<typeof createBankUserDTORt>;

const changeAutobankPasswordDTORt = rt
  .Record({
    NewPassword: rt.String,
    Password: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ChangeAutobankPasswordDTO = rt.Static<typeof changeAutobankPasswordDTORt>;

const bankVerificationDtoRt = rt
  .Record({
    ClientID: rt.String,
    IsVerified: rt.Boolean,
    VerifiedUntil: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankVerificationDto = rt.Static<typeof bankVerificationDtoRt>;

const activeNumberSeriesTaskRt = rt
  .Record({
    NumberSeriesTask: numberSeriesTaskRt,
    DefaultNumberSeries: numberSeriesRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ActiveNumberSeriesTask = rt.Static<typeof activeNumberSeriesTaskRt>;

const splitFileResultRt = rt
  .Record({
    FirstPart: fileRt,
    SecondPart: fileRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SplitFileResult = rt.Static<typeof splitFileResultRt>;

const splitFileMultipeResultRt = rt
  .Record({ Parts: rt.Array(fileRt), CustomValues: customValuesRt })
  .asPartial();

type SplitFileMultipeResult = rt.Static<typeof splitFileMultipeResultRt>;

const aGASumsRt = rt
  .Record({
    UsedFreeAmount: rt.Number,
    MaxFreeAmount: rt.Number,
    GrantSum: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AGASums = rt.Static<typeof aGASumsRt>;

const subEntityAgaSumsRt = rt
  .Record({
    SubEntity: subEntityRt,
    Sums: aGASumsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SubEntityAgaSums = rt.Static<typeof subEntityAgaSumsRt>;

const freeAmountSummaryRt = rt
  .Record({
    RestFreeAmount: rt.Number,
    SubEntitiesSums: rt.Array(subEntityAgaSumsRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type FreeAmountSummary = rt.Static<typeof freeAmountSummaryRt>;

const extensionDataObjectRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type ExtensionDataObject = rt.Static<typeof extensionDataObjectRt>;

const authenticationChallengeBERt = rt
  .Record({
    ValidFrom: rt.String,
    ValidTo: rt.String,
    Status: rt.String,
    Message: rt.String,
    ExtensionData: extensionDataObjectRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AuthenticationChallengeBE = rt.Static<typeof authenticationChallengeBERt>;

const altinnAuthRequestRt = rt
  .Record({
    UserPassword: rt.String,
    UserID: rt.String,
    PreferredLogin: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnAuthRequest = rt.Static<typeof altinnAuthRequestRt>;

const a06OptionsRt = rt
  .Record({
    IncludeInfoPerPerson: rt.Boolean,
    ToPeriod: rt.String,
    IncludeEmployments: rt.Boolean,
    FromPeriod: rt.String,
    IncludeIncome: rt.Boolean,
    Year: rt.Number,
    ReportType: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type A06Options = rt.Static<typeof a06OptionsRt>;

const a07ResponseRt = rt
  .Record({
    Data: rt.String,
    Text: rt.String,
    mainStatus: rt.String,
    DataType: rt.String,
    DataName: rt.String,
    Title: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type A07Response = rt.Static<typeof a07ResponseRt>;

const selfEmployedItemRt = rt
  .Record({
    number: rt.String,
    supplierID: rt.Number,
    name: rt.String,
    amount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SelfEmployedItem = rt.Static<typeof selfEmployedItemRt>;

const selfEmployedRt = rt
  .Record({
    year: rt.Number,
    items: rt.Array(selfEmployedItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SelfEmployed = rt.Static<typeof selfEmployedRt>;

const setIntegrationDataDtoRt = rt
  .Record({
    ExternalId: rt.String,
    IntegrationKey: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SetIntegrationDataDto = rt.Static<typeof setIntegrationDataDtoRt>;

const currencyRateDataRt = rt
  .Record({
    IsOverrideRate: rt.Boolean,
    Factor: rt.Number,
    RateDateOld: rt.String,
    RateDate: rt.String,
    ExchangeRate: rt.Number,
    ExchangeRateOld: rt.Number,
    FromCurrencyCode: currencyCodeRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CurrencyRateData = rt.Static<typeof currencyRateDataRt>;

const reportParameterRt = rt
  .Record({ Value: rt.String, Name: rt.String, CustomValues: customValuesRt })
  .asPartial();

type ReportParameter = rt.Static<typeof reportParameterRt>;

const emailDTORt = rt
  .Record({
    FromAddress: rt.String,
    CopyAddress: rt.String,
    Format: rt.String,
    Subject: rt.String,
    Message: rt.String,
    ReportID: rt.Number,
    Parameters: rt.Array(reportParameterRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type EmailDTO = rt.Static<typeof emailDTORt>;

const distributionPlanElementValidationRt = rt
  .Record({
    ElementType: rt.String,
    ElementTypeName: rt.String,
    Priority: rt.Number,
    IsValid: rt.Boolean,
    PlanElement: distributionPlanElementRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DistributionPlanElementValidation = rt.Static<
  typeof distributionPlanElementValidationRt
>;

const sendEmailAttachmentRt = rt
  .Record({
    FileID: rt.Number,
    Attachment: rt.String,
    FileName: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SendEmailAttachment = rt.Static<typeof sendEmailAttachmentRt>;

const sendEmailRt = rt
  .Record({
    EntityID: rt.Number,
    EntityType: rt.String,
    Localization: rt.String,
    FromAddress: rt.String,
    CopyAddress: rt.String,
    ReportName: rt.String,
    ReplyAddress: rt.String,
    Subject: rt.String,
    ExternalReference: rt.String,
    Message: rt.String,
    ReportID: rt.Number,
    Attachments: rt.Array(sendEmailAttachmentRt),
    Parameters: rt.Array(reportParameterRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SendEmail = rt.Static<typeof sendEmailRt>;

const enclosureRt = rt
  .Record({
    Url: rt.String,
    Length: rt.String,
    Type: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Enclosure = rt.Static<typeof enclosureRt>;

const rssItemRt = rt
  .Record({
    Category: rt.String,
    Link: rt.String,
    PubDate: rt.String,
    Guid: rt.String,
    Description: rt.String,
    Title: rt.String,
    Enclosure: enclosureRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type RssItem = rt.Static<typeof rssItemRt>;

const rssListRt = rt
  .Record({
    Url: rt.String,
    Description: rt.String,
    Title: rt.String,
    Items: rt.Array(rssItemRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type RssList = rt.Static<typeof rssListRt>;

const sharingStatusUpdateRt = rt
  .Record({
    Status: rt.String,
    SharingId: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SharingStatusUpdate = rt.Static<typeof sharingStatusUpdateRt>;

const sharingUpdatesRt = rt
  .Record({
    SharingStatusUpdates: rt.Array(sharingStatusUpdateRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type SharingUpdates = rt.Static<typeof sharingUpdatesRt>;

const memberDetailsRt = rt
  .Record({
    MinutesWorked: rt.Number,
    TotalBalance: rt.Number,
    ReportBalance: rt.Number,
    Name: rt.String,
    ExpectedMinutes: rt.Number,
    WorkRelation: workRelationRt,
    TimeOff: rt.Array(flexDetailRt),
    MissingDays: rt.Array(flexDetailRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type MemberDetails = rt.Static<typeof memberDetailsRt>;

const teamReportRt = rt
  .Record({
    ToDate: rt.String,
    FromDate: rt.String,
    Team: teamRt,
    Members: rt.Array(memberDetailsRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type TeamReport = rt.Static<typeof teamReportRt>;

const teamPositionDtoRt = rt
  .Record({
    Position: rt.String,
    PositionName: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type TeamPositionDto = rt.Static<typeof teamPositionDtoRt>;

const eHFCustomerRt = rt
  .Record({
    orgname: rt.String,
    contactname: rt.String,
    contactemail: rt.String,
    orgno: rt.String,
    contactphone: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type EHFCustomer = rt.Static<typeof eHFCustomerRt>;

const serviceMetadataDtoRt = rt
  .Record({
    ServiceName: rt.String,
    SupportEmail: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ServiceMetadataDto = rt.Static<typeof serviceMetadataDtoRt>;

const accountUsageReferenceRt = rt
  .Record({
    EntityID: rt.Number,
    Entity: rt.String,
    Info: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountUsageReference = rt.Static<typeof accountUsageReferenceRt>;

const mandatoryDimensionAccountReportRt = rt
  .Record({
    Deleted: rt.Boolean,
    ID: rt.Number,
    UpdatedAt: rt.String,
    AccountNumber: rt.String,
    MissingOnlyWarningsDimensionsMessage: rt.String,
    CreatedBy: rt.String,
    CreatedAt: rt.String,
    DimensionsID: rt.Number,
    StatusCode: rt.Number,
    journalEntryLineDraftID: rt.Number,
    UpdatedBy: rt.String,
    MissingRequiredDimensionsMessage: rt.String,
    AccountID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MandatoryDimensionAccountReport = rt.Static<
  typeof mandatoryDimensionAccountReportRt
>;

const accountDimensionRt = rt
  .Record({
    AccountNumber: rt.Number,
    DimensionsID: rt.Number,
    AccountID: rt.Number,
    Dimensions: dimensionsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountDimension = rt.Static<typeof accountDimensionRt>;

const assetResponseMessageRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type AssetResponseMessage = rt.Static<typeof assetResponseMessageRt>;

const assetReportLineDTORt = rt
  .Record({
    Value: rt.Number,
    Date: rt.String,
    TypeID: rt.Number,
    Type: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AssetReportLineDTO = rt.Static<typeof assetReportLineDTORt>;

const assetReportDTORt = rt
  .Record({
    GroupCode: rt.String,
    LastDepreciation: rt.String,
    Number: rt.Number,
    GroupName: rt.String,
    Lifetime: rt.Number,
    BalanceAccountNumber: rt.Number,
    BalanceAccountName: rt.String,
    CurrentValue: rt.Number,
    Name: rt.String,
    DepreciationAccountNumber: rt.Number,
    Lines: rt.Array(assetReportLineDTORt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type AssetReportDTO = rt.Static<typeof assetReportDTORt>;

const assetDtoRt = rt
  .Record({
    ID: rt.Number,
    Name: rt.String,
    PurchaseDate: rt.String,
    IncomingFinancialValue: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AssetDto = rt.Static<typeof assetDtoRt>;

const bankBalanceDtoRt = rt
  .Record({
    BalanceBooked: rt.Number,
    AccountNumber: rt.String,
    BalanceAvailable: rt.Number,
    Date: rt.String,
    IsTestData: rt.Boolean,
    Comment: rt.String,
    MainAccountName: rt.String,
    IsMainAccountBalance: rt.Boolean,
    AccountName: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankBalanceDto = rt.Static<typeof bankBalanceDtoRt>;

const bankDataRt = rt
  .Record({
    AccountNumber: rt.String,
    IBAN: rt.String,
    Bank: bankRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankData = rt.Static<typeof bankDataRt>;

const bankAccountDTORt = rt
  .Record({
    IsBankBalance: rt.Boolean,
    Bic: rt.String,
    IsInbound: rt.Boolean,
    IsOutgoing: rt.Boolean,
    BBAN: rt.String,
    IsBankStatement: rt.Boolean,
    IBAN: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankAccountDTO = rt.Static<typeof bankAccountDTORt>;

const createBankIntegrationDTORt = rt
  .Record({
    ServiceProvider: rt.Number,
    IsBankBalance: rt.Boolean,
    RequireTwoStage: rt.Boolean,
    Email: rt.String,
    IsInbound: rt.Boolean,
    Password: rt.String,
    Bank: rt.String,
    IsOutgoing: rt.Boolean,
    UserName: rt.String,
    Phone: rt.String,
    BankAccountID: rt.Number,
    IsBankStatement: rt.Boolean,
    DisplayName: rt.String,
    TuserName: rt.String,
    BankApproval: rt.Boolean,
    BankAcceptance: rt.Boolean,
    BankAccounts: rt.Array(bankAccountDTORt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type CreateBankIntegrationDTO = rt.Static<typeof createBankIntegrationDTORt>;

const zdataUpdateBankPropertiesRt = rt
  .Record({
    IsBankBalance: rt.Boolean,
    IsInbound: rt.Boolean,
    Password: rt.String,
    IsOutgoing: rt.Boolean,
    ServiceID: rt.String,
    IsBankStatement: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ZdataUpdateBankProperties = rt.Static<typeof zdataUpdateBankPropertiesRt>;

const autobankUserDTORt = rt
  .Record({
    Password: rt.String,
    UserID: rt.Number,
    IsAdmin: rt.Boolean,
    Phone: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AutobankUserDTO = rt.Static<typeof autobankUserDTORt>;

const updateServiceStatusDTORt = rt
  .Record({
    ServiceID: rt.String,
    StatusCode: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UpdateServiceStatusDTO = rt.Static<typeof updateServiceStatusDTORt>;

const updateServiceIDDTORt = rt
  .Record({
    NewServiceID: rt.String,
    ServiceID: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type UpdateServiceIDDTO = rt.Static<typeof updateServiceIDDTORt>;

const bankMatchSuggestionRt = rt
  .Record({
    Amount: rt.Number,
    Group: rt.String,
    JournalEntryLineID: rt.Number,
    BankStatementEntryID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankMatchSuggestion = rt.Static<typeof bankMatchSuggestionRt>;

const matchCandidateRt = rt
  .Record({
    ID: rt.Number,
    Date: rt.String,
    IsBankEntry: rt.Boolean,
    Closed: rt.Boolean,
    Amount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MatchCandidate = rt.Static<typeof matchCandidateRt>;

const matchSettingsRt = rt
  .Record({
    MaxDayOffset: rt.Number,
    MaxDelta: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MatchSettings = rt.Static<typeof matchSettingsRt>;

const matchRequestRt = rt
  .Record({
    JournalEntries: rt.Array(matchCandidateRt),
    BankEntries: rt.Array(matchCandidateRt),
    Settings: matchSettingsRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MatchRequest = rt.Static<typeof matchRequestRt>;

const reconciliationStatusRt = rt
  .Record({
    TotalAmount: rt.Number,
    NumberOfItems: rt.Number,
    IsReconciled: rt.Boolean,
    Todate: rt.String,
    NumberOfUnReconciled: rt.Number,
    TotalUnreconciled: rt.Number,
    AccountID: rt.Number,
    FromDate: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReconciliationStatus = rt.Static<typeof reconciliationStatusRt>;

const balanceDtoRt = rt
  .Record({
    BalanceInStatement: rt.Number,
    StartDate: rt.String,
    EndDate: rt.String,
    Balance: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BalanceDto = rt.Static<typeof balanceDtoRt>;

const bankfileColumnRt = rt
  .Record({
    IsFallBack: rt.Boolean,
    DataType: rt.String,
    FieldMapping: rt.String,
    Length: rt.Number,
    StartPos: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankfileColumn = rt.Static<typeof bankfileColumnRt>;

const bankfileFormatRt = rt
  .Record({
    Separator: rt.String,
    IsFixed: rt.Boolean,
    CustomFormat: rt.String,
    IsXml: rt.Boolean,
    Name: rt.String,
    FileExtension: rt.String,
    LinePrefix: rt.String,
    SkipRows: rt.Number,
    Columns: rt.Array(bankfileColumnRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type BankfileFormat = rt.Static<typeof bankfileFormatRt>;

const zdataTransactionDtoRt = rt
  .Record({
    AccountNumber: rt.String,
    AccountCurrency: rt.String,
    TransactionId: rt.String,
    BankInformation: rt.String,
    ValueDate: rt.String,
    EndBalance: rt.Number,
    BookingDate: rt.String,
    AmountCurrency: rt.String,
    SenderAccount: rt.String,
    ArchiveReference: rt.String,
    Amount: rt.Number,
    StatementId: rt.String,
    Type: rt.String,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ZdataTransactionDto = rt.Static<typeof zdataTransactionDtoRt>;

const zdataEntryTransactionsDtoRt = rt
  .Record({
    StatementId: rt.String,
    Transactions: rt.Array(zdataTransactionDtoRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type ZdataEntryTransactionsDto = rt.Static<typeof zdataEntryTransactionsDtoRt>;

const journalSuggestionRt = rt
  .Record({
    BankStatementRuleID: rt.Number,
    MatchWithEntryID: rt.Number,
    FinancialDate: rt.String,
    Amount: rt.Number,
    Description: rt.String,
    AccountID: rt.Number,
    Account: accountRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalSuggestion = rt.Static<typeof journalSuggestionRt>;

const reportRowRt = rt
  .Record({
    BudPeriod1: rt.Number,
    ID: rt.Number,
    AccountNumber: rt.Number,
    Period4: rt.Number,
    SubGroupName: rt.String,
    Period11: rt.Number,
    BudPeriod9: rt.Number,
    BudPeriod4: rt.Number,
    IsSubTotal: rt.Boolean,
    BudgetSum: rt.Number,
    Period12: rt.Number,
    BudPeriod5: rt.Number,
    Period9: rt.Number,
    Period5: rt.Number,
    GroupName: rt.String,
    SumPeriodLastYearAccumulated: rt.Number,
    Period10: rt.Number,
    PrecedingBalance: rt.Number,
    BudPeriod3: rt.Number,
    BudPeriod12: rt.Number,
    BudPeriod11: rt.Number,
    BudPeriod8: rt.Number,
    Period3: rt.Number,
    Sum: rt.Number,
    BudgetAccumulated: rt.Number,
    Period8: rt.Number,
    AccountName: rt.String,
    Period7: rt.Number,
    AccountYear: rt.Number,
    Period6: rt.Number,
    SumPeriodAccumulated: rt.Number,
    Period2: rt.Number,
    BudPeriod2: rt.Number,
    BudPeriod6: rt.Number,
    SumLastYear: rt.Number,
    SubGroupNumber: rt.Number,
    SumPeriod: rt.Number,
    Period1: rt.Number,
    BudPeriod10: rt.Number,
    BudPeriod7: rt.Number,
    GroupNumber: rt.Number,
    SumPeriodLastYear: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReportRow = rt.Static<typeof reportRowRt>;

const budgetImportRt = rt
  .Record({ Budget: budgetRt, CustomValues: customValuesRt })
  .asPartial();

type BudgetImport = rt.Static<typeof budgetImportRt>;

const detailsDTORt = rt
  .Record({
    Custumer: rt.Number,
    VAT: rt.Number,
    CustomPayments: rt.Number,
    Liquidity: rt.Number,
    Sum: rt.Number,
    Supplier: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type DetailsDTO = rt.Static<typeof detailsDTORt>;

const liquidityTableDTORt = rt
  .Record({
    BankBalance: rt.Number,
    OverdueSupplierInvoices: rt.Number,
    BankBalanceRefferance: rt.String,
    OverdueCustomerInvoices: rt.Number,
    Period: rt.Array(detailsDTORt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type LiquidityTableDTO = rt.Static<typeof liquidityTableDTORt>;

const journalEntryPaymentDataRt = rt
  .Record({ PaymentData: paymentRt, CustomValues: customValuesRt })
  .asPartial();

type JournalEntryPaymentData = rt.Static<typeof journalEntryPaymentDataRt>;

const journalEntryDataRt = rt
  .Record({
    InvoiceNumber: rt.String,
    CreditVatTypeID: rt.Number,
    PostPostJournalEntryLineID: rt.Number,
    CurrencyExchangeRate: rt.Number,
    PaymentID: rt.String,
    CustomerInvoiceID: rt.Number,
    CreditAccountID: rt.Number,
    NumberSeriesTaskID: rt.Number,
    DebitVatTypeID: rt.Number,
    StatusCode: rt.Number,
    VatDeductionPercent: rt.Number,
    CreditAccountNumber: rt.Number,
    AmountCurrency: rt.Number,
    DueDate: rt.String,
    CurrencyID: rt.Number,
    JournalEntryDataAccrualID: rt.Number,
    DebitAccountNumber: rt.Number,
    FinancialDate: rt.String,
    Amount: rt.Number,
    VatDate: rt.String,
    DebitAccountID: rt.Number,
    SupplierInvoiceID: rt.Number,
    SupplierInvoiceNo: rt.String,
    CustomerOrderID: rt.Number,
    NumberSeriesID: rt.Number,
    Description: rt.String,
    JournalEntryID: rt.Number,
    JournalEntryNo: rt.String,
    CurrencyCode: currencyCodeRt,
    DebitAccount: accountRt,
    DebitVatType: vatTypeRt,
    CreditAccount: accountRt,
    CreditVatType: vatTypeRt,
    Dimensions: dimensionsRt,
    JournalEntryPaymentData: journalEntryPaymentDataRt,
    JournalEntryDataAccrual: accrualRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntryData = rt.Static<typeof journalEntryDataRt>;

const journalEntryPeriodDataRt = rt
  .Record({
    PeriodNo: rt.Number,
    PeriodSumYear1: rt.Number,
    PeriodName: rt.String,
    PeriodSumYear2: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntryPeriodData = rt.Static<typeof journalEntryPeriodDataRt>;

const journalEntryLineRequestSummaryRt = rt
  .Record({
    SumDebit: rt.Number,
    SumBalance: rt.Number,
    SumTaxBasisAmount: rt.Number,
    SumCredit: rt.Number,
    SumLedger: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEntryLineRequestSummary = rt.Static<
  typeof journalEntryLineRequestSummaryRt
>;

type JournalEntryLinePostPostData = {
  ID?: number;
  MarkedAgainstJournalEntryNumber?: string;
  CurrencyCodeID?: number;
  CurrencyCodeShortCode?: string;
  InvoiceNumber?: string;
  PeriodNo?: number;
  JournalEntryTypeName?: string;
  SubAccountNumber?: number;
  SumPostPostAmount?: number;
  CurrencyExchangeRate?: number;
  PaymentID?: string;
  SumPostPostAmountCurrency?: number;
  StatusCode?: number;
  RestAmount?: number;
  AmountCurrency?: number;
  DueDate?: string;
  SubAccountName?: string;
  NumberOfPayments?: number;
  FinancialDate?: string;
  Amount?: number;
  MarkedAgainstJournalEntryLineID?: number;
  JournalEntryNumber?: string;
  AccountYear?: number;
  RestAmountCurrency?: number;
  Description?: string;
  JournalEntryID?: number;
  JournalEntryNumberNumeric?: number;
  CurrencyCodeCode?: string;
  Markings?: JournalEntryLinePostPostData[];
  CustomValues?: CustomValues;
};

const journalEntryLinePostPostDataRt: rt.Runtype<JournalEntryLinePostPostData> =
  rt.Lazy(() =>
    rt
      .Record({
        ID: rt.Number,
        MarkedAgainstJournalEntryNumber: rt.String,
        CurrencyCodeID: rt.Number,
        CurrencyCodeShortCode: rt.String,
        InvoiceNumber: rt.String,
        PeriodNo: rt.Number,
        JournalEntryTypeName: rt.String,
        SubAccountNumber: rt.Number,
        SumPostPostAmount: rt.Number,
        CurrencyExchangeRate: rt.Number,
        PaymentID: rt.String,
        SumPostPostAmountCurrency: rt.Number,
        StatusCode: rt.Number,
        RestAmount: rt.Number,
        AmountCurrency: rt.Number,
        DueDate: rt.String,
        SubAccountName: rt.String,
        NumberOfPayments: rt.Number,
        FinancialDate: rt.String,
        Amount: rt.Number,
        MarkedAgainstJournalEntryLineID: rt.Number,
        JournalEntryNumber: rt.String,
        AccountYear: rt.Number,
        RestAmountCurrency: rt.Number,
        Description: rt.String,
        JournalEntryID: rt.Number,
        JournalEntryNumberNumeric: rt.Number,
        CurrencyCodeCode: rt.String,
        Markings: rt.Array(journalEntryLinePostPostDataRt),
        CustomValues: customValuesRt,
      })
      .asPartial(),
  );

const paymentBatchApproveStatusRt = rt
  .Record({
    StatusCode: rt.String,
    Message: rt.String,
    ApprovalsRemaining: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type PaymentBatchApproveStatus = rt.Static<typeof paymentBatchApproveStatusRt>;

const createPaymentBatchDTORt = rt
  .Record({
    Password: rt.String,
    Code: rt.String,
    HashValue: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type CreatePaymentBatchDTO = rt.Static<typeof createPaymentBatchDTORt>;

const createAvtaleGiroPaymentBatchDTORt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type CreateAvtaleGiroPaymentBatchDTO = rt.Static<
  typeof createAvtaleGiroPaymentBatchDTORt
>;

const journalEntryLineCoupleRt = rt
  .Record({ CustomValues: customValuesRt })
  .asPartial();

type JournalEntryLineCouple = rt.Static<typeof journalEntryLineCoupleRt>;

const markingReferenceRt = rt
  .Record({
    ID: rt.Number,
    JournalEntryNumber: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type MarkingReference = rt.Static<typeof markingReferenceRt>;

const markingEntryRt = rt
  .Record({
    ID: rt.Number,
    InvoiceNumber: rt.String,
    OriginalRestAmount: rt.Number,
    StatusCode: rt.String,
    RestAmount: rt.Number,
    AmountCurrency: rt.Number,
    OriginalStatusCode: rt.String,
    FinancialDate: rt.String,
    Amount: rt.Number,
    JournalEntryNumber: rt.String,
    RestAmountCurrency: rt.Number,
    Markings: rt.Array(markingReferenceRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type MarkingEntry = rt.Static<typeof markingEntryRt>;

const markingResultRt = rt
  .Record({
    Pairs: rt.Array(journalEntryLineCoupleRt),
    Entries: rt.Array(markingEntryRt),
    CustomValues: customValuesRt,
  })
  .asPartial();

type MarkingResult = rt.Static<typeof markingResultRt>;

const supplierInvoiceDetailRt = rt
  .Record({
    AccountNumber: rt.Number,
    InvoiceNumber: rt.String,
    VatTypeID: rt.Number,
    VatCode: rt.String,
    InvoiceDate: rt.String,
    SupplierID: rt.Number,
    AmountCurrency: rt.Number,
    Amount: rt.Number,
    AccountName: rt.String,
    DeliveryDate: rt.String,
    SupplierInvoiceID: rt.Number,
    VatTypeName: rt.String,
    Description: rt.String,
    AccountID: rt.Number,
    VatPercent: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type SupplierInvoiceDetail = rt.Static<typeof supplierInvoiceDetailRt>;

const vatReportMessageRt = rt
  .Record({
    Level: rt.String,
    Message: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportMessage = rt.Static<typeof vatReportMessageRt>;

const vatReportSummaryRt = rt
  .Record({
    VatCodeGroupNo: rt.String,
    VatCodeGroupID: rt.Number,
    VatCodeGroupName: rt.String,
    NumberOfJournalEntryLines: rt.Number,
    IsHistoricData: rt.Boolean,
    HasTaxAmount: rt.Boolean,
    HasTaxBasis: rt.Boolean,
    SumTaxBasisAmount: rt.Number,
    SumVatAmount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportSummary = rt.Static<typeof vatReportSummaryRt>;

const vatReportSummaryPerPostRt = rt
  .Record({
    VatPostID: rt.Number,
    VatPostName: rt.String,
    VatCodeGroupNo: rt.String,
    VatCodeGroupID: rt.Number,
    VatCodeGroupName: rt.String,
    NumberOfJournalEntryLines: rt.Number,
    IsHistoricData: rt.Boolean,
    HasTaxAmount: rt.Boolean,
    VatPostReportAsNegativeAmount: rt.Boolean,
    HasTaxBasis: rt.Boolean,
    SumTaxBasisAmount: rt.Number,
    VatPostNo: rt.String,
    SumVatAmount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportSummaryPerPost = rt.Static<typeof vatReportSummaryPerPostRt>;

const vatReportSummaryPerPostPerAccountRt = rt
  .Record({
    VatAccountName: rt.String,
    VatPostID: rt.Number,
    VatPostName: rt.String,
    VatCodeGroupNo: rt.String,
    VatJournalEntryPostAccountName: rt.String,
    TaxBasisAmount: rt.Number,
    VatCodeGroupID: rt.Number,
    VatCodeGroupName: rt.String,
    NumberOfJournalEntryLines: rt.Number,
    VatJournalEntryPostAccountID: rt.Number,
    IsHistoricData: rt.Boolean,
    HasTaxAmount: rt.Boolean,
    VatCode: rt.String,
    VatAccountID: rt.Number,
    VatAccountNumber: rt.Number,
    VatPostReportAsNegativeAmount: rt.Boolean,
    StdVatCode: rt.String,
    HasTaxBasis: rt.Boolean,
    SumTaxBasisAmount: rt.Number,
    FinancialDate: rt.String,
    Amount: rt.Number,
    VatPostNo: rt.String,
    JournalEntryNumber: rt.String,
    VatDate: rt.String,
    SumVatAmount: rt.Number,
    VatJournalEntryPostAccountNumber: rt.Number,
    Description: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportSummaryPerPostPerAccount = rt.Static<
  typeof vatReportSummaryPerPostPerAccountRt
>;

const vatReportNotReportedJournalEntryDataRt = rt
  .Record({
    NumberOfJournalEntryLines: rt.Number,
    TerminPeriodID: rt.Number,
    SumTaxBasisAmount: rt.Number,
    SumVatAmount: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type VatReportNotReportedJournalEntryData = rt.Static<
  typeof vatReportNotReportedJournalEntryDataRt
>;

const altinnSigningTextResponseRt = rt
  .Record({ SigningText: rt.String, CustomValues: customValuesRt })
  .asPartial();

type AltinnSigningTextResponse = rt.Static<typeof altinnSigningTextResponseRt>;

const altinnGetVatReportDataFromAltinnResultRt = rt
  .Record({
    Status: rt.String,
    Message: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AltinnGetVatReportDataFromAltinnResult = rt.Static<
  typeof altinnGetVatReportDataFromAltinnResultRt
>;

const annualAccountSubReportRt = rt
  .Record({
    Notenr: rt.String,
    Aarets: rt.String,
    Beskrivelse: rt.String,
    PropertyName: rt.String,
    GroupName: rt.String,
    SortOrder: rt.Number,
    IsSum: rt.Boolean,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualAccountSubReport = rt.Static<typeof annualAccountSubReportRt>;

const annualAccountNoteInfoReportRt = rt
  .Record({
    PropertyName: rt.String,
    EmptyText: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualAccountNoteInfoReport = rt.Static<
  typeof annualAccountNoteInfoReportRt
>;

const annualAccountReportRt = rt
  .Record({
    SubReportList: rt.Array(annualAccountSubReportRt),
    NoteRegnskapsPrinsipp: annualAccountNoteInfoReportRt,
    NoteUsikkerhetFortsattDrift: annualAccountNoteInfoReportRt,
    NoteAksjeOpplysninger: annualAccountNoteInfoReportRt,
    NoteAarsverk: annualAccountNoteInfoReportRt,
    NoteLoenn: annualAccountNoteInfoReportRt,
    NoteYtelserDagligLeder: annualAccountNoteInfoReportRt,
    NoteYtelserLedendePersoner: annualAccountNoteInfoReportRt,
    NoteYtelserRevisjon: annualAccountNoteInfoReportRt,
    NoteTjenestepensjon: annualAccountNoteInfoReportRt,
    NoteLaanSikkerhetLedendePerson: annualAccountNoteInfoReportRt,
    NoteDatterselskapTilknyttetSelskap: annualAccountNoteInfoReportRt,
    NoteSkattekostnad: annualAccountNoteInfoReportRt,
    NoteBankinnskudd: annualAccountNoteInfoReportRt,
    NoteAnleggsmidlerDriftsmidler: annualAccountNoteInfoReportRt,
    NoteEgenkapital: annualAccountNoteInfoReportRt,
    NoteUtenforMinimumskravSmaaForetak: annualAccountNoteInfoReportRt,
    PosterUtenomBalansen: annualAccountNoteInfoReportRt,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualAccountReport = rt.Static<typeof annualAccountReportRt>;

const journalEComDTORt = rt
  .Record({
    amount: rt.Number,
    annualSettlementID: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type JournalEComDTO = rt.Static<typeof journalEComDTORt>;

const annualSettlementDisposalDisplayItemRt = rt
  .Record({ Item: rt.String, Amount: rt.Number, CustomValues: customValuesRt })
  .asPartial();

type AnnualSettlementDisposalDisplayItem = rt.Static<
  typeof annualSettlementDisposalDisplayItemRt
>;

const annualSettlementAccountIBAndUBDisplayItemRt = rt
  .Record({
    AccountNumber: rt.String,
    UB: rt.Number,
    IB: rt.Number,
    Year: rt.Number,
    AccountName: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AnnualSettlementAccountIBAndUBDisplayItem = rt.Static<
  typeof annualSettlementAccountIBAndUBDisplayItemRt
>;

const reportElementRt = rt
  .Record({
    Value: rt.Number,
    IsSum: rt.Boolean,
    BaseValue: rt.Number,
    Label: rt.String,
    Name: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type ReportElement = rt.Static<typeof reportElementRt>;

const avviksforekomstRt = rt
  .Record({
    mottattVerdi: rt.Number,
    beregnetVerdiSpecified: rt.Boolean,
    oevrigInformasjon: rt.String,
    avvikstype: rt.String,
    mottattTekst: rt.String,
    avvikIVerdiSpecified: rt.Boolean,
    beregnetTekst: rt.String,
    avvikIVerdi: rt.Number,
    forekomstidentifikator: rt.String,
    mottattVerdiSpecified: rt.Boolean,
    beregnetVerdi: rt.Number,
    sti: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Avviksforekomst = rt.Static<typeof avviksforekomstRt>;

const veiledningsforekomstRt = rt
  .Record({
    betjeningsstrategi: rt.String,
    hjelpetekst: rt.String,
    forekomstidentifikator: rt.String,
    sti: rt.String,
    veiledningstype: rt.String,
    CustomValues: customValuesRt,
  })
  .asPartial();

type Veiledningsforekomst = rt.Static<typeof veiledningsforekomstRt>;

const accountUsageRt = rt
  .Record({
    AccountNumber: rt.Number,
    PercentWeight: rt.Number,
    Counter: rt.Number,
    CustomValues: customValuesRt,
  })
  .asPartial();

type AccountUsage = rt.Static<typeof accountUsageRt>;

// Operation: workersActionCreateWorkerFromUserPost

/**
 * operation ID: workersActionCreateWorkerFromUserPost
 * `POST: /workers?action=create-worker-from-user`
 * create-worker-from-user Action
 */
export const workersActionCreateWorkerFromUserPost = buildCall() //
  .method('post')
  .path('/workers?action=create-worker-from-user')
  .parseJson(withRuntype(workerRt))
  .build();

// Operation: workersIdGet

const workersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workersIdGet
 * `GET: /workers/{id}`
 * Get Worker
 */
export const workersIdGet = buildCall() //
  .args<rt.Static<typeof workersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workers/${args.id}`)
  .parseJson(withRuntype(workerRt))
  .build();

// Operation: workersIdPut

const workersIdPutArgsRt = rt
  .Record({ id: rt.Number, Worker: workerRt })
  .asReadonly();

/**
 * operation ID: workersIdPut
 * `PUT: /workers/{id}`
 * Update Worker
 */
export const workersIdPut = buildCall() //
  .args<rt.Static<typeof workersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workers/${args.id}`)
  .body((args) => args.Worker)
  .parseJson(withRuntype(workerRt))
  .build();

// Operation: workersIdDelete

const workersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workersIdDelete
 * `DELETE: /workers/{id}`
 * Delete Worker
 */
export const workersIdDelete = buildCall() //
  .args<rt.Static<typeof workersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workers/${args.id}`)
  .parseJson(withRuntype(workerRt))
  .build();

// Operation: workersGet

const workersGetResponseBodyRt = rt.Array(workerRt);

/**
 * operation ID: workersGet
 * `GET: /workers`
 * Query Worker
 */
export const workersGet = buildCall() //
  .method('get')
  .path('/workers')
  .parseJson(withRuntype(workersGetResponseBodyRt))
  .build();

// Operation: workersPost

const workersPostArgsRt = rt.Record({ Worker: workerRt }).asReadonly();

/**
 * operation ID: workersPost
 * `POST: /workers`
 * Create Worker
 */
export const workersPost = buildCall() //
  .args<rt.Static<typeof workersPostArgsRt>>()
  .method('post')
  .path('/workers')
  .body((args) => args.Worker)
  .build();

// Operation: workitemsIdGet

const workitemsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workitemsIdGet
 * `GET: /workitems/{id}`
 * Get WorkItem
 */
export const workitemsIdGet = buildCall() //
  .args<rt.Static<typeof workitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workitems/${args.id}`)
  .parseJson(withRuntype(workItemRt))
  .build();

// Operation: workitemsIdPut

const workitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkItem: workItemRt })
  .asReadonly();

/**
 * operation ID: workitemsIdPut
 * `PUT: /workitems/{id}`
 * Update WorkItem
 */
export const workitemsIdPut = buildCall() //
  .args<rt.Static<typeof workitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workitems/${args.id}`)
  .body((args) => args.WorkItem)
  .parseJson(withRuntype(workItemRt))
  .build();

// Operation: workitemsIdDelete

const workitemsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workitemsIdDelete
 * `DELETE: /workitems/{id}`
 * Delete WorkItem
 */
export const workitemsIdDelete = buildCall() //
  .args<rt.Static<typeof workitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workitems/${args.id}`)
  .parseJson(withRuntype(workItemRt))
  .build();

// Operation: workitemsGet

const workitemsGetResponseBodyRt = rt.Array(workItemRt);

/**
 * operation ID: workitemsGet
 * `GET: /workitems`
 * Query WorkItem
 */
export const workitemsGet = buildCall() //
  .method('get')
  .path('/workitems')
  .parseJson(withRuntype(workitemsGetResponseBodyRt))
  .build();

// Operation: workitemsPost

const workitemsPostArgsRt = rt.Record({ WorkItem: workItemRt }).asReadonly();

/**
 * operation ID: workitemsPost
 * `POST: /workitems`
 * Create WorkItem
 */
export const workitemsPost = buildCall() //
  .args<rt.Static<typeof workitemsPostArgsRt>>()
  .method('post')
  .path('/workitems')
  .body((args) => args.WorkItem)
  .build();

// Operation: worktypesIdGet

const worktypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: worktypesIdGet
 * `GET: /worktypes/{id}`
 * Get WorkType
 */
export const worktypesIdGet = buildCall() //
  .args<rt.Static<typeof worktypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/worktypes/${args.id}`)
  .parseJson(withRuntype(workTypeRt))
  .build();

// Operation: worktypesIdPut

const worktypesIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkType: workTypeRt })
  .asReadonly();

/**
 * operation ID: worktypesIdPut
 * `PUT: /worktypes/{id}`
 * Update WorkType
 */
export const worktypesIdPut = buildCall() //
  .args<rt.Static<typeof worktypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/worktypes/${args.id}`)
  .body((args) => args.WorkType)
  .parseJson(withRuntype(workTypeRt))
  .build();

// Operation: worktypesIdDelete

const worktypesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: worktypesIdDelete
 * `DELETE: /worktypes/{id}`
 * Delete WorkType
 */
export const worktypesIdDelete = buildCall() //
  .args<rt.Static<typeof worktypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/worktypes/${args.id}`)
  .parseJson(withRuntype(workTypeRt))
  .build();

// Operation: worktypesGet

const worktypesGetResponseBodyRt = rt.Array(workTypeRt);

/**
 * operation ID: worktypesGet
 * `GET: /worktypes`
 * Query WorkType
 */
export const worktypesGet = buildCall() //
  .method('get')
  .path('/worktypes')
  .parseJson(withRuntype(worktypesGetResponseBodyRt))
  .build();

// Operation: worktypesPost

const worktypesPostArgsRt = rt.Record({ WorkType: workTypeRt }).asReadonly();

/**
 * operation ID: worktypesPost
 * `POST: /worktypes`
 * Create WorkType
 */
export const worktypesPost = buildCall() //
  .args<rt.Static<typeof worktypesPostArgsRt>>()
  .method('post')
  .path('/worktypes')
  .body((args) => args.WorkType)
  .build();

// Operation: workprofilesIdGet

const workprofilesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workprofilesIdGet
 * `GET: /workprofiles/{id}`
 * Get WorkProfile
 */
export const workprofilesIdGet = buildCall() //
  .args<rt.Static<typeof workprofilesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workprofiles/${args.id}`)
  .parseJson(withRuntype(workProfileRt))
  .build();

// Operation: workprofilesIdPut

const workprofilesIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkProfile: workProfileRt })
  .asReadonly();

/**
 * operation ID: workprofilesIdPut
 * `PUT: /workprofiles/{id}`
 * Update WorkProfile
 */
export const workprofilesIdPut = buildCall() //
  .args<rt.Static<typeof workprofilesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workprofiles/${args.id}`)
  .body((args) => args.WorkProfile)
  .parseJson(withRuntype(workProfileRt))
  .build();

// Operation: workprofilesIdDelete

const workprofilesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workprofilesIdDelete
 * `DELETE: /workprofiles/{id}`
 * Delete WorkProfile
 */
export const workprofilesIdDelete = buildCall() //
  .args<rt.Static<typeof workprofilesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workprofiles/${args.id}`)
  .parseJson(withRuntype(workProfileRt))
  .build();

// Operation: workprofilesGet

const workprofilesGetResponseBodyRt = rt.Array(workProfileRt);

/**
 * operation ID: workprofilesGet
 * `GET: /workprofiles`
 * Query WorkProfile
 */
export const workprofilesGet = buildCall() //
  .method('get')
  .path('/workprofiles')
  .parseJson(withRuntype(workprofilesGetResponseBodyRt))
  .build();

// Operation: workprofilesPost

const workprofilesPostArgsRt = rt
  .Record({ WorkProfile: workProfileRt })
  .asReadonly();

/**
 * operation ID: workprofilesPost
 * `POST: /workprofiles`
 * Create WorkProfile
 */
export const workprofilesPost = buildCall() //
  .args<rt.Static<typeof workprofilesPostArgsRt>>()
  .method('post')
  .path('/workprofiles')
  .body((args) => args.WorkProfile)
  .build();

// Operation: workbalancesIdGet

const workbalancesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workbalancesIdGet
 * `GET: /workbalances/{id}`
 * Get WorkBalance
 */
export const workbalancesIdGet = buildCall() //
  .args<rt.Static<typeof workbalancesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workbalances/${args.id}`)
  .parseJson(withRuntype(workBalanceRt))
  .build();

// Operation: workbalancesIdPut

const workbalancesIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkBalance: workBalanceRt })
  .asReadonly();

/**
 * operation ID: workbalancesIdPut
 * `PUT: /workbalances/{id}`
 * Update WorkBalance
 */
export const workbalancesIdPut = buildCall() //
  .args<rt.Static<typeof workbalancesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workbalances/${args.id}`)
  .body((args) => args.WorkBalance)
  .parseJson(withRuntype(workBalanceRt))
  .build();

// Operation: workbalancesIdDelete

const workbalancesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workbalancesIdDelete
 * `DELETE: /workbalances/{id}`
 * Delete WorkBalance
 */
export const workbalancesIdDelete = buildCall() //
  .args<rt.Static<typeof workbalancesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workbalances/${args.id}`)
  .parseJson(withRuntype(workBalanceRt))
  .build();

// Operation: workbalancesGet

const workbalancesGetResponseBodyRt = rt.Array(workBalanceRt);

/**
 * operation ID: workbalancesGet
 * `GET: /workbalances`
 * Query WorkBalance
 */
export const workbalancesGet = buildCall() //
  .method('get')
  .path('/workbalances')
  .parseJson(withRuntype(workbalancesGetResponseBodyRt))
  .build();

// Operation: workbalancesPost

const workbalancesPostArgsRt = rt
  .Record({ WorkBalance: workBalanceRt })
  .asReadonly();

/**
 * operation ID: workbalancesPost
 * `POST: /workbalances`
 * Create WorkBalance
 */
export const workbalancesPost = buildCall() //
  .args<rt.Static<typeof workbalancesPostArgsRt>>()
  .method('post')
  .path('/workbalances')
  .body((args) => args.WorkBalance)
  .build();

// Operation: worktimeoffIdGet

const worktimeoffIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: worktimeoffIdGet
 * `GET: /worktimeoff/{id}`
 * Get WorkTimeOff
 */
export const worktimeoffIdGet = buildCall() //
  .args<rt.Static<typeof worktimeoffIdGetArgsRt>>()
  .method('get')
  .path((args) => `/worktimeoff/${args.id}`)
  .parseJson(withRuntype(workTimeOffRt))
  .build();

// Operation: worktimeoffIdPut

const worktimeoffIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkTimeOff: workTimeOffRt })
  .asReadonly();

/**
 * operation ID: worktimeoffIdPut
 * `PUT: /worktimeoff/{id}`
 * Update WorkTimeOff
 */
export const worktimeoffIdPut = buildCall() //
  .args<rt.Static<typeof worktimeoffIdPutArgsRt>>()
  .method('put')
  .path((args) => `/worktimeoff/${args.id}`)
  .body((args) => args.WorkTimeOff)
  .parseJson(withRuntype(workTimeOffRt))
  .build();

// Operation: worktimeoffIdDelete

const worktimeoffIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: worktimeoffIdDelete
 * `DELETE: /worktimeoff/{id}`
 * Delete WorkTimeOff
 */
export const worktimeoffIdDelete = buildCall() //
  .args<rt.Static<typeof worktimeoffIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/worktimeoff/${args.id}`)
  .parseJson(withRuntype(workTimeOffRt))
  .build();

// Operation: worktimeoffGet

const worktimeoffGetResponseBodyRt = rt.Array(workTimeOffRt);

/**
 * operation ID: worktimeoffGet
 * `GET: /worktimeoff`
 * Query WorkTimeOff
 */
export const worktimeoffGet = buildCall() //
  .method('get')
  .path('/worktimeoff')
  .parseJson(withRuntype(worktimeoffGetResponseBodyRt))
  .build();

// Operation: worktimeoffPost

const worktimeoffPostArgsRt = rt
  .Record({ WorkTimeOff: workTimeOffRt })
  .asReadonly();

/**
 * operation ID: worktimeoffPost
 * `POST: /worktimeoff`
 * Create WorkTimeOff
 */
export const worktimeoffPost = buildCall() //
  .args<rt.Static<typeof worktimeoffPostArgsRt>>()
  .method('post')
  .path('/worktimeoff')
  .body((args) => args.WorkTimeOff)
  .build();

// Operation: workitemgroupsActionCreateFromItemsPost

/**
 * operation ID: workitemgroupsActionCreateFromItemsPost
 * `POST: /workitemgroups?action=create-from-items`
 * create-from-items Action
 */
export const workitemgroupsActionCreateFromItemsPost = buildCall() //
  .method('post')
  .path('/workitemgroups?action=create-from-items')
  .parseJson(withRuntype(workItemGroupRt))
  .build();

// Operation: workitemgroupsIdActionAssignToPost

const workitemgroupsIdActionAssignToPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, details: assignmentDetailsRt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: workitemgroupsIdActionAssignToPost
 * `POST: /workitemgroups/{id}?action=AssignTo`
 * AssignTo Action
 */
export const workitemgroupsIdActionAssignToPost = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdActionAssignToPostArgsRt>>()
  .method('post')
  .path((args) => `/workitemgroups/${args.id}?action=AssignTo`)
  .body((args) => args.details)
  .build();

// Operation: workitemgroupsIdActionAssignPost

const workitemgroupsIdActionAssignPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: workitemgroupsIdActionAssignPost
 * `POST: /workitemgroups/{id}?action=Assign`
 * Assign Transition
 */
export const workitemgroupsIdActionAssignPost = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdActionAssignPostArgsRt>>()
  .method('post')
  .path((args) => `/workitemgroups/${args.id}?action=Assign`)
  .build();

// Operation: workitemgroupsIdActionApprovePost

const workitemgroupsIdActionApprovePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: workitemgroupsIdActionApprovePost
 * `POST: /workitemgroups/{id}?action=Approve`
 * Approve Transition
 */
export const workitemgroupsIdActionApprovePost = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdActionApprovePostArgsRt>>()
  .method('post')
  .path((args) => `/workitemgroups/${args.id}?action=Approve`)
  .build();

// Operation: workitemgroupsIdActionRejectPost

const workitemgroupsIdActionRejectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: workitemgroupsIdActionRejectPost
 * `POST: /workitemgroups/{id}?action=Reject`
 * Reject Transition
 */
export const workitemgroupsIdActionRejectPost = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdActionRejectPostArgsRt>>()
  .method('post')
  .path((args) => `/workitemgroups/${args.id}?action=Reject`)
  .build();

// Operation: workitemgroupsIdGet

const workitemgroupsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workitemgroupsIdGet
 * `GET: /workitemgroups/{id}`
 * Get WorkItemGroup
 */
export const workitemgroupsIdGet = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workitemgroups/${args.id}`)
  .parseJson(withRuntype(workItemGroupRt))
  .build();

// Operation: workitemgroupsIdPut

const workitemgroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkItemGroup: workItemGroupRt })
  .asReadonly();

/**
 * operation ID: workitemgroupsIdPut
 * `PUT: /workitemgroups/{id}`
 * Update WorkItemGroup
 */
export const workitemgroupsIdPut = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workitemgroups/${args.id}`)
  .body((args) => args.WorkItemGroup)
  .parseJson(withRuntype(workItemGroupRt))
  .build();

// Operation: workitemgroupsIdDelete

const workitemgroupsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workitemgroupsIdDelete
 * `DELETE: /workitemgroups/{id}`
 * Delete WorkItemGroup
 */
export const workitemgroupsIdDelete = buildCall() //
  .args<rt.Static<typeof workitemgroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workitemgroups/${args.id}`)
  .parseJson(withRuntype(workItemGroupRt))
  .build();

// Operation: workitemgroupsGet

const workitemgroupsGetResponseBodyRt = rt.Array(workItemGroupRt);

/**
 * operation ID: workitemgroupsGet
 * `GET: /workitemgroups`
 * Query WorkItemGroup
 */
export const workitemgroupsGet = buildCall() //
  .method('get')
  .path('/workitemgroups')
  .parseJson(withRuntype(workitemgroupsGetResponseBodyRt))
  .build();

// Operation: workitemgroupsPost

const workitemgroupsPostArgsRt = rt
  .Record({ WorkItemGroup: workItemGroupRt })
  .asReadonly();

/**
 * operation ID: workitemgroupsPost
 * `POST: /workitemgroups`
 * Create WorkItemGroup
 */
export const workitemgroupsPost = buildCall() //
  .args<rt.Static<typeof workitemgroupsPostArgsRt>>()
  .method('post')
  .path('/workitemgroups')
  .body((args) => args.WorkItemGroup)
  .build();

// Operation: workrelationsIdActionTimesheetGet

const workrelationsIdActionTimesheetGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: workrelationsIdActionTimesheetGet
 * `GET: /workrelations/{id}?action=timesheet`
 * timesheet Action
 */
export const workrelationsIdActionTimesheetGet = buildCall() //
  .args<rt.Static<typeof workrelationsIdActionTimesheetGetArgsRt>>()
  .method('get')
  .path((args) => `/workrelations/${args.id}?action=timesheet`)
  .parseJson(withRuntype(timeSheetRt))
  .build();

// Operation: workrelationsIdActionCalcFlexBalanceGet

const workrelationsIdActionCalcFlexBalanceGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: workrelationsIdActionCalcFlexBalanceGet
 * `GET: /workrelations/{id}?action=calc-flex-balance`
 * calc-flex-balance Action
 */
export const workrelationsIdActionCalcFlexBalanceGet = buildCall() //
  .args<rt.Static<typeof workrelationsIdActionCalcFlexBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/workrelations/${args.id}?action=calc-flex-balance`)
  .parseJson(withRuntype(workBalanceDtoRt))
  .build();

// Operation: workrelationsIdGet

const workrelationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workrelationsIdGet
 * `GET: /workrelations/{id}`
 * Get WorkRelation
 */
export const workrelationsIdGet = buildCall() //
  .args<rt.Static<typeof workrelationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/workrelations/${args.id}`)
  .parseJson(withRuntype(workRelationRt))
  .build();

// Operation: workrelationsIdPut

const workrelationsIdPutArgsRt = rt
  .Record({ id: rt.Number, WorkRelation: workRelationRt })
  .asReadonly();

/**
 * operation ID: workrelationsIdPut
 * `PUT: /workrelations/{id}`
 * Update WorkRelation
 */
export const workrelationsIdPut = buildCall() //
  .args<rt.Static<typeof workrelationsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/workrelations/${args.id}`)
  .body((args) => args.WorkRelation)
  .parseJson(withRuntype(workRelationRt))
  .build();

// Operation: workrelationsIdDelete

const workrelationsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: workrelationsIdDelete
 * `DELETE: /workrelations/{id}`
 * Delete WorkRelation
 */
export const workrelationsIdDelete = buildCall() //
  .args<rt.Static<typeof workrelationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/workrelations/${args.id}`)
  .parseJson(withRuntype(workRelationRt))
  .build();

// Operation: workrelationsGet

const workrelationsGetResponseBodyRt = rt.Array(workRelationRt);

/**
 * operation ID: workrelationsGet
 * `GET: /workrelations`
 * Query WorkRelation
 */
export const workrelationsGet = buildCall() //
  .method('get')
  .path('/workrelations')
  .parseJson(withRuntype(workrelationsGetResponseBodyRt))
  .build();

// Operation: workrelationsPost

const workrelationsPostArgsRt = rt
  .Record({ WorkRelation: workRelationRt })
  .asReadonly();

/**
 * operation ID: workrelationsPost
 * `POST: /workrelations`
 * Create WorkRelation
 */
export const workrelationsPost = buildCall() //
  .args<rt.Static<typeof workrelationsPostArgsRt>>()
  .method('post')
  .path('/workrelations')
  .body((args) => args.WorkRelation)
  .build();

// Operation: batchinvoicesIdActionAddCustomerOrderPut

const batchinvoicesIdActionAddCustomerOrderPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, orderids: rt.Number }).asPartial().asReadonly(),
);

const batchinvoicesIdActionAddCustomerOrderPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: batchinvoicesIdActionAddCustomerOrderPut
 * `PUT: /batchinvoices/{id}?action=addCustomerOrder`
 * addCustomerOrder Action
 */
export const batchinvoicesIdActionAddCustomerOrderPut = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdActionAddCustomerOrderPutArgsRt>>()
  .method('put')
  .path((args) => `/batchinvoices/${args.id}?action=addCustomerOrder`)
  .body((args) => args.orderids)
  .parseJson(
    withRuntype(batchinvoicesIdActionAddCustomerOrderPutResponseBodyRt),
  )
  .build();

// Operation: batchinvoicesIdActionAddCustomerInvoicePut

const batchinvoicesIdActionAddCustomerInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, customerInvoiceDratIds: rt.Number })
    .asPartial()
    .asReadonly(),
);

const batchinvoicesIdActionAddCustomerInvoicePutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: batchinvoicesIdActionAddCustomerInvoicePut
 * `PUT: /batchinvoices/{id}?action=addCustomerInvoice`
 * addCustomerInvoice Action
 */
export const batchinvoicesIdActionAddCustomerInvoicePut = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdActionAddCustomerInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/batchinvoices/${args.id}?action=addCustomerInvoice`)
  .body((args) => args.customerInvoiceDratIds)
  .parseJson(
    withRuntype(batchinvoicesIdActionAddCustomerInvoicePutResponseBodyRt),
  )
  .build();

// Operation: batchinvoicesIdActionAddCustomerPut

const batchinvoicesIdActionAddCustomerPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, customerIds: rt.Number }).asPartial().asReadonly(),
);

const batchinvoicesIdActionAddCustomerPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: batchinvoicesIdActionAddCustomerPut
 * `PUT: /batchinvoices/{id}?action=addCustomer`
 * addCustomer Action
 */
export const batchinvoicesIdActionAddCustomerPut = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdActionAddCustomerPutArgsRt>>()
  .method('put')
  .path((args) => `/batchinvoices/${args.id}?action=addCustomer`)
  .body((args) => args.customerIds)
  .parseJson(withRuntype(batchinvoicesIdActionAddCustomerPutResponseBodyRt))
  .build();

// Operation: batchinvoicesIdActionInvoicePut

const batchinvoicesIdActionInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: batchinvoicesIdActionInvoicePut
 * `PUT: /batchinvoices/{id}?action=invoice`
 * invoice Action
 */
export const batchinvoicesIdActionInvoicePut = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdActionInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/batchinvoices/${args.id}?action=invoice`)
  .build();

// Operation: batchinvoicesIdGet

const batchinvoicesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: batchinvoicesIdGet
 * `GET: /batchinvoices/{id}`
 * Get BatchInvoice
 */
export const batchinvoicesIdGet = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/batchinvoices/${args.id}`)
  .parseJson(withRuntype(batchInvoiceRt))
  .build();

// Operation: batchinvoicesIdPut

const batchinvoicesIdPutArgsRt = rt
  .Record({ id: rt.Number, BatchInvoice: batchInvoiceRt })
  .asReadonly();

/**
 * operation ID: batchinvoicesIdPut
 * `PUT: /batchinvoices/{id}`
 * Update BatchInvoice
 */
export const batchinvoicesIdPut = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/batchinvoices/${args.id}`)
  .body((args) => args.BatchInvoice)
  .parseJson(withRuntype(batchInvoiceRt))
  .build();

// Operation: batchinvoicesIdDelete

const batchinvoicesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: batchinvoicesIdDelete
 * `DELETE: /batchinvoices/{id}`
 * Delete BatchInvoice
 */
export const batchinvoicesIdDelete = buildCall() //
  .args<rt.Static<typeof batchinvoicesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/batchinvoices/${args.id}`)
  .parseJson(withRuntype(batchInvoiceRt))
  .build();

// Operation: batchinvoicesGet

const batchinvoicesGetResponseBodyRt = rt.Array(batchInvoiceRt);

/**
 * operation ID: batchinvoicesGet
 * `GET: /batchinvoices`
 * Query BatchInvoice
 */
export const batchinvoicesGet = buildCall() //
  .method('get')
  .path('/batchinvoices')
  .parseJson(withRuntype(batchinvoicesGetResponseBodyRt))
  .build();

// Operation: batchinvoicesPost

const batchinvoicesPostArgsRt = rt
  .Record({ BatchInvoice: batchInvoiceRt })
  .asReadonly();

/**
 * operation ID: batchinvoicesPost
 * `POST: /batchinvoices`
 * Create BatchInvoice
 */
export const batchinvoicesPost = buildCall() //
  .args<rt.Static<typeof batchinvoicesPostArgsRt>>()
  .method('post')
  .path('/batchinvoices')
  .body((args) => args.BatchInvoice)
  .build();

// Operation: businessRelationsActionSearchDataHotelGet

const businessRelationsActionSearchDataHotelGetArgsRt = rt
  .Record({ searchText: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: businessRelationsActionSearchDataHotelGet
 * `GET: /business-relations?action=search-data-hotel`
 * search-data-hotel Action
 */
export const businessRelationsActionSearchDataHotelGet = buildCall() //
  .args<rt.Static<typeof businessRelationsActionSearchDataHotelGetArgsRt>>()
  .method('get')
  .path((args) => `/business-relations?action=search-data-hotel`)
  .parseJson(withRuntype(contactSearchServiceResponseRt))
  .build();

// Operation: businessRelationsIdGet

const businessRelationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: businessRelationsIdGet
 * `GET: /business-relations/{id}`
 * Get BusinessRelation
 */
export const businessRelationsIdGet = buildCall() //
  .args<rt.Static<typeof businessRelationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/business-relations/${args.id}`)
  .parseJson(withRuntype(businessRelationRt))
  .build();

// Operation: businessRelationsIdPut

const businessRelationsIdPutArgsRt = rt
  .Record({ id: rt.Number, BusinessRelation: businessRelationRt })
  .asReadonly();

/**
 * operation ID: businessRelationsIdPut
 * `PUT: /business-relations/{id}`
 * Update BusinessRelation
 */
export const businessRelationsIdPut = buildCall() //
  .args<rt.Static<typeof businessRelationsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/business-relations/${args.id}`)
  .body((args) => args.BusinessRelation)
  .parseJson(withRuntype(businessRelationRt))
  .build();

// Operation: businessRelationsIdDelete

const businessRelationsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: businessRelationsIdDelete
 * `DELETE: /business-relations/{id}`
 * Delete BusinessRelation
 */
export const businessRelationsIdDelete = buildCall() //
  .args<rt.Static<typeof businessRelationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/business-relations/${args.id}`)
  .parseJson(withRuntype(businessRelationRt))
  .build();

// Operation: businessRelationsGet

const businessRelationsGetResponseBodyRt = rt.Array(businessRelationRt);

/**
 * operation ID: businessRelationsGet
 * `GET: /business-relations`
 * Query BusinessRelation
 */
export const businessRelationsGet = buildCall() //
  .method('get')
  .path('/business-relations')
  .parseJson(withRuntype(businessRelationsGetResponseBodyRt))
  .build();

// Operation: businessRelationsPost

const businessRelationsPostArgsRt = rt
  .Record({ BusinessRelation: businessRelationRt })
  .asReadonly();

/**
 * operation ID: businessRelationsPost
 * `POST: /business-relations`
 * Create BusinessRelation
 */
export const businessRelationsPost = buildCall() //
  .args<rt.Static<typeof businessRelationsPostArgsRt>>()
  .method('post')
  .path('/business-relations')
  .body((args) => args.BusinessRelation)
  .build();

// Operation: campaigntemplateIdActionParseemailtemplateGet

const campaigntemplateIdActionParseemailtemplateGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, dataId: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: campaigntemplateIdActionParseemailtemplateGet
 * `GET: /campaigntemplate/{id}?action=parseemailtemplate`
 * parseemailtemplate Action
 */
export const campaigntemplateIdActionParseemailtemplateGet = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdActionParseemailtemplateGetArgsRt>>()
  .method('get')
  .path((args) => `/campaigntemplate/${args.id}?action=parseemailtemplate`)
  .parseJson(withRuntype(campaignTemplateRt))
  .build();

// Operation: campaigntemplateIdActionGettemplatedataGet

const campaigntemplateIdActionGettemplatedataGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, dataId: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: campaigntemplateIdActionGettemplatedataGet
 * `GET: /campaigntemplate/{id}?action=gettemplatedata`
 * gettemplatedata Action
 */
export const campaigntemplateIdActionGettemplatedataGet = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdActionGettemplatedataGetArgsRt>>()
  .method('get')
  .path((args) => `/campaigntemplate/${args.id}?action=gettemplatedata`)
  .parseJson(withRuntype(campaignTemplateDataModelRt))
  .build();

// Operation: campaigntemplateIdActionResettemplatePut

const campaigntemplateIdActionResettemplatePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      id: rt.Number,
      template: rt.Boolean,
      bodyTemplate: rt.Boolean,
      respondToEmail: rt.Boolean,
      expandEntities: rt.Boolean,
      subjectTemplate: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: campaigntemplateIdActionResettemplatePut
 * `PUT: /campaigntemplate/{id}?action=resettemplate`
 * resettemplate Action
 */
export const campaigntemplateIdActionResettemplatePut = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdActionResettemplatePutArgsRt>>()
  .method('put')
  .path((args) => `/campaigntemplate/${args.id}?action=resettemplate`)
  .build();

// Operation: campaigntemplateIdActionGetdefaulttemplateGet

const campaigntemplateIdActionGetdefaulttemplateGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ templateType: rt.Unknown }).asPartial().asReadonly(),
);

/**
 * operation ID: campaigntemplateIdActionGetdefaulttemplateGet
 * `GET: /campaigntemplate/{id}?action=getdefaulttemplate`
 * getdefaulttemplate Action
 */
export const campaigntemplateIdActionGetdefaulttemplateGet = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdActionGetdefaulttemplateGetArgsRt>>()
  .method('get')
  .path((args) => `/campaigntemplate/${args.id}?action=getdefaulttemplate`)
  .build();

// Operation: campaigntemplateIdGet

const campaigntemplateIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: campaigntemplateIdGet
 * `GET: /campaigntemplate/{id}`
 * Get CampaignTemplate
 */
export const campaigntemplateIdGet = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdGetArgsRt>>()
  .method('get')
  .path((args) => `/campaigntemplate/${args.id}`)
  .parseJson(withRuntype(campaignTemplateRt))
  .build();

// Operation: campaigntemplateIdPut

const campaigntemplateIdPutArgsRt = rt
  .Record({ id: rt.Number, CampaignTemplate: campaignTemplateRt })
  .asReadonly();

/**
 * operation ID: campaigntemplateIdPut
 * `PUT: /campaigntemplate/{id}`
 * Update CampaignTemplate
 */
export const campaigntemplateIdPut = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdPutArgsRt>>()
  .method('put')
  .path((args) => `/campaigntemplate/${args.id}`)
  .body((args) => args.CampaignTemplate)
  .parseJson(withRuntype(campaignTemplateRt))
  .build();

// Operation: campaigntemplateIdDelete

const campaigntemplateIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: campaigntemplateIdDelete
 * `DELETE: /campaigntemplate/{id}`
 * Delete CampaignTemplate
 */
export const campaigntemplateIdDelete = buildCall() //
  .args<rt.Static<typeof campaigntemplateIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/campaigntemplate/${args.id}`)
  .parseJson(withRuntype(campaignTemplateRt))
  .build();

// Operation: campaigntemplateGet

const campaigntemplateGetResponseBodyRt = rt.Array(campaignTemplateRt);

/**
 * operation ID: campaigntemplateGet
 * `GET: /campaigntemplate`
 * Query CampaignTemplate
 */
export const campaigntemplateGet = buildCall() //
  .method('get')
  .path('/campaigntemplate')
  .parseJson(withRuntype(campaigntemplateGetResponseBodyRt))
  .build();

// Operation: campaigntemplatePost

const campaigntemplatePostArgsRt = rt
  .Record({ CampaignTemplate: campaignTemplateRt })
  .asReadonly();

/**
 * operation ID: campaigntemplatePost
 * `POST: /campaigntemplate`
 * Create CampaignTemplate
 */
export const campaigntemplatePost = buildCall() //
  .args<rt.Static<typeof campaigntemplatePostArgsRt>>()
  .method('post')
  .path('/campaigntemplate')
  .body((args) => args.CampaignTemplate)
  .build();

// Operation: contactsIdGet

const contactsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contactsIdGet
 * `GET: /contacts/{id}`
 * Get Contact
 */
export const contactsIdGet = buildCall() //
  .args<rt.Static<typeof contactsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contacts/${args.id}`)
  .parseJson(withRuntype(contactRt))
  .build();

// Operation: contactsIdPut

const contactsIdPutArgsRt = rt
  .Record({ id: rt.Number, Contact: contactRt })
  .asReadonly();

/**
 * operation ID: contactsIdPut
 * `PUT: /contacts/{id}`
 * Update Contact
 */
export const contactsIdPut = buildCall() //
  .args<rt.Static<typeof contactsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contacts/${args.id}`)
  .body((args) => args.Contact)
  .parseJson(withRuntype(contactRt))
  .build();

// Operation: contactsIdDelete

const contactsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contactsIdDelete
 * `DELETE: /contacts/{id}`
 * Delete Contact
 */
export const contactsIdDelete = buildCall() //
  .args<rt.Static<typeof contactsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contacts/${args.id}`)
  .parseJson(withRuntype(contactRt))
  .build();

// Operation: contactsGet

const contactsGetResponseBodyRt = rt.Array(contactRt);

/**
 * operation ID: contactsGet
 * `GET: /contacts`
 * Query Contact
 */
export const contactsGet = buildCall() //
  .method('get')
  .path('/contacts')
  .parseJson(withRuntype(contactsGetResponseBodyRt))
  .build();

// Operation: contactsPost

const contactsPostArgsRt = rt.Record({ Contact: contactRt }).asReadonly();

/**
 * operation ID: contactsPost
 * `POST: /contacts`
 * Create Contact
 */
export const contactsPost = buildCall() //
  .args<rt.Static<typeof contactsPostArgsRt>>()
  .method('post')
  .path('/contacts')
  .body((args) => args.Contact)
  .build();

// Operation: customersIdActionNextGet

const customersIdActionNextGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: customersIdActionNextGet
 * `GET: /customers/{id}?action=next`
 * next Action
 */
export const customersIdActionNextGet = buildCall() //
  .args<rt.Static<typeof customersIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/customers/${args.id}?action=next`)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: customersIdActionPreviousGet

const customersIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: customersIdActionPreviousGet
 * `GET: /customers/{id}?action=previous`
 * previous Action
 */
export const customersIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof customersIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/customers/${args.id}?action=previous`)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: customersActionActivatePut

const customersActionActivatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: customersActionActivatePut
 * `PUT: /customers?action=activate`
 * activate Action
 */
export const customersActionActivatePut = buildCall() //
  .args<rt.Static<typeof customersActionActivatePutArgsRt>>()
  .method('put')
  .path((args) => `/customers?action=activate`)
  .build();

// Operation: customersActionDeactivatePut

const customersActionDeactivatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: customersActionDeactivatePut
 * `PUT: /customers?action=deactivate`
 * deactivate Action
 */
export const customersActionDeactivatePut = buildCall() //
  .args<rt.Static<typeof customersActionDeactivatePutArgsRt>>()
  .method('put')
  .path((args) => `/customers?action=deactivate`)
  .build();

// Operation: customersActionBlockPut

const customersActionBlockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: customersActionBlockPut
 * `PUT: /customers?action=block`
 * block Action
 */
export const customersActionBlockPut = buildCall() //
  .args<rt.Static<typeof customersActionBlockPutArgsRt>>()
  .method('put')
  .path((args) => `/customers?action=block`)
  .build();

// Operation: customersActionValidateCustomerKidAliasGet

const customersActionValidateCustomerKidAliasGetArgsRt = rt
  .Record({ customerKidAlias: rt.Number })
  .asPartial()
  .asReadonly();

const customersActionValidateCustomerKidAliasGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: customersActionValidateCustomerKidAliasGet
 * `GET: /customers?action=validate-customer-KID-Alias`
 * validate-customer-KID-Alias Action
 */
export const customersActionValidateCustomerKidAliasGet = buildCall() //
  .args<rt.Static<typeof customersActionValidateCustomerKidAliasGetArgsRt>>()
  .method('get')
  .path((args) => `/customers?action=validate-customer-KID-Alias`)
  .parseJson(
    withRuntype(customersActionValidateCustomerKidAliasGetResponseBodyRt),
  )
  .build();

// Operation: customersActionBulkSavePut

const customersActionBulkSavePutArgsRt = rt
  .Record({ customers: rt.Array(customerRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: customersActionBulkSavePut
 * `PUT: /customers?action=bulk-save`
 * bulk-save Action
 */
export const customersActionBulkSavePut = buildCall() //
  .args<rt.Static<typeof customersActionBulkSavePutArgsRt>>()
  .method('put')
  .path('/customers?action=bulk-save')
  .body((args) => args.customers)
  .build();

// Operation: customersIdGet

const customersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: customersIdGet
 * `GET: /customers/{id}`
 * Get Customer
 */
export const customersIdGet = buildCall() //
  .args<rt.Static<typeof customersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/customers/${args.id}`)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: customersIdPut

const customersIdPutArgsRt = rt
  .Record({ id: rt.Number, Customer: customerRt })
  .asReadonly();

/**
 * operation ID: customersIdPut
 * `PUT: /customers/{id}`
 * Update Customer
 */
export const customersIdPut = buildCall() //
  .args<rt.Static<typeof customersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/customers/${args.id}`)
  .body((args) => args.Customer)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: customersIdDelete

const customersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: customersIdDelete
 * `DELETE: /customers/{id}`
 * Delete Customer
 */
export const customersIdDelete = buildCall() //
  .args<rt.Static<typeof customersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/customers/${args.id}`)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: customersGet

const customersGetResponseBodyRt = rt.Array(customerRt);

/**
 * operation ID: customersGet
 * `GET: /customers`
 * Query Customer
 */
export const customersGet = buildCall() //
  .method('get')
  .path('/customers')
  .parseJson(withRuntype(customersGetResponseBodyRt))
  .build();

// Operation: customersPost

const customersPostArgsRt = rt.Record({ Customer: customerRt }).asReadonly();

/**
 * operation ID: customersPost
 * `POST: /customers`
 * Create Customer
 */
export const customersPost = buildCall() //
  .args<rt.Static<typeof customersPostArgsRt>>()
  .method('post')
  .path('/customers')
  .body((args) => args.Customer)
  .build();

// Operation: invoiceremindersActionGetCustomerInvoiceAndReminderDataGet

const invoiceremindersActionGetCustomerInvoiceAndReminderDataGetArgsRt = rt
  .Record({
    getDueInvoicesOnly: rt.Boolean,
    compareWithDate: rt.Unknown,
    invoicesWithReminderStop: rt.Boolean,
    searchText: rt.String,
    reminderNumber: rt.Number,
    invoiceId: rt.Number,
    top: rt.Number,
    skip: rt.Number,
    orderby: rt.String,
    export: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * invoiceremindersActionGetCustomerInvoiceAndReminderDataGet
 * `GET:
 * /invoicereminders?action=get-customer-invoice-and-reminder-data`
 * get-customer-invoice-and-reminder-data Action
 */
export const invoiceremindersActionGetCustomerInvoiceAndReminderDataGet =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionGetCustomerInvoiceAndReminderDataGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/invoicereminders?action=get-customer-invoice-and-reminder-data`,
    )
    .parseJson(withRuntype(iActionResultRt))
    .build();

// Operation: invoiceremindersActionGetCustomerInvoicesReadyForRemindingGet

const invoiceremindersActionGetCustomerInvoicesReadyForRemindingGetArgsRt = rt
  .Record({ includeInvoiceWithReminderStop: rt.Boolean })
  .asPartial()
  .asReadonly();

const invoiceremindersActionGetCustomerInvoicesReadyForRemindingGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * invoiceremindersActionGetCustomerInvoicesReadyForRemindingGet
 * `GET:
 * /invoicereminders?action=get-customer-invoices-ready-for-reminding`
 * get-customer-invoices-ready-for-reminding Action
 */
export const invoiceremindersActionGetCustomerInvoicesReadyForRemindingGet =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionGetCustomerInvoicesReadyForRemindingGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/invoicereminders?action=get-customer-invoices-ready-for-reminding`,
    )
    .parseJson(
      withRuntype(
        invoiceremindersActionGetCustomerInvoicesReadyForRemindingGetResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGet

const invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGetArgsRt =
  rt
    .Record({ includeInvoiceWithReminderStop: rt.Boolean })
    .asPartial()
    .asReadonly();

const invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGet
 * `GET:
 * /invoicereminders?action=get-customer-invoices-ready-for-debt-collection`
 * get-customer-invoices-ready-for-debt-collection Action
 */
export const invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGet =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/invoicereminders?action=get-customer-invoices-ready-for-debt-collection`,
    )
    .parseJson(
      withRuntype(
        invoiceremindersActionGetCustomerInvoicesReadyForDebtCollectionGetResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionGetCustomerInvoicesSentToDebtCollectionGet

const invoiceremindersActionGetCustomerInvoicesSentToDebtCollectionGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * invoiceremindersActionGetCustomerInvoicesSentToDebtCollectionGet
 * `GET:
 * /invoicereminders?action=get-customer-invoices-sent-to-debt-collection`
 * get-customer-invoices-sent-to-debt-collection Action
 */
export const invoiceremindersActionGetCustomerInvoicesSentToDebtCollectionGet =
  buildCall() //
    .method('get')
    .path(
      '/invoicereminders?action=get-customer-invoices-sent-to-debt-collection',
    )
    .parseJson(
      withRuntype(
        invoiceremindersActionGetCustomerInvoicesSentToDebtCollectionGetResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionCreateInvoiceremindersForInvoicelistPost

const invoiceremindersActionCreateInvoiceremindersForInvoicelistPostArgsRt = rt
  .Record({ customerInvoiceIDs: rt.Number })
  .asPartial()
  .asReadonly();

const invoiceremindersActionCreateInvoiceremindersForInvoicelistPostResponseBodyRt =
  rt.Array(customerInvoiceReminderRt);

/**
 * operation ID:
 * invoiceremindersActionCreateInvoiceremindersForInvoicelistPost
 * `POST:
 * /invoicereminders?action=create-invoicereminders-for-invoicelist`
 * create-invoicereminders-for-invoicelist Action
 */
export const invoiceremindersActionCreateInvoiceremindersForInvoicelistPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionCreateInvoiceremindersForInvoicelistPostArgsRt
      >
    >()
    .method('post')
    .path('/invoicereminders?action=create-invoicereminders-for-invoicelist')
    .body((args) => args.customerInvoiceIDs)
    .parseJson(
      withRuntype(
        invoiceremindersActionCreateInvoiceremindersForInvoicelistPostResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionCreateInvoiceremindersFromParametersPost

const invoiceremindersActionCreateInvoiceremindersFromParametersPostArgsRt = rt
  .Record({
    getDueInvoicesOnly: rt.Boolean,
    compareWithDate: rt.Unknown,
    invoiceWithReminderStop: rt.Boolean,
    searchText: rt.String,
    reminderNumber: rt.Number,
  })
  .asPartial()
  .asReadonly();

const invoiceremindersActionCreateInvoiceremindersFromParametersPostResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * invoiceremindersActionCreateInvoiceremindersFromParametersPost
 * `POST:
 * /invoicereminders?action=create-invoicereminders-from-parameters`
 * create-invoicereminders-from-parameters Action
 */
export const invoiceremindersActionCreateInvoiceremindersFromParametersPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionCreateInvoiceremindersFromParametersPostArgsRt
      >
    >()
    .method('post')
    .path(
      (args) =>
        `/invoicereminders?action=create-invoicereminders-from-parameters`,
    )
    .parseJson(
      withRuntype(
        invoiceremindersActionCreateInvoiceremindersFromParametersPostResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionPrerunInvoiceremindersForInvoicelistPost

const invoiceremindersActionPrerunInvoiceremindersForInvoicelistPostArgsRt = rt
  .Record({ customerInvoiceIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * invoiceremindersActionPrerunInvoiceremindersForInvoicelistPost
 * `POST:
 * /invoicereminders?action=prerun-invoicereminders-for-invoicelist`
 * prerun-invoicereminders-for-invoicelist Action
 */
export const invoiceremindersActionPrerunInvoiceremindersForInvoicelistPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionPrerunInvoiceremindersForInvoicelistPostArgsRt
      >
    >()
    .method('post')
    .path('/invoicereminders?action=prerun-invoicereminders-for-invoicelist')
    .body((args) => args.customerInvoiceIDs)
    .parseJson(withRuntype(prerunInvoiceReminderResultRt))
    .build();

// Operation: invoiceremindersActionPrerunInvoiceremindersFromParametersPost

const invoiceremindersActionPrerunInvoiceremindersFromParametersPostArgsRt = rt
  .Record({
    getDueInvoicesOnly: rt.Boolean,
    compareWithDate: rt.Unknown,
    invoiceWithReminderStop: rt.Boolean,
    searchText: rt.String,
    reminderNumber: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * invoiceremindersActionPrerunInvoiceremindersFromParametersPost
 * `POST:
 * /invoicereminders?action=prerun-invoicereminders-from-parameters`
 * prerun-invoicereminders-from-parameters Action
 */
export const invoiceremindersActionPrerunInvoiceremindersFromParametersPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionPrerunInvoiceremindersFromParametersPostArgsRt
      >
    >()
    .method('post')
    .path(
      (args) =>
        `/invoicereminders?action=prerun-invoicereminders-from-parameters`,
    )
    .parseJson(withRuntype(prerunInvoiceReminderResultRt))
    .build();

// Operation: invoiceremindersActionCreateInvoiceremindersFromReminderRulesPost

const invoiceremindersActionCreateInvoiceremindersFromReminderRulesPostResponseBodyRt =
  rt.Array(customerInvoiceReminderRt);

/**
 * operation ID:
 * invoiceremindersActionCreateInvoiceremindersFromReminderRulesPost
 * `POST:
 * /invoicereminders?action=create-invoicereminders-from-reminder-rules`
 * create-invoicereminders-from-reminder-rules Action
 */
export const invoiceremindersActionCreateInvoiceremindersFromReminderRulesPost =
  buildCall() //
    .method('post')
    .path(
      '/invoicereminders?action=create-invoicereminders-from-reminder-rules',
    )
    .parseJson(
      withRuntype(
        invoiceremindersActionCreateInvoiceremindersFromReminderRulesPostResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionGetInvoiceremindersForInvoicelistPost

const invoiceremindersActionGetInvoiceremindersForInvoicelistPostArgsRt = rt
  .Record({ customerInvoiceIDs: rt.Number })
  .asPartial()
  .asReadonly();

const invoiceremindersActionGetInvoiceremindersForInvoicelistPostResponseBodyRt =
  rt.Array(customerInvoiceReminderRt);

/**
 * operation ID:
 * invoiceremindersActionGetInvoiceremindersForInvoicelistPost
 * `POST:
 * /invoicereminders?action=get-invoicereminders-for-invoicelist`
 * get-invoicereminders-for-invoicelist Action
 */
export const invoiceremindersActionGetInvoiceremindersForInvoicelistPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionGetInvoiceremindersForInvoicelistPostArgsRt
      >
    >()
    .method('post')
    .path('/invoicereminders?action=get-invoicereminders-for-invoicelist')
    .body((args) => args.customerInvoiceIDs)
    .parseJson(
      withRuntype(
        invoiceremindersActionGetInvoiceremindersForInvoicelistPostResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionGetInvoiceremindersFromReminderRulesPost

const invoiceremindersActionGetInvoiceremindersFromReminderRulesPostResponseBodyRt =
  rt.Array(customerInvoiceReminderRt);

/**
 * operation ID:
 * invoiceremindersActionGetInvoiceremindersFromReminderRulesPost
 * `POST:
 * /invoicereminders?action=get-invoicereminders-from-reminder-rules`
 * get-invoicereminders-from-reminder-rules Action
 */
export const invoiceremindersActionGetInvoiceremindersFromReminderRulesPost =
  buildCall() //
    .method('post')
    .path('/invoicereminders?action=get-invoicereminders-from-reminder-rules')
    .parseJson(
      withRuntype(
        invoiceremindersActionGetInvoiceremindersFromReminderRulesPostResponseBodyRt,
      ),
    )
    .build();

// Operation: invoiceremindersActionQueueForDebtCollectionPut

const invoiceremindersActionQueueForDebtCollectionPutArgsRt = rt
  .Record({ customerInvoiceIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * invoiceremindersActionQueueForDebtCollectionPut
 * `PUT: /invoicereminders?action=queue-for-debt-collection`
 * queue-for-debt-collection Action
 */
export const invoiceremindersActionQueueForDebtCollectionPut = buildCall() //
  .args<
    rt.Static<typeof invoiceremindersActionQueueForDebtCollectionPutArgsRt>
  >()
  .method('put')
  .path('/invoicereminders?action=queue-for-debt-collection')
  .body((args) => args.customerInvoiceIDs)
  .build();

// Operation: invoiceremindersActionGetSumRemindersToDebtCollectionGet

/**
 * operation ID:
 * invoiceremindersActionGetSumRemindersToDebtCollectionGet
 * `GET:
 * /invoicereminders?action=get-sum-reminders-to-debt-collection`
 * get-sum-reminders-to-debt-collection Action
 */
export const invoiceremindersActionGetSumRemindersToDebtCollectionGet =
  buildCall() //
    .method('get')
    .path('/invoicereminders?action=get-sum-reminders-to-debt-collection')
    .build();

// Operation: invoiceremindersActionGetSumCustomerInvoicesReadyForRemindingGet

/**
 * operation ID:
 * invoiceremindersActionGetSumCustomerInvoicesReadyForRemindingGet
 * `GET:
 * /invoicereminders?action=get-sum-customer-invoices-ready-for-reminding`
 * get-sum-customer-invoices-ready-for-reminding Action
 */
export const invoiceremindersActionGetSumCustomerInvoicesReadyForRemindingGet =
  buildCall() //
    .method('get')
    .path(
      '/invoicereminders?action=get-sum-customer-invoices-ready-for-reminding',
    )
    .build();

// Operation: invoiceremindersActionSendPut

const invoiceremindersActionSendPutArgsRt = rt
  .Record({ reminderIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoiceremindersActionSendPut
 * `PUT: /invoicereminders?action=send`
 * send Action
 */
export const invoiceremindersActionSendPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersActionSendPutArgsRt>>()
  .method('put')
  .path('/invoicereminders?action=send')
  .body((args) => args.reminderIDs)
  .build();

// Operation: invoiceremindersActionCanDistributeRemindersPut

const invoiceremindersActionCanDistributeRemindersPutArgsRt = rt
  .Record({ reminderIds: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * invoiceremindersActionCanDistributeRemindersPut
 * `PUT: /invoicereminders?action=can-distribute-reminders`
 * can-distribute-reminders Action
 */
export const invoiceremindersActionCanDistributeRemindersPut = buildCall() //
  .args<
    rt.Static<typeof invoiceremindersActionCanDistributeRemindersPutArgsRt>
  >()
  .method('put')
  .path('/invoicereminders?action=can-distribute-reminders')
  .body((args) => args.reminderIds)
  .parseJson(withRuntype(canDistributeReminderResultRt))
  .build();

// Operation: invoiceremindersActionDistributeRemindersPut

const invoiceremindersActionDistributeRemindersPutArgsRt = rt
  .Record({ input: distributeInvoiceReminderInputRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoiceremindersActionDistributeRemindersPut
 * `PUT: /invoicereminders?action=distribute-reminders`
 * distribute-reminders Action
 */
export const invoiceremindersActionDistributeRemindersPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersActionDistributeRemindersPutArgsRt>>()
  .method('put')
  .path('/invoicereminders?action=distribute-reminders')
  .body((args) => args.input)
  .build();

// Operation: invoiceremindersActionSendInvoicePrintPut

const invoiceremindersActionSendInvoicePrintPutArgsRt = rt
  .Record({ reminderIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoiceremindersActionSendInvoicePrintPut
 * `PUT: /invoicereminders?action=send-invoice-print`
 * send-invoice-print Action
 */
export const invoiceremindersActionSendInvoicePrintPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersActionSendInvoicePrintPutArgsRt>>()
  .method('put')
  .path('/invoicereminders?action=send-invoice-print')
  .body((args) => args.reminderIDs)
  .build();

// Operation: invoiceremindersActionSetStatusToSentPut

const invoiceremindersActionSetStatusToSentPutArgsRt = rt
  .Record({ reminderIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoiceremindersActionSetStatusToSentPut
 * `PUT: /invoicereminders?action=set-status-to-sent`
 * set-status-to-sent Action
 */
export const invoiceremindersActionSetStatusToSentPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersActionSetStatusToSentPutArgsRt>>()
  .method('put')
  .path('/invoicereminders?action=set-status-to-sent')
  .body((args) => args.reminderIDs)
  .build();

// Operation: invoiceremindersActionCreateNotificationReadyForDebtCollectionPost

const invoiceremindersActionCreateNotificationReadyForDebtCollectionPostArgsRt =
  rt.Record({ reminderIDs: rt.Number }).asPartial().asReadonly();

/**
 * operation ID:
 * invoiceremindersActionCreateNotificationReadyForDebtCollectionPost
 * `POST:
 * /invoicereminders?action=create-notification-ready-for-debt-collection`
 * create-notification-ready-for-debt-collection Action
 */
export const invoiceremindersActionCreateNotificationReadyForDebtCollectionPost =
  buildCall() //
    .args<
      rt.Static<
        typeof invoiceremindersActionCreateNotificationReadyForDebtCollectionPostArgsRt
      >
    >()
    .method('post')
    .path(
      '/invoicereminders?action=create-notification-ready-for-debt-collection',
    )
    .body((args) => args.reminderIDs)
    .build();

// Operation: invoiceremindersIdActionSendPost

const invoiceremindersIdActionSendPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoiceremindersIdActionSendPost
 * `POST: /invoicereminders/{id}?action=send`
 * send Transition
 */
export const invoiceremindersIdActionSendPost = buildCall() //
  .args<rt.Static<typeof invoiceremindersIdActionSendPostArgsRt>>()
  .method('post')
  .path((args) => `/invoicereminders/${args.id}?action=send`)
  .build();

// Operation: invoiceremindersIdGet

const invoiceremindersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: invoiceremindersIdGet
 * `GET: /invoicereminders/{id}`
 * Get CustomerInvoiceReminder
 */
export const invoiceremindersIdGet = buildCall() //
  .args<rt.Static<typeof invoiceremindersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoicereminders/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderRt))
  .build();

// Operation: invoiceremindersIdPut

const invoiceremindersIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerInvoiceReminder: customerInvoiceReminderRt })
  .asReadonly();

/**
 * operation ID: invoiceremindersIdPut
 * `PUT: /invoicereminders/{id}`
 * Update CustomerInvoiceReminder
 */
export const invoiceremindersIdPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoicereminders/${args.id}`)
  .body((args) => args.CustomerInvoiceReminder)
  .parseJson(withRuntype(customerInvoiceReminderRt))
  .build();

// Operation: invoiceremindersIdDelete

const invoiceremindersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoiceremindersIdDelete
 * `DELETE: /invoicereminders/{id}`
 * Delete CustomerInvoiceReminder
 */
export const invoiceremindersIdDelete = buildCall() //
  .args<rt.Static<typeof invoiceremindersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoicereminders/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderRt))
  .build();

// Operation: invoiceremindersGet

const invoiceremindersGetResponseBodyRt = rt.Array(customerInvoiceReminderRt);

/**
 * operation ID: invoiceremindersGet
 * `GET: /invoicereminders`
 * Query CustomerInvoiceReminder
 */
export const invoiceremindersGet = buildCall() //
  .method('get')
  .path('/invoicereminders')
  .parseJson(withRuntype(invoiceremindersGetResponseBodyRt))
  .build();

// Operation: invoiceremindersPost

const invoiceremindersPostArgsRt = rt
  .Record({ CustomerInvoiceReminder: customerInvoiceReminderRt })
  .asReadonly();

/**
 * operation ID: invoiceremindersPost
 * `POST: /invoicereminders`
 * Create CustomerInvoiceReminder
 */
export const invoiceremindersPost = buildCall() //
  .args<rt.Static<typeof invoiceremindersPostArgsRt>>()
  .method('post')
  .path('/invoicereminders')
  .body((args) => args.CustomerInvoiceReminder)
  .build();

// Operation: invoicereminderrulesIdGet

const invoicereminderrulesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoicereminderrulesIdGet
 * `GET: /invoicereminderrules/{id}`
 * Get CustomerInvoiceReminderRule
 */
export const invoicereminderrulesIdGet = buildCall() //
  .args<rt.Static<typeof invoicereminderrulesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoicereminderrules/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderRuleRt))
  .build();

// Operation: invoicereminderrulesIdPut

const invoicereminderrulesIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    CustomerInvoiceReminderRule: customerInvoiceReminderRuleRt,
  })
  .asReadonly();

/**
 * operation ID: invoicereminderrulesIdPut
 * `PUT: /invoicereminderrules/{id}`
 * Update CustomerInvoiceReminderRule
 */
export const invoicereminderrulesIdPut = buildCall() //
  .args<rt.Static<typeof invoicereminderrulesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoicereminderrules/${args.id}`)
  .body((args) => args.CustomerInvoiceReminderRule)
  .parseJson(withRuntype(customerInvoiceReminderRuleRt))
  .build();

// Operation: invoicereminderrulesIdDelete

const invoicereminderrulesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoicereminderrulesIdDelete
 * `DELETE: /invoicereminderrules/{id}`
 * Delete CustomerInvoiceReminderRule
 */
export const invoicereminderrulesIdDelete = buildCall() //
  .args<rt.Static<typeof invoicereminderrulesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoicereminderrules/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderRuleRt))
  .build();

// Operation: invoicereminderrulesGet

const invoicereminderrulesGetResponseBodyRt = rt.Array(
  customerInvoiceReminderRuleRt,
);

/**
 * operation ID: invoicereminderrulesGet
 * `GET: /invoicereminderrules`
 * Query CustomerInvoiceReminderRule
 */
export const invoicereminderrulesGet = buildCall() //
  .method('get')
  .path('/invoicereminderrules')
  .parseJson(withRuntype(invoicereminderrulesGetResponseBodyRt))
  .build();

// Operation: invoicereminderrulesPost

const invoicereminderrulesPostArgsRt = rt
  .Record({ CustomerInvoiceReminderRule: customerInvoiceReminderRuleRt })
  .asReadonly();

/**
 * operation ID: invoicereminderrulesPost
 * `POST: /invoicereminderrules`
 * Create CustomerInvoiceReminderRule
 */
export const invoicereminderrulesPost = buildCall() //
  .args<rt.Static<typeof invoicereminderrulesPostArgsRt>>()
  .method('post')
  .path('/invoicereminderrules')
  .body((args) => args.CustomerInvoiceReminderRule)
  .build();

// Operation: invoiceremindersettingsActionGetDefaultRulesGet

const invoiceremindersettingsActionGetDefaultRulesGetResponseBodyRt = rt.Array(
  customerInvoiceReminderSettingsRt,
);

/**
 * operation ID:
 * invoiceremindersettingsActionGetDefaultRulesGet
 * `GET: /invoiceremindersettings?action=get-default-rules`
 * get-default-rules Action
 */
export const invoiceremindersettingsActionGetDefaultRulesGet = buildCall() //
  .method('get')
  .path('/invoiceremindersettings?action=get-default-rules')
  .parseJson(
    withRuntype(invoiceremindersettingsActionGetDefaultRulesGetResponseBodyRt),
  )
  .build();

// Operation: invoiceremindersettingsIdGet

const invoiceremindersettingsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoiceremindersettingsIdGet
 * `GET: /invoiceremindersettings/{id}`
 * Get CustomerInvoiceReminderSettings
 */
export const invoiceremindersettingsIdGet = buildCall() //
  .args<rt.Static<typeof invoiceremindersettingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoiceremindersettings/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderSettingsRt))
  .build();

// Operation: invoiceremindersettingsIdPut

const invoiceremindersettingsIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    CustomerInvoiceReminderSettings: customerInvoiceReminderSettingsRt,
  })
  .asReadonly();

/**
 * operation ID: invoiceremindersettingsIdPut
 * `PUT: /invoiceremindersettings/{id}`
 * Update CustomerInvoiceReminderSettings
 */
export const invoiceremindersettingsIdPut = buildCall() //
  .args<rt.Static<typeof invoiceremindersettingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoiceremindersettings/${args.id}`)
  .body((args) => args.CustomerInvoiceReminderSettings)
  .parseJson(withRuntype(customerInvoiceReminderSettingsRt))
  .build();

// Operation: invoiceremindersettingsIdDelete

const invoiceremindersettingsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoiceremindersettingsIdDelete
 * `DELETE: /invoiceremindersettings/{id}`
 * Delete CustomerInvoiceReminderSettings
 */
export const invoiceremindersettingsIdDelete = buildCall() //
  .args<rt.Static<typeof invoiceremindersettingsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoiceremindersettings/${args.id}`)
  .parseJson(withRuntype(customerInvoiceReminderSettingsRt))
  .build();

// Operation: invoiceremindersettingsGet

const invoiceremindersettingsGetResponseBodyRt = rt.Array(
  customerInvoiceReminderSettingsRt,
);

/**
 * operation ID: invoiceremindersettingsGet
 * `GET: /invoiceremindersettings`
 * Query CustomerInvoiceReminderSettings
 */
export const invoiceremindersettingsGet = buildCall() //
  .method('get')
  .path('/invoiceremindersettings')
  .parseJson(withRuntype(invoiceremindersettingsGetResponseBodyRt))
  .build();

// Operation: invoiceremindersettingsPost

const invoiceremindersettingsPostArgsRt = rt
  .Record({
    CustomerInvoiceReminderSettings: customerInvoiceReminderSettingsRt,
  })
  .asReadonly();

/**
 * operation ID: invoiceremindersettingsPost
 * `POST: /invoiceremindersettings`
 * Create CustomerInvoiceReminderSettings
 */
export const invoiceremindersettingsPost = buildCall() //
  .args<rt.Static<typeof invoiceremindersettingsPostArgsRt>>()
  .method('post')
  .path('/invoiceremindersettings')
  .body((args) => args.CustomerInvoiceReminderSettings)
  .build();

// Operation: debtcollectionautomationIdGet

const debtcollectionautomationIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: debtcollectionautomationIdGet
 * `GET: /debtcollectionautomation/{id}`
 * Get DebtCollectionAutomation
 */
export const debtcollectionautomationIdGet = buildCall() //
  .args<rt.Static<typeof debtcollectionautomationIdGetArgsRt>>()
  .method('get')
  .path((args) => `/debtcollectionautomation/${args.id}`)
  .parseJson(withRuntype(debtCollectionAutomationRt))
  .build();

// Operation: debtcollectionautomationIdPut

const debtcollectionautomationIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    DebtCollectionAutomation: debtCollectionAutomationRt,
  })
  .asReadonly();

/**
 * operation ID: debtcollectionautomationIdPut
 * `PUT: /debtcollectionautomation/{id}`
 * Update DebtCollectionAutomation
 */
export const debtcollectionautomationIdPut = buildCall() //
  .args<rt.Static<typeof debtcollectionautomationIdPutArgsRt>>()
  .method('put')
  .path((args) => `/debtcollectionautomation/${args.id}`)
  .body((args) => args.DebtCollectionAutomation)
  .parseJson(withRuntype(debtCollectionAutomationRt))
  .build();

// Operation: debtcollectionautomationIdDelete

const debtcollectionautomationIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: debtcollectionautomationIdDelete
 * `DELETE: /debtcollectionautomation/{id}`
 * Delete DebtCollectionAutomation
 */
export const debtcollectionautomationIdDelete = buildCall() //
  .args<rt.Static<typeof debtcollectionautomationIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/debtcollectionautomation/${args.id}`)
  .parseJson(withRuntype(debtCollectionAutomationRt))
  .build();

// Operation: debtcollectionautomationGet

const debtcollectionautomationGetResponseBodyRt = rt.Array(
  debtCollectionAutomationRt,
);

/**
 * operation ID: debtcollectionautomationGet
 * `GET: /debtcollectionautomation`
 * Query DebtCollectionAutomation
 */
export const debtcollectionautomationGet = buildCall() //
  .method('get')
  .path('/debtcollectionautomation')
  .parseJson(withRuntype(debtcollectionautomationGetResponseBodyRt))
  .build();

// Operation: debtcollectionautomationPost

const debtcollectionautomationPostArgsRt = rt
  .Record({ DebtCollectionAutomation: debtCollectionAutomationRt })
  .asReadonly();

/**
 * operation ID: debtcollectionautomationPost
 * `POST: /debtcollectionautomation`
 * Create DebtCollectionAutomation
 */
export const debtcollectionautomationPost = buildCall() //
  .args<rt.Static<typeof debtcollectionautomationPostArgsRt>>()
  .method('post')
  .path('/debtcollectionautomation')
  .body((args) => args.DebtCollectionAutomation)
  .build();

// Operation: debtcollectionsettingsIdGet

const debtcollectionsettingsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: debtcollectionsettingsIdGet
 * `GET: /debtcollectionsettings/{id}`
 * Get DebtCollectionSettings
 */
export const debtcollectionsettingsIdGet = buildCall() //
  .args<rt.Static<typeof debtcollectionsettingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/debtcollectionsettings/${args.id}`)
  .parseJson(withRuntype(debtCollectionSettingsRt))
  .build();

// Operation: debtcollectionsettingsIdPut

const debtcollectionsettingsIdPutArgsRt = rt
  .Record({ id: rt.Number, DebtCollectionSettings: debtCollectionSettingsRt })
  .asReadonly();

/**
 * operation ID: debtcollectionsettingsIdPut
 * `PUT: /debtcollectionsettings/{id}`
 * Update DebtCollectionSettings
 */
export const debtcollectionsettingsIdPut = buildCall() //
  .args<rt.Static<typeof debtcollectionsettingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/debtcollectionsettings/${args.id}`)
  .body((args) => args.DebtCollectionSettings)
  .parseJson(withRuntype(debtCollectionSettingsRt))
  .build();

// Operation: debtcollectionsettingsIdDelete

const debtcollectionsettingsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: debtcollectionsettingsIdDelete
 * `DELETE: /debtcollectionsettings/{id}`
 * Delete DebtCollectionSettings
 */
export const debtcollectionsettingsIdDelete = buildCall() //
  .args<rt.Static<typeof debtcollectionsettingsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/debtcollectionsettings/${args.id}`)
  .parseJson(withRuntype(debtCollectionSettingsRt))
  .build();

// Operation: debtcollectionsettingsGet

const debtcollectionsettingsGetResponseBodyRt = rt.Array(
  debtCollectionSettingsRt,
);

/**
 * operation ID: debtcollectionsettingsGet
 * `GET: /debtcollectionsettings`
 * Query DebtCollectionSettings
 */
export const debtcollectionsettingsGet = buildCall() //
  .method('get')
  .path('/debtcollectionsettings')
  .parseJson(withRuntype(debtcollectionsettingsGetResponseBodyRt))
  .build();

// Operation: debtcollectionsettingsPost

const debtcollectionsettingsPostArgsRt = rt
  .Record({ DebtCollectionSettings: debtCollectionSettingsRt })
  .asReadonly();

/**
 * operation ID: debtcollectionsettingsPost
 * `POST: /debtcollectionsettings`
 * Create DebtCollectionSettings
 */
export const debtcollectionsettingsPost = buildCall() //
  .args<rt.Static<typeof debtcollectionsettingsPostArgsRt>>()
  .method('post')
  .path('/debtcollectionsettings')
  .body((args) => args.DebtCollectionSettings)
  .build();

// Operation: invoicesActionRegularPost

const invoicesActionRegularPostArgsRt = rt
  .Record({ entity: customerInvoiceRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoicesActionRegularPost
 * `POST: /invoices?action=regular`
 * regular Action
 */
export const invoicesActionRegularPost = buildCall() //
  .args<rt.Static<typeof invoicesActionRegularPostArgsRt>>()
  .method('post')
  .path('/invoices?action=regular')
  .body((args) => args.entity)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesActionCalculateInvoiceSummaryPost

const invoicesActionCalculateInvoiceSummaryPostArgsRt = rt
  .Record({ invoiceItems: rt.Array(customerInvoiceItemRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoicesActionCalculateInvoiceSummaryPost
 * `POST: /invoices?action=calculate-invoice-summary`
 * calculate-invoice-summary Action
 */
export const invoicesActionCalculateInvoiceSummaryPost = buildCall() //
  .args<rt.Static<typeof invoicesActionCalculateInvoiceSummaryPostArgsRt>>()
  .method('post')
  .path('/invoices?action=calculate-invoice-summary')
  .body((args) => args.invoiceItems)
  .parseJson(withRuntype(tradeHeaderCalculationSummaryRt))
  .build();

// Operation: invoicesIdActionCalculateVatSummaryGet

const invoicesIdActionCalculateVatSummaryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: invoicesIdActionCalculateVatSummaryGet
 * `GET: /invoices/{id}?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const invoicesIdActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=calculate-vat-summary`)
  .parseJson(withRuntype(invoicesIdActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: invoicesActionCalculateVatSummaryGet

const invoicesActionCalculateVatSummaryGetArgsRt = rt
  .Record({ InvoiceNumber: rt.String })
  .asPartial()
  .asReadonly();

const invoicesActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: invoicesActionCalculateVatSummaryGet
 * `GET: /invoices?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const invoicesActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof invoicesActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices?action=calculate-vat-summary`)
  .parseJson(withRuntype(invoicesActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: invoicesIdActionNextGet

const invoicesIdActionNextGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionNextGet
 * `GET: /invoices/{id}?action=next`
 * next Action
 */
export const invoicesIdActionNextGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=next`)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesIdActionPreviousGet

const invoicesIdActionPreviousGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionPreviousGet
 * `GET: /invoices/{id}?action=previous`
 * previous Action
 */
export const invoicesIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=previous`)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesIdActionCreateInvoiceJournalentrydraftPut

const invoicesIdActionCreateInvoiceJournalentrydraftPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID:
 * invoicesIdActionCreateInvoiceJournalentrydraftPut
 * `PUT:
 * /invoices/{id}?action=create-invoice-journalentrydraft`
 * create-invoice-journalentrydraft Action
 */
export const invoicesIdActionCreateInvoiceJournalentrydraftPut = buildCall() //
  .args<
    rt.Static<typeof invoicesIdActionCreateInvoiceJournalentrydraftPutArgsRt>
  >()
  .method('put')
  .path(
    (args) => `/invoices/${args.id}?action=create-invoice-journalentrydraft`,
  )
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: invoicesIdActionCreateCreditDraftInvoicePut

const invoicesIdActionCreateCreditDraftInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionCreateCreditDraftInvoicePut
 * `PUT: /invoices/{id}?action=create-credit-draft-invoice`
 * create-credit-draft-invoice Action
 */
export const invoicesIdActionCreateCreditDraftInvoicePut = buildCall() //
  .args<rt.Static<typeof invoicesIdActionCreateCreditDraftInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/invoices/${args.id}?action=create-credit-draft-invoice`)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesIdActionPayInvoicePut

const invoicesIdActionPayInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, data: invoicePaymentDataRt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: invoicesIdActionPayInvoicePut
 * `PUT: /invoices/{id}?action=payInvoice`
 * payInvoice Action
 */
export const invoicesIdActionPayInvoicePut = buildCall() //
  .args<rt.Static<typeof invoicesIdActionPayInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/invoices/${args.id}?action=payInvoice`)
  .body((args) => args.data)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: invoicesIdActionPayInvoiceWithNumberSeriesIdPut

const invoicesIdActionPayInvoiceWithNumberSeriesIdPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      id: rt.Number,
      data: invoicePaymentDataRt,
      numberSeriesID: rt.Number,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID:
 * invoicesIdActionPayInvoiceWithNumberSeriesIdPut
 * `PUT:
 * /invoices/{id}?action=pay-invoice-with-number-series-id`
 * pay-invoice-with-number-series-id Action
 */
export const invoicesIdActionPayInvoiceWithNumberSeriesIdPut = buildCall() //
  .args<
    rt.Static<typeof invoicesIdActionPayInvoiceWithNumberSeriesIdPutArgsRt>
  >()
  .method('put')
  .path(
    (args) => `/invoices/${args.id}?action=pay-invoice-with-number-series-id`,
  )
  .body((args) => args.data)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: invoicesActionMatchInvoicesManualPut

const invoicesActionMatchInvoicesManualPutArgsRt = rt
  .Record({ customerInvoiceIDs: rt.String, paymentID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoicesActionMatchInvoicesManualPut
 * `PUT: /invoices?action=match-invoices-manual`
 * match-invoices-manual Action
 */
export const invoicesActionMatchInvoicesManualPut = buildCall() //
  .args<rt.Static<typeof invoicesActionMatchInvoicesManualPutArgsRt>>()
  .method('put')
  .path((args) => `/invoices?action=match-invoices-manual`)
  .body((args) => args.customerInvoiceIDs)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: invoicesActionGetCustomerInvoiceSummaryGet

const invoicesActionGetCustomerInvoiceSummaryGetArgsRt = rt
  .Record({ odataFilter: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoicesActionGetCustomerInvoiceSummaryGet
 * `GET: /invoices?action=get-customer-invoice-summary`
 * get-customer-invoice-summary Action
 */
export const invoicesActionGetCustomerInvoiceSummaryGet = buildCall() //
  .args<rt.Static<typeof invoicesActionGetCustomerInvoiceSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices?action=get-customer-invoice-summary`)
  .parseJson(withRuntype(invoiceSummaryRt))
  .build();

// Operation: invoicesIdActionSetCustomerInvoicePrintstatusPut

const invoicesIdActionSetCustomerInvoicePrintstatusPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ ID: rt.Number, printStatus: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID:
 * invoicesIdActionSetCustomerInvoicePrintstatusPut
 * `PUT:
 * /invoices/{id}?action=set-customer-invoice-printstatus`
 * set-customer-invoice-printstatus Action
 */
export const invoicesIdActionSetCustomerInvoicePrintstatusPut = buildCall() //
  .args<
    rt.Static<typeof invoicesIdActionSetCustomerInvoicePrintstatusPutArgsRt>
  >()
  .method('put')
  .path(
    (args) => `/invoices/${args.id}?action=set-customer-invoice-printstatus`,
  )
  .build();

// Operation: invoicesIdActionToggleReminderStopPut

const invoicesIdActionToggleReminderStopPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionToggleReminderStopPut
 * `PUT: /invoices/{id}?action=toggle-reminder-stop`
 * toggle-reminder-stop Action
 */
export const invoicesIdActionToggleReminderStopPut = buildCall() //
  .args<rt.Static<typeof invoicesIdActionToggleReminderStopPutArgsRt>>()
  .method('put')
  .path((args) => `/invoices/${args.id}?action=toggle-reminder-stop`)
  .build();

// Operation: invoicesIdActionValidateVippsUserGet

const invoicesIdActionValidateVippsUserGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionValidateVippsUserGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: invoicesIdActionValidateVippsUserGet
 * `GET: /invoices/{id}?action=validate-vipps-user`
 * validate-vipps-user Action
 */
export const invoicesIdActionValidateVippsUserGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionValidateVippsUserGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=validate-vipps-user`)
  .parseJson(withRuntype(invoicesIdActionValidateVippsUserGetResponseBodyRt))
  .build();

// Operation: invoicesIdActionUpdateExternalStatusPut

const invoicesIdActionUpdateExternalStatusPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, newStatus: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionUpdateExternalStatusPut
 * `PUT: /invoices/{id}?action=update-external-status`
 * update-external-status Action
 */
export const invoicesIdActionUpdateExternalStatusPut = buildCall() //
  .args<rt.Static<typeof invoicesIdActionUpdateExternalStatusPutArgsRt>>()
  .method('put')
  .path((args) => `/invoices/${args.id}?action=update-external-status`)
  .body((args) => args.newStatus)
  .build();

// Operation: invoicesActionGetBarnepassDataGet

const invoicesActionGetBarnepassDataGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const invoicesActionGetBarnepassDataGetResponseBodyRt =
  rt.Array(barnepassOppgaveRt);

/**
 * operation ID: invoicesActionGetBarnepassDataGet
 * `GET: /invoices?action=get-barnepass-data`
 * get-barnepass-data Action
 */
export const invoicesActionGetBarnepassDataGet = buildCall() //
  .args<rt.Static<typeof invoicesActionGetBarnepassDataGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices?action=get-barnepass-data`)
  .parseJson(withRuntype(invoicesActionGetBarnepassDataGetResponseBodyRt))
  .build();

// Operation: invoicesActionGetCustomerGet

const invoicesActionGetCustomerGetArgsRt = rt
  .Record({ orgNumber: rt.String, name: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: invoicesActionGetCustomerGet
 * `GET: /invoices?action=get-customer`
 * get-customer Action
 */
export const invoicesActionGetCustomerGet = buildCall() //
  .args<rt.Static<typeof invoicesActionGetCustomerGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices?action=get-customer`)
  .parseJson(withRuntype(customerRt))
  .build();

// Operation: invoicesActionGetCustomersGet

const invoicesActionGetCustomersGetArgsRt = rt
  .Record({ customersNrAndName: rt.Array(customerNoAndNameRt) })
  .asPartial()
  .asReadonly();

const invoicesActionGetCustomersGetResponseBodyRt = rt.Array(customerRt);

/**
 * operation ID: invoicesActionGetCustomersGet
 * `GET: /invoices?action=get-customers`
 * get-customers Action
 */
export const invoicesActionGetCustomersGet = buildCall() //
  .args<rt.Static<typeof invoicesActionGetCustomersGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices?action=get-customers`)
  .parseJson(withRuntype(invoicesActionGetCustomersGetResponseBodyRt))
  .build();

// Operation: invoicesIdActionGetPaymentsGet

const invoicesIdActionGetPaymentsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionGetPaymentsGetResponseBodyRt = rt.Array(invoicePaymentRt);

/**
 * operation ID: invoicesIdActionGetPaymentsGet
 * `GET: /invoices/{id}?action=get-payments`
 * get-payments Action
 */
export const invoicesIdActionGetPaymentsGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionGetPaymentsGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=get-payments`)
  .parseJson(withRuntype(invoicesIdActionGetPaymentsGetResponseBodyRt))
  .build();

// Operation: invoicesIdActionGetAprilaOfferGet

const invoicesIdActionGetAprilaOfferGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionGetAprilaOfferGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: invoicesIdActionGetAprilaOfferGet
 * `GET: /invoices/{id}?action=get-aprila-offer`
 * get-aprila-offer Action
 */
export const invoicesIdActionGetAprilaOfferGet = buildCall() //
  .args<rt.Static<typeof invoicesIdActionGetAprilaOfferGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}?action=get-aprila-offer`)
  .parseJson(withRuntype(invoicesIdActionGetAprilaOfferGetResponseBodyRt))
  .build();

// Operation: invoicesIdActionAcceptDeclineAprilaOfferPost

const invoicesIdActionAcceptDeclineAprilaOfferPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      id: rt.Number,
      aprilaOrderId: rt.String,
      acceptOffer: rt.Boolean,
      offer: orderOfferRt,
    })
    .asPartial()
    .asReadonly(),
);

const invoicesIdActionAcceptDeclineAprilaOfferPostResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: invoicesIdActionAcceptDeclineAprilaOfferPost
 * `POST: /invoices/{id}?action=accept-decline-aprila-offer`
 * accept-decline-aprila-offer Action
 */
export const invoicesIdActionAcceptDeclineAprilaOfferPost = buildCall() //
  .args<rt.Static<typeof invoicesIdActionAcceptDeclineAprilaOfferPostArgsRt>>()
  .method('post')
  .path((args) => `/invoices/${args.id}?action=accept-decline-aprila-offer`)
  .body((args) => args.offer)
  .parseJson(
    withRuntype(invoicesIdActionAcceptDeclineAprilaOfferPostResponseBodyRt),
  )
  .build();

// Operation: invoicesIdActionFulfillAprilaOfferPost

const invoicesIdActionFulfillAprilaOfferPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionFulfillAprilaOfferPostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: invoicesIdActionFulfillAprilaOfferPost
 * `POST: /invoices/{id}?action=fulfill-aprila-offer`
 * fulfill-aprila-offer Action
 */
export const invoicesIdActionFulfillAprilaOfferPost = buildCall() //
  .args<rt.Static<typeof invoicesIdActionFulfillAprilaOfferPostArgsRt>>()
  .method('post')
  .path((args) => `/invoices/${args.id}?action=fulfill-aprila-offer`)
  .parseJson(withRuntype(invoicesIdActionFulfillAprilaOfferPostResponseBodyRt))
  .build();

// Operation: invoicesIdActionInvoicePost

const invoicesIdActionInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const invoicesIdActionInvoicePostResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: invoicesIdActionInvoicePost
 * `POST: /invoices/{id}?action=invoice`
 * invoice Transition
 */
export const invoicesIdActionInvoicePost = buildCall() //
  .args<rt.Static<typeof invoicesIdActionInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/invoices/${args.id}?action=invoice`)
  .parseJson(withRuntype(invoicesIdActionInvoicePostResponseBodyRt))
  .build();

// Operation: invoicesIdActionPayPost

const invoicesIdActionPayPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoicesIdActionPayPost
 * `POST: /invoices/{id}?action=pay`
 * pay Transition
 */
export const invoicesIdActionPayPost = buildCall() //
  .args<rt.Static<typeof invoicesIdActionPayPostArgsRt>>()
  .method('post')
  .path((args) => `/invoices/${args.id}?action=pay`)
  .build();

// Operation: invoicesIdGet

const invoicesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: invoicesIdGet
 * `GET: /invoices/{id}`
 * Get CustomerInvoice
 */
export const invoicesIdGet = buildCall() //
  .args<rt.Static<typeof invoicesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoices/${args.id}`)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesIdPut

const invoicesIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerInvoice: customerInvoiceRt })
  .asReadonly();

/**
 * operation ID: invoicesIdPut
 * `PUT: /invoices/{id}`
 * Update CustomerInvoice
 */
export const invoicesIdPut = buildCall() //
  .args<rt.Static<typeof invoicesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoices/${args.id}`)
  .body((args) => args.CustomerInvoice)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesIdDelete

const invoicesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: invoicesIdDelete
 * `DELETE: /invoices/{id}`
 * Delete CustomerInvoice
 */
export const invoicesIdDelete = buildCall() //
  .args<rt.Static<typeof invoicesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoices/${args.id}`)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: invoicesGet

const invoicesGetResponseBodyRt = rt.Array(customerInvoiceRt);

/**
 * operation ID: invoicesGet
 * `GET: /invoices`
 * Query CustomerInvoice
 */
export const invoicesGet = buildCall() //
  .method('get')
  .path('/invoices')
  .parseJson(withRuntype(invoicesGetResponseBodyRt))
  .build();

// Operation: invoicesPost

const invoicesPostArgsRt = rt
  .Record({ CustomerInvoice: customerInvoiceRt })
  .asReadonly();

/**
 * operation ID: invoicesPost
 * `POST: /invoices`
 * Create CustomerInvoice
 */
export const invoicesPost = buildCall() //
  .args<rt.Static<typeof invoicesPostArgsRt>>()
  .method('post')
  .path('/invoices')
  .body((args) => args.CustomerInvoice)
  .build();

// Operation: invoiceitemsIdActionInvoicePost

const invoiceitemsIdActionInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: invoiceitemsIdActionInvoicePost
 * `POST: /invoiceitems/{id}?action=invoice`
 * invoice Transition
 */
export const invoiceitemsIdActionInvoicePost = buildCall() //
  .args<rt.Static<typeof invoiceitemsIdActionInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/invoiceitems/${args.id}?action=invoice`)
  .build();

// Operation: invoiceitemsIdGet

const invoiceitemsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: invoiceitemsIdGet
 * `GET: /invoiceitems/{id}`
 * Get CustomerInvoiceItem
 */
export const invoiceitemsIdGet = buildCall() //
  .args<rt.Static<typeof invoiceitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoiceitems/${args.id}`)
  .parseJson(withRuntype(customerInvoiceItemRt))
  .build();

// Operation: invoiceitemsIdPut

const invoiceitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerInvoiceItem: customerInvoiceItemRt })
  .asReadonly();

/**
 * operation ID: invoiceitemsIdPut
 * `PUT: /invoiceitems/{id}`
 * Update CustomerInvoiceItem
 */
export const invoiceitemsIdPut = buildCall() //
  .args<rt.Static<typeof invoiceitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoiceitems/${args.id}`)
  .body((args) => args.CustomerInvoiceItem)
  .parseJson(withRuntype(customerInvoiceItemRt))
  .build();

// Operation: invoiceitemsIdDelete

const invoiceitemsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: invoiceitemsIdDelete
 * `DELETE: /invoiceitems/{id}`
 * Delete CustomerInvoiceItem
 */
export const invoiceitemsIdDelete = buildCall() //
  .args<rt.Static<typeof invoiceitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoiceitems/${args.id}`)
  .parseJson(withRuntype(customerInvoiceItemRt))
  .build();

// Operation: invoiceitemsGet

const invoiceitemsGetResponseBodyRt = rt.Array(customerInvoiceItemRt);

/**
 * operation ID: invoiceitemsGet
 * `GET: /invoiceitems`
 * Query CustomerInvoiceItem
 */
export const invoiceitemsGet = buildCall() //
  .method('get')
  .path('/invoiceitems')
  .parseJson(withRuntype(invoiceitemsGetResponseBodyRt))
  .build();

// Operation: invoiceitemsPost

const invoiceitemsPostArgsRt = rt
  .Record({ CustomerInvoiceItem: customerInvoiceItemRt })
  .asReadonly();

/**
 * operation ID: invoiceitemsPost
 * `POST: /invoiceitems`
 * Create CustomerInvoiceItem
 */
export const invoiceitemsPost = buildCall() //
  .args<rt.Static<typeof invoiceitemsPostArgsRt>>()
  .method('post')
  .path('/invoiceitems')
  .body((args) => args.CustomerInvoiceItem)
  .build();

// Operation: ordersActionCalculateOrderSummaryPost

const ordersActionCalculateOrderSummaryPostArgsRt = rt
  .Record({ orderItems: rt.Array(customerOrderItemRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: ordersActionCalculateOrderSummaryPost
 * `POST: /orders?action=calculate-order-summary`
 * calculate-order-summary Action
 */
export const ordersActionCalculateOrderSummaryPost = buildCall() //
  .args<rt.Static<typeof ordersActionCalculateOrderSummaryPostArgsRt>>()
  .method('post')
  .path('/orders?action=calculate-order-summary')
  .body((args) => args.orderItems)
  .parseJson(withRuntype(tradeHeaderCalculationSummaryRt))
  .build();

// Operation: ordersIdActionSetCustomerOrderPrintstatusPut

const ordersIdActionSetCustomerOrderPrintstatusPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ ID: rt.Number, printStatus: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ordersIdActionSetCustomerOrderPrintstatusPut
 * `PUT: /orders/{id}?action=set-customer-order-printstatus`
 * set-customer-order-printstatus Action
 */
export const ordersIdActionSetCustomerOrderPrintstatusPut = buildCall() //
  .args<rt.Static<typeof ordersIdActionSetCustomerOrderPrintstatusPutArgsRt>>()
  .method('put')
  .path((args) => `/orders/${args.id}?action=set-customer-order-printstatus`)
  .build();

// Operation: ordersIdActionCalculateVatSummaryGet

const ordersIdActionCalculateVatSummaryGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const ordersIdActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: ordersIdActionCalculateVatSummaryGet
 * `GET: /orders/{id}?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const ordersIdActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof ordersIdActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/orders/${args.id}?action=calculate-vat-summary`)
  .parseJson(withRuntype(ordersIdActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: ordersActionCalculateVatSummaryGet

const ordersActionCalculateVatSummaryGetArgsRt = rt
  .Record({ OrderNumber: rt.Number })
  .asPartial()
  .asReadonly();

const ordersActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: ordersActionCalculateVatSummaryGet
 * `GET: /orders?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const ordersActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof ordersActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/orders?action=calculate-vat-summary`)
  .parseJson(withRuntype(ordersActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: ordersIdActionNextGet

const ordersIdActionNextGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ordersIdActionNextGet
 * `GET: /orders/{id}?action=next`
 * next Action
 */
export const ordersIdActionNextGet = buildCall() //
  .args<rt.Static<typeof ordersIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/orders/${args.id}?action=next`)
  .parseJson(withRuntype(customerOrderRt))
  .build();

// Operation: ordersIdActionPreviousGet

const ordersIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: ordersIdActionPreviousGet
 * `GET: /orders/{id}?action=previous`
 * previous Action
 */
export const ordersIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof ordersIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/orders/${args.id}?action=previous`)
  .parseJson(withRuntype(customerOrderRt))
  .build();

// Operation: ordersIdActionTransferToInvoicePut

const ordersIdActionTransferToInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ data: customerOrderRt, copyFiles: rt.Array(fileEntityLinkRt) })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: ordersIdActionTransferToInvoicePut
 * `PUT: /orders/{id}?action=transfer-to-invoice`
 * transfer-to-invoice Action
 */
export const ordersIdActionTransferToInvoicePut = buildCall() //
  .args<rt.Static<typeof ordersIdActionTransferToInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/orders/${args.id}?action=transfer-to-invoice`)
  .body((args) => args.data)
  .parseJson(withRuntype(customerInvoiceRt))
  .build();

// Operation: ordersIdActionRegisterPost

const ordersIdActionRegisterPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ordersIdActionRegisterPost
 * `POST: /orders/{id}?action=register`
 * register Transition
 */
export const ordersIdActionRegisterPost = buildCall() //
  .args<rt.Static<typeof ordersIdActionRegisterPostArgsRt>>()
  .method('post')
  .path((args) => `/orders/${args.id}?action=register`)
  .build();

// Operation: ordersIdActionPartlyTransferToInvoicePost

const ordersIdActionPartlyTransferToInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ordersIdActionPartlyTransferToInvoicePost
 * `POST: /orders/{id}?action=partlyTransferToInvoice`
 * partlyTransferToInvoice Transition
 */
export const ordersIdActionPartlyTransferToInvoicePost = buildCall() //
  .args<rt.Static<typeof ordersIdActionPartlyTransferToInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/orders/${args.id}?action=partlyTransferToInvoice`)
  .build();

// Operation: ordersIdActionTransferToInvoicePost

const ordersIdActionTransferToInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ordersIdActionTransferToInvoicePost
 * `POST: /orders/{id}?action=transferToInvoice`
 * transferToInvoice Transition
 */
export const ordersIdActionTransferToInvoicePost = buildCall() //
  .args<rt.Static<typeof ordersIdActionTransferToInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/orders/${args.id}?action=transferToInvoice`)
  .build();

// Operation: ordersIdActionCompletePost

const ordersIdActionCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ordersIdActionCompletePost
 * `POST: /orders/{id}?action=complete`
 * complete Transition
 */
export const ordersIdActionCompletePost = buildCall() //
  .args<rt.Static<typeof ordersIdActionCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/orders/${args.id}?action=complete`)
  .build();

// Operation: ordersIdGet

const ordersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ordersIdGet
 * `GET: /orders/{id}`
 * Get CustomerOrder
 */
export const ordersIdGet = buildCall() //
  .args<rt.Static<typeof ordersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/orders/${args.id}`)
  .parseJson(withRuntype(customerOrderRt))
  .build();

// Operation: ordersIdPut

const ordersIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerOrder: customerOrderRt })
  .asReadonly();

/**
 * operation ID: ordersIdPut
 * `PUT: /orders/{id}`
 * Update CustomerOrder
 */
export const ordersIdPut = buildCall() //
  .args<rt.Static<typeof ordersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/orders/${args.id}`)
  .body((args) => args.CustomerOrder)
  .parseJson(withRuntype(customerOrderRt))
  .build();

// Operation: ordersIdDelete

const ordersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ordersIdDelete
 * `DELETE: /orders/{id}`
 * Delete CustomerOrder
 */
export const ordersIdDelete = buildCall() //
  .args<rt.Static<typeof ordersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/orders/${args.id}`)
  .parseJson(withRuntype(customerOrderRt))
  .build();

// Operation: ordersGet

const ordersGetResponseBodyRt = rt.Array(customerOrderRt);

/**
 * operation ID: ordersGet
 * `GET: /orders`
 * Query CustomerOrder
 */
export const ordersGet = buildCall() //
  .method('get')
  .path('/orders')
  .parseJson(withRuntype(ordersGetResponseBodyRt))
  .build();

// Operation: ordersPost

const ordersPostArgsRt = rt
  .Record({ CustomerOrder: customerOrderRt })
  .asReadonly();

/**
 * operation ID: ordersPost
 * `POST: /orders`
 * Create CustomerOrder
 */
export const ordersPost = buildCall() //
  .args<rt.Static<typeof ordersPostArgsRt>>()
  .method('post')
  .path('/orders')
  .body((args) => args.CustomerOrder)
  .build();

// Operation: orderitemsIdActionRegisterPost

const orderitemsIdActionRegisterPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: orderitemsIdActionRegisterPost
 * `POST: /orderitems/{id}?action=register`
 * register Transition
 */
export const orderitemsIdActionRegisterPost = buildCall() //
  .args<rt.Static<typeof orderitemsIdActionRegisterPostArgsRt>>()
  .method('post')
  .path((args) => `/orderitems/${args.id}?action=register`)
  .build();

// Operation: orderitemsIdActionToInvoicePost

const orderitemsIdActionToInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: orderitemsIdActionToInvoicePost
 * `POST: /orderitems/{id}?action=toInvoice`
 * toInvoice Transition
 */
export const orderitemsIdActionToInvoicePost = buildCall() //
  .args<rt.Static<typeof orderitemsIdActionToInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/orderitems/${args.id}?action=toInvoice`)
  .build();

// Operation: orderitemsIdActionCompletePost

const orderitemsIdActionCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: orderitemsIdActionCompletePost
 * `POST: /orderitems/{id}?action=complete`
 * complete Transition
 */
export const orderitemsIdActionCompletePost = buildCall() //
  .args<rt.Static<typeof orderitemsIdActionCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/orderitems/${args.id}?action=complete`)
  .build();

// Operation: orderitemsIdGet

const orderitemsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: orderitemsIdGet
 * `GET: /orderitems/{id}`
 * Get CustomerOrderItem
 */
export const orderitemsIdGet = buildCall() //
  .args<rt.Static<typeof orderitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/orderitems/${args.id}`)
  .parseJson(withRuntype(customerOrderItemRt))
  .build();

// Operation: orderitemsIdPut

const orderitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerOrderItem: customerOrderItemRt })
  .asReadonly();

/**
 * operation ID: orderitemsIdPut
 * `PUT: /orderitems/{id}`
 * Update CustomerOrderItem
 */
export const orderitemsIdPut = buildCall() //
  .args<rt.Static<typeof orderitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/orderitems/${args.id}`)
  .body((args) => args.CustomerOrderItem)
  .parseJson(withRuntype(customerOrderItemRt))
  .build();

// Operation: orderitemsIdDelete

const orderitemsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: orderitemsIdDelete
 * `DELETE: /orderitems/{id}`
 * Delete CustomerOrderItem
 */
export const orderitemsIdDelete = buildCall() //
  .args<rt.Static<typeof orderitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/orderitems/${args.id}`)
  .parseJson(withRuntype(customerOrderItemRt))
  .build();

// Operation: orderitemsGet

const orderitemsGetResponseBodyRt = rt.Array(customerOrderItemRt);

/**
 * operation ID: orderitemsGet
 * `GET: /orderitems`
 * Query CustomerOrderItem
 */
export const orderitemsGet = buildCall() //
  .method('get')
  .path('/orderitems')
  .parseJson(withRuntype(orderitemsGetResponseBodyRt))
  .build();

// Operation: orderitemsPost

const orderitemsPostArgsRt = rt
  .Record({ CustomerOrderItem: customerOrderItemRt })
  .asReadonly();

/**
 * operation ID: orderitemsPost
 * `POST: /orderitems`
 * Create CustomerOrderItem
 */
export const orderitemsPost = buildCall() //
  .args<rt.Static<typeof orderitemsPostArgsRt>>()
  .method('post')
  .path('/orderitems')
  .body((args) => args.CustomerOrderItem)
  .build();

// Operation: paymentinfotypeActionGetPaymentinfotypePartsMacrosGet

const paymentinfotypeActionGetPaymentinfotypePartsMacrosGetResponseBodyRt =
  rt.String;

/**
 * operation ID:
 * paymentinfotypeActionGetPaymentinfotypePartsMacrosGet
 * `GET:
 * /paymentinfotype?action=get-paymentinfotype-parts-macros`
 * get-paymentinfotype-parts-macros Action
 */
export const paymentinfotypeActionGetPaymentinfotypePartsMacrosGet = buildCall() //
  .method('get')
  .path('/paymentinfotype?action=get-paymentinfotype-parts-macros')
  .parseJson(
    withRuntype(
      paymentinfotypeActionGetPaymentinfotypePartsMacrosGetResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentinfotypeActionValidateGetPaymentinfoGet

const paymentinfotypeActionValidateGetPaymentinfoGetArgsRt = rt
  .Record({ customerInvoice: customerInvoiceRt, paymentInfoTypeID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentinfotypeActionValidateGetPaymentinfoGetResponseBodyRt = rt.String;

/**
 * operation ID: paymentinfotypeActionValidateGetPaymentinfoGet
 * `GET: /paymentinfotype?action=validate-get-paymentinfo`
 * validate-get-paymentinfo Action
 */
export const paymentinfotypeActionValidateGetPaymentinfoGet = buildCall() //
  .args<
    rt.Static<typeof paymentinfotypeActionValidateGetPaymentinfoGetArgsRt>
  >()
  .method('get')
  .path((args) => `/paymentinfotype?action=validate-get-paymentinfo`)
  .parseJson(
    withRuntype(paymentinfotypeActionValidateGetPaymentinfoGetResponseBodyRt),
  )
  .build();

// Operation: paymentinfotypeActionActivatePaymentinfotypePut

const paymentinfotypeActionActivatePaymentinfotypePutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentinfotypeActionActivatePaymentinfotypePut
 * `PUT: /paymentinfotype?action=activate-paymentinfotype`
 * activate-paymentinfotype Action
 */
export const paymentinfotypeActionActivatePaymentinfotypePut = buildCall() //
  .args<
    rt.Static<typeof paymentinfotypeActionActivatePaymentinfotypePutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentinfotype?action=activate-paymentinfotype`)
  .build();

// Operation: paymentinfotypeActionDeactivatePaymentinfotypePut

const paymentinfotypeActionDeactivatePaymentinfotypePutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentinfotypeActionDeactivatePaymentinfotypePut
 * `PUT: /paymentinfotype?action=deactivate-paymentinfotype`
 * deactivate-paymentinfotype Action
 */
export const paymentinfotypeActionDeactivatePaymentinfotypePut = buildCall() //
  .args<
    rt.Static<typeof paymentinfotypeActionDeactivatePaymentinfotypePutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentinfotype?action=deactivate-paymentinfotype`)
  .build();

// Operation: paymentinfotypeIdGet

const paymentinfotypeIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentinfotypeIdGet
 * `GET: /paymentinfotype/{id}`
 * Get PaymentInfoType
 */
export const paymentinfotypeIdGet = buildCall() //
  .args<rt.Static<typeof paymentinfotypeIdGetArgsRt>>()
  .method('get')
  .path((args) => `/paymentinfotype/${args.id}`)
  .parseJson(withRuntype(paymentInfoTypeRt))
  .build();

// Operation: paymentinfotypeIdPut

const paymentinfotypeIdPutArgsRt = rt
  .Record({ id: rt.Number, PaymentInfoType: paymentInfoTypeRt })
  .asReadonly();

/**
 * operation ID: paymentinfotypeIdPut
 * `PUT: /paymentinfotype/{id}`
 * Update PaymentInfoType
 */
export const paymentinfotypeIdPut = buildCall() //
  .args<rt.Static<typeof paymentinfotypeIdPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentinfotype/${args.id}`)
  .body((args) => args.PaymentInfoType)
  .parseJson(withRuntype(paymentInfoTypeRt))
  .build();

// Operation: paymentinfotypeIdDelete

const paymentinfotypeIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentinfotypeIdDelete
 * `DELETE: /paymentinfotype/{id}`
 * Delete PaymentInfoType
 */
export const paymentinfotypeIdDelete = buildCall() //
  .args<rt.Static<typeof paymentinfotypeIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/paymentinfotype/${args.id}`)
  .parseJson(withRuntype(paymentInfoTypeRt))
  .build();

// Operation: paymentinfotypeGet

const paymentinfotypeGetResponseBodyRt = rt.Array(paymentInfoTypeRt);

/**
 * operation ID: paymentinfotypeGet
 * `GET: /paymentinfotype`
 * Query PaymentInfoType
 */
export const paymentinfotypeGet = buildCall() //
  .method('get')
  .path('/paymentinfotype')
  .parseJson(withRuntype(paymentinfotypeGetResponseBodyRt))
  .build();

// Operation: paymentinfotypePost

const paymentinfotypePostArgsRt = rt
  .Record({ PaymentInfoType: paymentInfoTypeRt })
  .asReadonly();

/**
 * operation ID: paymentinfotypePost
 * `POST: /paymentinfotype`
 * Create PaymentInfoType
 */
export const paymentinfotypePost = buildCall() //
  .args<rt.Static<typeof paymentinfotypePostArgsRt>>()
  .method('post')
  .path('/paymentinfotype')
  .body((args) => args.PaymentInfoType)
  .build();

// Operation: productcategoriesIdGet

const productcategoriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: productcategoriesIdGet
 * `GET: /productcategories/{id}`
 * Get ProductCategory
 */
export const productcategoriesIdGet = buildCall() //
  .args<rt.Static<typeof productcategoriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/productcategories/${args.id}`)
  .parseJson(withRuntype(productCategoryRt))
  .build();

// Operation: productcategoriesIdPut

const productcategoriesIdPutArgsRt = rt
  .Record({ id: rt.Number, ProductCategory: productCategoryRt })
  .asReadonly();

/**
 * operation ID: productcategoriesIdPut
 * `PUT: /productcategories/{id}`
 * Update ProductCategory
 */
export const productcategoriesIdPut = buildCall() //
  .args<rt.Static<typeof productcategoriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/productcategories/${args.id}`)
  .body((args) => args.ProductCategory)
  .parseJson(withRuntype(productCategoryRt))
  .build();

// Operation: productcategoriesIdDelete

const productcategoriesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: productcategoriesIdDelete
 * `DELETE: /productcategories/{id}`
 * Delete ProductCategory
 */
export const productcategoriesIdDelete = buildCall() //
  .args<rt.Static<typeof productcategoriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/productcategories/${args.id}`)
  .parseJson(withRuntype(productCategoryRt))
  .build();

// Operation: productcategoriesGet

const productcategoriesGetResponseBodyRt = rt.Array(productCategoryRt);

/**
 * operation ID: productcategoriesGet
 * `GET: /productcategories`
 * Query ProductCategory
 */
export const productcategoriesGet = buildCall() //
  .method('get')
  .path('/productcategories')
  .parseJson(withRuntype(productcategoriesGetResponseBodyRt))
  .build();

// Operation: productcategoriesPost

const productcategoriesPostArgsRt = rt
  .Record({ ProductCategory: productCategoryRt })
  .asReadonly();

/**
 * operation ID: productcategoriesPost
 * `POST: /productcategories`
 * Create ProductCategory
 */
export const productcategoriesPost = buildCall() //
  .args<rt.Static<typeof productcategoriesPostArgsRt>>()
  .method('post')
  .path('/productcategories')
  .body((args) => args.ProductCategory)
  .build();

// Operation: productcategorylinksIdGet

const productcategorylinksIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: productcategorylinksIdGet
 * `GET: /productcategorylinks/{id}`
 * Get ProductCategoryLink
 */
export const productcategorylinksIdGet = buildCall() //
  .args<rt.Static<typeof productcategorylinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/productcategorylinks/${args.id}`)
  .parseJson(withRuntype(productCategoryLinkRt))
  .build();

// Operation: productcategorylinksIdPut

const productcategorylinksIdPutArgsRt = rt
  .Record({ id: rt.Number, ProductCategoryLink: productCategoryLinkRt })
  .asReadonly();

/**
 * operation ID: productcategorylinksIdPut
 * `PUT: /productcategorylinks/{id}`
 * Update ProductCategoryLink
 */
export const productcategorylinksIdPut = buildCall() //
  .args<rt.Static<typeof productcategorylinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/productcategorylinks/${args.id}`)
  .body((args) => args.ProductCategoryLink)
  .parseJson(withRuntype(productCategoryLinkRt))
  .build();

// Operation: productcategorylinksIdDelete

const productcategorylinksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: productcategorylinksIdDelete
 * `DELETE: /productcategorylinks/{id}`
 * Delete ProductCategoryLink
 */
export const productcategorylinksIdDelete = buildCall() //
  .args<rt.Static<typeof productcategorylinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/productcategorylinks/${args.id}`)
  .parseJson(withRuntype(productCategoryLinkRt))
  .build();

// Operation: productcategorylinksGet

const productcategorylinksGetResponseBodyRt = rt.Array(productCategoryLinkRt);

/**
 * operation ID: productcategorylinksGet
 * `GET: /productcategorylinks`
 * Query ProductCategoryLink
 */
export const productcategorylinksGet = buildCall() //
  .method('get')
  .path('/productcategorylinks')
  .parseJson(withRuntype(productcategorylinksGetResponseBodyRt))
  .build();

// Operation: productcategorylinksPost

const productcategorylinksPostArgsRt = rt
  .Record({ ProductCategoryLink: productCategoryLinkRt })
  .asReadonly();

/**
 * operation ID: productcategorylinksPost
 * `POST: /productcategorylinks`
 * Create ProductCategoryLink
 */
export const productcategorylinksPost = buildCall() //
  .args<rt.Static<typeof productcategorylinksPostArgsRt>>()
  .method('post')
  .path('/productcategorylinks')
  .body((args) => args.ProductCategoryLink)
  .build();

// Operation: productsIdActionTransitionsGet

const productsIdActionTransitionsGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const productsIdActionTransitionsGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: productsIdActionTransitionsGet
 * `GET: /products/{id}?action=transitions`
 * transitions Action
 */
export const productsIdActionTransitionsGet = buildCall() //
  .args<rt.Static<typeof productsIdActionTransitionsGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=transitions`)
  .parseJson(withRuntype(productsIdActionTransitionsGetResponseBodyRt))
  .build();

// Operation: productsActionCalculatepricePost

const productsActionCalculatepricePostArgsRt = rt
  .Record({ product: productRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: productsActionCalculatepricePost
 * `POST: /products?action=calculateprice`
 * calculateprice Action
 */
export const productsActionCalculatepricePost = buildCall() //
  .args<rt.Static<typeof productsActionCalculatepricePostArgsRt>>()
  .method('post')
  .path('/products?action=calculateprice')
  .body((args) => args.product)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsActionGetnewpartnameGet

const productsActionGetnewpartnameGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: productsActionGetnewpartnameGet
 * `GET: /products?action=getnewpartname`
 * getnewpartname Action
 */
export const productsActionGetnewpartnameGet = buildCall() //
  .method('get')
  .path('/products?action=getnewpartname')
  .parseJson(withRuntype(productsActionGetnewpartnameGetResponseBodyRt))
  .build();

// Operation: productsIdActionFirstGet

const productsIdActionFirstGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: productsIdActionFirstGet
 * `GET: /products/{id}?action=first`
 * first Action
 */
export const productsIdActionFirstGet = buildCall() //
  .args<rt.Static<typeof productsIdActionFirstGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=first`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsIdActionLastGet

const productsIdActionLastGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: productsIdActionLastGet
 * `GET: /products/{id}?action=last`
 * last Action
 */
export const productsIdActionLastGet = buildCall() //
  .args<rt.Static<typeof productsIdActionLastGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=last`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsIdActionPreviousGet

const productsIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: productsIdActionPreviousGet
 * `GET: /products/{id}?action=previous`
 * previous Action
 */
export const productsIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof productsIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=previous`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsIdActionNextGet

const productsIdActionNextGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: productsIdActionNextGet
 * `GET: /products/{id}?action=next`
 * next Action
 */
export const productsIdActionNextGet = buildCall() //
  .args<rt.Static<typeof productsIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=next`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsActionBulkSavePut

const productsActionBulkSavePutArgsRt = rt
  .Record({ products: rt.Array(productRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: productsActionBulkSavePut
 * `PUT: /products?action=bulk-save`
 * bulk-save Action
 */
export const productsActionBulkSavePut = buildCall() //
  .args<rt.Static<typeof productsActionBulkSavePutArgsRt>>()
  .method('put')
  .path('/products?action=bulk-save')
  .body((args) => args.products)
  .build();

// Operation: productsIdActionIsUsedGet

const productsIdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const productsIdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: productsIdActionIsUsedGet
 * `GET: /products/{id}?action=is-used`
 * is-used Action
 */
export const productsIdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof productsIdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}?action=is-used`)
  .parseJson(withRuntype(productsIdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: productsActionGetBarnepassProductsGet

const productsActionGetBarnepassProductsGetResponseBodyRt = rt.Array(productRt);

/**
 * operation ID: productsActionGetBarnepassProductsGet
 * `GET: /products?action=get-barnepass-products`
 * get-barnepass-products Action
 */
export const productsActionGetBarnepassProductsGet = buildCall() //
  .method('get')
  .path('/products?action=get-barnepass-products')
  .parseJson(withRuntype(productsActionGetBarnepassProductsGetResponseBodyRt))
  .build();

// Operation: productsActionSaveBarnepassProductsPut

const productsActionSaveBarnepassProductsPutArgsRt = rt
  .Record({ productIDs: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: productsActionSaveBarnepassProductsPut
 * `PUT: /products?action=save-barnepass-products`
 * save-barnepass-products Action
 */
export const productsActionSaveBarnepassProductsPut = buildCall() //
  .args<rt.Static<typeof productsActionSaveBarnepassProductsPutArgsRt>>()
  .method('put')
  .path('/products?action=save-barnepass-products')
  .body((args) => args.productIDs)
  .build();

// Operation: productsActionSyncronizeProductsAccountAndVatToStandardPut

const productsActionSyncronizeProductsAccountAndVatToStandardPutArgsRt = rt
  .Record({ oldAccountId: rt.Number })
  .asPartial()
  .asReadonly();

const productsActionSyncronizeProductsAccountAndVatToStandardPutResponseBodyRt =
  rt.Number;

/**
 * operation ID:
 * productsActionSyncronizeProductsAccountAndVatToStandardPut
 * `PUT:
 * /products?action=syncronize-products-account-and-vat-to-standard`
 * syncronize-products-account-and-vat-to-standard Action
 */
export const productsActionSyncronizeProductsAccountAndVatToStandardPut =
  buildCall() //
    .args<
      rt.Static<
        typeof productsActionSyncronizeProductsAccountAndVatToStandardPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/products?action=syncronize-products-account-and-vat-to-standard`,
    )
    .parseJson(
      withRuntype(
        productsActionSyncronizeProductsAccountAndVatToStandardPutResponseBodyRt,
      ),
    )
    .build();

// Operation: productsIdActionDeletePost

const productsIdActionDeletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: productsIdActionDeletePost
 * `POST: /products/{id}?action=Delete`
 * Delete Transition
 */
export const productsIdActionDeletePost = buildCall() //
  .args<rt.Static<typeof productsIdActionDeletePostArgsRt>>()
  .method('post')
  .path((args) => `/products/${args.id}?action=Delete`)
  .build();

// Operation: productsIdActionDiscardPost

const productsIdActionDiscardPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: productsIdActionDiscardPost
 * `POST: /products/{id}?action=Discard`
 * Discard Transition
 */
export const productsIdActionDiscardPost = buildCall() //
  .args<rt.Static<typeof productsIdActionDiscardPostArgsRt>>()
  .method('post')
  .path((args) => `/products/${args.id}?action=Discard`)
  .build();

// Operation: productsIdActionReactivatePost

const productsIdActionReactivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: productsIdActionReactivatePost
 * `POST: /products/{id}?action=Reactivate`
 * Reactivate Transition
 */
export const productsIdActionReactivatePost = buildCall() //
  .args<rt.Static<typeof productsIdActionReactivatePostArgsRt>>()
  .method('post')
  .path((args) => `/products/${args.id}?action=Reactivate`)
  .build();

// Operation: productsIdGet

const productsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: productsIdGet
 * `GET: /products/{id}`
 * Get Product
 */
export const productsIdGet = buildCall() //
  .args<rt.Static<typeof productsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/products/${args.id}`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsIdPut

const productsIdPutArgsRt = rt
  .Record({ id: rt.Number, Product: productRt })
  .asReadonly();

/**
 * operation ID: productsIdPut
 * `PUT: /products/{id}`
 * Update Product
 */
export const productsIdPut = buildCall() //
  .args<rt.Static<typeof productsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/products/${args.id}`)
  .body((args) => args.Product)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsIdDelete

const productsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: productsIdDelete
 * `DELETE: /products/{id}`
 * Delete Product
 */
export const productsIdDelete = buildCall() //
  .args<rt.Static<typeof productsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/products/${args.id}`)
  .parseJson(withRuntype(productRt))
  .build();

// Operation: productsGet

const productsGetResponseBodyRt = rt.Array(productRt);

/**
 * operation ID: productsGet
 * `GET: /products`
 * Query Product
 */
export const productsGet = buildCall() //
  .method('get')
  .path('/products')
  .parseJson(withRuntype(productsGetResponseBodyRt))
  .build();

// Operation: productsPost

const productsPostArgsRt = rt.Record({ Product: productRt }).asReadonly();

/**
 * operation ID: productsPost
 * `POST: /products`
 * Create Product
 */
export const productsPost = buildCall() //
  .args<rt.Static<typeof productsPostArgsRt>>()
  .method('post')
  .path('/products')
  .body((args) => args.Product)
  .build();

// Operation: quotesActionCalculateQuoteSummaryPost

const quotesActionCalculateQuoteSummaryPostArgsRt = rt
  .Record({ quoteItems: rt.Array(customerQuoteItemRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: quotesActionCalculateQuoteSummaryPost
 * `POST: /quotes?action=calculate-quote-summary`
 * calculate-quote-summary Action
 */
export const quotesActionCalculateQuoteSummaryPost = buildCall() //
  .args<rt.Static<typeof quotesActionCalculateQuoteSummaryPostArgsRt>>()
  .method('post')
  .path('/quotes?action=calculate-quote-summary')
  .body((args) => args.quoteItems)
  .parseJson(withRuntype(tradeHeaderCalculationSummaryRt))
  .build();

// Operation: quotesIdActionCalculateVatSummaryGet

const quotesIdActionCalculateVatSummaryGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const quotesIdActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: quotesIdActionCalculateVatSummaryGet
 * `GET: /quotes/{id}?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const quotesIdActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof quotesIdActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/quotes/${args.id}?action=calculate-vat-summary`)
  .parseJson(withRuntype(quotesIdActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: quotesActionCalculateVatSummaryGet

const quotesActionCalculateVatSummaryGetArgsRt = rt
  .Record({ QuoteNumber: rt.Number })
  .asPartial()
  .asReadonly();

const quotesActionCalculateVatSummaryGetResponseBodyRt = rt.Array(
  vatCalculationSummaryRt,
);

/**
 * operation ID: quotesActionCalculateVatSummaryGet
 * `GET: /quotes?action=calculate-vat-summary`
 * calculate-vat-summary Action
 */
export const quotesActionCalculateVatSummaryGet = buildCall() //
  .args<rt.Static<typeof quotesActionCalculateVatSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/quotes?action=calculate-vat-summary`)
  .parseJson(withRuntype(quotesActionCalculateVatSummaryGetResponseBodyRt))
  .build();

// Operation: quotesIdActionNextGet

const quotesIdActionNextGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: quotesIdActionNextGet
 * `GET: /quotes/{id}?action=next`
 * next Action
 */
export const quotesIdActionNextGet = buildCall() //
  .args<rt.Static<typeof quotesIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/quotes/${args.id}?action=next`)
  .parseJson(withRuntype(customerQuoteRt))
  .build();

// Operation: quotesIdActionSetCustomerQuotePrintstatusPut

const quotesIdActionSetCustomerQuotePrintstatusPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ ID: rt.Number, printStatus: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: quotesIdActionSetCustomerQuotePrintstatusPut
 * `PUT: /quotes/{id}?action=set-customer-quote-printstatus`
 * set-customer-quote-printstatus Action
 */
export const quotesIdActionSetCustomerQuotePrintstatusPut = buildCall() //
  .args<rt.Static<typeof quotesIdActionSetCustomerQuotePrintstatusPutArgsRt>>()
  .method('put')
  .path((args) => `/quotes/${args.id}?action=set-customer-quote-printstatus`)
  .build();

// Operation: quotesIdActionPreviousGet

const quotesIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: quotesIdActionPreviousGet
 * `GET: /quotes/{id}?action=previous`
 * previous Action
 */
export const quotesIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof quotesIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/quotes/${args.id}?action=previous`)
  .parseJson(withRuntype(customerQuoteRt))
  .build();

// Operation: quotesIdActionRegisterPost

const quotesIdActionRegisterPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: quotesIdActionRegisterPost
 * `POST: /quotes/{id}?action=register`
 * register Transition
 */
export const quotesIdActionRegisterPost = buildCall() //
  .args<rt.Static<typeof quotesIdActionRegisterPostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=register`)
  .build();

// Operation: quotesIdActionShipToCustomerPost

const quotesIdActionShipToCustomerPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: quotesIdActionShipToCustomerPost
 * `POST: /quotes/{id}?action=shipToCustomer`
 * shipToCustomer Transition
 */
export const quotesIdActionShipToCustomerPost = buildCall() //
  .args<rt.Static<typeof quotesIdActionShipToCustomerPostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=shipToCustomer`)
  .build();

// Operation: quotesIdActionCustomerAcceptPost

const quotesIdActionCustomerAcceptPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: quotesIdActionCustomerAcceptPost
 * `POST: /quotes/{id}?action=customerAccept`
 * customerAccept Transition
 */
export const quotesIdActionCustomerAcceptPost = buildCall() //
  .args<rt.Static<typeof quotesIdActionCustomerAcceptPostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=customerAccept`)
  .build();

// Operation: quotesIdActionToOrderPost

const quotesIdActionToOrderPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const quotesIdActionToOrderPostResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: quotesIdActionToOrderPost
 * `POST: /quotes/{id}?action=toOrder`
 * toOrder Transition
 */
export const quotesIdActionToOrderPost = buildCall() //
  .args<rt.Static<typeof quotesIdActionToOrderPostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=toOrder`)
  .parseJson(withRuntype(quotesIdActionToOrderPostResponseBodyRt))
  .build();

// Operation: quotesIdActionToInvoicePost

const quotesIdActionToInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const quotesIdActionToInvoicePostResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: quotesIdActionToInvoicePost
 * `POST: /quotes/{id}?action=toInvoice`
 * toInvoice Transition
 */
export const quotesIdActionToInvoicePost = buildCall() //
  .args<rt.Static<typeof quotesIdActionToInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=toInvoice`)
  .parseJson(withRuntype(quotesIdActionToInvoicePostResponseBodyRt))
  .build();

// Operation: quotesIdActionCompletePost

const quotesIdActionCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: quotesIdActionCompletePost
 * `POST: /quotes/{id}?action=complete`
 * complete Transition
 */
export const quotesIdActionCompletePost = buildCall() //
  .args<rt.Static<typeof quotesIdActionCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/quotes/${args.id}?action=complete`)
  .build();

// Operation: quotesIdGet

const quotesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: quotesIdGet
 * `GET: /quotes/{id}`
 * Get CustomerQuote
 */
export const quotesIdGet = buildCall() //
  .args<rt.Static<typeof quotesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/quotes/${args.id}`)
  .parseJson(withRuntype(customerQuoteRt))
  .build();

// Operation: quotesIdPut

const quotesIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerQuote: customerQuoteRt })
  .asReadonly();

/**
 * operation ID: quotesIdPut
 * `PUT: /quotes/{id}`
 * Update CustomerQuote
 */
export const quotesIdPut = buildCall() //
  .args<rt.Static<typeof quotesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/quotes/${args.id}`)
  .body((args) => args.CustomerQuote)
  .parseJson(withRuntype(customerQuoteRt))
  .build();

// Operation: quotesIdDelete

const quotesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: quotesIdDelete
 * `DELETE: /quotes/{id}`
 * Delete CustomerQuote
 */
export const quotesIdDelete = buildCall() //
  .args<rt.Static<typeof quotesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/quotes/${args.id}`)
  .parseJson(withRuntype(customerQuoteRt))
  .build();

// Operation: quotesGet

const quotesGetResponseBodyRt = rt.Array(customerQuoteRt);

/**
 * operation ID: quotesGet
 * `GET: /quotes`
 * Query CustomerQuote
 */
export const quotesGet = buildCall() //
  .method('get')
  .path('/quotes')
  .parseJson(withRuntype(quotesGetResponseBodyRt))
  .build();

// Operation: quotesPost

const quotesPostArgsRt = rt
  .Record({ CustomerQuote: customerQuoteRt })
  .asReadonly();

/**
 * operation ID: quotesPost
 * `POST: /quotes`
 * Create CustomerQuote
 */
export const quotesPost = buildCall() //
  .args<rt.Static<typeof quotesPostArgsRt>>()
  .method('post')
  .path('/quotes')
  .body((args) => args.CustomerQuote)
  .build();

// Operation: quoteitemsIdGet

const quoteitemsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: quoteitemsIdGet
 * `GET: /quoteitems/{id}`
 * Get CustomerQuoteItem
 */
export const quoteitemsIdGet = buildCall() //
  .args<rt.Static<typeof quoteitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/quoteitems/${args.id}`)
  .parseJson(withRuntype(customerQuoteItemRt))
  .build();

// Operation: quoteitemsIdPut

const quoteitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomerQuoteItem: customerQuoteItemRt })
  .asReadonly();

/**
 * operation ID: quoteitemsIdPut
 * `PUT: /quoteitems/{id}`
 * Update CustomerQuoteItem
 */
export const quoteitemsIdPut = buildCall() //
  .args<rt.Static<typeof quoteitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/quoteitems/${args.id}`)
  .body((args) => args.CustomerQuoteItem)
  .parseJson(withRuntype(customerQuoteItemRt))
  .build();

// Operation: quoteitemsIdDelete

const quoteitemsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: quoteitemsIdDelete
 * `DELETE: /quoteitems/{id}`
 * Delete CustomerQuoteItem
 */
export const quoteitemsIdDelete = buildCall() //
  .args<rt.Static<typeof quoteitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/quoteitems/${args.id}`)
  .parseJson(withRuntype(customerQuoteItemRt))
  .build();

// Operation: quoteitemsGet

const quoteitemsGetResponseBodyRt = rt.Array(customerQuoteItemRt);

/**
 * operation ID: quoteitemsGet
 * `GET: /quoteitems`
 * Query CustomerQuoteItem
 */
export const quoteitemsGet = buildCall() //
  .method('get')
  .path('/quoteitems')
  .parseJson(withRuntype(quoteitemsGetResponseBodyRt))
  .build();

// Operation: quoteitemsPost

const quoteitemsPostArgsRt = rt
  .Record({ CustomerQuoteItem: customerQuoteItemRt })
  .asReadonly();

/**
 * operation ID: quoteitemsPost
 * `POST: /quoteitems`
 * Create CustomerQuoteItem
 */
export const quoteitemsPost = buildCall() //
  .args<rt.Static<typeof quoteitemsPostArgsRt>>()
  .method('post')
  .path('/quoteitems')
  .body((args) => args.CustomerQuoteItem)
  .build();

// Operation: recurringinvoicesIdActionExecutePost

const recurringinvoicesIdActionExecutePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: recurringinvoicesIdActionExecutePost
 * `POST: /recurringinvoices/{id}?action=execute`
 * execute Action
 */
export const recurringinvoicesIdActionExecutePost = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdActionExecutePostArgsRt>>()
  .method('post')
  .path((args) => `/recurringinvoices/${args.id}?action=execute`)
  .parseJson(withRuntype(recurringInvoiceLogRt))
  .build();

// Operation: recurringinvoicesIdActionActivatePost

const recurringinvoicesIdActionActivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: recurringinvoicesIdActionActivatePost
 * `POST: /recurringinvoices/{id}?action=activate`
 * activate Transition
 */
export const recurringinvoicesIdActionActivatePost = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/recurringinvoices/${args.id}?action=activate`)
  .build();

// Operation: recurringinvoicesIdActionDeactivatePost

const recurringinvoicesIdActionDeactivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: recurringinvoicesIdActionDeactivatePost
 * `POST: /recurringinvoices/{id}?action=deactivate`
 * deactivate Transition
 */
export const recurringinvoicesIdActionDeactivatePost = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdActionDeactivatePostArgsRt>>()
  .method('post')
  .path((args) => `/recurringinvoices/${args.id}?action=deactivate`)
  .build();

// Operation: recurringinvoicesIdGet

const recurringinvoicesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: recurringinvoicesIdGet
 * `GET: /recurringinvoices/{id}`
 * Get RecurringInvoice
 */
export const recurringinvoicesIdGet = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/recurringinvoices/${args.id}`)
  .parseJson(withRuntype(recurringInvoiceRt))
  .build();

// Operation: recurringinvoicesIdPut

const recurringinvoicesIdPutArgsRt = rt
  .Record({ id: rt.Number, RecurringInvoice: recurringInvoiceRt })
  .asReadonly();

/**
 * operation ID: recurringinvoicesIdPut
 * `PUT: /recurringinvoices/{id}`
 * Update RecurringInvoice
 */
export const recurringinvoicesIdPut = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/recurringinvoices/${args.id}`)
  .body((args) => args.RecurringInvoice)
  .parseJson(withRuntype(recurringInvoiceRt))
  .build();

// Operation: recurringinvoicesIdDelete

const recurringinvoicesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: recurringinvoicesIdDelete
 * `DELETE: /recurringinvoices/{id}`
 * Delete RecurringInvoice
 */
export const recurringinvoicesIdDelete = buildCall() //
  .args<rt.Static<typeof recurringinvoicesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/recurringinvoices/${args.id}`)
  .parseJson(withRuntype(recurringInvoiceRt))
  .build();

// Operation: recurringinvoicesGet

const recurringinvoicesGetResponseBodyRt = rt.Array(recurringInvoiceRt);

/**
 * operation ID: recurringinvoicesGet
 * `GET: /recurringinvoices`
 * Query RecurringInvoice
 */
export const recurringinvoicesGet = buildCall() //
  .method('get')
  .path('/recurringinvoices')
  .parseJson(withRuntype(recurringinvoicesGetResponseBodyRt))
  .build();

// Operation: recurringinvoicesPost

const recurringinvoicesPostArgsRt = rt
  .Record({ RecurringInvoice: recurringInvoiceRt })
  .asReadonly();

/**
 * operation ID: recurringinvoicesPost
 * `POST: /recurringinvoices`
 * Create RecurringInvoice
 */
export const recurringinvoicesPost = buildCall() //
  .args<rt.Static<typeof recurringinvoicesPostArgsRt>>()
  .method('post')
  .path('/recurringinvoices')
  .body((args) => args.RecurringInvoice)
  .build();

// Operation: recurringinvoiceitemsIdGet

const recurringinvoiceitemsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: recurringinvoiceitemsIdGet
 * `GET: /recurringinvoiceitems/{id}`
 * Get RecurringInvoiceItem
 */
export const recurringinvoiceitemsIdGet = buildCall() //
  .args<rt.Static<typeof recurringinvoiceitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/recurringinvoiceitems/${args.id}`)
  .parseJson(withRuntype(recurringInvoiceItemRt))
  .build();

// Operation: recurringinvoiceitemsGet

const recurringinvoiceitemsGetResponseBodyRt = rt.Array(recurringInvoiceItemRt);

/**
 * operation ID: recurringinvoiceitemsGet
 * `GET: /recurringinvoiceitems`
 * Query RecurringInvoiceItem
 */
export const recurringinvoiceitemsGet = buildCall() //
  .method('get')
  .path('/recurringinvoiceitems')
  .parseJson(withRuntype(recurringinvoiceitemsGetResponseBodyRt))
  .build();

// Operation: recurringInvoicelogsIdGet

const recurringInvoicelogsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: recurringInvoicelogsIdGet
 * `GET: /RecurringInvoicelogs/{id}`
 * Get RecurringInvoiceLog
 */
export const recurringInvoicelogsIdGet = buildCall() //
  .args<rt.Static<typeof recurringInvoicelogsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/RecurringInvoicelogs/${args.id}`)
  .parseJson(withRuntype(recurringInvoiceLogRt))
  .build();

// Operation: recurringInvoicelogsIdDelete

const recurringInvoicelogsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: recurringInvoicelogsIdDelete
 * `DELETE: /RecurringInvoicelogs/{id}`
 * Delete RecurringInvoiceLog
 */
export const recurringInvoicelogsIdDelete = buildCall() //
  .args<rt.Static<typeof recurringInvoicelogsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/RecurringInvoicelogs/${args.id}`)
  .parseJson(withRuntype(recurringInvoiceLogRt))
  .build();

// Operation: recurringInvoicelogsGet

const recurringInvoicelogsGetResponseBodyRt = rt.Array(recurringInvoiceLogRt);

/**
 * operation ID: recurringInvoicelogsGet
 * `GET: /RecurringInvoicelogs`
 * Query RecurringInvoiceLog
 */
export const recurringInvoicelogsGet = buildCall() //
  .method('get')
  .path('/RecurringInvoicelogs')
  .parseJson(withRuntype(recurringInvoicelogsGetResponseBodyRt))
  .build();

// Operation: sellersIdGet

const sellersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: sellersIdGet
 * `GET: /sellers/{id}`
 * Get Seller
 */
export const sellersIdGet = buildCall() //
  .args<rt.Static<typeof sellersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/sellers/${args.id}`)
  .parseJson(withRuntype(sellerRt))
  .build();

// Operation: sellersIdPut

const sellersIdPutArgsRt = rt
  .Record({ id: rt.Number, Seller: sellerRt })
  .asReadonly();

/**
 * operation ID: sellersIdPut
 * `PUT: /sellers/{id}`
 * Update Seller
 */
export const sellersIdPut = buildCall() //
  .args<rt.Static<typeof sellersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/sellers/${args.id}`)
  .body((args) => args.Seller)
  .parseJson(withRuntype(sellerRt))
  .build();

// Operation: sellersIdDelete

const sellersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: sellersIdDelete
 * `DELETE: /sellers/{id}`
 * Delete Seller
 */
export const sellersIdDelete = buildCall() //
  .args<rt.Static<typeof sellersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/sellers/${args.id}`)
  .parseJson(withRuntype(sellerRt))
  .build();

// Operation: sellersGet

const sellersGetResponseBodyRt = rt.Array(sellerRt);

/**
 * operation ID: sellersGet
 * `GET: /sellers`
 * Query Seller
 */
export const sellersGet = buildCall() //
  .method('get')
  .path('/sellers')
  .parseJson(withRuntype(sellersGetResponseBodyRt))
  .build();

// Operation: sellersPost

const sellersPostArgsRt = rt.Record({ Seller: sellerRt }).asReadonly();

/**
 * operation ID: sellersPost
 * `POST: /sellers`
 * Create Seller
 */
export const sellersPost = buildCall() //
  .args<rt.Static<typeof sellersPostArgsRt>>()
  .method('post')
  .path('/sellers')
  .body((args) => args.Seller)
  .build();

// Operation: sellerlinksIdGet

const sellerlinksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: sellerlinksIdGet
 * `GET: /sellerlinks/{id}`
 * Get SellerLink
 */
export const sellerlinksIdGet = buildCall() //
  .args<rt.Static<typeof sellerlinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/sellerlinks/${args.id}`)
  .parseJson(withRuntype(sellerLinkRt))
  .build();

// Operation: sellerlinksIdPut

const sellerlinksIdPutArgsRt = rt
  .Record({ id: rt.Number, SellerLink: sellerLinkRt })
  .asReadonly();

/**
 * operation ID: sellerlinksIdPut
 * `PUT: /sellerlinks/{id}`
 * Update SellerLink
 */
export const sellerlinksIdPut = buildCall() //
  .args<rt.Static<typeof sellerlinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/sellerlinks/${args.id}`)
  .body((args) => args.SellerLink)
  .parseJson(withRuntype(sellerLinkRt))
  .build();

// Operation: sellerlinksIdDelete

const sellerlinksIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: sellerlinksIdDelete
 * `DELETE: /sellerlinks/{id}`
 * Delete SellerLink
 */
export const sellerlinksIdDelete = buildCall() //
  .args<rt.Static<typeof sellerlinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/sellerlinks/${args.id}`)
  .parseJson(withRuntype(sellerLinkRt))
  .build();

// Operation: sellerlinksGet

const sellerlinksGetResponseBodyRt = rt.Array(sellerLinkRt);

/**
 * operation ID: sellerlinksGet
 * `GET: /sellerlinks`
 * Query SellerLink
 */
export const sellerlinksGet = buildCall() //
  .method('get')
  .path('/sellerlinks')
  .parseJson(withRuntype(sellerlinksGetResponseBodyRt))
  .build();

// Operation: sellerlinksPost

const sellerlinksPostArgsRt = rt
  .Record({ SellerLink: sellerLinkRt })
  .asReadonly();

/**
 * operation ID: sellerlinksPost
 * `POST: /sellerlinks`
 * Create SellerLink
 */
export const sellerlinksPost = buildCall() //
  .args<rt.Static<typeof sellerlinksPostArgsRt>>()
  .method('post')
  .path('/sellerlinks')
  .body((args) => args.SellerLink)
  .build();

// Operation: subcompaniesIdGet

const subcompaniesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: subcompaniesIdGet
 * `GET: /subcompanies/{id}`
 * Get SubCompany
 */
export const subcompaniesIdGet = buildCall() //
  .args<rt.Static<typeof subcompaniesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/subcompanies/${args.id}`)
  .parseJson(withRuntype(subCompanyRt))
  .build();

// Operation: subcompaniesIdPut

const subcompaniesIdPutArgsRt = rt
  .Record({ id: rt.Number, SubCompany: subCompanyRt })
  .asReadonly();

/**
 * operation ID: subcompaniesIdPut
 * `PUT: /subcompanies/{id}`
 * Update SubCompany
 */
export const subcompaniesIdPut = buildCall() //
  .args<rt.Static<typeof subcompaniesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/subcompanies/${args.id}`)
  .body((args) => args.SubCompany)
  .parseJson(withRuntype(subCompanyRt))
  .build();

// Operation: subcompaniesIdDelete

const subcompaniesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: subcompaniesIdDelete
 * `DELETE: /subcompanies/{id}`
 * Delete SubCompany
 */
export const subcompaniesIdDelete = buildCall() //
  .args<rt.Static<typeof subcompaniesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/subcompanies/${args.id}`)
  .parseJson(withRuntype(subCompanyRt))
  .build();

// Operation: subcompaniesGet

const subcompaniesGetResponseBodyRt = rt.Array(subCompanyRt);

/**
 * operation ID: subcompaniesGet
 * `GET: /subcompanies`
 * Query SubCompany
 */
export const subcompaniesGet = buildCall() //
  .method('get')
  .path('/subcompanies')
  .parseJson(withRuntype(subcompaniesGetResponseBodyRt))
  .build();

// Operation: subcompaniesPost

const subcompaniesPostArgsRt = rt
  .Record({ SubCompany: subCompanyRt })
  .asReadonly();

/**
 * operation ID: subcompaniesPost
 * `POST: /subcompanies`
 * Create SubCompany
 */
export const subcompaniesPost = buildCall() //
  .args<rt.Static<typeof subcompaniesPostArgsRt>>()
  .method('post')
  .path('/subcompanies')
  .body((args) => args.SubCompany)
  .build();

// Operation: contactsContactidAddressesIdGet

const contactsContactidAddressesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contactsContactidAddressesIdGet
 * `GET: /contacts/{contactid}/addresses/{id}`
 * Get Address
 */
export const contactsContactidAddressesIdGet = buildCall() //
  .args<rt.Static<typeof contactsContactidAddressesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contacts/{contactid}/addresses/${args.id}`)
  .parseJson(withRuntype(addressRt))
  .build();

// Operation: contactsContactidAddressesIdPut

const contactsContactidAddressesIdPutArgsRt = rt
  .Record({ id: rt.Number, Address: addressRt })
  .asReadonly();

/**
 * operation ID: contactsContactidAddressesIdPut
 * `PUT: /contacts/{contactid}/addresses/{id}`
 * Update Address
 */
export const contactsContactidAddressesIdPut = buildCall() //
  .args<rt.Static<typeof contactsContactidAddressesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contacts/{contactid}/addresses/${args.id}`)
  .body((args) => args.Address)
  .parseJson(withRuntype(addressRt))
  .build();

// Operation: contactsContactidAddressesIdDelete

const contactsContactidAddressesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contactsContactidAddressesIdDelete
 * `DELETE: /contacts/{contactid}/addresses/{id}`
 * Delete Address
 */
export const contactsContactidAddressesIdDelete = buildCall() //
  .args<rt.Static<typeof contactsContactidAddressesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contacts/{contactid}/addresses/${args.id}`)
  .parseJson(withRuntype(addressRt))
  .build();

// Operation: contactsContactidAddressesGet

const contactsContactidAddressesGetResponseBodyRt = rt.Array(addressRt);

/**
 * operation ID: contactsContactidAddressesGet
 * `GET: /contacts/{contactid}/addresses`
 * Query Address
 */
export const contactsContactidAddressesGet = buildCall() //
  .method('get')
  .path('/contacts/{contactid}/addresses')
  .parseJson(withRuntype(contactsContactidAddressesGetResponseBodyRt))
  .build();

// Operation: contactsContactidAddressesPost

const contactsContactidAddressesPostArgsRt = rt
  .Record({ Address: addressRt })
  .asReadonly();

/**
 * operation ID: contactsContactidAddressesPost
 * `POST: /contacts/{contactid}/addresses`
 * Create Address
 */
export const contactsContactidAddressesPost = buildCall() //
  .args<rt.Static<typeof contactsContactidAddressesPostArgsRt>>()
  .method('post')
  .path('/contacts/{contactid}/addresses')
  .body((args) => args.Address)
  .build();

// Operation: suppliersIdActionNextGet

const suppliersIdActionNextGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: suppliersIdActionNextGet
 * `GET: /suppliers/{id}?action=next`
 * next Action
 */
export const suppliersIdActionNextGet = buildCall() //
  .args<rt.Static<typeof suppliersIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/suppliers/${args.id}?action=next`)
  .parseJson(withRuntype(supplierRt))
  .build();

// Operation: suppliersIdActionPreviousGet

const suppliersIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: suppliersIdActionPreviousGet
 * `GET: /suppliers/{id}?action=previous`
 * previous Action
 */
export const suppliersIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof suppliersIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/suppliers/${args.id}?action=previous`)
  .parseJson(withRuntype(supplierRt))
  .build();

// Operation: suppliersActionActivatePut

const suppliersActionActivatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionActivatePut
 * `PUT: /suppliers?action=activate`
 * activate Action
 */
export const suppliersActionActivatePut = buildCall() //
  .args<rt.Static<typeof suppliersActionActivatePutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers?action=activate`)
  .build();

// Operation: suppliersActionDeactivatePut

const suppliersActionDeactivatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionDeactivatePut
 * `PUT: /suppliers?action=deactivate`
 * deactivate Action
 */
export const suppliersActionDeactivatePut = buildCall() //
  .args<rt.Static<typeof suppliersActionDeactivatePutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers?action=deactivate`)
  .build();

// Operation: suppliersActionBlockPut

const suppliersActionBlockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionBlockPut
 * `PUT: /suppliers?action=block`
 * block Action
 */
export const suppliersActionBlockPut = buildCall() //
  .args<rt.Static<typeof suppliersActionBlockPutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers?action=block`)
  .build();

// Operation: suppliersActionUnblockPut

const suppliersActionUnblockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionUnblockPut
 * `PUT: /suppliers?action=unblock`
 * unblock Action
 */
export const suppliersActionUnblockPut = buildCall() //
  .args<rt.Static<typeof suppliersActionUnblockPutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers?action=unblock`)
  .build();

// Operation: suppliersActionDeletePut

const suppliersActionDeletePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionDeletePut
 * `PUT: /suppliers?action=delete`
 * delete Action
 */
export const suppliersActionDeletePut = buildCall() //
  .args<rt.Static<typeof suppliersActionDeletePutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers?action=delete`)
  .build();

// Operation: suppliersActionBulkSavePut

const suppliersActionBulkSavePutArgsRt = rt
  .Record({ suppliers: rt.Array(supplierRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: suppliersActionBulkSavePut
 * `PUT: /suppliers?action=bulk-save`
 * bulk-save Action
 */
export const suppliersActionBulkSavePut = buildCall() //
  .args<rt.Static<typeof suppliersActionBulkSavePutArgsRt>>()
  .method('put')
  .path('/suppliers?action=bulk-save')
  .body((args) => args.suppliers)
  .build();

// Operation: suppliersIdGet

const suppliersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: suppliersIdGet
 * `GET: /suppliers/{id}`
 * Get Supplier
 */
export const suppliersIdGet = buildCall() //
  .args<rt.Static<typeof suppliersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/suppliers/${args.id}`)
  .parseJson(withRuntype(supplierRt))
  .build();

// Operation: suppliersIdPut

const suppliersIdPutArgsRt = rt
  .Record({ id: rt.Number, Supplier: supplierRt })
  .asReadonly();

/**
 * operation ID: suppliersIdPut
 * `PUT: /suppliers/{id}`
 * Update Supplier
 */
export const suppliersIdPut = buildCall() //
  .args<rt.Static<typeof suppliersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/suppliers/${args.id}`)
  .body((args) => args.Supplier)
  .parseJson(withRuntype(supplierRt))
  .build();

// Operation: suppliersIdDelete

const suppliersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: suppliersIdDelete
 * `DELETE: /suppliers/{id}`
 * Delete Supplier
 */
export const suppliersIdDelete = buildCall() //
  .args<rt.Static<typeof suppliersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/suppliers/${args.id}`)
  .parseJson(withRuntype(supplierRt))
  .build();

// Operation: suppliersGet

const suppliersGetResponseBodyRt = rt.Array(supplierRt);

/**
 * operation ID: suppliersGet
 * `GET: /suppliers`
 * Query Supplier
 */
export const suppliersGet = buildCall() //
  .method('get')
  .path('/suppliers')
  .parseJson(withRuntype(suppliersGetResponseBodyRt))
  .build();

// Operation: suppliersPost

const suppliersPostArgsRt = rt.Record({ Supplier: supplierRt }).asReadonly();

/**
 * operation ID: suppliersPost
 * `POST: /suppliers`
 * Create Supplier
 */
export const suppliersPost = buildCall() //
  .args<rt.Static<typeof suppliersPostArgsRt>>()
  .method('post')
  .path('/suppliers')
  .body((args) => args.Supplier)
  .build();

// Operation: termsActionGetPaymentTermsGet

const termsActionGetPaymentTermsGetResponseBodyRt = rt.Array(termsRt);

/**
 * operation ID: termsActionGetPaymentTermsGet
 * `GET: /terms?action=get-payment-terms`
 * get-payment-terms Action
 */
export const termsActionGetPaymentTermsGet = buildCall() //
  .method('get')
  .path('/terms?action=get-payment-terms')
  .parseJson(withRuntype(termsActionGetPaymentTermsGetResponseBodyRt))
  .build();

// Operation: termsActionGetDeliveryTermsGet

const termsActionGetDeliveryTermsGetResponseBodyRt = rt.Array(termsRt);

/**
 * operation ID: termsActionGetDeliveryTermsGet
 * `GET: /terms?action=get-delivery-terms`
 * get-delivery-terms Action
 */
export const termsActionGetDeliveryTermsGet = buildCall() //
  .method('get')
  .path('/terms?action=get-delivery-terms')
  .parseJson(withRuntype(termsActionGetDeliveryTermsGetResponseBodyRt))
  .build();

// Operation: termsIdGet

const termsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: termsIdGet
 * `GET: /terms/{id}`
 * Get Terms
 */
export const termsIdGet = buildCall() //
  .args<rt.Static<typeof termsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/terms/${args.id}`)
  .parseJson(withRuntype(termsRt))
  .build();

// Operation: termsIdPut

const termsIdPutArgsRt = rt
  .Record({ id: rt.Number, Terms: termsRt })
  .asReadonly();

/**
 * operation ID: termsIdPut
 * `PUT: /terms/{id}`
 * Update Terms
 */
export const termsIdPut = buildCall() //
  .args<rt.Static<typeof termsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/terms/${args.id}`)
  .body((args) => args.Terms)
  .parseJson(withRuntype(termsRt))
  .build();

// Operation: termsIdDelete

const termsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: termsIdDelete
 * `DELETE: /terms/{id}`
 * Delete Terms
 */
export const termsIdDelete = buildCall() //
  .args<rt.Static<typeof termsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/terms/${args.id}`)
  .parseJson(withRuntype(termsRt))
  .build();

// Operation: termsGet

const termsGetResponseBodyRt = rt.Array(termsRt);

/**
 * operation ID: termsGet
 * `GET: /terms`
 * Query Terms
 */
export const termsGet = buildCall() //
  .method('get')
  .path('/terms')
  .parseJson(withRuntype(termsGetResponseBodyRt))
  .build();

// Operation: termsPost

const termsPostArgsRt = rt.Record({ Terms: termsRt }).asReadonly();

/**
 * operation ID: termsPost
 * `POST: /terms`
 * Create Terms
 */
export const termsPost = buildCall() //
  .args<rt.Static<typeof termsPostArgsRt>>()
  .method('post')
  .path('/terms')
  .body((args) => args.Terms)
  .build();

// Operation: ameldingIdActionGetAmeldingGet

const ameldingIdActionGetAmeldingGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const ameldingIdActionGetAmeldingGetResponseBodyRt = rt.String;

/**
 * operation ID: ameldingIdActionGetAmeldingGet
 * `GET: /amelding/{id}?action=get-amelding`
 * get-amelding Action
 */
export const ameldingIdActionGetAmeldingGet = buildCall() //
  .args<rt.Static<typeof ameldingIdActionGetAmeldingGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding/${args.id}?action=get-amelding`)
  .parseJson(withRuntype(ameldingIdActionGetAmeldingGetResponseBodyRt))
  .build();

// Operation: ameldingIdActionGetFeedbackGet

const ameldingIdActionGetFeedbackGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const ameldingIdActionGetFeedbackGetResponseBodyRt = rt.String;

/**
 * operation ID: ameldingIdActionGetFeedbackGet
 * `GET: /amelding/{id}?action=get-feedback`
 * get-feedback Action
 */
export const ameldingIdActionGetFeedbackGet = buildCall() //
  .args<rt.Static<typeof ameldingIdActionGetFeedbackGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding/${args.id}?action=get-feedback`)
  .parseJson(withRuntype(ameldingIdActionGetFeedbackGetResponseBodyRt))
  .build();

// Operation: ameldingIdActionSendPut

const ameldingIdActionSendPutArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ameldingIdActionSendPut
 * `PUT: /amelding/{id}?action=send`
 * send Action
 */
export const ameldingIdActionSendPut = buildCall() //
  .args<rt.Static<typeof ameldingIdActionSendPutArgsRt>>()
  .method('put')
  .path((args) => `/amelding/${args.id}?action=send`)
  .parseJson(withRuntype(ameldingDataRt))
  .build();

// Operation: ameldingIdActionFeedbackPut

const ameldingIdActionFeedbackPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: ameldingIdActionFeedbackPut
 * `PUT: /amelding/{id}?action=feedback`
 * feedback Action
 */
export const ameldingIdActionFeedbackPut = buildCall() //
  .args<rt.Static<typeof ameldingIdActionFeedbackPutArgsRt>>()
  .method('put')
  .path((args) => `/amelding/${args.id}?action=feedback`)
  .parseJson(withRuntype(ameldingDataRt))
  .build();

// Operation: ameldingActionAmeldingFeedbackInPeriodGet

const ameldingActionAmeldingFeedbackInPeriodGetArgsRt = rt
  .Record({ fromPeriod: rt.Number, toPeriod: rt.Number, year: rt.Number })
  .asPartial()
  .asReadonly();

const ameldingActionAmeldingFeedbackInPeriodGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: ameldingActionAmeldingFeedbackInPeriodGet
 * `GET: /amelding?action=amelding-feedback-in-period`
 * amelding-feedback-in-period Action
 */
export const ameldingActionAmeldingFeedbackInPeriodGet = buildCall() //
  .args<rt.Static<typeof ameldingActionAmeldingFeedbackInPeriodGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding?action=amelding-feedback-in-period`)
  .parseJson(
    withRuntype(ameldingActionAmeldingFeedbackInPeriodGetResponseBodyRt),
  )
  .build();

// Operation: ameldingActionPayrollrunsInAmeldingPeriodGet

const ameldingActionPayrollrunsInAmeldingPeriodGetArgsRt = rt
  .Record({ period: rt.Number })
  .asPartial()
  .asReadonly();

const ameldingActionPayrollrunsInAmeldingPeriodGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: ameldingActionPayrollrunsInAmeldingPeriodGet
 * `GET: /amelding?action=payrollruns-in-amelding-period`
 * payrollruns-in-amelding-period Action
 */
export const ameldingActionPayrollrunsInAmeldingPeriodGet = buildCall() //
  .args<rt.Static<typeof ameldingActionPayrollrunsInAmeldingPeriodGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding?action=payrollruns-in-amelding-period`)
  .parseJson(
    withRuntype(ameldingActionPayrollrunsInAmeldingPeriodGetResponseBodyRt),
  )
  .build();

// Operation: ameldingIdActionPayAgaTaxPost

const ameldingIdActionPayAgaTaxPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ dto: payAgaTaxDTORt }).asPartial().asReadonly(),
);

/**
 * operation ID: ameldingIdActionPayAgaTaxPost
 * `POST: /amelding/{id}?action=pay-aga-tax`
 * pay-aga-tax Action
 */
export const ameldingIdActionPayAgaTaxPost = buildCall() //
  .args<rt.Static<typeof ameldingIdActionPayAgaTaxPostArgsRt>>()
  .method('post')
  .path((args) => `/amelding/${args.id}?action=pay-aga-tax`)
  .body((args) => args.dto)
  .build();

// Operation: ameldingIdActionRebuildLogsGet

const ameldingIdActionRebuildLogsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const ameldingIdActionRebuildLogsGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: ameldingIdActionRebuildLogsGet
 * `GET: /amelding/{id}?action=rebuild-logs`
 * rebuild-logs Action
 */
export const ameldingIdActionRebuildLogsGet = buildCall() //
  .args<rt.Static<typeof ameldingIdActionRebuildLogsGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding/${args.id}?action=rebuild-logs`)
  .parseJson(withRuntype(ameldingIdActionRebuildLogsGetResponseBodyRt))
  .build();

// Operation: ameldingActionValidatePeriodsGet

const ameldingActionValidatePeriodsGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const ameldingActionValidatePeriodsGetResponseBodyRt =
  rt.Array(validationMessageRt);

/**
 * operation ID: ameldingActionValidatePeriodsGet
 * `GET: /amelding?action=validate-periods`
 * validate-periods Action
 */
export const ameldingActionValidatePeriodsGet = buildCall() //
  .args<rt.Static<typeof ameldingActionValidatePeriodsGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding?action=validate-periods`)
  .parseJson(withRuntype(ameldingActionValidatePeriodsGetResponseBodyRt))
  .build();

// Operation: ameldingIdGet

const ameldingIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ameldingIdGet
 * `GET: /amelding/{id}`
 * Get AmeldingData
 */
export const ameldingIdGet = buildCall() //
  .args<rt.Static<typeof ameldingIdGetArgsRt>>()
  .method('get')
  .path((args) => `/amelding/${args.id}`)
  .parseJson(withRuntype(ameldingDataRt))
  .build();

// Operation: ameldingIdDelete

const ameldingIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ameldingIdDelete
 * `DELETE: /amelding/{id}`
 * Delete AmeldingData
 */
export const ameldingIdDelete = buildCall() //
  .args<rt.Static<typeof ameldingIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/amelding/${args.id}`)
  .parseJson(withRuntype(ameldingDataRt))
  .build();

// Operation: ameldingGet

const ameldingGetResponseBodyRt = rt.Array(ameldingDataRt);

/**
 * operation ID: ameldingGet
 * `GET: /amelding`
 * Query AmeldingData
 */
export const ameldingGet = buildCall() //
  .method('get')
  .path('/amelding')
  .parseJson(withRuntype(ameldingGetResponseBodyRt))
  .build();

// Operation: ameldingPost

const ameldingPostArgsRt = rt
  .Record({ AmeldingData: ameldingDataRt })
  .asReadonly();

/**
 * operation ID: ameldingPost
 * `POST: /amelding`
 * Create AmeldingData
 */
export const ameldingPost = buildCall() //
  .args<rt.Static<typeof ameldingPostArgsRt>>()
  .method('post')
  .path('/amelding')
  .body((args) => args.AmeldingData)
  .build();

// Operation: ameldingsumsIdActionGetSumupGet

const ameldingsumsIdActionGetSumupGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: ameldingsumsIdActionGetSumupGet
 * `GET: /ameldingsums/{id}?action=get-sumup`
 * get-sumup Action
 */
export const ameldingsumsIdActionGetSumupGet = buildCall() //
  .args<rt.Static<typeof ameldingsumsIdActionGetSumupGetArgsRt>>()
  .method('get')
  .path((args) => `/ameldingsums/${args.id}?action=get-sumup`)
  .parseJson(withRuntype(ameldingSumUpRt))
  .build();

// Operation: annualStatementActionInselectionGet

const annualStatementActionInselectionGetArgsRt = rt
  .Record({ employees: rt.String, year: rt.Number })
  .asPartial()
  .asReadonly();

const annualStatementActionInselectionGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: annualStatementActionInselectionGet
 * `GET: /annual-statement?action=inselection`
 * inselection Action
 */
export const annualStatementActionInselectionGet = buildCall() //
  .args<rt.Static<typeof annualStatementActionInselectionGetArgsRt>>()
  .method('get')
  .path((args) => `/annual-statement?action=inselection`)
  .parseJson(withRuntype(annualStatementActionInselectionGetResponseBodyRt))
  .build();

// Operation: annualStatementActionEmailPut

const annualStatementActionEmailPutArgsRt = rt
  .Record({ setup: annualStatementReportSetupRt, year: rt.Number })
  .asPartial()
  .asReadonly();

const annualStatementActionEmailPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: annualStatementActionEmailPut
 * `PUT: /annual-statement?action=email`
 * email Action
 */
export const annualStatementActionEmailPut = buildCall() //
  .args<rt.Static<typeof annualStatementActionEmailPutArgsRt>>()
  .method('put')
  .path((args) => `/annual-statement?action=email`)
  .body((args) => args.setup)
  .parseJson(withRuntype(annualStatementActionEmailPutResponseBodyRt))
  .build();

// Operation: annualStatementActionGenerateZipPut

const annualStatementActionGenerateZipPutArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const annualStatementActionGenerateZipPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: annualStatementActionGenerateZipPut
 * `PUT: /annual-statement?action=generate-zip`
 * generate-zip Action
 */
export const annualStatementActionGenerateZipPut = buildCall() //
  .args<rt.Static<typeof annualStatementActionGenerateZipPutArgsRt>>()
  .method('put')
  .path((args) => `/annual-statement?action=generate-zip`)
  .parseJson(withRuntype(annualStatementActionGenerateZipPutResponseBodyRt))
  .build();

// Operation: basicamountsIdGet

const basicamountsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: basicamountsIdGet
 * `GET: /basicamounts/{id}`
 * Get BasicAmount
 */
export const basicamountsIdGet = buildCall() //
  .args<rt.Static<typeof basicamountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/basicamounts/${args.id}`)
  .parseJson(withRuntype(basicAmountRt))
  .build();

// Operation: basicamountsGet

const basicamountsGetResponseBodyRt = rt.Array(basicAmountRt);

/**
 * operation ID: basicamountsGet
 * `GET: /basicamounts`
 * Query BasicAmount
 */
export const basicamountsGet = buildCall() //
  .method('get')
  .path('/basicamounts')
  .parseJson(withRuntype(basicamountsGetResponseBodyRt))
  .build();

// Operation: companysalaryIdGet

const companysalaryIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companysalaryIdGet
 * `GET: /companysalary/{id}`
 * Get CompanySalary
 */
export const companysalaryIdGet = buildCall() //
  .args<rt.Static<typeof companysalaryIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companysalary/${args.id}`)
  .parseJson(withRuntype(companySalaryRt))
  .build();

// Operation: companysalaryIdPut

const companysalaryIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanySalary: companySalaryRt })
  .asReadonly();

/**
 * operation ID: companysalaryIdPut
 * `PUT: /companysalary/{id}`
 * Update CompanySalary
 */
export const companysalaryIdPut = buildCall() //
  .args<rt.Static<typeof companysalaryIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companysalary/${args.id}`)
  .body((args) => args.CompanySalary)
  .parseJson(withRuntype(companySalaryRt))
  .build();

// Operation: companysalaryIdDelete

const companysalaryIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companysalaryIdDelete
 * `DELETE: /companysalary/{id}`
 * Delete CompanySalary
 */
export const companysalaryIdDelete = buildCall() //
  .args<rt.Static<typeof companysalaryIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companysalary/${args.id}`)
  .parseJson(withRuntype(companySalaryRt))
  .build();

// Operation: companysalaryGet

const companysalaryGetResponseBodyRt = rt.Array(companySalaryRt);

/**
 * operation ID: companysalaryGet
 * `GET: /companysalary`
 * Query CompanySalary
 */
export const companysalaryGet = buildCall() //
  .method('get')
  .path('/companysalary')
  .parseJson(withRuntype(companysalaryGetResponseBodyRt))
  .build();

// Operation: companysalaryPost

const companysalaryPostArgsRt = rt
  .Record({ CompanySalary: companySalaryRt })
  .asReadonly();

/**
 * operation ID: companysalaryPost
 * `POST: /companysalary`
 * Create CompanySalary
 */
export const companysalaryPost = buildCall() //
  .args<rt.Static<typeof companysalaryPostArgsRt>>()
  .method('post')
  .path('/companysalary')
  .body((args) => args.CompanySalary)
  .build();

// Operation: companyvacationratesActionCurrentGet

const companyvacationratesActionCurrentGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: companyvacationratesActionCurrentGet
 * `GET: /companyvacationrates?action=current`
 * current Action
 */
export const companyvacationratesActionCurrentGet = buildCall() //
  .args<rt.Static<typeof companyvacationratesActionCurrentGetArgsRt>>()
  .method('get')
  .path((args) => `/companyvacationrates?action=current`)
  .parseJson(withRuntype(companyVacationRateRt))
  .build();

// Operation: companyvacationratesIdGet

const companyvacationratesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companyvacationratesIdGet
 * `GET: /companyvacationrates/{id}`
 * Get CompanyVacationRate
 */
export const companyvacationratesIdGet = buildCall() //
  .args<rt.Static<typeof companyvacationratesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companyvacationrates/${args.id}`)
  .parseJson(withRuntype(companyVacationRateRt))
  .build();

// Operation: companyvacationratesIdPut

const companyvacationratesIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanyVacationRate: companyVacationRateRt })
  .asReadonly();

/**
 * operation ID: companyvacationratesIdPut
 * `PUT: /companyvacationrates/{id}`
 * Update CompanyVacationRate
 */
export const companyvacationratesIdPut = buildCall() //
  .args<rt.Static<typeof companyvacationratesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companyvacationrates/${args.id}`)
  .body((args) => args.CompanyVacationRate)
  .parseJson(withRuntype(companyVacationRateRt))
  .build();

// Operation: companyvacationratesIdDelete

const companyvacationratesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companyvacationratesIdDelete
 * `DELETE: /companyvacationrates/{id}`
 * Delete CompanyVacationRate
 */
export const companyvacationratesIdDelete = buildCall() //
  .args<rt.Static<typeof companyvacationratesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companyvacationrates/${args.id}`)
  .parseJson(withRuntype(companyVacationRateRt))
  .build();

// Operation: companyvacationratesGet

const companyvacationratesGetResponseBodyRt = rt.Array(companyVacationRateRt);

/**
 * operation ID: companyvacationratesGet
 * `GET: /companyvacationrates`
 * Query CompanyVacationRate
 */
export const companyvacationratesGet = buildCall() //
  .method('get')
  .path('/companyvacationrates')
  .parseJson(withRuntype(companyvacationratesGetResponseBodyRt))
  .build();

// Operation: companyvacationratesPost

const companyvacationratesPostArgsRt = rt
  .Record({ CompanyVacationRate: companyVacationRateRt })
  .asReadonly();

/**
 * operation ID: companyvacationratesPost
 * `POST: /companyvacationrates`
 * Create CompanyVacationRate
 */
export const companyvacationratesPost = buildCall() //
  .args<rt.Static<typeof companyvacationratesPostArgsRt>>()
  .method('post')
  .path('/companyvacationrates')
  .body((args) => args.CompanyVacationRate)
  .build();

// Operation: employeecategoriesIdActionEmployeesoncategoryGet

const employeecategoriesIdActionEmployeesoncategoryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const employeecategoriesIdActionEmployeesoncategoryGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * employeecategoriesIdActionEmployeesoncategoryGet
 * `GET: /employeecategories/{id}?action=employeesoncategory`
 * employeesoncategory Action
 */
export const employeecategoriesIdActionEmployeesoncategoryGet = buildCall() //
  .args<
    rt.Static<typeof employeecategoriesIdActionEmployeesoncategoryGetArgsRt>
  >()
  .method('get')
  .path((args) => `/employeecategories/${args.id}?action=employeesoncategory`)
  .parseJson(
    withRuntype(employeecategoriesIdActionEmployeesoncategoryGetResponseBodyRt),
  )
  .build();

// Operation: employeecategoriesIdActionPayrollrunsoncategoryGet

const employeecategoriesIdActionPayrollrunsoncategoryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const employeecategoriesIdActionPayrollrunsoncategoryGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * employeecategoriesIdActionPayrollrunsoncategoryGet
 * `GET: /employeecategories/{id}?action=payrollrunsoncategory`
 * payrollrunsoncategory Action
 */
export const employeecategoriesIdActionPayrollrunsoncategoryGet = buildCall() //
  .args<
    rt.Static<typeof employeecategoriesIdActionPayrollrunsoncategoryGetArgsRt>
  >()
  .method('get')
  .path((args) => `/employeecategories/${args.id}?action=payrollrunsoncategory`)
  .parseJson(
    withRuntype(
      employeecategoriesIdActionPayrollrunsoncategoryGetResponseBodyRt,
    ),
  )
  .build();

// Operation: employeecategoriesIdGet

const employeecategoriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employeecategoriesIdGet
 * `GET: /employeecategories/{id}`
 * Get EmployeeCategory
 */
export const employeecategoriesIdGet = buildCall() //
  .args<rt.Static<typeof employeecategoriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employeecategories/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeecategoriesIdPut

const employeecategoriesIdPutArgsRt = rt
  .Record({ id: rt.Number, EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: employeecategoriesIdPut
 * `PUT: /employeecategories/{id}`
 * Update EmployeeCategory
 */
export const employeecategoriesIdPut = buildCall() //
  .args<rt.Static<typeof employeecategoriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employeecategories/${args.id}`)
  .body((args) => args.EmployeeCategory)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeecategoriesIdDelete

const employeecategoriesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeecategoriesIdDelete
 * `DELETE: /employeecategories/{id}`
 * Delete EmployeeCategory
 */
export const employeecategoriesIdDelete = buildCall() //
  .args<rt.Static<typeof employeecategoriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employeecategories/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeecategoriesGet

const employeecategoriesGetResponseBodyRt = rt.Array(employeeCategoryRt);

/**
 * operation ID: employeecategoriesGet
 * `GET: /employeecategories`
 * Query EmployeeCategory
 */
export const employeecategoriesGet = buildCall() //
  .method('get')
  .path('/employeecategories')
  .parseJson(withRuntype(employeecategoriesGetResponseBodyRt))
  .build();

// Operation: employeecategoriesPost

const employeecategoriesPostArgsRt = rt
  .Record({ EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: employeecategoriesPost
 * `POST: /employeecategories`
 * Create EmployeeCategory
 */
export const employeecategoriesPost = buildCall() //
  .args<rt.Static<typeof employeecategoriesPostArgsRt>>()
  .method('post')
  .path('/employeecategories')
  .body((args) => args.EmployeeCategory)
  .build();

// Operation: employeesEmpnoCategoryIdGet

const employeesEmpnoCategoryIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeesEmpnoCategoryIdGet
 * `GET: /employees/{empno}/category/{id}`
 * Get EmployeeCategory
 */
export const employeesEmpnoCategoryIdGet = buildCall() //
  .args<rt.Static<typeof employeesEmpnoCategoryIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employees/{empno}/category/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeesEmpnoCategoryIdPut

const employeesEmpnoCategoryIdPutArgsRt = rt
  .Record({ id: rt.Number, EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: employeesEmpnoCategoryIdPut
 * `PUT: /employees/{empno}/category/{id}`
 * Update EmployeeCategory
 */
export const employeesEmpnoCategoryIdPut = buildCall() //
  .args<rt.Static<typeof employeesEmpnoCategoryIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employees/{empno}/category/${args.id}`)
  .body((args) => args.EmployeeCategory)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeesEmpnoCategoryIdDelete

const employeesEmpnoCategoryIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeesEmpnoCategoryIdDelete
 * `DELETE: /employees/{empno}/category/{id}`
 * Delete EmployeeCategory
 */
export const employeesEmpnoCategoryIdDelete = buildCall() //
  .args<rt.Static<typeof employeesEmpnoCategoryIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employees/{empno}/category/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: employeesEmpnoCategoryGet

const employeesEmpnoCategoryGetResponseBodyRt = rt.Array(employeeCategoryRt);

/**
 * operation ID: employeesEmpnoCategoryGet
 * `GET: /employees/{empno}/category`
 * Query EmployeeCategory
 */
export const employeesEmpnoCategoryGet = buildCall() //
  .method('get')
  .path('/employees/{empno}/category')
  .parseJson(withRuntype(employeesEmpnoCategoryGetResponseBodyRt))
  .build();

// Operation: employeesEmpnoCategoryPost

const employeesEmpnoCategoryPostArgsRt = rt
  .Record({ EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: employeesEmpnoCategoryPost
 * `POST: /employees/{empno}/category`
 * Create EmployeeCategory
 */
export const employeesEmpnoCategoryPost = buildCall() //
  .args<rt.Static<typeof employeesEmpnoCategoryPostArgsRt>>()
  .method('post')
  .path('/employees/{empno}/category')
  .body((args) => args.EmployeeCategory)
  .build();

// Operation: payrollrunRunidCategoryIdGet

const payrollrunRunidCategoryIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunRunidCategoryIdGet
 * `GET: /payrollrun/{runid}/category/{id}`
 * Get EmployeeCategory
 */
export const payrollrunRunidCategoryIdGet = buildCall() //
  .args<rt.Static<typeof payrollrunRunidCategoryIdGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/{runid}/category/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: payrollrunRunidCategoryIdPut

const payrollrunRunidCategoryIdPutArgsRt = rt
  .Record({ id: rt.Number, EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: payrollrunRunidCategoryIdPut
 * `PUT: /payrollrun/{runid}/category/{id}`
 * Update EmployeeCategory
 */
export const payrollrunRunidCategoryIdPut = buildCall() //
  .args<rt.Static<typeof payrollrunRunidCategoryIdPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/{runid}/category/${args.id}`)
  .body((args) => args.EmployeeCategory)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: payrollrunRunidCategoryIdDelete

const payrollrunRunidCategoryIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunRunidCategoryIdDelete
 * `DELETE: /payrollrun/{runid}/category/{id}`
 * Delete EmployeeCategory
 */
export const payrollrunRunidCategoryIdDelete = buildCall() //
  .args<rt.Static<typeof payrollrunRunidCategoryIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payrollrun/{runid}/category/${args.id}`)
  .parseJson(withRuntype(employeeCategoryRt))
  .build();

// Operation: payrollrunRunidCategoryGet

const payrollrunRunidCategoryGetResponseBodyRt = rt.Array(employeeCategoryRt);

/**
 * operation ID: payrollrunRunidCategoryGet
 * `GET: /payrollrun/{runid}/category`
 * Query EmployeeCategory
 */
export const payrollrunRunidCategoryGet = buildCall() //
  .method('get')
  .path('/payrollrun/{runid}/category')
  .parseJson(withRuntype(payrollrunRunidCategoryGetResponseBodyRt))
  .build();

// Operation: payrollrunRunidCategoryPost

const payrollrunRunidCategoryPostArgsRt = rt
  .Record({ EmployeeCategory: employeeCategoryRt })
  .asReadonly();

/**
 * operation ID: payrollrunRunidCategoryPost
 * `POST: /payrollrun/{runid}/category`
 * Create EmployeeCategory
 */
export const payrollrunRunidCategoryPost = buildCall() //
  .args<rt.Static<typeof payrollrunRunidCategoryPostArgsRt>>()
  .method('post')
  .path('/payrollrun/{runid}/category')
  .body((args) => args.EmployeeCategory)
  .build();

// Operation: employeesIdActionVacationpayCreatePut

const employeesIdActionVacationpayCreatePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ year: rt.Number, sixth: rt.Boolean, payrollRunID: rt.Number })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: employeesIdActionVacationpayCreatePut
 * `PUT: /employees/{id}?action=vacationpay-create`
 * vacationpay-create Action
 */
export const employeesIdActionVacationpayCreatePut = buildCall() //
  .args<rt.Static<typeof employeesIdActionVacationpayCreatePutArgsRt>>()
  .method('put')
  .path((args) => `/employees/${args.id}?action=vacationpay-create`)
  .build();

// Operation: employeesIdActionVacationpayClosurePut

const employeesIdActionVacationpayClosurePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ sixth: rt.Boolean, payrollRunID: rt.Number })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: employeesIdActionVacationpayClosurePut
 * `PUT: /employees/{id}?action=vacationpay-closure`
 * vacationpay-closure Action
 */
export const employeesIdActionVacationpayClosurePut = buildCall() //
  .args<rt.Static<typeof employeesIdActionVacationpayClosurePutArgsRt>>()
  .method('put')
  .path((args) => `/employees/${args.id}?action=vacationpay-closure`)
  .build();

// Operation: employeesIdActionNextGet

const employeesIdActionNextGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeesIdActionNextGet
 * `GET: /employees/{id}?action=next`
 * next Action
 */
export const employeesIdActionNextGet = buildCall() //
  .args<rt.Static<typeof employeesIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/employees/${args.id}?action=next`)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesIdActionPreviousGet

const employeesIdActionPreviousGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeesIdActionPreviousGet
 * `GET: /employees/{id}?action=previous`
 * previous Action
 */
export const employeesIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof employeesIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/employees/${args.id}?action=previous`)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesActionReadTaxCardsGet

const employeesActionReadTaxCardsGetArgsRt = rt
  .Record({ receiptID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: employeesActionReadTaxCardsGet
 * `GET: /employees?action=read-tax-cards`
 * read-tax-cards Action
 */
export const employeesActionReadTaxCardsGet = buildCall() //
  .args<rt.Static<typeof employeesActionReadTaxCardsGetArgsRt>>()
  .method('get')
  .path((args) => `/employees?action=read-tax-cards`)
  .parseJson(withRuntype(taxCardReadStatusRt))
  .build();

// Operation: employeesIdActionSetcategoriesPut

const employeesIdActionSetcategoriesPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, categories: rt.Dictionary(rt.Unknown) })
    .asPartial()
    .asReadonly(),
);

const employeesIdActionSetcategoriesPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: employeesIdActionSetcategoriesPut
 * `PUT: /employees/{id}?action=setcategories`
 * setcategories Action
 */
export const employeesIdActionSetcategoriesPut = buildCall() //
  .args<rt.Static<typeof employeesIdActionSetcategoriesPutArgsRt>>()
  .method('put')
  .path((args) => `/employees/${args.id}?action=setcategories`)
  .parseJson(withRuntype(employeesIdActionSetcategoriesPutResponseBodyRt))
  .build();

// Operation: employeesActionEmpsOnTransesGet

const employeesActionEmpsOnTransesGetArgsRt = rt
  .Record({ status: rt.Number, expand: rt.String })
  .asPartial()
  .asReadonly();

const employeesActionEmpsOnTransesGetResponseBodyRt = rt.Array(employeeRt);

/**
 * operation ID: employeesActionEmpsOnTransesGet
 * `GET: /employees?action=emps-on-transes`
 * emps-on-transes Action
 */
export const employeesActionEmpsOnTransesGet = buildCall() //
  .args<rt.Static<typeof employeesActionEmpsOnTransesGetArgsRt>>()
  .method('get')
  .path((args) => `/employees?action=emps-on-transes`)
  .parseJson(withRuntype(employeesActionEmpsOnTransesGetResponseBodyRt))
  .build();

// Operation: employeesIdActionSetEndDatePut

const employeesIdActionSetEndDatePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      employee: employeeRt,
      endDateReason: rt.Number,
      endDate: rt.Unknown,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: employeesIdActionSetEndDatePut
 * `PUT: /employees/{id}?action=set-end-date`
 * set-end-date Action
 */
export const employeesIdActionSetEndDatePut = buildCall() //
  .args<rt.Static<typeof employeesIdActionSetEndDatePutArgsRt>>()
  .method('put')
  .path((args) => `/employees/${args.id}?action=set-end-date`)
  .body((args) => args.employee)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesIdGet

const employeesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employeesIdGet
 * `GET: /employees/{id}`
 * Get Employee
 */
export const employeesIdGet = buildCall() //
  .args<rt.Static<typeof employeesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employees/${args.id}`)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesIdPut

const employeesIdPutArgsRt = rt
  .Record({ id: rt.Number, Employee: employeeRt })
  .asReadonly();

/**
 * operation ID: employeesIdPut
 * `PUT: /employees/{id}`
 * Update Employee
 */
export const employeesIdPut = buildCall() //
  .args<rt.Static<typeof employeesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employees/${args.id}`)
  .body((args) => args.Employee)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesIdDelete

const employeesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employeesIdDelete
 * `DELETE: /employees/{id}`
 * Delete Employee
 */
export const employeesIdDelete = buildCall() //
  .args<rt.Static<typeof employeesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employees/${args.id}`)
  .parseJson(withRuntype(employeeRt))
  .build();

// Operation: employeesGet

const employeesGetResponseBodyRt = rt.Array(employeeRt);

/**
 * operation ID: employeesGet
 * `GET: /employees`
 * Query Employee
 */
export const employeesGet = buildCall() //
  .method('get')
  .path('/employees')
  .parseJson(withRuntype(employeesGetResponseBodyRt))
  .build();

// Operation: employeesPost

const employeesPostArgsRt = rt.Record({ Employee: employeeRt }).asReadonly();

/**
 * operation ID: employeesPost
 * `POST: /employees`
 * Create Employee
 */
export const employeesPost = buildCall() //
  .args<rt.Static<typeof employeesPostArgsRt>>()
  .method('post')
  .path('/employees')
  .body((args) => args.Employee)
  .build();

// Operation: employeeLeaveIdGet

const employeeLeaveIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employeeLeaveIdGet
 * `GET: /EmployeeLeave/{id}`
 * Get EmployeeLeave
 */
export const employeeLeaveIdGet = buildCall() //
  .args<rt.Static<typeof employeeLeaveIdGetArgsRt>>()
  .method('get')
  .path((args) => `/EmployeeLeave/${args.id}`)
  .parseJson(withRuntype(employeeLeaveRt))
  .build();

// Operation: employeeLeaveIdPut

const employeeLeaveIdPutArgsRt = rt
  .Record({ id: rt.Number, EmployeeLeave: employeeLeaveRt })
  .asReadonly();

/**
 * operation ID: employeeLeaveIdPut
 * `PUT: /EmployeeLeave/{id}`
 * Update EmployeeLeave
 */
export const employeeLeaveIdPut = buildCall() //
  .args<rt.Static<typeof employeeLeaveIdPutArgsRt>>()
  .method('put')
  .path((args) => `/EmployeeLeave/${args.id}`)
  .body((args) => args.EmployeeLeave)
  .parseJson(withRuntype(employeeLeaveRt))
  .build();

// Operation: employeeLeaveIdDelete

const employeeLeaveIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employeeLeaveIdDelete
 * `DELETE: /EmployeeLeave/{id}`
 * Delete EmployeeLeave
 */
export const employeeLeaveIdDelete = buildCall() //
  .args<rt.Static<typeof employeeLeaveIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/EmployeeLeave/${args.id}`)
  .parseJson(withRuntype(employeeLeaveRt))
  .build();

// Operation: employeeLeaveGet

const employeeLeaveGetResponseBodyRt = rt.Array(employeeLeaveRt);

/**
 * operation ID: employeeLeaveGet
 * `GET: /EmployeeLeave`
 * Query EmployeeLeave
 */
export const employeeLeaveGet = buildCall() //
  .method('get')
  .path('/EmployeeLeave')
  .parseJson(withRuntype(employeeLeaveGetResponseBodyRt))
  .build();

// Operation: employeeLeavePost

const employeeLeavePostArgsRt = rt
  .Record({ EmployeeLeave: employeeLeaveRt })
  .asReadonly();

/**
 * operation ID: employeeLeavePost
 * `POST: /EmployeeLeave`
 * Create EmployeeLeave
 */
export const employeeLeavePost = buildCall() //
  .args<rt.Static<typeof employeeLeavePostArgsRt>>()
  .method('post')
  .path('/EmployeeLeave')
  .body((args) => args.EmployeeLeave)
  .build();

// Operation: taxcardsIdGet

const taxcardsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: taxcardsIdGet
 * `GET: /taxcards/{id}`
 * Get EmployeeTaxCard
 */
export const taxcardsIdGet = buildCall() //
  .args<rt.Static<typeof taxcardsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/taxcards/${args.id}`)
  .parseJson(withRuntype(employeeTaxCardRt))
  .build();

// Operation: taxcardsIdPut

const taxcardsIdPutArgsRt = rt
  .Record({ id: rt.Number, EmployeeTaxCard: employeeTaxCardRt })
  .asReadonly();

/**
 * operation ID: taxcardsIdPut
 * `PUT: /taxcards/{id}`
 * Update EmployeeTaxCard
 */
export const taxcardsIdPut = buildCall() //
  .args<rt.Static<typeof taxcardsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/taxcards/${args.id}`)
  .body((args) => args.EmployeeTaxCard)
  .parseJson(withRuntype(employeeTaxCardRt))
  .build();

// Operation: taxcardsIdDelete

const taxcardsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: taxcardsIdDelete
 * `DELETE: /taxcards/{id}`
 * Delete EmployeeTaxCard
 */
export const taxcardsIdDelete = buildCall() //
  .args<rt.Static<typeof taxcardsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/taxcards/${args.id}`)
  .parseJson(withRuntype(employeeTaxCardRt))
  .build();

// Operation: taxcardsGet

const taxcardsGetResponseBodyRt = rt.Array(employeeTaxCardRt);

/**
 * operation ID: taxcardsGet
 * `GET: /taxcards`
 * Query EmployeeTaxCard
 */
export const taxcardsGet = buildCall() //
  .method('get')
  .path('/taxcards')
  .parseJson(withRuntype(taxcardsGetResponseBodyRt))
  .build();

// Operation: taxcardsPost

const taxcardsPostArgsRt = rt
  .Record({ EmployeeTaxCard: employeeTaxCardRt })
  .asReadonly();

/**
 * operation ID: taxcardsPost
 * `POST: /taxcards`
 * Create EmployeeTaxCard
 */
export const taxcardsPost = buildCall() //
  .args<rt.Static<typeof taxcardsPostArgsRt>>()
  .method('post')
  .path('/taxcards')
  .body((args) => args.EmployeeTaxCard)
  .build();

// Operation: employmentsIdActionHistoryGet

const employmentsIdActionHistoryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const employmentsIdActionHistoryGetResponseBodyRt = rt.Array(
  employmentHistoryRecordRt,
);

/**
 * operation ID: employmentsIdActionHistoryGet
 * `GET: /employments/{id}?action=history`
 * history Action
 */
export const employmentsIdActionHistoryGet = buildCall() //
  .args<rt.Static<typeof employmentsIdActionHistoryGetArgsRt>>()
  .method('get')
  .path((args) => `/employments/${args.id}?action=history`)
  .parseJson(withRuntype(employmentsIdActionHistoryGetResponseBodyRt))
  .build();

// Operation: employmentsIdGet

const employmentsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employmentsIdGet
 * `GET: /employments/{id}`
 * Get Employment
 */
export const employmentsIdGet = buildCall() //
  .args<rt.Static<typeof employmentsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employments/${args.id}`)
  .parseJson(withRuntype(employmentRt))
  .build();

// Operation: employmentsIdPut

const employmentsIdPutArgsRt = rt
  .Record({ id: rt.Number, Employment: employmentRt })
  .asReadonly();

/**
 * operation ID: employmentsIdPut
 * `PUT: /employments/{id}`
 * Update Employment
 */
export const employmentsIdPut = buildCall() //
  .args<rt.Static<typeof employmentsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employments/${args.id}`)
  .body((args) => args.Employment)
  .parseJson(withRuntype(employmentRt))
  .build();

// Operation: employmentsIdDelete

const employmentsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: employmentsIdDelete
 * `DELETE: /employments/{id}`
 * Delete Employment
 */
export const employmentsIdDelete = buildCall() //
  .args<rt.Static<typeof employmentsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employments/${args.id}`)
  .parseJson(withRuntype(employmentRt))
  .build();

// Operation: employmentsGet

const employmentsGetResponseBodyRt = rt.Array(employmentRt);

/**
 * operation ID: employmentsGet
 * `GET: /employments`
 * Query Employment
 */
export const employmentsGet = buildCall() //
  .method('get')
  .path('/employments')
  .parseJson(withRuntype(employmentsGetResponseBodyRt))
  .build();

// Operation: employmentsPost

const employmentsPostArgsRt = rt
  .Record({ Employment: employmentRt })
  .asReadonly();

/**
 * operation ID: employmentsPost
 * `POST: /employments`
 * Create Employment
 */
export const employmentsPost = buildCall() //
  .args<rt.Static<typeof employmentsPostArgsRt>>()
  .method('post')
  .path('/employments')
  .body((args) => args.Employment)
  .build();

// Operation: grantsIdGet

const grantsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: grantsIdGet
 * `GET: /grants/{id}`
 * Get Grant
 */
export const grantsIdGet = buildCall() //
  .args<rt.Static<typeof grantsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/grants/${args.id}`)
  .parseJson(withRuntype(grantRt))
  .build();

// Operation: grantsIdPut

const grantsIdPutArgsRt = rt
  .Record({ id: rt.Number, Grant: grantRt })
  .asReadonly();

/**
 * operation ID: grantsIdPut
 * `PUT: /grants/{id}`
 * Update Grant
 */
export const grantsIdPut = buildCall() //
  .args<rt.Static<typeof grantsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/grants/${args.id}`)
  .body((args) => args.Grant)
  .parseJson(withRuntype(grantRt))
  .build();

// Operation: grantsIdDelete

const grantsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: grantsIdDelete
 * `DELETE: /grants/{id}`
 * Delete Grant
 */
export const grantsIdDelete = buildCall() //
  .args<rt.Static<typeof grantsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/grants/${args.id}`)
  .parseJson(withRuntype(grantRt))
  .build();

// Operation: grantsGet

const grantsGetResponseBodyRt = rt.Array(grantRt);

/**
 * operation ID: grantsGet
 * `GET: /grants`
 * Query Grant
 */
export const grantsGet = buildCall() //
  .method('get')
  .path('/grants')
  .parseJson(withRuntype(grantsGetResponseBodyRt))
  .build();

// Operation: grantsPost

const grantsPostArgsRt = rt.Record({ Grant: grantRt }).asReadonly();

/**
 * operation ID: grantsPost
 * `POST: /grants`
 * Create Grant
 */
export const grantsPost = buildCall() //
  .args<rt.Static<typeof grantsPostArgsRt>>()
  .method('post')
  .path('/grants')
  .body((args) => args.Grant)
  .build();

// Operation: incomeReportsActionCreatePost

const incomeReportsActionCreatePostArgsRt = rt
  .Record({ type: rt.Number, employmentID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: incomeReportsActionCreatePost
 * `POST: /income-reports?action=create`
 * create Action
 */
export const incomeReportsActionCreatePost = buildCall() //
  .args<rt.Static<typeof incomeReportsActionCreatePostArgsRt>>()
  .method('post')
  .path((args) => `/income-reports?action=create`)
  .parseJson(withRuntype(incomeReportDataRt))
  .build();

// Operation: incomeReportsActionCodeListGet

const incomeReportsActionCodeListGetArgsRt = rt
  .Record({ type: rt.String })
  .asPartial()
  .asReadonly();

const incomeReportsActionCodeListGetResponseBodyRt = rt.Array(
  codeListRowsCodeListRowRt,
);

/**
 * operation ID: incomeReportsActionCodeListGet
 * `GET: /income-reports?action=code-list`
 * code-list Action
 */
export const incomeReportsActionCodeListGet = buildCall() //
  .args<rt.Static<typeof incomeReportsActionCodeListGetArgsRt>>()
  .method('get')
  .path((args) => `/income-reports?action=code-list`)
  .parseJson(withRuntype(incomeReportsActionCodeListGetResponseBodyRt))
  .build();

// Operation: incomeReportsIdActionSendPut

const incomeReportsIdActionSendPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: incomeReportsIdActionSendPut
 * `PUT: /income-reports/{id}?action=send`
 * send Action
 */
export const incomeReportsIdActionSendPut = buildCall() //
  .args<rt.Static<typeof incomeReportsIdActionSendPutArgsRt>>()
  .method('put')
  .path((args) => `/income-reports/${args.id}?action=send`)
  .parseJson(withRuntype(incomeReportDataRt))
  .build();

// Operation: incomeReportsActionMonthlyPayGet

const incomeReportsActionMonthlyPayGetArgsRt = rt
  .Record({ employmentId: rt.Number, fromDate: rt.String, periods: rt.Number })
  .asPartial()
  .asReadonly();

const incomeReportsActionMonthlyPayGetResponseBodyRt = rt.Array(monthlyPayRt);

/**
 * operation ID: incomeReportsActionMonthlyPayGet
 * `GET: /income-reports?action=monthly-pay`
 * monthly-pay Action
 */
export const incomeReportsActionMonthlyPayGet = buildCall() //
  .args<rt.Static<typeof incomeReportsActionMonthlyPayGetArgsRt>>()
  .method('get')
  .path((args) => `/income-reports?action=monthly-pay`)
  .parseJson(withRuntype(incomeReportsActionMonthlyPayGetResponseBodyRt))
  .build();

// Operation: incomeReportsIdGet

const incomeReportsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: incomeReportsIdGet
 * `GET: /income-reports/{id}`
 * Get IncomeReportData
 */
export const incomeReportsIdGet = buildCall() //
  .args<rt.Static<typeof incomeReportsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/income-reports/${args.id}`)
  .parseJson(withRuntype(incomeReportDataRt))
  .build();

// Operation: incomeReportsIdPut

const incomeReportsIdPutArgsRt = rt
  .Record({ id: rt.Number, IncomeReportData: incomeReportDataRt })
  .asReadonly();

/**
 * operation ID: incomeReportsIdPut
 * `PUT: /income-reports/{id}`
 * Update IncomeReportData
 */
export const incomeReportsIdPut = buildCall() //
  .args<rt.Static<typeof incomeReportsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/income-reports/${args.id}`)
  .body((args) => args.IncomeReportData)
  .parseJson(withRuntype(incomeReportDataRt))
  .build();

// Operation: incomeReportsIdDelete

const incomeReportsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: incomeReportsIdDelete
 * `DELETE: /income-reports/{id}`
 * Delete IncomeReportData
 */
export const incomeReportsIdDelete = buildCall() //
  .args<rt.Static<typeof incomeReportsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/income-reports/${args.id}`)
  .parseJson(withRuntype(incomeReportDataRt))
  .build();

// Operation: incomeReportsGet

const incomeReportsGetResponseBodyRt = rt.Array(incomeReportDataRt);

/**
 * operation ID: incomeReportsGet
 * `GET: /income-reports`
 * Query IncomeReportData
 */
export const incomeReportsGet = buildCall() //
  .method('get')
  .path('/income-reports')
  .parseJson(withRuntype(incomeReportsGetResponseBodyRt))
  .build();

// Operation: incomeReportsPost

const incomeReportsPostArgsRt = rt
  .Record({ IncomeReportData: incomeReportDataRt })
  .asReadonly();

/**
 * operation ID: incomeReportsPost
 * `POST: /income-reports`
 * Create IncomeReportData
 */
export const incomeReportsPost = buildCall() //
  .args<rt.Static<typeof incomeReportsPostArgsRt>>()
  .method('post')
  .path('/income-reports')
  .body((args) => args.IncomeReportData)
  .build();

// Operation: mysalarytransesActionGetallGet

const mysalarytransesActionGetallGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: mysalarytransesActionGetallGet
 * `GET: /mysalarytranses?action=getall`
 * getall Action
 */
export const mysalarytransesActionGetallGet = buildCall() //
  .method('get')
  .path('/mysalarytranses?action=getall')
  .parseJson(withRuntype(mysalarytransesActionGetallGetResponseBodyRt))
  .build();

// Operation: otpexportwagetypesIdGet

const otpexportwagetypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: otpexportwagetypesIdGet
 * `GET: /otpexportwagetypes/{id}`
 * Get OtpExportWagetype
 */
export const otpexportwagetypesIdGet = buildCall() //
  .args<rt.Static<typeof otpexportwagetypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/otpexportwagetypes/${args.id}`)
  .parseJson(withRuntype(otpExportWagetypeRt))
  .build();

// Operation: otpexportwagetypesIdPut

const otpexportwagetypesIdPutArgsRt = rt
  .Record({ id: rt.Number, OtpExportWagetype: otpExportWagetypeRt })
  .asReadonly();

/**
 * operation ID: otpexportwagetypesIdPut
 * `PUT: /otpexportwagetypes/{id}`
 * Update OtpExportWagetype
 */
export const otpexportwagetypesIdPut = buildCall() //
  .args<rt.Static<typeof otpexportwagetypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/otpexportwagetypes/${args.id}`)
  .body((args) => args.OtpExportWagetype)
  .parseJson(withRuntype(otpExportWagetypeRt))
  .build();

// Operation: otpexportwagetypesIdDelete

const otpexportwagetypesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: otpexportwagetypesIdDelete
 * `DELETE: /otpexportwagetypes/{id}`
 * Delete OtpExportWagetype
 */
export const otpexportwagetypesIdDelete = buildCall() //
  .args<rt.Static<typeof otpexportwagetypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/otpexportwagetypes/${args.id}`)
  .parseJson(withRuntype(otpExportWagetypeRt))
  .build();

// Operation: otpexportwagetypesGet

const otpexportwagetypesGetResponseBodyRt = rt.Array(otpExportWagetypeRt);

/**
 * operation ID: otpexportwagetypesGet
 * `GET: /otpexportwagetypes`
 * Query OtpExportWagetype
 */
export const otpexportwagetypesGet = buildCall() //
  .method('get')
  .path('/otpexportwagetypes')
  .parseJson(withRuntype(otpexportwagetypesGetResponseBodyRt))
  .build();

// Operation: otpexportwagetypesPost

const otpexportwagetypesPostArgsRt = rt
  .Record({ OtpExportWagetype: otpExportWagetypeRt })
  .asReadonly();

/**
 * operation ID: otpexportwagetypesPost
 * `POST: /otpexportwagetypes`
 * Create OtpExportWagetype
 */
export const otpexportwagetypesPost = buildCall() //
  .args<rt.Static<typeof otpexportwagetypesPostArgsRt>>()
  .method('post')
  .path('/otpexportwagetypes')
  .body((args) => args.OtpExportWagetype)
  .build();

// Operation: paycheckActionAllGet

const paycheckActionAllGetArgsRt = rt
  .Record({ payrollID: rt.Number, grouped: rt.Boolean })
  .asPartial()
  .asReadonly();

const paycheckActionAllGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: paycheckActionAllGet
 * `GET: /paycheck?action=all`
 * all Action
 */
export const paycheckActionAllGet = buildCall() //
  .args<rt.Static<typeof paycheckActionAllGetArgsRt>>()
  .method('get')
  .path((args) => `/paycheck?action=all`)
  .parseJson(withRuntype(paycheckActionAllGetResponseBodyRt))
  .build();

// Operation: paycheckActionFromtoGet

const paycheckActionFromtoGetArgsRt = rt
  .Record({
    payrollID: rt.Number,
    empnoFrom: rt.Number,
    empnoTo: rt.Number,
    grouped: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const paycheckActionFromtoGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: paycheckActionFromtoGet
 * `GET: /paycheck?action=fromto`
 * fromto Action
 */
export const paycheckActionFromtoGet = buildCall() //
  .args<rt.Static<typeof paycheckActionFromtoGetArgsRt>>()
  .method('get')
  .path((args) => `/paycheck?action=fromto`)
  .parseJson(withRuntype(paycheckActionFromtoGetResponseBodyRt))
  .build();

// Operation: paycheckActionInselectionGet

const paycheckActionInselectionGetArgsRt = rt
  .Record({ payrollID: rt.Number, employees: rt.String, grouped: rt.Boolean })
  .asPartial()
  .asReadonly();

const paycheckActionInselectionGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: paycheckActionInselectionGet
 * `GET: /paycheck?action=inselection`
 * inselection Action
 */
export const paycheckActionInselectionGet = buildCall() //
  .args<rt.Static<typeof paycheckActionInselectionGetArgsRt>>()
  .method('get')
  .path((args) => `/paycheck?action=inselection`)
  .parseJson(withRuntype(paycheckActionInselectionGetResponseBodyRt))
  .build();

// Operation: paycheckActionRegeneratezipPut

const paycheckActionRegeneratezipPutArgsRt = rt
  .Record({ payrollID: rt.Number })
  .asPartial()
  .asReadonly();

const paycheckActionRegeneratezipPutResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: paycheckActionRegeneratezipPut
 * `PUT: /paycheck?action=regeneratezip`
 * regeneratezip Action
 */
export const paycheckActionRegeneratezipPut = buildCall() //
  .args<rt.Static<typeof paycheckActionRegeneratezipPutArgsRt>>()
  .method('put')
  .path((args) => `/paycheck?action=regeneratezip`)
  .parseJson(withRuntype(paycheckActionRegeneratezipPutResponseBodyRt))
  .build();

// Operation: paycheckIdGet

const paycheckIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paycheckIdGet
 * `GET: /paycheck/{id}`
 * Get Paycheck
 */
export const paycheckIdGet = buildCall() //
  .args<rt.Static<typeof paycheckIdGetArgsRt>>()
  .method('get')
  .path((args) => `/paycheck/${args.id}`)
  .parseJson(withRuntype(paycheckRt))
  .build();

// Operation: paycheckIdPut

const paycheckIdPutArgsRt = rt
  .Record({ id: rt.Number, Paycheck: paycheckRt })
  .asReadonly();

/**
 * operation ID: paycheckIdPut
 * `PUT: /paycheck/{id}`
 * Update Paycheck
 */
export const paycheckIdPut = buildCall() //
  .args<rt.Static<typeof paycheckIdPutArgsRt>>()
  .method('put')
  .path((args) => `/paycheck/${args.id}`)
  .body((args) => args.Paycheck)
  .parseJson(withRuntype(paycheckRt))
  .build();

// Operation: paycheckIdDelete

const paycheckIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paycheckIdDelete
 * `DELETE: /paycheck/{id}`
 * Delete Paycheck
 */
export const paycheckIdDelete = buildCall() //
  .args<rt.Static<typeof paycheckIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/paycheck/${args.id}`)
  .parseJson(withRuntype(paycheckRt))
  .build();

// Operation: paycheckGet

const paycheckGetResponseBodyRt = rt.Array(paycheckRt);

/**
 * operation ID: paycheckGet
 * `GET: /paycheck`
 * Query Paycheck
 */
export const paycheckGet = buildCall() //
  .method('get')
  .path('/paycheck')
  .parseJson(withRuntype(paycheckGetResponseBodyRt))
  .build();

// Operation: paycheckPost

const paycheckPostArgsRt = rt.Record({ Paycheck: paycheckRt }).asReadonly();

/**
 * operation ID: paycheckPost
 * `POST: /paycheck`
 * Create Paycheck
 */
export const paycheckPost = buildCall() //
  .args<rt.Static<typeof paycheckPostArgsRt>>()
  .method('post')
  .path('/paycheck')
  .body((args) => args.Paycheck)
  .build();

// Operation: payrollrunActionPayrollJobPost

const payrollrunActionPayrollJobPostArgsRt = rt
  .Record({ entity: payrollRunRt })
  .asPartial()
  .asReadonly();

const payrollrunActionPayrollJobPostResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: payrollrunActionPayrollJobPost
 * `POST: /payrollrun?action=PayrollJob`
 * PayrollJob Action
 */
export const payrollrunActionPayrollJobPost = buildCall() //
  .args<rt.Static<typeof payrollrunActionPayrollJobPostArgsRt>>()
  .method('post')
  .path('/payrollrun?action=PayrollJob')
  .body((args) => args.entity)
  .parseJson(withRuntype(payrollrunActionPayrollJobPostResponseBodyRt))
  .build();

// Operation: payrollrunIdActionCalculatejobPut

const payrollrunIdActionCalculatejobPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionCalculatejobPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: payrollrunIdActionCalculatejobPut
 * `PUT: /payrollrun/{id}?action=calculatejob`
 * calculatejob Action
 */
export const payrollrunIdActionCalculatejobPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionCalculatejobPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=calculatejob`)
  .parseJson(withRuntype(payrollrunIdActionCalculatejobPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionCalculatePut

const payrollrunIdActionCalculatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const payrollrunIdActionCalculatePutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionCalculatePut
 * `PUT: /payrollrun/{id}?action=calculate`
 * calculate Action
 */
export const payrollrunIdActionCalculatePut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionCalculatePutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=calculate`)
  .parseJson(withRuntype(payrollrunIdActionCalculatePutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionPostingsummarydraftGet

const payrollrunIdActionPostingsummarydraftGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunIdActionPostingsummarydraftGet
 * `GET: /payrollrun/{id}?action=postingsummarydraft`
 * postingsummarydraft Action
 */
export const payrollrunIdActionPostingsummarydraftGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPostingsummarydraftGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=postingsummarydraft`)
  .parseJson(withRuntype(postingSummaryDraftRt))
  .build();

// Operation: payrollrunIdActionRebuildpostingsPut

const payrollrunIdActionRebuildpostingsPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ bookingType: rt.Number, forceRegeneration: rt.Boolean })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: payrollrunIdActionRebuildpostingsPut
 * `PUT: /payrollrun/{id}?action=rebuildpostings`
 * rebuildpostings Action
 */
export const payrollrunIdActionRebuildpostingsPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionRebuildpostingsPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=rebuildpostings`)
  .parseJson(withRuntype(postingSummaryDraftRt))
  .build();

// Operation: payrollrunIdActionCalculateonempPut

const payrollrunIdActionCalculateonempPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ empID: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionCalculateonempPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionCalculateonempPut
 * `PUT: /payrollrun/{id}?action=calculateonemp`
 * calculateonemp Action
 */
export const payrollrunIdActionCalculateonempPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionCalculateonempPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=calculateonemp`)
  .parseJson(withRuntype(payrollrunIdActionCalculateonempPutResponseBodyRt))
  .build();

// Operation: payrollrunActionCalculateonempPut

const payrollrunActionCalculateonempPutArgsRt = rt
  .Record({ empID: rt.Number })
  .asPartial()
  .asReadonly();

const payrollrunActionCalculateonempPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunActionCalculateonempPut
 * `PUT: /payrollrun?action=calculateonemp`
 * calculateonemp Action
 */
export const payrollrunActionCalculateonempPut = buildCall() //
  .args<rt.Static<typeof payrollrunActionCalculateonempPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun?action=calculateonemp`)
  .parseJson(withRuntype(payrollrunActionCalculateonempPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionRecalculatetaxPut

const payrollrunIdActionRecalculatetaxPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const payrollrunIdActionRecalculatetaxPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionRecalculatetaxPut
 * `PUT: /payrollrun/{id}?action=recalculatetax`
 * recalculatetax Action
 */
export const payrollrunIdActionRecalculatetaxPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionRecalculatetaxPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=recalculatetax`)
  .parseJson(withRuntype(payrollrunIdActionRecalculatetaxPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionControlPut

const payrollrunIdActionControlPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const payrollrunIdActionControlPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionControlPut
 * `PUT: /payrollrun/{id}?action=control`
 * control Action
 */
export const payrollrunIdActionControlPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionControlPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=control`)
  .parseJson(withRuntype(payrollrunIdActionControlPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionPaymentlistGet

const payrollrunIdActionPaymentlistGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunIdActionPaymentlistGet
 * `GET: /payrollrun/{id}?action=paymentlist`
 * paymentlist Action
 */
export const payrollrunIdActionPaymentlistGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPaymentlistGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=paymentlist`)
  .parseJson(withRuntype(salaryTransactionPayRt))
  .build();

// Operation: payrollrunIdActionSendpaymentlistPost

const payrollrunIdActionSendpaymentlistPostArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunIdActionSendpaymentlistPost
 * `POST: /payrollrun/{id}?action=sendpaymentlist`
 * sendpaymentlist Action
 */
export const payrollrunIdActionSendpaymentlistPost = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionSendpaymentlistPostArgsRt>>()
  .method('post')
  .path((args) => `/payrollrun/${args.id}?action=sendpaymentlist`)
  .build();

// Operation: payrollrunIdActionPostingsummaryGet

const payrollrunIdActionPostingsummaryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ bookingType: rt.Number, refresh: rt.Boolean })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: payrollrunIdActionPostingsummaryGet
 * `GET: /payrollrun/{id}?action=postingsummary`
 * postingsummary Action
 */
export const payrollrunIdActionPostingsummaryGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPostingsummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=postingsummary`)
  .parseJson(withRuntype(postingSummaryRt))
  .build();

// Operation: payrollrunIdActionPostingsummaryLinesGet

const payrollrunIdActionPostingsummaryLinesGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ bookingType: rt.Number, refresh: rt.Boolean })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionPostingsummaryLinesGetResponseBodyRt =
  rt.Array(journalEntryLineRt);

/**
 * operation ID: payrollrunIdActionPostingsummaryLinesGet
 * `GET: /payrollrun/{id}?action=postingsummary-lines`
 * postingsummary-lines Action
 */
export const payrollrunIdActionPostingsummaryLinesGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPostingsummaryLinesGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=postingsummary-lines`)
  .parseJson(
    withRuntype(payrollrunIdActionPostingsummaryLinesGetResponseBodyRt),
  )
  .build();

// Operation: payrollrunIdActionBookPut

const payrollrunIdActionBookPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      accountingDate: rt.Unknown,
      numberseriesID: rt.Number,
      bookingType: rt.Number,
      refresh: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionBookPutResponseBodyRt = rt.Array(journalEntryLineRt);

/**
 * operation ID: payrollrunIdActionBookPut
 * `PUT: /payrollrun/{id}?action=book`
 * book Action
 */
export const payrollrunIdActionBookPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionBookPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=book`)
  .parseJson(withRuntype(payrollrunIdActionBookPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionRebuildBalancesPut

const payrollrunIdActionRebuildBalancesPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunIdActionRebuildBalancesPut
 * `PUT: /payrollrun/{id}?action=rebuildBalances`
 * rebuildBalances Action
 */
export const payrollrunIdActionRebuildBalancesPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionRebuildBalancesPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=rebuildBalances`)
  .build();

// Operation: payrollrunIdActionResetrunPut

const payrollrunIdActionResetrunPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const payrollrunIdActionResetrunPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionResetrunPut
 * `PUT: /payrollrun/{id}?action=resetrun`
 * resetrun Action
 */
export const payrollrunIdActionResetrunPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionResetrunPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=resetrun`)
  .parseJson(withRuntype(payrollrunIdActionResetrunPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionNextGet

const payrollrunIdActionNextGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ RunID: rt.Number, expand: rt.String }).asPartial().asReadonly(),
);

/**
 * operation ID: payrollrunIdActionNextGet
 * `GET: /payrollrun/{id}?action=next`
 * next Action
 */
export const payrollrunIdActionNextGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=next`)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunIdActionPreviousGet

const payrollrunIdActionPreviousGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ RunID: rt.Number, expand: rt.String }).asPartial().asReadonly(),
);

/**
 * operation ID: payrollrunIdActionPreviousGet
 * `GET: /payrollrun/{id}?action=previous`
 * previous Action
 */
export const payrollrunIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=previous`)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunIdActionLatestGet

const payrollrunIdActionLatestGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: payrollrunIdActionLatestGet
 * `GET: /payrollrun/{id}?action=latest`
 * latest Action
 */
export const payrollrunIdActionLatestGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionLatestGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=latest`)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunIdActionLatestperiodGet

const payrollrunIdActionLatestperiodGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ currYear: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionLatestperiodGetResponseBodyRt = rt.Number;

/**
 * operation ID: payrollrunIdActionLatestperiodGet
 * `GET: /payrollrun/{id}?action=latestperiod`
 * latestperiod Action
 */
export const payrollrunIdActionLatestperiodGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionLatestperiodGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=latestperiod`)
  .parseJson(withRuntype(payrollrunIdActionLatestperiodGetResponseBodyRt))
  .build();

// Operation: payrollrunIdActionVacationpayListGet

const payrollrunIdActionVacationpayListGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      year: rt.Number,
      lastyear: rt.Boolean,
      filter: rt.String,
      showAll: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionVacationpayListGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: payrollrunIdActionVacationpayListGet
 * `GET: /payrollrun/{id}?action=vacationpay-list`
 * vacationpay-list Action
 */
export const payrollrunIdActionVacationpayListGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionVacationpayListGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=vacationpay-list`)
  .parseJson(withRuntype(payrollrunIdActionVacationpayListGetResponseBodyRt))
  .build();

// Operation: payrollrunIdActionVacationpayFromEmpListPut

const payrollrunIdActionVacationpayFromEmpListPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      year: rt.Number,
      employeeIDs: rt.Dictionary(rt.Unknown),
      SplitOnSixth: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionVacationpayFromEmpListPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionVacationpayFromEmpListPut
 * `PUT: /payrollrun/{id}?action=vacationpay-from-emp-list`
 * vacationpay-from-emp-list Action
 */
export const payrollrunIdActionVacationpayFromEmpListPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionVacationpayFromEmpListPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=vacationpay-from-emp-list`)
  .body((args) => args.employeeIDs)
  .parseJson(
    withRuntype(payrollrunIdActionVacationpayFromEmpListPutResponseBodyRt),
  )
  .build();

// Operation: payrollrunIdActionVacationpayFromVacationpayinfoListPut

const payrollrunIdActionVacationpayFromVacationpayinfoListPutArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt
      .Record({ year: rt.Number, payList: rt.Dictionary(rt.Unknown) })
      .asPartial()
      .asReadonly(),
  );

const payrollrunIdActionVacationpayFromVacationpayinfoListPutResponseBodyRt =
  rt.Boolean;

/**
 * operation ID:
 * payrollrunIdActionVacationpayFromVacationpayinfoListPut
 * `PUT:
 * /payrollrun/{id}?action=vacationpay-from-vacationpayinfo-list`
 * vacationpay-from-vacationpayinfo-list Action
 */
export const payrollrunIdActionVacationpayFromVacationpayinfoListPut =
  buildCall() //
    .args<
      rt.Static<
        typeof payrollrunIdActionVacationpayFromVacationpayinfoListPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/payrollrun/${args.id}?action=vacationpay-from-vacationpayinfo-list`,
    )
    .body((args) => args.payList)
    .parseJson(
      withRuntype(
        payrollrunIdActionVacationpayFromVacationpayinfoListPutResponseBodyRt,
      ),
    )
    .build();

// Operation: payrollrunIdActionVacationpayClosurePut

const payrollrunIdActionVacationpayClosurePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      year: rt.Number,
      employeeIDs: rt.Dictionary(rt.Unknown),
      SplitOnSixth: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionVacationpayClosurePutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionVacationpayClosurePut
 * `PUT: /payrollrun/{id}?action=vacationpay-closure`
 * vacationpay-closure Action
 */
export const payrollrunIdActionVacationpayClosurePut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionVacationpayClosurePutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=vacationpay-closure`)
  .body((args) => args.employeeIDs)
  .parseJson(withRuntype(payrollrunIdActionVacationpayClosurePutResponseBodyRt))
  .build();

// Operation: payrollrunActionRebuildPut

const payrollrunActionRebuildPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunActionRebuildPut
 * `PUT: /payrollrun?action=rebuild`
 * rebuild Action
 */
export const payrollrunActionRebuildPut = buildCall() //
  .method('put')
  .path('/payrollrun?action=rebuild')
  .parseJson(withRuntype(payrollrunActionRebuildPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionEmployeesonrunGet

const payrollrunIdActionEmployeesonrunGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionEmployeesonrunGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: payrollrunIdActionEmployeesonrunGet
 * `GET: /payrollrun/{id}?action=employeesonrun`
 * employeesonrun Action
 */
export const payrollrunIdActionEmployeesonrunGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionEmployeesonrunGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=employeesonrun`)
  .parseJson(withRuntype(payrollrunIdActionEmployeesonrunGetResponseBodyRt))
  .build();

// Operation: payrollrunIdActionSetcategoriesPut

const payrollrunIdActionSetcategoriesPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, categories: rt.Dictionary(rt.Unknown) })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionSetcategoriesPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: payrollrunIdActionSetcategoriesPut
 * `PUT: /payrollrun/{id}?action=setcategories`
 * setcategories Action
 */
export const payrollrunIdActionSetcategoriesPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionSetcategoriesPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=setcategories`)
  .body((args) => args.categories)
  .parseJson(withRuntype(payrollrunIdActionSetcategoriesPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionEmailPaychecksPut

const payrollrunIdActionEmailPaychecksPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ setup: paycheckReportSetupRt, grouped: rt.Boolean })
    .asPartial()
    .asReadonly(),
);

const payrollrunIdActionEmailPaychecksPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: payrollrunIdActionEmailPaychecksPut
 * `PUT: /payrollrun/{id}?action=email-paychecks`
 * email-paychecks Action
 */
export const payrollrunIdActionEmailPaychecksPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionEmailPaychecksPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=email-paychecks`)
  .body((args) => args.setup)
  .parseJson(withRuntype(payrollrunIdActionEmailPaychecksPutResponseBodyRt))
  .build();

// Operation: payrollrunIdActionPaymentsOnRunsGet

const payrollrunIdActionPaymentsOnRunsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionPaymentsOnRunsGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: payrollrunIdActionPaymentsOnRunsGet
 * `GET: /payrollrun/{id}?action=payments-on-runs`
 * payments-on-runs Action
 */
export const payrollrunIdActionPaymentsOnRunsGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionPaymentsOnRunsGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=payments-on-runs`)
  .parseJson(withRuntype(payrollrunIdActionPaymentsOnRunsGetResponseBodyRt))
  .build();

// Operation: payrollrunIdActionTimeToSalarySelectionGet

const payrollrunIdActionTimeToSalarySelectionGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, toDate: rt.String }).asPartial().asReadonly(),
);

const payrollrunIdActionTimeToSalarySelectionGetResponseBodyRt =
  rt.Array(workItemToSalaryRt);

/**
 * operation ID: payrollrunIdActionTimeToSalarySelectionGet
 * `GET: /payrollrun/{id}?action=time-to-salary-selection`
 * time-to-salary-selection Action
 */
export const payrollrunIdActionTimeToSalarySelectionGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionTimeToSalarySelectionGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}?action=time-to-salary-selection`)
  .parseJson(
    withRuntype(payrollrunIdActionTimeToSalarySelectionGetResponseBodyRt),
  )
  .build();

// Operation: payrollrunIdActionWorkItemsToTransesPut

const payrollrunIdActionWorkItemsToTransesPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, workItemIDs: rt.Number }).asPartial().asReadonly(),
);

const payrollrunIdActionWorkItemsToTransesPutResponseBodyRt =
  rt.Array(salaryTransactionRt);

/**
 * operation ID: payrollrunIdActionWorkItemsToTransesPut
 * `PUT: /payrollrun/{id}?action=work-items-to-transes`
 * work-items-to-transes Action
 */
export const payrollrunIdActionWorkItemsToTransesPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdActionWorkItemsToTransesPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}?action=work-items-to-transes`)
  .body((args) => args.workItemIDs)
  .parseJson(withRuntype(payrollrunIdActionWorkItemsToTransesPutResponseBodyRt))
  .build();

// Operation: payrollrunActionOtpExportGet

const payrollrunActionOtpExportGetArgsRt = rt
  .Record({
    runs: rt.String,
    month: rt.Number,
    year: rt.Number,
    asXml: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const payrollrunActionOtpExportGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: payrollrunActionOtpExportGet
 * `GET: /payrollrun?action=otp-export`
 * otp-export Action
 */
export const payrollrunActionOtpExportGet = buildCall() //
  .args<rt.Static<typeof payrollrunActionOtpExportGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun?action=otp-export`)
  .parseJson(withRuntype(payrollrunActionOtpExportGetResponseBodyRt))
  .build();

// Operation: payrollrunIdGet

const payrollrunIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: payrollrunIdGet
 * `GET: /payrollrun/{id}`
 * Get PayrollRun
 */
export const payrollrunIdGet = buildCall() //
  .args<rt.Static<typeof payrollrunIdGetArgsRt>>()
  .method('get')
  .path((args) => `/payrollrun/${args.id}`)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunIdPut

const payrollrunIdPutArgsRt = rt
  .Record({ id: rt.Number, PayrollRun: payrollRunRt })
  .asReadonly();

/**
 * operation ID: payrollrunIdPut
 * `PUT: /payrollrun/{id}`
 * Update PayrollRun
 */
export const payrollrunIdPut = buildCall() //
  .args<rt.Static<typeof payrollrunIdPutArgsRt>>()
  .method('put')
  .path((args) => `/payrollrun/${args.id}`)
  .body((args) => args.PayrollRun)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunIdDelete

const payrollrunIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: payrollrunIdDelete
 * `DELETE: /payrollrun/{id}`
 * Delete PayrollRun
 */
export const payrollrunIdDelete = buildCall() //
  .args<rt.Static<typeof payrollrunIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payrollrun/${args.id}`)
  .parseJson(withRuntype(payrollRunRt))
  .build();

// Operation: payrollrunGet

const payrollrunGetResponseBodyRt = rt.Array(payrollRunRt);

/**
 * operation ID: payrollrunGet
 * `GET: /payrollrun`
 * Query PayrollRun
 */
export const payrollrunGet = buildCall() //
  .method('get')
  .path('/payrollrun')
  .parseJson(withRuntype(payrollrunGetResponseBodyRt))
  .build();

// Operation: payrollrunPost

const payrollrunPostArgsRt = rt
  .Record({ PayrollRun: payrollRunRt })
  .asReadonly();

/**
 * operation ID: payrollrunPost
 * `POST: /payrollrun`
 * Create PayrollRun
 */
export const payrollrunPost = buildCall() //
  .args<rt.Static<typeof payrollrunPostArgsRt>>()
  .method('post')
  .path('/payrollrun')
  .body((args) => args.PayrollRun)
  .build();

// Operation: pensionschemesIdGet

const pensionschemesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: pensionschemesIdGet
 * `GET: /pensionschemes/{id}`
 * Get PensionScheme
 */
export const pensionschemesIdGet = buildCall() //
  .args<rt.Static<typeof pensionschemesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/pensionschemes/${args.id}`)
  .parseJson(withRuntype(pensionSchemeRt))
  .build();

// Operation: pensionschemesIdPut

const pensionschemesIdPutArgsRt = rt
  .Record({ id: rt.Number, PensionScheme: pensionSchemeRt })
  .asReadonly();

/**
 * operation ID: pensionschemesIdPut
 * `PUT: /pensionschemes/{id}`
 * Update PensionScheme
 */
export const pensionschemesIdPut = buildCall() //
  .args<rt.Static<typeof pensionschemesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/pensionschemes/${args.id}`)
  .body((args) => args.PensionScheme)
  .parseJson(withRuntype(pensionSchemeRt))
  .build();

// Operation: pensionschemesIdDelete

const pensionschemesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: pensionschemesIdDelete
 * `DELETE: /pensionschemes/{id}`
 * Delete PensionScheme
 */
export const pensionschemesIdDelete = buildCall() //
  .args<rt.Static<typeof pensionschemesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/pensionschemes/${args.id}`)
  .parseJson(withRuntype(pensionSchemeRt))
  .build();

// Operation: pensionschemesGet

const pensionschemesGetResponseBodyRt = rt.Array(pensionSchemeRt);

/**
 * operation ID: pensionschemesGet
 * `GET: /pensionschemes`
 * Query PensionScheme
 */
export const pensionschemesGet = buildCall() //
  .method('get')
  .path('/pensionschemes')
  .parseJson(withRuntype(pensionschemesGetResponseBodyRt))
  .build();

// Operation: pensionschemesPost

const pensionschemesPostArgsRt = rt
  .Record({ PensionScheme: pensionSchemeRt })
  .asReadonly();

/**
 * operation ID: pensionschemesPost
 * `POST: /pensionschemes`
 * Create PensionScheme
 */
export const pensionschemesPost = buildCall() //
  .args<rt.Static<typeof pensionschemesPostArgsRt>>()
  .method('post')
  .path('/pensionschemes')
  .body((args) => args.PensionScheme)
  .build();

// Operation: pensionschemesuppliersIdGet

const pensionschemesuppliersIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: pensionschemesuppliersIdGet
 * `GET: /pensionschemesuppliers/{id}`
 * Get PensionSchemeSupplier
 */
export const pensionschemesuppliersIdGet = buildCall() //
  .args<rt.Static<typeof pensionschemesuppliersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/pensionschemesuppliers/${args.id}`)
  .parseJson(withRuntype(pensionSchemeSupplierRt))
  .build();

// Operation: pensionschemesuppliersIdPut

const pensionschemesuppliersIdPutArgsRt = rt
  .Record({ id: rt.Number, PensionSchemeSupplier: pensionSchemeSupplierRt })
  .asReadonly();

/**
 * operation ID: pensionschemesuppliersIdPut
 * `PUT: /pensionschemesuppliers/{id}`
 * Update PensionSchemeSupplier
 */
export const pensionschemesuppliersIdPut = buildCall() //
  .args<rt.Static<typeof pensionschemesuppliersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/pensionschemesuppliers/${args.id}`)
  .body((args) => args.PensionSchemeSupplier)
  .parseJson(withRuntype(pensionSchemeSupplierRt))
  .build();

// Operation: pensionschemesuppliersIdDelete

const pensionschemesuppliersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: pensionschemesuppliersIdDelete
 * `DELETE: /pensionschemesuppliers/{id}`
 * Delete PensionSchemeSupplier
 */
export const pensionschemesuppliersIdDelete = buildCall() //
  .args<rt.Static<typeof pensionschemesuppliersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/pensionschemesuppliers/${args.id}`)
  .parseJson(withRuntype(pensionSchemeSupplierRt))
  .build();

// Operation: pensionschemesuppliersGet

const pensionschemesuppliersGetResponseBodyRt = rt.Array(
  pensionSchemeSupplierRt,
);

/**
 * operation ID: pensionschemesuppliersGet
 * `GET: /pensionschemesuppliers`
 * Query PensionSchemeSupplier
 */
export const pensionschemesuppliersGet = buildCall() //
  .method('get')
  .path('/pensionschemesuppliers')
  .parseJson(withRuntype(pensionschemesuppliersGetResponseBodyRt))
  .build();

// Operation: pensionschemesuppliersPost

const pensionschemesuppliersPostArgsRt = rt
  .Record({ PensionSchemeSupplier: pensionSchemeSupplierRt })
  .asReadonly();

/**
 * operation ID: pensionschemesuppliersPost
 * `POST: /pensionschemesuppliers`
 * Create PensionSchemeSupplier
 */
export const pensionschemesuppliersPost = buildCall() //
  .args<rt.Static<typeof pensionschemesuppliersPostArgsRt>>()
  .method('post')
  .path('/pensionschemesuppliers')
  .body((args) => args.PensionSchemeSupplier)
  .build();

// Operation: reconciliationActionFromToGet

const reconciliationActionFromToGetArgsRt = rt
  .Record({
    year: rt.Number,
    fromMonth: rt.Number,
    toMonth: rt.Number,
    includeNotPayed: rt.Boolean,
    onlyBooked: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: reconciliationActionFromToGet
 * `GET: /reconciliation?action=from-to`
 * from-to Action
 */
export const reconciliationActionFromToGet = buildCall() //
  .args<rt.Static<typeof reconciliationActionFromToGetArgsRt>>()
  .method('get')
  .path((args) => `/reconciliation?action=from-to`)
  .parseJson(withRuntype(reconciliationRt))
  .build();

// Operation: regulativegroupsIdGet

const regulativegroupsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: regulativegroupsIdGet
 * `GET: /regulativegroups/{id}`
 * Get RegulativeGroup
 */
export const regulativegroupsIdGet = buildCall() //
  .args<rt.Static<typeof regulativegroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/regulativegroups/${args.id}`)
  .parseJson(withRuntype(regulativeGroupRt))
  .build();

// Operation: regulativegroupsIdPut

const regulativegroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, RegulativeGroup: regulativeGroupRt })
  .asReadonly();

/**
 * operation ID: regulativegroupsIdPut
 * `PUT: /regulativegroups/{id}`
 * Update RegulativeGroup
 */
export const regulativegroupsIdPut = buildCall() //
  .args<rt.Static<typeof regulativegroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/regulativegroups/${args.id}`)
  .body((args) => args.RegulativeGroup)
  .parseJson(withRuntype(regulativeGroupRt))
  .build();

// Operation: regulativegroupsIdDelete

const regulativegroupsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: regulativegroupsIdDelete
 * `DELETE: /regulativegroups/{id}`
 * Delete RegulativeGroup
 */
export const regulativegroupsIdDelete = buildCall() //
  .args<rt.Static<typeof regulativegroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/regulativegroups/${args.id}`)
  .parseJson(withRuntype(regulativeGroupRt))
  .build();

// Operation: regulativegroupsGet

const regulativegroupsGetResponseBodyRt = rt.Array(regulativeGroupRt);

/**
 * operation ID: regulativegroupsGet
 * `GET: /regulativegroups`
 * Query RegulativeGroup
 */
export const regulativegroupsGet = buildCall() //
  .method('get')
  .path('/regulativegroups')
  .parseJson(withRuntype(regulativegroupsGetResponseBodyRt))
  .build();

// Operation: regulativegroupsPost

const regulativegroupsPostArgsRt = rt
  .Record({ RegulativeGroup: regulativeGroupRt })
  .asReadonly();

/**
 * operation ID: regulativegroupsPost
 * `POST: /regulativegroups`
 * Create RegulativeGroup
 */
export const regulativegroupsPost = buildCall() //
  .args<rt.Static<typeof regulativegroupsPostArgsRt>>()
  .method('post')
  .path('/regulativegroups')
  .body((args) => args.RegulativeGroup)
  .build();

// Operation: salarybalancesIdActionBalanceGet

const salarybalancesIdActionBalanceGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: salarybalancesIdActionBalanceGet
 * `GET: /salarybalances/{id}?action=balance`
 * balance Action
 */
export const salarybalancesIdActionBalanceGet = buildCall() //
  .args<rt.Static<typeof salarybalancesIdActionBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/salarybalances/${args.id}?action=balance`)
  .build();

// Operation: salarybalancesActionUnionreportGet

const salarybalancesActionUnionreportGetArgsRt = rt
  .Record({
    fromPeriod: rt.Number,
    toPeriod: rt.Number,
    fromSupplier: rt.Number,
    toSupplier: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: salarybalancesActionUnionreportGet
 * `GET: /salarybalances?action=unionreport`
 * unionreport Action
 */
export const salarybalancesActionUnionreportGet = buildCall() //
  .args<rt.Static<typeof salarybalancesActionUnionreportGetArgsRt>>()
  .method('get')
  .path((args) => `/salarybalances?action=unionreport`)
  .parseJson(withRuntype(unionReportRt))
  .build();

// Operation: salarybalancesActionUpdateFromEmploymentsPut

const salarybalancesActionUpdateFromEmploymentsPutArgsRt = rt
  .Record({ employmentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const salarybalancesActionUpdateFromEmploymentsPutResponseBodyRt =
  rt.Array(salaryTransactionRt);

/**
 * operation ID: salarybalancesActionUpdateFromEmploymentsPut
 * `PUT: /salarybalances?action=update-from-employments`
 * update-from-employments Action
 */
export const salarybalancesActionUpdateFromEmploymentsPut = buildCall() //
  .args<rt.Static<typeof salarybalancesActionUpdateFromEmploymentsPutArgsRt>>()
  .method('put')
  .path('/salarybalances?action=update-from-employments')
  .body((args) => args.employmentIDs)
  .parseJson(
    withRuntype(salarybalancesActionUpdateFromEmploymentsPutResponseBodyRt),
  )
  .build();

// Operation: salarybalancesActionFillPost

const salarybalancesActionFillPostArgsRt = rt
  .Record({ salaryBalance: salaryBalanceRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: salarybalancesActionFillPost
 * `POST: /salarybalances?action=fill`
 * fill Action
 */
export const salarybalancesActionFillPost = buildCall() //
  .args<rt.Static<typeof salarybalancesActionFillPostArgsRt>>()
  .method('post')
  .path('/salarybalances?action=fill')
  .body((args) => args.salaryBalance)
  .parseJson(withRuntype(salaryBalanceRt))
  .build();

// Operation: salarybalancesActionSendAdvanceForPaymentPost

const salarybalancesActionSendAdvanceForPaymentPostArgsRt = rt
  .Record({ salBalance: salaryBalanceRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: salarybalancesActionSendAdvanceForPaymentPost
 * `POST: /salarybalances?action=sendAdvanceForPayment`
 * sendAdvanceForPayment Action
 */
export const salarybalancesActionSendAdvanceForPaymentPost = buildCall() //
  .args<rt.Static<typeof salarybalancesActionSendAdvanceForPaymentPostArgsRt>>()
  .method('post')
  .path('/salarybalances?action=sendAdvanceForPayment')
  .body((args) => args.salBalance)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: salarybalancesIdGet

const salarybalancesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarybalancesIdGet
 * `GET: /salarybalances/{id}`
 * Get SalaryBalance
 */
export const salarybalancesIdGet = buildCall() //
  .args<rt.Static<typeof salarybalancesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/salarybalances/${args.id}`)
  .parseJson(withRuntype(salaryBalanceRt))
  .build();

// Operation: salarybalancesIdPut

const salarybalancesIdPutArgsRt = rt
  .Record({ id: rt.Number, SalaryBalance: salaryBalanceRt })
  .asReadonly();

/**
 * operation ID: salarybalancesIdPut
 * `PUT: /salarybalances/{id}`
 * Update SalaryBalance
 */
export const salarybalancesIdPut = buildCall() //
  .args<rt.Static<typeof salarybalancesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/salarybalances/${args.id}`)
  .body((args) => args.SalaryBalance)
  .parseJson(withRuntype(salaryBalanceRt))
  .build();

// Operation: salarybalancesIdDelete

const salarybalancesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarybalancesIdDelete
 * `DELETE: /salarybalances/{id}`
 * Delete SalaryBalance
 */
export const salarybalancesIdDelete = buildCall() //
  .args<rt.Static<typeof salarybalancesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/salarybalances/${args.id}`)
  .parseJson(withRuntype(salaryBalanceRt))
  .build();

// Operation: salarybalancesGet

const salarybalancesGetResponseBodyRt = rt.Array(salaryBalanceRt);

/**
 * operation ID: salarybalancesGet
 * `GET: /salarybalances`
 * Query SalaryBalance
 */
export const salarybalancesGet = buildCall() //
  .method('get')
  .path('/salarybalances')
  .parseJson(withRuntype(salarybalancesGetResponseBodyRt))
  .build();

// Operation: salarybalancesPost

const salarybalancesPostArgsRt = rt
  .Record({ SalaryBalance: salaryBalanceRt })
  .asReadonly();

/**
 * operation ID: salarybalancesPost
 * `POST: /salarybalances`
 * Create SalaryBalance
 */
export const salarybalancesPost = buildCall() //
  .args<rt.Static<typeof salarybalancesPostArgsRt>>()
  .method('post')
  .path('/salarybalances')
  .body((args) => args.SalaryBalance)
  .build();

// Operation: salarybalancelinesIdGet

const salarybalancelinesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarybalancelinesIdGet
 * `GET: /salarybalancelines/{id}`
 * Get SalaryBalanceLine
 */
export const salarybalancelinesIdGet = buildCall() //
  .args<rt.Static<typeof salarybalancelinesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/salarybalancelines/${args.id}`)
  .parseJson(withRuntype(salaryBalanceLineRt))
  .build();

// Operation: salarybalancelinesIdPut

const salarybalancelinesIdPutArgsRt = rt
  .Record({ id: rt.Number, SalaryBalanceLine: salaryBalanceLineRt })
  .asReadonly();

/**
 * operation ID: salarybalancelinesIdPut
 * `PUT: /salarybalancelines/{id}`
 * Update SalaryBalanceLine
 */
export const salarybalancelinesIdPut = buildCall() //
  .args<rt.Static<typeof salarybalancelinesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/salarybalancelines/${args.id}`)
  .body((args) => args.SalaryBalanceLine)
  .parseJson(withRuntype(salaryBalanceLineRt))
  .build();

// Operation: salarybalancelinesIdDelete

const salarybalancelinesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: salarybalancelinesIdDelete
 * `DELETE: /salarybalancelines/{id}`
 * Delete SalaryBalanceLine
 */
export const salarybalancelinesIdDelete = buildCall() //
  .args<rt.Static<typeof salarybalancelinesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/salarybalancelines/${args.id}`)
  .parseJson(withRuntype(salaryBalanceLineRt))
  .build();

// Operation: salarybalancelinesGet

const salarybalancelinesGetResponseBodyRt = rt.Array(salaryBalanceLineRt);

/**
 * operation ID: salarybalancelinesGet
 * `GET: /salarybalancelines`
 * Query SalaryBalanceLine
 */
export const salarybalancelinesGet = buildCall() //
  .method('get')
  .path('/salarybalancelines')
  .parseJson(withRuntype(salarybalancelinesGetResponseBodyRt))
  .build();

// Operation: salarybalancelinesPost

const salarybalancelinesPostArgsRt = rt
  .Record({ SalaryBalanceLine: salaryBalanceLineRt })
  .asReadonly();

/**
 * operation ID: salarybalancelinesPost
 * `POST: /salarybalancelines`
 * Create SalaryBalanceLine
 */
export const salarybalancelinesPost = buildCall() //
  .args<rt.Static<typeof salarybalancelinesPostArgsRt>>()
  .method('post')
  .path('/salarybalancelines')
  .body((args) => args.SalaryBalanceLine)
  .build();

// Operation: salarybalancetemplatesIdGet

const salarybalancetemplatesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: salarybalancetemplatesIdGet
 * `GET: /salarybalancetemplates/{id}`
 * Get SalaryBalanceTemplate
 */
export const salarybalancetemplatesIdGet = buildCall() //
  .args<rt.Static<typeof salarybalancetemplatesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/salarybalancetemplates/${args.id}`)
  .parseJson(withRuntype(salaryBalanceTemplateRt))
  .build();

// Operation: salarybalancetemplatesIdPut

const salarybalancetemplatesIdPutArgsRt = rt
  .Record({ id: rt.Number, SalaryBalanceTemplate: salaryBalanceTemplateRt })
  .asReadonly();

/**
 * operation ID: salarybalancetemplatesIdPut
 * `PUT: /salarybalancetemplates/{id}`
 * Update SalaryBalanceTemplate
 */
export const salarybalancetemplatesIdPut = buildCall() //
  .args<rt.Static<typeof salarybalancetemplatesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/salarybalancetemplates/${args.id}`)
  .body((args) => args.SalaryBalanceTemplate)
  .parseJson(withRuntype(salaryBalanceTemplateRt))
  .build();

// Operation: salarybalancetemplatesIdDelete

const salarybalancetemplatesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: salarybalancetemplatesIdDelete
 * `DELETE: /salarybalancetemplates/{id}`
 * Delete SalaryBalanceTemplate
 */
export const salarybalancetemplatesIdDelete = buildCall() //
  .args<rt.Static<typeof salarybalancetemplatesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/salarybalancetemplates/${args.id}`)
  .parseJson(withRuntype(salaryBalanceTemplateRt))
  .build();

// Operation: salarybalancetemplatesGet

const salarybalancetemplatesGetResponseBodyRt = rt.Array(
  salaryBalanceTemplateRt,
);

/**
 * operation ID: salarybalancetemplatesGet
 * `GET: /salarybalancetemplates`
 * Query SalaryBalanceTemplate
 */
export const salarybalancetemplatesGet = buildCall() //
  .method('get')
  .path('/salarybalancetemplates')
  .parseJson(withRuntype(salarybalancetemplatesGetResponseBodyRt))
  .build();

// Operation: salarybalancetemplatesPost

const salarybalancetemplatesPostArgsRt = rt
  .Record({ SalaryBalanceTemplate: salaryBalanceTemplateRt })
  .asReadonly();

/**
 * operation ID: salarybalancetemplatesPost
 * `POST: /salarybalancetemplates`
 * Create SalaryBalanceTemplate
 */
export const salarybalancetemplatesPost = buildCall() //
  .args<rt.Static<typeof salarybalancetemplatesPostArgsRt>>()
  .method('post')
  .path('/salarybalancetemplates')
  .body((args) => args.SalaryBalanceTemplate)
  .build();

// Operation: salarysumsActionGetallGet

const salarysumsActionGetallGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: salarysumsActionGetallGet
 * `GET: /salarysums?action=getall`
 * getall Action
 */
export const salarysumsActionGetallGet = buildCall() //
  .method('get')
  .path('/salarysums?action=getall')
  .parseJson(withRuntype(salarysumsActionGetallGetResponseBodyRt))
  .build();

// Operation: salarysumsActionGetSumsGet

const salarysumsActionGetSumsGetArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: salarysumsActionGetSumsGet
 * `GET: /salarysums?action=get-sums`
 * get-sums Action
 */
export const salarysumsActionGetSumsGet = buildCall() //
  .args<rt.Static<typeof salarysumsActionGetSumsGetArgsRt>>()
  .method('get')
  .path((args) => `/salarysums?action=get-sums`)
  .parseJson(withRuntype(salaryTransactionSumsRt))
  .build();

// Operation: salarysumsIdActionYearlySumsOnPayrollrunGet

const salarysumsIdActionYearlySumsOnPayrollrunGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, empNo: rt.Number, empID: rt.Number })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: salarysumsIdActionYearlySumsOnPayrollrunGet
 * `GET: /salarysums/{id}?action=yearly-sums-on-payrollrun`
 * yearly-sums-on-payrollrun Action
 */
export const salarysumsIdActionYearlySumsOnPayrollrunGet = buildCall() //
  .args<rt.Static<typeof salarysumsIdActionYearlySumsOnPayrollrunGetArgsRt>>()
  .method('get')
  .path((args) => `/salarysums/${args.id}?action=yearly-sums-on-payrollrun`)
  .parseJson(withRuntype(salaryTransactionSumsRt))
  .build();

// Operation: salarysumsActionSumsInPeriodGet

const salarysumsActionSumsInPeriodGetArgsRt = rt
  .Record({ fromPeriod: rt.Number, toPeriod: rt.Number, year: rt.Number })
  .asPartial()
  .asReadonly();

const salarysumsActionSumsInPeriodGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: salarysumsActionSumsInPeriodGet
 * `GET: /salarysums?action=sums-in-period`
 * sums-in-period Action
 */
export const salarysumsActionSumsInPeriodGet = buildCall() //
  .args<rt.Static<typeof salarysumsActionSumsInPeriodGetArgsRt>>()
  .method('get')
  .path((args) => `/salarysums?action=sums-in-period`)
  .parseJson(withRuntype(salarysumsActionSumsInPeriodGetResponseBodyRt))
  .build();

// Operation: salarysumsActionSumAgaLinesGet

const salarysumsActionSumAgaLinesGetArgsRt = rt
  .Record({ fromPeriod: rt.Number, toPeriod: rt.Number, year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: salarysumsActionSumAgaLinesGet
 * `GET: /salarysums?action=sum-aga-lines`
 * sum-aga-lines Action
 */
export const salarysumsActionSumAgaLinesGet = buildCall() //
  .args<rt.Static<typeof salarysumsActionSumAgaLinesGetArgsRt>>()
  .method('get')
  .path((args) => `/salarysums?action=sum-aga-lines`)
  .parseJson(withRuntype(taxAndAgaSumsRt))
  .build();

// Operation: salarysumsIdGet

const salarysumsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarysumsIdGet
 * `GET: /salarysums/{id}`
 * Get SalaryTransactionSums
 */
export const salarysumsIdGet = buildCall() //
  .args<rt.Static<typeof salarysumsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/salarysums/${args.id}`)
  .parseJson(withRuntype(salaryTransactionSumsRt))
  .build();

// Operation: salarysumsGet

const salarysumsGetResponseBodyRt = rt.Array(salaryTransactionSumsRt);

/**
 * operation ID: salarysumsGet
 * `GET: /salarysums`
 * Query SalaryTransactionSums
 */
export const salarysumsGet = buildCall() //
  .method('get')
  .path('/salarysums')
  .parseJson(withRuntype(salarysumsGetResponseBodyRt))
  .build();

// Operation: supplementsIdGet

const supplementsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: supplementsIdGet
 * `GET: /supplements/{id}`
 * Get SalaryTransactionSupplement
 */
export const supplementsIdGet = buildCall() //
  .args<rt.Static<typeof supplementsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/supplements/${args.id}`)
  .parseJson(withRuntype(salaryTransactionSupplementRt))
  .build();

// Operation: supplementsIdPut

const supplementsIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    SalaryTransactionSupplement: salaryTransactionSupplementRt,
  })
  .asReadonly();

/**
 * operation ID: supplementsIdPut
 * `PUT: /supplements/{id}`
 * Update SalaryTransactionSupplement
 */
export const supplementsIdPut = buildCall() //
  .args<rt.Static<typeof supplementsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/supplements/${args.id}`)
  .body((args) => args.SalaryTransactionSupplement)
  .parseJson(withRuntype(salaryTransactionSupplementRt))
  .build();

// Operation: supplementsGet

const supplementsGetResponseBodyRt = rt.Array(salaryTransactionSupplementRt);

/**
 * operation ID: supplementsGet
 * `GET: /supplements`
 * Query SalaryTransactionSupplement
 */
export const supplementsGet = buildCall() //
  .method('get')
  .path('/supplements')
  .parseJson(withRuntype(supplementsGetResponseBodyRt))
  .build();

// Operation: subentitiesActionSubEntitiesFromBrregGet

const subentitiesActionSubEntitiesFromBrregGetArgsRt = rt
  .Record({ orgno: rt.String })
  .asPartial()
  .asReadonly();

const subentitiesActionSubEntitiesFromBrregGetResponseBodyRt =
  rt.Array(subEntityRt);

/**
 * operation ID: subentitiesActionSubEntitiesFromBrregGet
 * `GET: /subentities?action=sub-entities-from-brreg`
 * sub-entities-from-brreg Action
 */
export const subentitiesActionSubEntitiesFromBrregGet = buildCall() //
  .args<rt.Static<typeof subentitiesActionSubEntitiesFromBrregGetArgsRt>>()
  .method('get')
  .path((args) => `/subentities?action=sub-entities-from-brreg`)
  .parseJson(
    withRuntype(subentitiesActionSubEntitiesFromBrregGetResponseBodyRt),
  )
  .build();

// Operation: subentitiesIdGet

const subentitiesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: subentitiesIdGet
 * `GET: /subentities/{id}`
 * Get SubEntity
 */
export const subentitiesIdGet = buildCall() //
  .args<rt.Static<typeof subentitiesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/subentities/${args.id}`)
  .parseJson(withRuntype(subEntityRt))
  .build();

// Operation: subentitiesIdPut

const subentitiesIdPutArgsRt = rt
  .Record({ id: rt.Number, SubEntity: subEntityRt })
  .asReadonly();

/**
 * operation ID: subentitiesIdPut
 * `PUT: /subentities/{id}`
 * Update SubEntity
 */
export const subentitiesIdPut = buildCall() //
  .args<rt.Static<typeof subentitiesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/subentities/${args.id}`)
  .body((args) => args.SubEntity)
  .parseJson(withRuntype(subEntityRt))
  .build();

// Operation: subentitiesIdDelete

const subentitiesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: subentitiesIdDelete
 * `DELETE: /subentities/{id}`
 * Delete SubEntity
 */
export const subentitiesIdDelete = buildCall() //
  .args<rt.Static<typeof subentitiesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/subentities/${args.id}`)
  .parseJson(withRuntype(subEntityRt))
  .build();

// Operation: subentitiesGet

const subentitiesGetResponseBodyRt = rt.Array(subEntityRt);

/**
 * operation ID: subentitiesGet
 * `GET: /subentities`
 * Query SubEntity
 */
export const subentitiesGet = buildCall() //
  .method('get')
  .path('/subentities')
  .parseJson(withRuntype(subentitiesGetResponseBodyRt))
  .build();

// Operation: subentitiesPost

const subentitiesPostArgsRt = rt
  .Record({ SubEntity: subEntityRt })
  .asReadonly();

/**
 * operation ID: subentitiesPost
 * `POST: /subentities`
 * Create SubEntity
 */
export const subentitiesPost = buildCall() //
  .args<rt.Static<typeof subentitiesPostArgsRt>>()
  .method('post')
  .path('/subentities')
  .body((args) => args.SubEntity)
  .build();

// Operation: travelsActionTraveltextPost

const travelsActionTraveltextPostArgsRt = rt
  .Record({ apikeyID: rt.Number })
  .asPartial()
  .asReadonly();

const travelsActionTraveltextPostResponseBodyRt = rt.Array(travelRt);

/**
 * operation ID: travelsActionTraveltextPost
 * `POST: /travels?action=traveltext`
 * traveltext Action
 */
export const travelsActionTraveltextPost = buildCall() //
  .args<rt.Static<typeof travelsActionTraveltextPostArgsRt>>()
  .method('post')
  .path((args) => `/travels?action=traveltext`)
  .parseJson(withRuntype(travelsActionTraveltextPostResponseBodyRt))
  .build();

// Operation: travelsActionTtpdfPut

const travelsActionTtpdfPutArgsRt = rt
  .Record({ ID: rt.Number, apikeyID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: travelsActionTtpdfPut
 * `PUT: /travels?action=ttpdf`
 * ttpdf Action
 */
export const travelsActionTtpdfPut = buildCall() //
  .args<rt.Static<typeof travelsActionTtpdfPutArgsRt>>()
  .method('put')
  .path((args) => `/travels?action=ttpdf`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: travelsActionTosalaryPut

const travelsActionTosalaryPutArgsRt = rt
  .Record({ travelIDs: rt.Dictionary(rt.Unknown), runID: rt.Number })
  .asPartial()
  .asReadonly();

const travelsActionTosalaryPutResponseBodyRt = rt.Array(salaryTransactionRt);

/**
 * operation ID: travelsActionTosalaryPut
 * `PUT: /travels?action=tosalary`
 * tosalary Action
 */
export const travelsActionTosalaryPut = buildCall() //
  .args<rt.Static<typeof travelsActionTosalaryPutArgsRt>>()
  .method('put')
  .path((args) => `/travels?action=tosalary`)
  .body((args) => args.travelIDs)
  .parseJson(withRuntype(travelsActionTosalaryPutResponseBodyRt))
  .build();

// Operation: travelsActionToinvoicePut

const travelsActionToinvoicePutArgsRt = rt
  .Record({ travelIDs: rt.Dictionary(rt.Unknown) })
  .asPartial()
  .asReadonly();

const travelsActionToinvoicePutResponseBodyRt = rt.Array(supplierInvoiceRt);

/**
 * operation ID: travelsActionToinvoicePut
 * `PUT: /travels?action=toinvoice`
 * toinvoice Action
 */
export const travelsActionToinvoicePut = buildCall() //
  .args<rt.Static<typeof travelsActionToinvoicePutArgsRt>>()
  .method('put')
  .path('/travels?action=toinvoice')
  .body((args) => args.travelIDs)
  .parseJson(withRuntype(travelsActionToinvoicePutResponseBodyRt))
  .build();

// Operation: travelsIdGet

const travelsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: travelsIdGet
 * `GET: /travels/{id}`
 * Get Travel
 */
export const travelsIdGet = buildCall() //
  .args<rt.Static<typeof travelsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/travels/${args.id}`)
  .parseJson(withRuntype(travelRt))
  .build();

// Operation: travelsIdPut

const travelsIdPutArgsRt = rt
  .Record({ id: rt.Number, Travel: travelRt })
  .asReadonly();

/**
 * operation ID: travelsIdPut
 * `PUT: /travels/{id}`
 * Update Travel
 */
export const travelsIdPut = buildCall() //
  .args<rt.Static<typeof travelsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/travels/${args.id}`)
  .body((args) => args.Travel)
  .parseJson(withRuntype(travelRt))
  .build();

// Operation: travelsIdDelete

const travelsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: travelsIdDelete
 * `DELETE: /travels/{id}`
 * Delete Travel
 */
export const travelsIdDelete = buildCall() //
  .args<rt.Static<typeof travelsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/travels/${args.id}`)
  .parseJson(withRuntype(travelRt))
  .build();

// Operation: travelsGet

const travelsGetResponseBodyRt = rt.Array(travelRt);

/**
 * operation ID: travelsGet
 * `GET: /travels`
 * Query Travel
 */
export const travelsGet = buildCall() //
  .method('get')
  .path('/travels')
  .parseJson(withRuntype(travelsGetResponseBodyRt))
  .build();

// Operation: travelsPost

const travelsPostArgsRt = rt.Record({ Travel: travelRt }).asReadonly();

/**
 * operation ID: travelsPost
 * `POST: /travels`
 * Create Travel
 */
export const travelsPost = buildCall() //
  .args<rt.Static<typeof travelsPostArgsRt>>()
  .method('post')
  .path('/travels')
  .body((args) => args.Travel)
  .build();

// Operation: travellinesIdActionAttachmentPut

const travellinesIdActionAttachmentPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ ID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: travellinesIdActionAttachmentPut
 * `PUT: /travellines/{id}?action=attachment`
 * attachment Action
 */
export const travellinesIdActionAttachmentPut = buildCall() //
  .args<rt.Static<typeof travellinesIdActionAttachmentPutArgsRt>>()
  .method('put')
  .path((args) => `/travellines/${args.id}?action=attachment`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: travellinesIdGet

const travellinesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: travellinesIdGet
 * `GET: /travellines/{id}`
 * Get TravelLine
 */
export const travellinesIdGet = buildCall() //
  .args<rt.Static<typeof travellinesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/travellines/${args.id}`)
  .parseJson(withRuntype(travelLineRt))
  .build();

// Operation: travellinesIdPut

const travellinesIdPutArgsRt = rt
  .Record({ id: rt.Number, TravelLine: travelLineRt })
  .asReadonly();

/**
 * operation ID: travellinesIdPut
 * `PUT: /travellines/{id}`
 * Update TravelLine
 */
export const travellinesIdPut = buildCall() //
  .args<rt.Static<typeof travellinesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/travellines/${args.id}`)
  .body((args) => args.TravelLine)
  .parseJson(withRuntype(travelLineRt))
  .build();

// Operation: travellinesIdDelete

const travellinesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: travellinesIdDelete
 * `DELETE: /travellines/{id}`
 * Delete TravelLine
 */
export const travellinesIdDelete = buildCall() //
  .args<rt.Static<typeof travellinesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/travellines/${args.id}`)
  .parseJson(withRuntype(travelLineRt))
  .build();

// Operation: travellinesGet

const travellinesGetResponseBodyRt = rt.Array(travelLineRt);

/**
 * operation ID: travellinesGet
 * `GET: /travellines`
 * Query TravelLine
 */
export const travellinesGet = buildCall() //
  .method('get')
  .path('/travellines')
  .parseJson(withRuntype(travellinesGetResponseBodyRt))
  .build();

// Operation: travellinesPost

const travellinesPostArgsRt = rt
  .Record({ TravelLine: travelLineRt })
  .asReadonly();

/**
 * operation ID: travellinesPost
 * `POST: /travellines`
 * Create TravelLine
 */
export const travellinesPost = buildCall() //
  .args<rt.Static<typeof travellinesPostArgsRt>>()
  .method('post')
  .path('/travellines')
  .body((args) => args.TravelLine)
  .build();

// Operation: traveltypeIdGet

const traveltypeIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: traveltypeIdGet
 * `GET: /traveltype/{id}`
 * Get TravelType
 */
export const traveltypeIdGet = buildCall() //
  .args<rt.Static<typeof traveltypeIdGetArgsRt>>()
  .method('get')
  .path((args) => `/traveltype/${args.id}`)
  .parseJson(withRuntype(travelTypeRt))
  .build();

// Operation: traveltypeIdPut

const traveltypeIdPutArgsRt = rt
  .Record({ id: rt.Number, TravelType: travelTypeRt })
  .asReadonly();

/**
 * operation ID: traveltypeIdPut
 * `PUT: /traveltype/{id}`
 * Update TravelType
 */
export const traveltypeIdPut = buildCall() //
  .args<rt.Static<typeof traveltypeIdPutArgsRt>>()
  .method('put')
  .path((args) => `/traveltype/${args.id}`)
  .body((args) => args.TravelType)
  .parseJson(withRuntype(travelTypeRt))
  .build();

// Operation: traveltypeIdDelete

const traveltypeIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: traveltypeIdDelete
 * `DELETE: /traveltype/{id}`
 * Delete TravelType
 */
export const traveltypeIdDelete = buildCall() //
  .args<rt.Static<typeof traveltypeIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/traveltype/${args.id}`)
  .parseJson(withRuntype(travelTypeRt))
  .build();

// Operation: traveltypeGet

const traveltypeGetResponseBodyRt = rt.Array(travelTypeRt);

/**
 * operation ID: traveltypeGet
 * `GET: /traveltype`
 * Query TravelType
 */
export const traveltypeGet = buildCall() //
  .method('get')
  .path('/traveltype')
  .parseJson(withRuntype(traveltypeGetResponseBodyRt))
  .build();

// Operation: traveltypePost

const traveltypePostArgsRt = rt
  .Record({ TravelType: travelTypeRt })
  .asReadonly();

/**
 * operation ID: traveltypePost
 * `POST: /traveltype`
 * Create TravelType
 */
export const traveltypePost = buildCall() //
  .args<rt.Static<typeof traveltypePostArgsRt>>()
  .method('post')
  .path('/traveltype')
  .body((args) => args.TravelType)
  .build();

// Operation: vacationPayLinesActionLinesGet

const vacationPayLinesActionLinesGetArgsRt = rt
  .Record({
    payrunID: rt.Number,
    year: rt.Number,
    expandEmps: rt.Boolean,
    showAll: rt.Boolean,
    maxPayPeriod: rt.Number,
    maxPayYear: rt.Number,
  })
  .asPartial()
  .asReadonly();

const vacationPayLinesActionLinesGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: vacationPayLinesActionLinesGet
 * `GET: /VacationPayLines?action=lines`
 * lines Action
 */
export const vacationPayLinesActionLinesGet = buildCall() //
  .args<rt.Static<typeof vacationPayLinesActionLinesGetArgsRt>>()
  .method('get')
  .path((args) => `/VacationPayLines?action=lines`)
  .parseJson(withRuntype(vacationPayLinesActionLinesGetResponseBodyRt))
  .build();

// Operation: vacationPayLinesActionPayEmpsPut

const vacationPayLinesActionPayEmpsPutArgsRt = rt
  .Record({
    payrollID: rt.Number,
    year: rt.Number,
    employeeIDs: rt.Dictionary(rt.Unknown),
    hasSixthWeek: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const vacationPayLinesActionPayEmpsPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: vacationPayLinesActionPayEmpsPut
 * `PUT: /VacationPayLines?action=pay-emps`
 * pay-emps Action
 */
export const vacationPayLinesActionPayEmpsPut = buildCall() //
  .args<rt.Static<typeof vacationPayLinesActionPayEmpsPutArgsRt>>()
  .method('put')
  .path((args) => `/VacationPayLines?action=pay-emps`)
  .body((args) => args.employeeIDs)
  .parseJson(withRuntype(vacationPayLinesActionPayEmpsPutResponseBodyRt))
  .build();

// Operation: vacationPayLinesActionPayFromlinesPut

const vacationPayLinesActionPayFromlinesPutArgsRt = rt
  .Record({
    payrollID: rt.Number,
    year: rt.Number,
    payList: rt.Dictionary(rt.Unknown),
    hasSixthWeek: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const vacationPayLinesActionPayFromlinesPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: vacationPayLinesActionPayFromlinesPut
 * `PUT: /VacationPayLines?action=pay-fromlines`
 * pay-fromlines Action
 */
export const vacationPayLinesActionPayFromlinesPut = buildCall() //
  .args<rt.Static<typeof vacationPayLinesActionPayFromlinesPutArgsRt>>()
  .method('put')
  .path((args) => `/VacationPayLines?action=pay-fromlines`)
  .body((args) => args.payList)
  .parseJson(withRuntype(vacationPayLinesActionPayFromlinesPutResponseBodyRt))
  .build();

// Operation: vacationPayLinesActionToSalaryPut

const vacationPayLinesActionToSalaryPutArgsRt = rt
  .Record({
    payrollID: rt.Number,
    baseYear: rt.Number,
    payList: rt.Dictionary(rt.Unknown),
  })
  .asPartial()
  .asReadonly();

const vacationPayLinesActionToSalaryPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: vacationPayLinesActionToSalaryPut
 * `PUT: /VacationPayLines?action=to-salary`
 * to-salary Action
 */
export const vacationPayLinesActionToSalaryPut = buildCall() //
  .args<rt.Static<typeof vacationPayLinesActionToSalaryPutArgsRt>>()
  .method('put')
  .path((args) => `/VacationPayLines?action=to-salary`)
  .body((args) => args.payList)
  .parseJson(withRuntype(vacationPayLinesActionToSalaryPutResponseBodyRt))
  .build();

// Operation: vacationPayLinesActionClosePut

const vacationPayLinesActionClosePutArgsRt = rt
  .Record({
    year: rt.Number,
    employeeIDs: rt.Dictionary(rt.Unknown),
    payrollID: rt.Number,
    hasSixthWeek: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const vacationPayLinesActionClosePutResponseBodyRt = rt.Boolean;

/**
 * operation ID: vacationPayLinesActionClosePut
 * `PUT: /VacationPayLines?action=close`
 * close Action
 */
export const vacationPayLinesActionClosePut = buildCall() //
  .args<rt.Static<typeof vacationPayLinesActionClosePutArgsRt>>()
  .method('put')
  .path((args) => `/VacationPayLines?action=close`)
  .body((args) => args.employeeIDs)
  .parseJson(withRuntype(vacationPayLinesActionClosePutResponseBodyRt))
  .build();

// Operation: vacationPayLinesIdGet

const vacationPayLinesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vacationPayLinesIdGet
 * `GET: /VacationPayLines/{id}`
 * Get VacationPayLine
 */
export const vacationPayLinesIdGet = buildCall() //
  .args<rt.Static<typeof vacationPayLinesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/VacationPayLines/${args.id}`)
  .parseJson(withRuntype(vacationPayLineRt))
  .build();

// Operation: vacationPayLinesIdPut

const vacationPayLinesIdPutArgsRt = rt
  .Record({ id: rt.Number, VacationPayLine: vacationPayLineRt })
  .asReadonly();

/**
 * operation ID: vacationPayLinesIdPut
 * `PUT: /VacationPayLines/{id}`
 * Update VacationPayLine
 */
export const vacationPayLinesIdPut = buildCall() //
  .args<rt.Static<typeof vacationPayLinesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/VacationPayLines/${args.id}`)
  .body((args) => args.VacationPayLine)
  .parseJson(withRuntype(vacationPayLineRt))
  .build();

// Operation: vacationPayLinesIdDelete

const vacationPayLinesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vacationPayLinesIdDelete
 * `DELETE: /VacationPayLines/{id}`
 * Delete VacationPayLine
 */
export const vacationPayLinesIdDelete = buildCall() //
  .args<rt.Static<typeof vacationPayLinesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/VacationPayLines/${args.id}`)
  .parseJson(withRuntype(vacationPayLineRt))
  .build();

// Operation: vacationPayLinesGet

const vacationPayLinesGetResponseBodyRt = rt.Array(vacationPayLineRt);

/**
 * operation ID: vacationPayLinesGet
 * `GET: /VacationPayLines`
 * Query VacationPayLine
 */
export const vacationPayLinesGet = buildCall() //
  .method('get')
  .path('/VacationPayLines')
  .parseJson(withRuntype(vacationPayLinesGetResponseBodyRt))
  .build();

// Operation: vacationPayLinesPost

const vacationPayLinesPostArgsRt = rt
  .Record({ VacationPayLine: vacationPayLineRt })
  .asReadonly();

/**
 * operation ID: vacationPayLinesPost
 * `POST: /VacationPayLines`
 * Create VacationPayLine
 */
export const vacationPayLinesPost = buildCall() //
  .args<rt.Static<typeof vacationPayLinesPostArgsRt>>()
  .method('post')
  .path('/VacationPayLines')
  .body((args) => args.VacationPayLine)
  .build();

// Operation: employeevacationratesIdGet

const employeevacationratesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeevacationratesIdGet
 * `GET: /employeevacationrates/{id}`
 * Get VacationRateEmployee
 */
export const employeevacationratesIdGet = buildCall() //
  .args<rt.Static<typeof employeevacationratesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employeevacationrates/${args.id}`)
  .parseJson(withRuntype(vacationRateEmployeeRt))
  .build();

// Operation: employeevacationratesIdPut

const employeevacationratesIdPutArgsRt = rt
  .Record({ id: rt.Number, VacationRateEmployee: vacationRateEmployeeRt })
  .asReadonly();

/**
 * operation ID: employeevacationratesIdPut
 * `PUT: /employeevacationrates/{id}`
 * Update VacationRateEmployee
 */
export const employeevacationratesIdPut = buildCall() //
  .args<rt.Static<typeof employeevacationratesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employeevacationrates/${args.id}`)
  .body((args) => args.VacationRateEmployee)
  .parseJson(withRuntype(vacationRateEmployeeRt))
  .build();

// Operation: employeevacationratesIdDelete

const employeevacationratesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employeevacationratesIdDelete
 * `DELETE: /employeevacationrates/{id}`
 * Delete VacationRateEmployee
 */
export const employeevacationratesIdDelete = buildCall() //
  .args<rt.Static<typeof employeevacationratesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employeevacationrates/${args.id}`)
  .parseJson(withRuntype(vacationRateEmployeeRt))
  .build();

// Operation: employeevacationratesGet

const employeevacationratesGetResponseBodyRt = rt.Array(vacationRateEmployeeRt);

/**
 * operation ID: employeevacationratesGet
 * `GET: /employeevacationrates`
 * Query VacationRateEmployee
 */
export const employeevacationratesGet = buildCall() //
  .method('get')
  .path('/employeevacationrates')
  .parseJson(withRuntype(employeevacationratesGetResponseBodyRt))
  .build();

// Operation: employeevacationratesPost

const employeevacationratesPostArgsRt = rt
  .Record({ VacationRateEmployee: vacationRateEmployeeRt })
  .asReadonly();

/**
 * operation ID: employeevacationratesPost
 * `POST: /employeevacationrates`
 * Create VacationRateEmployee
 */
export const employeevacationratesPost = buildCall() //
  .args<rt.Static<typeof employeevacationratesPostArgsRt>>()
  .method('post')
  .path('/employeevacationrates')
  .body((args) => args.VacationRateEmployee)
  .build();

// Operation: wagetypesActionValidameldingGet

const wagetypesActionValidameldingGetArgsRt = rt
  .Record({ type: rt.String, fordel: rt.String, beskrivelse: rt.String })
  .asPartial()
  .asReadonly();

const wagetypesActionValidameldingGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: wagetypesActionValidameldingGet
 * `GET: /wagetypes?action=validamelding`
 * validamelding Action
 */
export const wagetypesActionValidameldingGet = buildCall() //
  .args<rt.Static<typeof wagetypesActionValidameldingGetArgsRt>>()
  .method('get')
  .path((args) => `/wagetypes?action=validamelding`)
  .parseJson(withRuntype(wagetypesActionValidameldingGetResponseBodyRt))
  .build();

// Operation: wagetypesActionSynchronizePut

/**
 * operation ID: wagetypesActionSynchronizePut
 * `PUT: /wagetypes?action=synchronize`
 * synchronize Action
 */
export const wagetypesActionSynchronizePut = buildCall() //
  .method('put')
  .path('/wagetypes?action=synchronize')
  .build();

// Operation: wagetypesActionCreateWagetypesForYearPut

/**
 * operation ID: wagetypesActionCreateWagetypesForYearPut
 * `PUT: /wagetypes?action=create-wagetypes-for-year`
 * create-wagetypes-for-year Action
 */
export const wagetypesActionCreateWagetypesForYearPut = buildCall() //
  .method('put')
  .path('/wagetypes?action=create-wagetypes-for-year')
  .build();

// Operation: wagetypesActionCreateAndUpdateStandardWagetypesPut

/**
 * operation ID:
 * wagetypesActionCreateAndUpdateStandardWagetypesPut
 * `PUT:
 * /wagetypes?action=create-and-update-standard-wagetypes`
 * create-and-update-standard-wagetypes Action
 */
export const wagetypesActionCreateAndUpdateStandardWagetypesPut = buildCall() //
  .method('put')
  .path('/wagetypes?action=create-and-update-standard-wagetypes')
  .build();

// Operation: wagetypesIdActionUsedInPayrollrunGet

const wagetypesIdActionUsedInPayrollrunGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const wagetypesIdActionUsedInPayrollrunGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: wagetypesIdActionUsedInPayrollrunGet
 * `GET: /wagetypes/{id}?action=used-in-payrollrun`
 * used-in-payrollrun Action
 */
export const wagetypesIdActionUsedInPayrollrunGet = buildCall() //
  .args<rt.Static<typeof wagetypesIdActionUsedInPayrollrunGetArgsRt>>()
  .method('get')
  .path((args) => `/wagetypes/${args.id}?action=used-in-payrollrun`)
  .parseJson(withRuntype(wagetypesIdActionUsedInPayrollrunGetResponseBodyRt))
  .build();

// Operation: wagetypesActionGetRateGet

const wagetypesActionGetRateGetArgsRt = rt
  .Record({
    wagetypeID: rt.Number,
    employmentID: rt.Number,
    employeeID: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: wagetypesActionGetRateGet
 * `GET: /wagetypes?action=get-rate`
 * get-rate Action
 */
export const wagetypesActionGetRateGet = buildCall() //
  .args<rt.Static<typeof wagetypesActionGetRateGetArgsRt>>()
  .method('get')
  .path((args) => `/wagetypes?action=get-rate`)
  .build();

// Operation: wagetypesIdActionSyncSupplementsPut

const wagetypesIdActionSyncSupplementsPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const wagetypesIdActionSyncSupplementsPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: wagetypesIdActionSyncSupplementsPut
 * `PUT: /wagetypes/{id}?action=sync-supplements`
 * sync-supplements Action
 */
export const wagetypesIdActionSyncSupplementsPut = buildCall() //
  .args<rt.Static<typeof wagetypesIdActionSyncSupplementsPutArgsRt>>()
  .method('put')
  .path((args) => `/wagetypes/${args.id}?action=sync-supplements`)
  .parseJson(withRuntype(wagetypesIdActionSyncSupplementsPutResponseBodyRt))
  .build();

// Operation: wagetypesIdGet

const wagetypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: wagetypesIdGet
 * `GET: /wagetypes/{id}`
 * Get WageType
 */
export const wagetypesIdGet = buildCall() //
  .args<rt.Static<typeof wagetypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/wagetypes/${args.id}`)
  .parseJson(withRuntype(wageTypeRt))
  .build();

// Operation: wagetypesIdPut

const wagetypesIdPutArgsRt = rt
  .Record({ id: rt.Number, WageType: wageTypeRt })
  .asReadonly();

/**
 * operation ID: wagetypesIdPut
 * `PUT: /wagetypes/{id}`
 * Update WageType
 */
export const wagetypesIdPut = buildCall() //
  .args<rt.Static<typeof wagetypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/wagetypes/${args.id}`)
  .body((args) => args.WageType)
  .parseJson(withRuntype(wageTypeRt))
  .build();

// Operation: wagetypesIdDelete

const wagetypesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: wagetypesIdDelete
 * `DELETE: /wagetypes/{id}`
 * Delete WageType
 */
export const wagetypesIdDelete = buildCall() //
  .args<rt.Static<typeof wagetypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/wagetypes/${args.id}`)
  .parseJson(withRuntype(wageTypeRt))
  .build();

// Operation: wagetypesGet

const wagetypesGetResponseBodyRt = rt.Array(wageTypeRt);

/**
 * operation ID: wagetypesGet
 * `GET: /wagetypes`
 * Query WageType
 */
export const wagetypesGet = buildCall() //
  .method('get')
  .path('/wagetypes')
  .parseJson(withRuntype(wagetypesGetResponseBodyRt))
  .build();

// Operation: wagetypesPost

const wagetypesPostArgsRt = rt.Record({ WageType: wageTypeRt }).asReadonly();

/**
 * operation ID: wagetypesPost
 * `POST: /wagetypes`
 * Create WageType
 */
export const wagetypesPost = buildCall() //
  .args<rt.Static<typeof wagetypesPostArgsRt>>()
  .method('post')
  .path('/wagetypes')
  .body((args) => args.WageType)
  .build();

// Operation: wagetypetranslationsIdGet

const wagetypetranslationsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: wagetypetranslationsIdGet
 * `GET: /wagetypetranslations/{id}`
 * Get WageTypeTranslation
 */
export const wagetypetranslationsIdGet = buildCall() //
  .args<rt.Static<typeof wagetypetranslationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/wagetypetranslations/${args.id}`)
  .parseJson(withRuntype(wageTypeTranslationRt))
  .build();

// Operation: wagetypetranslationsIdPut

const wagetypetranslationsIdPutArgsRt = rt
  .Record({ id: rt.Number, WageTypeTranslation: wageTypeTranslationRt })
  .asReadonly();

/**
 * operation ID: wagetypetranslationsIdPut
 * `PUT: /wagetypetranslations/{id}`
 * Update WageTypeTranslation
 */
export const wagetypetranslationsIdPut = buildCall() //
  .args<rt.Static<typeof wagetypetranslationsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/wagetypetranslations/${args.id}`)
  .body((args) => args.WageTypeTranslation)
  .parseJson(withRuntype(wageTypeTranslationRt))
  .build();

// Operation: wagetypetranslationsIdDelete

const wagetypetranslationsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: wagetypetranslationsIdDelete
 * `DELETE: /wagetypetranslations/{id}`
 * Delete WageTypeTranslation
 */
export const wagetypetranslationsIdDelete = buildCall() //
  .args<rt.Static<typeof wagetypetranslationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/wagetypetranslations/${args.id}`)
  .parseJson(withRuntype(wageTypeTranslationRt))
  .build();

// Operation: wagetypetranslationsGet

const wagetypetranslationsGetResponseBodyRt = rt.Array(wageTypeTranslationRt);

/**
 * operation ID: wagetypetranslationsGet
 * `GET: /wagetypetranslations`
 * Query WageTypeTranslation
 */
export const wagetypetranslationsGet = buildCall() //
  .method('get')
  .path('/wagetypetranslations')
  .parseJson(withRuntype(wagetypetranslationsGetResponseBodyRt))
  .build();

// Operation: wagetypetranslationsPost

const wagetypetranslationsPostArgsRt = rt
  .Record({ WageTypeTranslation: wageTypeTranslationRt })
  .asReadonly();

/**
 * operation ID: wagetypetranslationsPost
 * `POST: /wagetypetranslations`
 * Create WageTypeTranslation
 */
export const wagetypetranslationsPost = buildCall() //
  .args<rt.Static<typeof wagetypetranslationsPostArgsRt>>()
  .method('post')
  .path('/wagetypetranslations')
  .body((args) => args.WageTypeTranslation)
  .build();

// Operation: salarytransActionCompleteTransPost

const salarytransActionCompleteTransPostArgsRt = rt
  .Record({ trans: salaryTransactionRt })
  .asPartial()
  .asReadonly();

const salarytransActionCompleteTransPostResponseBodyRt =
  rt.Array(salaryTransactionRt);

/**
 * operation ID: salarytransActionCompleteTransPost
 * `POST: /salarytrans?action=complete-trans`
 * complete-trans Action
 */
export const salarytransActionCompleteTransPost = buildCall() //
  .args<rt.Static<typeof salarytransActionCompleteTransPostArgsRt>>()
  .method('post')
  .path('/salarytrans?action=complete-trans')
  .body((args) => args.trans)
  .parseJson(withRuntype(salarytransActionCompleteTransPostResponseBodyRt))
  .build();

// Operation: salarytransActionUpdateFromEmploymentsPut

const salarytransActionUpdateFromEmploymentsPutArgsRt = rt
  .Record({ employmentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const salarytransActionUpdateFromEmploymentsPutResponseBodyRt =
  rt.Array(salaryTransactionRt);

/**
 * operation ID: salarytransActionUpdateFromEmploymentsPut
 * `PUT: /salarytrans?action=update-from-employments`
 * update-from-employments Action
 */
export const salarytransActionUpdateFromEmploymentsPut = buildCall() //
  .args<rt.Static<typeof salarytransActionUpdateFromEmploymentsPutArgsRt>>()
  .method('put')
  .path('/salarytrans?action=update-from-employments')
  .body((args) => args.employmentIDs)
  .parseJson(
    withRuntype(salarytransActionUpdateFromEmploymentsPutResponseBodyRt),
  )
  .build();

// Operation: salarytransActionCreateRecurringCarTransactionsPost

const salarytransActionCreateRecurringCarTransactionsPostArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const salarytransActionCreateRecurringCarTransactionsPostResponseBodyRt =
  rt.Array(salaryTransactionRt);

/**
 * operation ID:
 * salarytransActionCreateRecurringCarTransactionsPost
 * `POST:
 * /salarytrans?action=create-recurring-car-transactions`
 * create-recurring-car-transactions Action
 */
export const salarytransActionCreateRecurringCarTransactionsPost = buildCall() //
  .args<
    rt.Static<typeof salarytransActionCreateRecurringCarTransactionsPostArgsRt>
  >()
  .method('post')
  .path((args) => `/salarytrans?action=create-recurring-car-transactions`)
  .parseJson(
    withRuntype(
      salarytransActionCreateRecurringCarTransactionsPostResponseBodyRt,
    ),
  )
  .build();

// Operation: salarytransIdGet

const salarytransIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarytransIdGet
 * `GET: /salarytrans/{id}`
 * Get SalaryTransaction
 */
export const salarytransIdGet = buildCall() //
  .args<rt.Static<typeof salarytransIdGetArgsRt>>()
  .method('get')
  .path((args) => `/salarytrans/${args.id}`)
  .parseJson(withRuntype(salaryTransactionRt))
  .build();

// Operation: salarytransIdPut

const salarytransIdPutArgsRt = rt
  .Record({ id: rt.Number, SalaryTransaction: salaryTransactionRt })
  .asReadonly();

/**
 * operation ID: salarytransIdPut
 * `PUT: /salarytrans/{id}`
 * Update SalaryTransaction
 */
export const salarytransIdPut = buildCall() //
  .args<rt.Static<typeof salarytransIdPutArgsRt>>()
  .method('put')
  .path((args) => `/salarytrans/${args.id}`)
  .body((args) => args.SalaryTransaction)
  .parseJson(withRuntype(salaryTransactionRt))
  .build();

// Operation: salarytransIdDelete

const salarytransIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: salarytransIdDelete
 * `DELETE: /salarytrans/{id}`
 * Delete SalaryTransaction
 */
export const salarytransIdDelete = buildCall() //
  .args<rt.Static<typeof salarytransIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/salarytrans/${args.id}`)
  .parseJson(withRuntype(salaryTransactionRt))
  .build();

// Operation: salarytransGet

const salarytransGetResponseBodyRt = rt.Array(salaryTransactionRt);

/**
 * operation ID: salarytransGet
 * `GET: /salarytrans`
 * Query SalaryTransaction
 */
export const salarytransGet = buildCall() //
  .method('get')
  .path('/salarytrans')
  .parseJson(withRuntype(salarytransGetResponseBodyRt))
  .build();

// Operation: salarytransPost

const salarytransPostArgsRt = rt
  .Record({ SalaryTransaction: salaryTransactionRt })
  .asReadonly();

/**
 * operation ID: salarytransPost
 * `POST: /salarytrans`
 * Create SalaryTransaction
 */
export const salarytransPost = buildCall() //
  .args<rt.Static<typeof salarytransPostArgsRt>>()
  .method('post')
  .path('/salarytrans')
  .body((args) => args.SalaryTransaction)
  .build();

// Operation: regulativesIdActionImportPost

const regulativesIdActionImportPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, fileID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: regulativesIdActionImportPost
 * `POST: /regulatives/{id}?action=import`
 * import Action
 */
export const regulativesIdActionImportPost = buildCall() //
  .args<rt.Static<typeof regulativesIdActionImportPostArgsRt>>()
  .method('post')
  .path((args) => `/regulatives/${args.id}?action=import`)
  .parseJson(withRuntype(regulativeRt))
  .build();

// Operation: regulativesIdActionExportGet

const regulativesIdActionExportGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: regulativesIdActionExportGet
 * `GET: /regulatives/{id}?action=export`
 * export Action
 */
export const regulativesIdActionExportGet = buildCall() //
  .args<rt.Static<typeof regulativesIdActionExportGetArgsRt>>()
  .method('get')
  .path((args) => `/regulatives/${args.id}?action=export`)
  .parseJson(withRuntype(iActionResultRt))
  .build();

// Operation: regulativesActionTemplateGet

/**
 * operation ID: regulativesActionTemplateGet
 * `GET: /regulatives?action=template`
 * template Action
 */
export const regulativesActionTemplateGet = buildCall() //
  .method('get')
  .path('/regulatives?action=template')
  .parseJson(withRuntype(iActionResultRt))
  .build();

// Operation: regulativesIdGet

const regulativesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: regulativesIdGet
 * `GET: /regulatives/{id}`
 * Get Regulative
 */
export const regulativesIdGet = buildCall() //
  .args<rt.Static<typeof regulativesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/regulatives/${args.id}`)
  .parseJson(withRuntype(regulativeRt))
  .build();

// Operation: regulativesIdPut

const regulativesIdPutArgsRt = rt
  .Record({ id: rt.Number, Regulative: regulativeRt })
  .asReadonly();

/**
 * operation ID: regulativesIdPut
 * `PUT: /regulatives/{id}`
 * Update Regulative
 */
export const regulativesIdPut = buildCall() //
  .args<rt.Static<typeof regulativesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/regulatives/${args.id}`)
  .body((args) => args.Regulative)
  .parseJson(withRuntype(regulativeRt))
  .build();

// Operation: regulativesIdDelete

const regulativesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: regulativesIdDelete
 * `DELETE: /regulatives/{id}`
 * Delete Regulative
 */
export const regulativesIdDelete = buildCall() //
  .args<rt.Static<typeof regulativesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/regulatives/${args.id}`)
  .parseJson(withRuntype(regulativeRt))
  .build();

// Operation: regulativesGet

const regulativesGetResponseBodyRt = rt.Array(regulativeRt);

/**
 * operation ID: regulativesGet
 * `GET: /regulatives`
 * Query Regulative
 */
export const regulativesGet = buildCall() //
  .method('get')
  .path('/regulatives')
  .parseJson(withRuntype(regulativesGetResponseBodyRt))
  .build();

// Operation: regulativesPost

const regulativesPostArgsRt = rt
  .Record({ Regulative: regulativeRt })
  .asReadonly();

/**
 * operation ID: regulativesPost
 * `POST: /regulatives`
 * Create Regulative
 */
export const regulativesPost = buildCall() //
  .args<rt.Static<typeof regulativesPostArgsRt>>()
  .method('post')
  .path('/regulatives')
  .body((args) => args.Regulative)
  .build();

// Operation: thresholdsIdGet

const thresholdsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: thresholdsIdGet
 * `GET: /thresholds/{id}`
 * Get TransitionThreshold
 */
export const thresholdsIdGet = buildCall() //
  .args<rt.Static<typeof thresholdsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/thresholds/${args.id}`)
  .parseJson(withRuntype(transitionThresholdRt))
  .build();

// Operation: thresholdsIdPut

const thresholdsIdPutArgsRt = rt
  .Record({ id: rt.Number, TransitionThreshold: transitionThresholdRt })
  .asReadonly();

/**
 * operation ID: thresholdsIdPut
 * `PUT: /thresholds/{id}`
 * Update TransitionThreshold
 */
export const thresholdsIdPut = buildCall() //
  .args<rt.Static<typeof thresholdsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/thresholds/${args.id}`)
  .body((args) => args.TransitionThreshold)
  .parseJson(withRuntype(transitionThresholdRt))
  .build();

// Operation: thresholdsIdDelete

const thresholdsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: thresholdsIdDelete
 * `DELETE: /thresholds/{id}`
 * Delete TransitionThreshold
 */
export const thresholdsIdDelete = buildCall() //
  .args<rt.Static<typeof thresholdsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/thresholds/${args.id}`)
  .parseJson(withRuntype(transitionThresholdRt))
  .build();

// Operation: thresholdsGet

const thresholdsGetResponseBodyRt = rt.Array(transitionThresholdRt);

/**
 * operation ID: thresholdsGet
 * `GET: /thresholds`
 * Query TransitionThreshold
 */
export const thresholdsGet = buildCall() //
  .method('get')
  .path('/thresholds')
  .parseJson(withRuntype(thresholdsGetResponseBodyRt))
  .build();

// Operation: thresholdsPost

const thresholdsPostArgsRt = rt
  .Record({ TransitionThreshold: transitionThresholdRt })
  .asReadonly();

/**
 * operation ID: thresholdsPost
 * `POST: /thresholds`
 * Create TransitionThreshold
 */
export const thresholdsPost = buildCall() //
  .args<rt.Static<typeof thresholdsPostArgsRt>>()
  .method('post')
  .path('/thresholds')
  .body((args) => args.TransitionThreshold)
  .build();

// Operation: approvalrulesIdGet

const approvalrulesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: approvalrulesIdGet
 * `GET: /approvalrules/{id}`
 * Get ApprovalRule
 */
export const approvalrulesIdGet = buildCall() //
  .args<rt.Static<typeof approvalrulesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/approvalrules/${args.id}`)
  .parseJson(withRuntype(approvalRuleRt))
  .build();

// Operation: approvalrulesIdPut

const approvalrulesIdPutArgsRt = rt
  .Record({ id: rt.Number, ApprovalRule: approvalRuleRt })
  .asReadonly();

/**
 * operation ID: approvalrulesIdPut
 * `PUT: /approvalrules/{id}`
 * Update ApprovalRule
 */
export const approvalrulesIdPut = buildCall() //
  .args<rt.Static<typeof approvalrulesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/approvalrules/${args.id}`)
  .body((args) => args.ApprovalRule)
  .parseJson(withRuntype(approvalRuleRt))
  .build();

// Operation: approvalrulesIdDelete

const approvalrulesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: approvalrulesIdDelete
 * `DELETE: /approvalrules/{id}`
 * Delete ApprovalRule
 */
export const approvalrulesIdDelete = buildCall() //
  .args<rt.Static<typeof approvalrulesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/approvalrules/${args.id}`)
  .parseJson(withRuntype(approvalRuleRt))
  .build();

// Operation: approvalrulesGet

const approvalrulesGetResponseBodyRt = rt.Array(approvalRuleRt);

/**
 * operation ID: approvalrulesGet
 * `GET: /approvalrules`
 * Query ApprovalRule
 */
export const approvalrulesGet = buildCall() //
  .method('get')
  .path('/approvalrules')
  .parseJson(withRuntype(approvalrulesGetResponseBodyRt))
  .build();

// Operation: approvalrulesPost

const approvalrulesPostArgsRt = rt
  .Record({ ApprovalRule: approvalRuleRt })
  .asReadonly();

/**
 * operation ID: approvalrulesPost
 * `POST: /approvalrules`
 * Create ApprovalRule
 */
export const approvalrulesPost = buildCall() //
  .args<rt.Static<typeof approvalrulesPostArgsRt>>()
  .method('post')
  .path('/approvalrules')
  .body((args) => args.ApprovalRule)
  .build();

// Operation: approvalsubstitutesIdGet

const approvalsubstitutesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: approvalsubstitutesIdGet
 * `GET: /approvalsubstitutes/{id}`
 * Get ApprovalSubstitute
 */
export const approvalsubstitutesIdGet = buildCall() //
  .args<rt.Static<typeof approvalsubstitutesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/approvalsubstitutes/${args.id}`)
  .parseJson(withRuntype(approvalSubstituteRt))
  .build();

// Operation: approvalsubstitutesIdPut

const approvalsubstitutesIdPutArgsRt = rt
  .Record({ id: rt.Number, ApprovalSubstitute: approvalSubstituteRt })
  .asReadonly();

/**
 * operation ID: approvalsubstitutesIdPut
 * `PUT: /approvalsubstitutes/{id}`
 * Update ApprovalSubstitute
 */
export const approvalsubstitutesIdPut = buildCall() //
  .args<rt.Static<typeof approvalsubstitutesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/approvalsubstitutes/${args.id}`)
  .body((args) => args.ApprovalSubstitute)
  .parseJson(withRuntype(approvalSubstituteRt))
  .build();

// Operation: approvalsubstitutesIdDelete

const approvalsubstitutesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: approvalsubstitutesIdDelete
 * `DELETE: /approvalsubstitutes/{id}`
 * Delete ApprovalSubstitute
 */
export const approvalsubstitutesIdDelete = buildCall() //
  .args<rt.Static<typeof approvalsubstitutesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/approvalsubstitutes/${args.id}`)
  .parseJson(withRuntype(approvalSubstituteRt))
  .build();

// Operation: approvalsubstitutesGet

const approvalsubstitutesGetResponseBodyRt = rt.Array(approvalSubstituteRt);

/**
 * operation ID: approvalsubstitutesGet
 * `GET: /approvalsubstitutes`
 * Query ApprovalSubstitute
 */
export const approvalsubstitutesGet = buildCall() //
  .method('get')
  .path('/approvalsubstitutes')
  .parseJson(withRuntype(approvalsubstitutesGetResponseBodyRt))
  .build();

// Operation: approvalsubstitutesPost

const approvalsubstitutesPostArgsRt = rt
  .Record({ ApprovalSubstitute: approvalSubstituteRt })
  .asReadonly();

/**
 * operation ID: approvalsubstitutesPost
 * `POST: /approvalsubstitutes`
 * Create ApprovalSubstitute
 */
export const approvalsubstitutesPost = buildCall() //
  .args<rt.Static<typeof approvalsubstitutesPostArgsRt>>()
  .method('post')
  .path('/approvalsubstitutes')
  .body((args) => args.ApprovalSubstitute)
  .build();

// Operation: approvalsIdActionApprovePost

const approvalsIdActionApprovePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: approvalsIdActionApprovePost
 * `POST: /approvals/{id}?action=approve`
 * approve Transition
 */
export const approvalsIdActionApprovePost = buildCall() //
  .args<rt.Static<typeof approvalsIdActionApprovePostArgsRt>>()
  .method('post')
  .path((args) => `/approvals/${args.id}?action=approve`)
  .build();

// Operation: approvalsIdActionRejectPost

const approvalsIdActionRejectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: approvalsIdActionRejectPost
 * `POST: /approvals/{id}?action=reject`
 * reject Transition
 */
export const approvalsIdActionRejectPost = buildCall() //
  .args<rt.Static<typeof approvalsIdActionRejectPostArgsRt>>()
  .method('post')
  .path((args) => `/approvals/${args.id}?action=reject`)
  .build();

// Operation: approvalsIdGet

const approvalsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: approvalsIdGet
 * `GET: /approvals/{id}`
 * Get Approval
 */
export const approvalsIdGet = buildCall() //
  .args<rt.Static<typeof approvalsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/approvals/${args.id}`)
  .parseJson(withRuntype(approvalRt))
  .build();

// Operation: approvalsGet

const approvalsGetResponseBodyRt = rt.Array(approvalRt);

/**
 * operation ID: approvalsGet
 * `GET: /approvals`
 * Query Approval
 */
export const approvalsGet = buildCall() //
  .method('get')
  .path('/approvals')
  .parseJson(withRuntype(approvalsGetResponseBodyRt))
  .build();

// Operation: auditlogsIdGet

const auditlogsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: auditlogsIdGet
 * `GET: /auditlogs/{id}`
 * Get AuditLog
 */
export const auditlogsIdGet = buildCall() //
  .args<rt.Static<typeof auditlogsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/auditlogs/${args.id}`)
  .parseJson(withRuntype(auditLogRt))
  .build();

// Operation: auditlogsGet

const auditlogsGetResponseBodyRt = rt.Array(auditLogRt);

/**
 * operation ID: auditlogsGet
 * `GET: /auditlogs`
 * Query AuditLog
 */
export const auditlogsGet = buildCall() //
  .method('get')
  .path('/auditlogs')
  .parseJson(withRuntype(auditlogsGetResponseBodyRt))
  .build();

// Operation: companiesAccessIdGet

const companiesAccessIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companiesAccessIdGet
 * `GET: /companies-access/{id}`
 * Get CompanyAccess
 */
export const companiesAccessIdGet = buildCall() //
  .args<rt.Static<typeof companiesAccessIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companies-access/${args.id}`)
  .parseJson(withRuntype(companyAccessRt))
  .build();

// Operation: companiesAccessIdPut

const companiesAccessIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanyAccess: companyAccessRt })
  .asReadonly();

/**
 * operation ID: companiesAccessIdPut
 * `PUT: /companies-access/{id}`
 * Update CompanyAccess
 */
export const companiesAccessIdPut = buildCall() //
  .args<rt.Static<typeof companiesAccessIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companies-access/${args.id}`)
  .body((args) => args.CompanyAccess)
  .parseJson(withRuntype(companyAccessRt))
  .build();

// Operation: companiesAccessIdDelete

const companiesAccessIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companiesAccessIdDelete
 * `DELETE: /companies-access/{id}`
 * Delete CompanyAccess
 */
export const companiesAccessIdDelete = buildCall() //
  .args<rt.Static<typeof companiesAccessIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companies-access/${args.id}`)
  .parseJson(withRuntype(companyAccessRt))
  .build();

// Operation: companiesAccessGet

const companiesAccessGetResponseBodyRt = rt.Array(companyAccessRt);

/**
 * operation ID: companiesAccessGet
 * `GET: /companies-access`
 * Query CompanyAccess
 */
export const companiesAccessGet = buildCall() //
  .method('get')
  .path('/companies-access')
  .parseJson(withRuntype(companiesAccessGetResponseBodyRt))
  .build();

// Operation: companiesAccessPost

const companiesAccessPostArgsRt = rt
  .Record({ CompanyAccess: companyAccessRt })
  .asReadonly();

/**
 * operation ID: companiesAccessPost
 * `POST: /companies-access`
 * Create CompanyAccess
 */
export const companiesAccessPost = buildCall() //
  .args<rt.Static<typeof companiesAccessPostArgsRt>>()
  .method('post')
  .path('/companies-access')
  .body((args) => args.CompanyAccess)
  .build();

// Operation: companiesActionUndeleteCompanyPut

const companiesActionUndeleteCompanyPutArgsRt = rt
  .Record({ key: rt.String })
  .asPartial()
  .asReadonly();

const companiesActionUndeleteCompanyPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: companiesActionUndeleteCompanyPut
 * `PUT: /companies?action=undelete-company`
 * undelete-company Action
 */
export const companiesActionUndeleteCompanyPut = buildCall() //
  .args<rt.Static<typeof companiesActionUndeleteCompanyPutArgsRt>>()
  .method('put')
  .path((args) => `/companies?action=undelete-company`)
  .parseJson(withRuntype(companiesActionUndeleteCompanyPutResponseBodyRt))
  .build();

// Operation: companiesIdActionUndeleteCompanyPut

const companiesIdActionUndeleteCompanyPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const companiesIdActionUndeleteCompanyPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: companiesIdActionUndeleteCompanyPut
 * `PUT: /companies/{id}?action=undelete-company`
 * undelete-company Action
 */
export const companiesIdActionUndeleteCompanyPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionUndeleteCompanyPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=undelete-company`)
  .parseJson(withRuntype(companiesIdActionUndeleteCompanyPutResponseBodyRt))
  .build();

// Operation: companiesActionDeleteCompanyDelete

const companiesActionDeleteCompanyDeleteArgsRt = rt
  .Record({ key: rt.String })
  .asPartial()
  .asReadonly();

const companiesActionDeleteCompanyDeleteResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: companiesActionDeleteCompanyDelete
 * `DELETE: /companies?action=delete-company`
 * delete-company Action
 */
export const companiesActionDeleteCompanyDelete = buildCall() //
  .args<rt.Static<typeof companiesActionDeleteCompanyDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companies?action=delete-company`)
  .parseJson(withRuntype(companiesActionDeleteCompanyDeleteResponseBodyRt))
  .build();

// Operation: companiesIdActionDeleteCompanyDelete

const companiesIdActionDeleteCompanyDeleteArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const companiesIdActionDeleteCompanyDeleteResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: companiesIdActionDeleteCompanyDelete
 * `DELETE: /companies/{id}?action=delete-company`
 * delete-company Action
 */
export const companiesIdActionDeleteCompanyDelete = buildCall() //
  .args<rt.Static<typeof companiesIdActionDeleteCompanyDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companies/${args.id}?action=delete-company`)
  .parseJson(withRuntype(companiesIdActionDeleteCompanyDeleteResponseBodyRt))
  .build();

// Operation: companiesActionResetCompanyPut

/**
 * operation ID: companiesActionResetCompanyPut
 * `PUT: /companies?action=reset-company`
 * reset-company Action
 */
export const companiesActionResetCompanyPut = buildCall() //
  .method('put')
  .path('/companies?action=reset-company')
  .build();

// Operation: companiesActionCreateCompanyPut

const companiesActionCreateCompanyPutArgsRt = rt
  .Record({ ccp: createCompanyDetailsRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: companiesActionCreateCompanyPut
 * `PUT: /companies?action=create-company`
 * create-company Action
 */
export const companiesActionCreateCompanyPut = buildCall() //
  .args<rt.Static<typeof companiesActionCreateCompanyPutArgsRt>>()
  .method('put')
  .path('/companies?action=create-company')
  .body((args) => args.ccp)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdActionCreateUpdateEmailPut

const companiesIdActionCreateUpdateEmailPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ customEmail: rt.String }).asPartial().asReadonly(),
);

/**
 * operation ID: companiesIdActionCreateUpdateEmailPut
 * `PUT: /companies/{id}?action=create-update-email`
 * create-update-email Action
 */
export const companiesIdActionCreateUpdateEmailPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionCreateUpdateEmailPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=create-update-email`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdActionDisableEmailPut

const companiesIdActionDisableEmailPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companiesIdActionDisableEmailPut
 * `PUT: /companies/{id}?action=disable-email`
 * disable-email Action
 */
export const companiesIdActionDisableEmailPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionDisableEmailPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=disable-email`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdActionCreateOrgnrEmailPut

const companiesIdActionCreateOrgnrEmailPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companiesIdActionCreateOrgnrEmailPut
 * `PUT: /companies/{id}?action=create-orgnr-email`
 * create-orgnr-email Action
 */
export const companiesIdActionCreateOrgnrEmailPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionCreateOrgnrEmailPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=create-orgnr-email`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdActionDisableOrgnrEmailPut

const companiesIdActionDisableOrgnrEmailPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companiesIdActionDisableOrgnrEmailPut
 * `PUT: /companies/{id}?action=disable-orgnr-email`
 * disable-orgnr-email Action
 */
export const companiesIdActionDisableOrgnrEmailPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionDisableOrgnrEmailPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=disable-orgnr-email`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdActionCheckEmailChangedGet

const companiesIdActionCheckEmailChangedGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ email: rt.String }).asPartial().asReadonly(),
);

const companiesIdActionCheckEmailChangedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: companiesIdActionCheckEmailChangedGet
 * `GET: /companies/{id}?action=check-email-changed`
 * check-email-changed Action
 */
export const companiesIdActionCheckEmailChangedGet = buildCall() //
  .args<rt.Static<typeof companiesIdActionCheckEmailChangedGetArgsRt>>()
  .method('get')
  .path((args) => `/companies/${args.id}?action=check-email-changed`)
  .parseJson(withRuntype(companiesIdActionCheckEmailChangedGetResponseBodyRt))
  .build();

// Operation: companiesIdActionCheckEmailValidAvailableGet

const companiesIdActionCheckEmailValidAvailableGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ email: rt.String }).asPartial().asReadonly(),
);

const companiesIdActionCheckEmailValidAvailableGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: companiesIdActionCheckEmailValidAvailableGet
 * `GET: /companies/{id}?action=check-email-valid-available`
 * check-email-valid-available Action
 */
export const companiesIdActionCheckEmailValidAvailableGet = buildCall() //
  .args<rt.Static<typeof companiesIdActionCheckEmailValidAvailableGetArgsRt>>()
  .method('get')
  .path((args) => `/companies/${args.id}?action=check-email-valid-available`)
  .parseJson(
    withRuntype(companiesIdActionCheckEmailValidAvailableGetResponseBodyRt),
  )
  .build();

// Operation: companiesIdActionCheckEmailChangedValidAvailableGet

const companiesIdActionCheckEmailChangedValidAvailableGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ email: rt.String }).asPartial().asReadonly(),
);

const companiesIdActionCheckEmailChangedValidAvailableGetResponseBodyRt =
  rt.Boolean;

/**
 * operation ID:
 * companiesIdActionCheckEmailChangedValidAvailableGet
 * `GET:
 * /companies/{id}?action=check-email-changed-valid-available`
 * check-email-changed-valid-available Action
 */
export const companiesIdActionCheckEmailChangedValidAvailableGet = buildCall() //
  .args<
    rt.Static<typeof companiesIdActionCheckEmailChangedValidAvailableGetArgsRt>
  >()
  .method('get')
  .path(
    (args) =>
      `/companies/${args.id}?action=check-email-changed-valid-available`,
  )
  .parseJson(
    withRuntype(
      companiesIdActionCheckEmailChangedValidAvailableGetResponseBodyRt,
    ),
  )
  .build();

// Operation: companiesIdActionEmailDomainGet

const companiesIdActionEmailDomainGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const companiesIdActionEmailDomainGetResponseBodyRt = rt.String;

/**
 * operation ID: companiesIdActionEmailDomainGet
 * `GET: /companies/{id}?action=email-domain`
 * email-domain Action
 */
export const companiesIdActionEmailDomainGet = buildCall() //
  .args<rt.Static<typeof companiesIdActionEmailDomainGetArgsRt>>()
  .method('get')
  .path((args) => `/companies/${args.id}?action=email-domain`)
  .parseJson(withRuntype(companiesIdActionEmailDomainGetResponseBodyRt))
  .build();

// Operation: companiesIdActionClientnumberPut

const companiesIdActionClientnumberPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ clientnumber: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: companiesIdActionClientnumberPut
 * `PUT: /companies/{id}?action=clientnumber`
 * clientnumber Action
 */
export const companiesIdActionClientnumberPut = buildCall() //
  .args<rt.Static<typeof companiesIdActionClientnumberPutArgsRt>>()
  .method('put')
  .path((args) => `/companies/${args.id}?action=clientnumber`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdGet

const companiesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companiesIdGet
 * `GET: /companies/{id}`
 * Get Company
 */
export const companiesIdGet = buildCall() //
  .args<rt.Static<typeof companiesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companies/${args.id}`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesIdDelete

const companiesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companiesIdDelete
 * `DELETE: /companies/{id}`
 * Delete Company
 */
export const companiesIdDelete = buildCall() //
  .args<rt.Static<typeof companiesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companies/${args.id}`)
  .parseJson(withRuntype(companyRt))
  .build();

// Operation: companiesGet

const companiesGetResponseBodyRt = rt.Array(companyRt);

/**
 * operation ID: companiesGet
 * `GET: /companies`
 * Query Company
 */
export const companiesGet = buildCall() //
  .method('get')
  .path('/companies')
  .parseJson(withRuntype(companiesGetResponseBodyRt))
  .build();

// Operation: customFieldsIdActionActivatePost

const customFieldsIdActionActivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: customFieldsIdActionActivatePost
 * `POST: /custom-fields/{id}?action=activate`
 * activate Transition
 */
export const customFieldsIdActionActivatePost = buildCall() //
  .args<rt.Static<typeof customFieldsIdActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/custom-fields/${args.id}?action=activate`)
  .build();

// Operation: customFieldsIdGet

const customFieldsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: customFieldsIdGet
 * `GET: /custom-fields/{id}`
 * Get CustomField
 */
export const customFieldsIdGet = buildCall() //
  .args<rt.Static<typeof customFieldsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/custom-fields/${args.id}`)
  .parseJson(withRuntype(customFieldRt))
  .build();

// Operation: customFieldsIdPut

const customFieldsIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomField: customFieldRt })
  .asReadonly();

/**
 * operation ID: customFieldsIdPut
 * `PUT: /custom-fields/{id}`
 * Update CustomField
 */
export const customFieldsIdPut = buildCall() //
  .args<rt.Static<typeof customFieldsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/custom-fields/${args.id}`)
  .body((args) => args.CustomField)
  .parseJson(withRuntype(customFieldRt))
  .build();

// Operation: customFieldsIdDelete

const customFieldsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: customFieldsIdDelete
 * `DELETE: /custom-fields/{id}`
 * Delete CustomField
 */
export const customFieldsIdDelete = buildCall() //
  .args<rt.Static<typeof customFieldsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/custom-fields/${args.id}`)
  .parseJson(withRuntype(customFieldRt))
  .build();

// Operation: customFieldsGet

const customFieldsGetResponseBodyRt = rt.Array(customFieldRt);

/**
 * operation ID: customFieldsGet
 * `GET: /custom-fields`
 * Query CustomField
 */
export const customFieldsGet = buildCall() //
  .method('get')
  .path('/custom-fields')
  .parseJson(withRuntype(customFieldsGetResponseBodyRt))
  .build();

// Operation: customFieldsPost

const customFieldsPostArgsRt = rt
  .Record({ CustomField: customFieldRt })
  .asReadonly();

/**
 * operation ID: customFieldsPost
 * `POST: /custom-fields`
 * Create CustomField
 */
export const customFieldsPost = buildCall() //
  .args<rt.Static<typeof customFieldsPostArgsRt>>()
  .method('post')
  .path('/custom-fields')
  .body((args) => args.CustomField)
  .build();

// Operation: modelsIdGet

const modelsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: modelsIdGet
 * `GET: /models/{id}`
 * Get Model
 */
export const modelsIdGet = buildCall() //
  .args<rt.Static<typeof modelsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/models/${args.id}`)
  .parseJson(withRuntype(modelRt))
  .build();

// Operation: modelsIdPut

const modelsIdPutArgsRt = rt
  .Record({ id: rt.Number, Model: modelRt })
  .asReadonly();

/**
 * operation ID: modelsIdPut
 * `PUT: /models/{id}`
 * Update Model
 */
export const modelsIdPut = buildCall() //
  .args<rt.Static<typeof modelsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/models/${args.id}`)
  .body((args) => args.Model)
  .parseJson(withRuntype(modelRt))
  .build();

// Operation: modelsGet

const modelsGetResponseBodyRt = rt.Array(modelRt);

/**
 * operation ID: modelsGet
 * `GET: /models`
 * Query Model
 */
export const modelsGet = buildCall() //
  .method('get')
  .path('/models')
  .parseJson(withRuntype(modelsGetResponseBodyRt))
  .build();

// Operation: statuslogsIdGet

const statuslogsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: statuslogsIdGet
 * `GET: /statuslogs/{id}`
 * Get StatusLog
 */
export const statuslogsIdGet = buildCall() //
  .args<rt.Static<typeof statuslogsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/statuslogs/${args.id}`)
  .parseJson(withRuntype(statusLogRt))
  .build();

// Operation: statuslogsGet

const statuslogsGetResponseBodyRt = rt.Array(statusLogRt);

/**
 * operation ID: statuslogsGet
 * `GET: /statuslogs`
 * Query StatusLog
 */
export const statuslogsGet = buildCall() //
  .method('get')
  .path('/statuslogs')
  .parseJson(withRuntype(statuslogsGetResponseBodyRt))
  .build();

// Operation: tasksIdActionCompletePost

const tasksIdActionCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: tasksIdActionCompletePost
 * `POST: /tasks/{id}?action=complete`
 * complete Transition
 */
export const tasksIdActionCompletePost = buildCall() //
  .args<rt.Static<typeof tasksIdActionCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/tasks/${args.id}?action=complete`)
  .build();

// Operation: tasksIdActionPendingPost

const tasksIdActionPendingPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: tasksIdActionPendingPost
 * `POST: /tasks/{id}?action=pending`
 * pending Transition
 */
export const tasksIdActionPendingPost = buildCall() //
  .args<rt.Static<typeof tasksIdActionPendingPostArgsRt>>()
  .method('post')
  .path((args) => `/tasks/${args.id}?action=pending`)
  .build();

// Operation: tasksIdActionActivatePost

const tasksIdActionActivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: tasksIdActionActivatePost
 * `POST: /tasks/{id}?action=activate`
 * activate Transition
 */
export const tasksIdActionActivatePost = buildCall() //
  .args<rt.Static<typeof tasksIdActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/tasks/${args.id}?action=activate`)
  .build();

// Operation: tasksIdGet

const tasksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: tasksIdGet
 * `GET: /tasks/{id}`
 * Get Task
 */
export const tasksIdGet = buildCall() //
  .args<rt.Static<typeof tasksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/tasks/${args.id}`)
  .parseJson(withRuntype(taskRt))
  .build();

// Operation: tasksIdPut

const tasksIdPutArgsRt = rt
  .Record({ id: rt.Number, Task: taskRt })
  .asReadonly();

/**
 * operation ID: tasksIdPut
 * `PUT: /tasks/{id}`
 * Update Task
 */
export const tasksIdPut = buildCall() //
  .args<rt.Static<typeof tasksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/tasks/${args.id}`)
  .body((args) => args.Task)
  .parseJson(withRuntype(taskRt))
  .build();

// Operation: tasksIdDelete

const tasksIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: tasksIdDelete
 * `DELETE: /tasks/{id}`
 * Delete Task
 */
export const tasksIdDelete = buildCall() //
  .args<rt.Static<typeof tasksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/tasks/${args.id}`)
  .parseJson(withRuntype(taskRt))
  .build();

// Operation: tasksGet

const tasksGetResponseBodyRt = rt.Array(taskRt);

/**
 * operation ID: tasksGet
 * `GET: /tasks`
 * Query Task
 */
export const tasksGet = buildCall() //
  .method('get')
  .path('/tasks')
  .parseJson(withRuntype(tasksGetResponseBodyRt))
  .build();

// Operation: tasksPost

const tasksPostArgsRt = rt.Record({ Task: taskRt }).asReadonly();

/**
 * operation ID: tasksPost
 * `POST: /tasks`
 * Create Task
 */
export const tasksPost = buildCall() //
  .args<rt.Static<typeof tasksPostArgsRt>>()
  .method('post')
  .path('/tasks')
  .body((args) => args.Task)
  .build();

// Operation: usersActionSubjectandemailGet

const usersActionSubjectandemailGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: usersActionSubjectandemailGet
 * `GET: /users?action=subjectandemail`
 * subjectandemail Action
 */
export const usersActionSubjectandemailGet = buildCall() //
  .method('get')
  .path('/users?action=subjectandemail')
  .parseJson(withRuntype(usersActionSubjectandemailGetResponseBodyRt))
  .build();

// Operation: usersActionCurrentSessionGet

/**
 * operation ID: usersActionCurrentSessionGet
 * `GET: /users?action=current-session`
 * current-session Action
 */
export const usersActionCurrentSessionGet = buildCall() //
  .method('get')
  .path('/users?action=current-session')
  .parseJson(withRuntype(userDtoRt))
  .build();

// Operation: usersActionCurrentRolesGet

const usersActionCurrentRolesGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: usersActionCurrentRolesGet
 * `GET: /users?action=current-roles`
 * current-roles Action
 */
export const usersActionCurrentRolesGet = buildCall() //
  .method('get')
  .path('/users?action=current-roles')
  .parseJson(withRuntype(usersActionCurrentRolesGetResponseBodyRt))
  .build();

// Operation: usersActionAcceptCustomerAgreementPost

/**
 * operation ID: usersActionAcceptCustomerAgreementPost
 * `POST: /users?action=accept-CustomerAgreement`
 * accept-CustomerAgreement Action
 */
export const usersActionAcceptCustomerAgreementPost = buildCall() //
  .method('post')
  .path('/users?action=accept-CustomerAgreement')
  .build();

// Operation: usersActionAcceptUserLicenseAgreementPost

/**
 * operation ID: usersActionAcceptUserLicenseAgreementPost
 * `POST: /users?action=accept-UserLicenseAgreement`
 * accept-UserLicenseAgreement Action
 */
export const usersActionAcceptUserLicenseAgreementPost = buildCall() //
  .method('post')
  .path('/users?action=accept-UserLicenseAgreement')
  .build();

// Operation: usersIdActionInactivatePost

const usersIdActionInactivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: usersIdActionInactivatePost
 * `POST: /users/{id}?action=inactivate`
 * inactivate Transition
 */
export const usersIdActionInactivatePost = buildCall() //
  .args<rt.Static<typeof usersIdActionInactivatePostArgsRt>>()
  .method('post')
  .path((args) => `/users/${args.id}?action=inactivate`)
  .build();

// Operation: usersIdActionActivatePost

const usersIdActionActivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: usersIdActionActivatePost
 * `POST: /users/{id}?action=activate`
 * activate Transition
 */
export const usersIdActionActivatePost = buildCall() //
  .args<rt.Static<typeof usersIdActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/users/${args.id}?action=activate`)
  .build();

// Operation: usersIdActionMakeAutobankUserPut

const usersIdActionMakeAutobankUserPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, autobankUser: createBankUserDTORt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: usersIdActionMakeAutobankUserPut
 * `PUT: /users/{id}?action=make-autobank-user`
 * make-autobank-user Action
 */
export const usersIdActionMakeAutobankUserPut = buildCall() //
  .args<rt.Static<typeof usersIdActionMakeAutobankUserPutArgsRt>>()
  .method('put')
  .path((args) => `/users/${args.id}?action=make-autobank-user`)
  .body((args) => args.autobankUser)
  .build();

// Operation: usersIdActionResetAutobankPasswordPost

const usersIdActionResetAutobankPasswordPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: usersIdActionResetAutobankPasswordPost
 * `POST: /users/{id}?action=reset-autobank-password`
 * reset-autobank-password Action
 */
export const usersIdActionResetAutobankPasswordPost = buildCall() //
  .args<rt.Static<typeof usersIdActionResetAutobankPasswordPostArgsRt>>()
  .method('post')
  .path((args) => `/users/${args.id}?action=reset-autobank-password`)
  .build();

// Operation: usersActionSelfResetAutobankPasswordPut

/**
 * operation ID: usersActionSelfResetAutobankPasswordPut
 * `PUT: /users?action=self-reset-autobank-password`
 * self-reset-autobank-password Action
 */
export const usersActionSelfResetAutobankPasswordPut = buildCall() //
  .method('put')
  .path('/users?action=self-reset-autobank-password')
  .build();

// Operation: usersActionChangeAutobankPasswordPut

const usersActionChangeAutobankPasswordPutArgsRt = rt
  .Record({ changPassword: changeAutobankPasswordDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: usersActionChangeAutobankPasswordPut
 * `PUT: /users?action=change-autobank-password`
 * change-autobank-password Action
 */
export const usersActionChangeAutobankPasswordPut = buildCall() //
  .args<rt.Static<typeof usersActionChangeAutobankPasswordPutArgsRt>>()
  .method('put')
  .path('/users?action=change-autobank-password')
  .body((args) => args.changPassword)
  .build();

// Operation: usersActionAddUserPost

const usersActionAddUserPostArgsRt = rt
  .Record({ globalIdentity: rt.Unknown, supportuser: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID: usersActionAddUserPost
 * `POST: /users?action=add-user`
 * add-user Action
 */
export const usersActionAddUserPost = buildCall() //
  .args<rt.Static<typeof usersActionAddUserPostArgsRt>>()
  .method('post')
  .path((args) => `/users?action=add-user`)
  .parseJson(withRuntype(userRt))
  .build();

// Operation: usersActionUserCodeChallengeGet

const usersActionUserCodeChallengeGetArgsRt = rt
  .Record({ reference: rt.String })
  .asPartial()
  .asReadonly();

const usersActionUserCodeChallengeGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: usersActionUserCodeChallengeGet
 * `GET: /users?action=user-code-challenge`
 * user-code-challenge Action
 */
export const usersActionUserCodeChallengeGet = buildCall() //
  .args<rt.Static<typeof usersActionUserCodeChallengeGetArgsRt>>()
  .method('get')
  .path((args) => `/users?action=user-code-challenge`)
  .parseJson(withRuntype(usersActionUserCodeChallengeGetResponseBodyRt))
  .build();

// Operation: usersActionVerifyCodeChallengePut

const usersActionVerifyCodeChallengePutArgsRt = rt
  .Record({ code: rt.String, reference: rt.String })
  .asPartial()
  .asReadonly();

const usersActionVerifyCodeChallengePutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: usersActionVerifyCodeChallengePut
 * `PUT: /users?action=verify-code-challenge`
 * verify-code-challenge Action
 */
export const usersActionVerifyCodeChallengePut = buildCall() //
  .args<rt.Static<typeof usersActionVerifyCodeChallengePutArgsRt>>()
  .method('put')
  .path((args) => `/users?action=verify-code-challenge`)
  .body((args) => args.code)
  .parseJson(withRuntype(usersActionVerifyCodeChallengePutResponseBodyRt))
  .build();

// Operation: usersActionBankidVerifiedGet

const usersActionBankidVerifiedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: usersActionBankidVerifiedGet
 * `GET: /users?action=bankid-verified`
 * bankid-verified Action
 */
export const usersActionBankidVerifiedGet = buildCall() //
  .method('get')
  .path('/users?action=bankid-verified')
  .parseJson(withRuntype(usersActionBankidVerifiedGetResponseBodyRt))
  .build();

// Operation: usersActionBankidVerificationGet

/**
 * operation ID: usersActionBankidVerificationGet
 * `GET: /users?action=bankid-verification`
 * bankid-verification Action
 */
export const usersActionBankidVerificationGet = buildCall() //
  .method('get')
  .path('/users?action=bankid-verification')
  .parseJson(withRuntype(bankVerificationDtoRt))
  .build();

// Operation: usersActionAdminusersGet

const usersActionAdminusersGetResponseBodyRt = rt.Array(userRt);

/**
 * operation ID: usersActionAdminusersGet
 * `GET: /users?action=adminusers`
 * adminusers Action
 */
export const usersActionAdminusersGet = buildCall() //
  .method('get')
  .path('/users?action=adminusers')
  .parseJson(withRuntype(usersActionAdminusersGetResponseBodyRt))
  .build();

// Operation: usersIdGet

const usersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: usersIdGet
 * `GET: /users/{id}`
 * Get User
 */
export const usersIdGet = buildCall() //
  .args<rt.Static<typeof usersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/users/${args.id}`)
  .parseJson(withRuntype(userRt))
  .build();

// Operation: usersIdPut

const usersIdPutArgsRt = rt
  .Record({ id: rt.Number, User: userRt })
  .asReadonly();

/**
 * operation ID: usersIdPut
 * `PUT: /users/{id}`
 * Update User
 */
export const usersIdPut = buildCall() //
  .args<rt.Static<typeof usersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/users/${args.id}`)
  .body((args) => args.User)
  .parseJson(withRuntype(userRt))
  .build();

// Operation: usersIdDelete

const usersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: usersIdDelete
 * `DELETE: /users/{id}`
 * Delete User
 */
export const usersIdDelete = buildCall() //
  .args<rt.Static<typeof usersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/users/${args.id}`)
  .parseJson(withRuntype(userRt))
  .build();

// Operation: usersGet

const usersGetResponseBodyRt = rt.Array(userRt);

/**
 * operation ID: usersGet
 * `GET: /users`
 * Query User
 */
export const usersGet = buildCall() //
  .method('get')
  .path('/users')
  .parseJson(withRuntype(usersGetResponseBodyRt))
  .build();

// Operation: usersPost

const usersPostArgsRt = rt.Record({ User: userRt }).asReadonly();

/**
 * operation ID: usersPost
 * `POST: /users`
 * Create User
 */
export const usersPost = buildCall() //
  .args<rt.Static<typeof usersPostArgsRt>>()
  .method('post')
  .path('/users')
  .body((args) => args.User)
  .build();

// Operation: userVerificationsActionCreatePost

const userVerificationsActionCreatePostArgsRt = rt
  .Record({ userVerfication: userVerificationRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: userVerificationsActionCreatePost
 * `POST: /user-verifications?action=create`
 * create Action
 */
export const userVerificationsActionCreatePost = buildCall() //
  .args<rt.Static<typeof userVerificationsActionCreatePostArgsRt>>()
  .method('post')
  .path('/user-verifications?action=create')
  .body((args) => args.userVerfication)
  .parseJson(withRuntype(userVerificationRt))
  .build();

// Operation: userVerificationsActionCancelInvitationPost

const userVerificationsActionCancelInvitationPostArgsRt = rt
  .Record({ userVerfication: userVerificationRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: userVerificationsActionCancelInvitationPost
 * `POST: /user-verifications?action=cancel-invitation`
 * cancel-invitation Action
 */
export const userVerificationsActionCancelInvitationPost = buildCall() //
  .args<rt.Static<typeof userVerificationsActionCancelInvitationPostArgsRt>>()
  .method('post')
  .path('/user-verifications?action=cancel-invitation')
  .body((args) => args.userVerfication)
  .parseJson(withRuntype(userVerificationRt))
  .build();

// Operation: userVerificationsIdGet

const userVerificationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: userVerificationsIdGet
 * `GET: /user-verifications/{id}`
 * Get UserVerification
 */
export const userVerificationsIdGet = buildCall() //
  .args<rt.Static<typeof userVerificationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/user-verifications/${args.id}`)
  .parseJson(withRuntype(userVerificationRt))
  .build();

// Operation: userVerificationsIdDelete

const userVerificationsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: userVerificationsIdDelete
 * `DELETE: /user-verifications/{id}`
 * Delete UserVerification
 */
export const userVerificationsIdDelete = buildCall() //
  .args<rt.Static<typeof userVerificationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/user-verifications/${args.id}`)
  .parseJson(withRuntype(userVerificationRt))
  .build();

// Operation: userVerificationsGet

const userVerificationsGetResponseBodyRt = rt.Array(userVerificationRt);

/**
 * operation ID: userVerificationsGet
 * `GET: /user-verifications`
 * Query UserVerification
 */
export const userVerificationsGet = buildCall() //
  .method('get')
  .path('/user-verifications')
  .parseJson(withRuntype(userVerificationsGetResponseBodyRt))
  .build();

// Operation: userVerificationsPost

const userVerificationsPostArgsRt = rt
  .Record({ UserVerification: userVerificationRt })
  .asReadonly();

/**
 * operation ID: userVerificationsPost
 * `POST: /user-verifications`
 * Create UserVerification
 */
export const userVerificationsPost = buildCall() //
  .args<rt.Static<typeof userVerificationsPostArgsRt>>()
  .method('post')
  .path('/user-verifications')
  .body((args) => args.UserVerification)
  .build();

// Operation: valuelistsIdGet

const valuelistsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: valuelistsIdGet
 * `GET: /valuelists/{id}`
 * Get ValueList
 */
export const valuelistsIdGet = buildCall() //
  .args<rt.Static<typeof valuelistsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/valuelists/${args.id}`)
  .parseJson(withRuntype(valueListRt))
  .build();

// Operation: valuelistsIdPut

const valuelistsIdPutArgsRt = rt
  .Record({ id: rt.Number, ValueList: valueListRt })
  .asReadonly();

/**
 * operation ID: valuelistsIdPut
 * `PUT: /valuelists/{id}`
 * Update ValueList
 */
export const valuelistsIdPut = buildCall() //
  .args<rt.Static<typeof valuelistsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/valuelists/${args.id}`)
  .body((args) => args.ValueList)
  .parseJson(withRuntype(valueListRt))
  .build();

// Operation: valuelistsIdDelete

const valuelistsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: valuelistsIdDelete
 * `DELETE: /valuelists/{id}`
 * Delete ValueList
 */
export const valuelistsIdDelete = buildCall() //
  .args<rt.Static<typeof valuelistsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/valuelists/${args.id}`)
  .parseJson(withRuntype(valueListRt))
  .build();

// Operation: valuelistsGet

const valuelistsGetResponseBodyRt = rt.Array(valueListRt);

/**
 * operation ID: valuelistsGet
 * `GET: /valuelists`
 * Query ValueList
 */
export const valuelistsGet = buildCall() //
  .method('get')
  .path('/valuelists')
  .parseJson(withRuntype(valuelistsGetResponseBodyRt))
  .build();

// Operation: valuelistsPost

const valuelistsPostArgsRt = rt.Record({ ValueList: valueListRt }).asReadonly();

/**
 * operation ID: valuelistsPost
 * `POST: /valuelists`
 * Create ValueList
 */
export const valuelistsPost = buildCall() //
  .args<rt.Static<typeof valuelistsPostArgsRt>>()
  .method('post')
  .path('/valuelists')
  .body((args) => args.ValueList)
  .build();

// Operation: valueitemsIdGet

const valueitemsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: valueitemsIdGet
 * `GET: /valueitems/{id}`
 * Get ValueItem
 */
export const valueitemsIdGet = buildCall() //
  .args<rt.Static<typeof valueitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/valueitems/${args.id}`)
  .parseJson(withRuntype(valueItemRt))
  .build();

// Operation: valueitemsIdPut

const valueitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, ValueItem: valueItemRt })
  .asReadonly();

/**
 * operation ID: valueitemsIdPut
 * `PUT: /valueitems/{id}`
 * Update ValueItem
 */
export const valueitemsIdPut = buildCall() //
  .args<rt.Static<typeof valueitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/valueitems/${args.id}`)
  .body((args) => args.ValueItem)
  .parseJson(withRuntype(valueItemRt))
  .build();

// Operation: valueitemsIdDelete

const valueitemsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: valueitemsIdDelete
 * `DELETE: /valueitems/{id}`
 * Delete ValueItem
 */
export const valueitemsIdDelete = buildCall() //
  .args<rt.Static<typeof valueitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/valueitems/${args.id}`)
  .parseJson(withRuntype(valueItemRt))
  .build();

// Operation: valueitemsGet

const valueitemsGetResponseBodyRt = rt.Array(valueItemRt);

/**
 * operation ID: valueitemsGet
 * `GET: /valueitems`
 * Query ValueItem
 */
export const valueitemsGet = buildCall() //
  .method('get')
  .path('/valueitems')
  .parseJson(withRuntype(valueitemsGetResponseBodyRt))
  .build();

// Operation: valueitemsPost

const valueitemsPostArgsRt = rt.Record({ ValueItem: valueItemRt }).asReadonly();

/**
 * operation ID: valueitemsPost
 * `POST: /valueitems`
 * Create ValueItem
 */
export const valueitemsPost = buildCall() //
  .args<rt.Static<typeof valueitemsPostArgsRt>>()
  .method('post')
  .path('/valueitems')
  .body((args) => args.ValueItem)
  .build();

// Operation: translationsIdGet

const translationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: translationsIdGet
 * `GET: /translations/{id}`
 * Get Translation
 */
export const translationsIdGet = buildCall() //
  .args<rt.Static<typeof translationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/translations/${args.id}`)
  .parseJson(withRuntype(translationRt))
  .build();

// Operation: translationsIdPut

const translationsIdPutArgsRt = rt
  .Record({ id: rt.Number, Translation: translationRt })
  .asReadonly();

/**
 * operation ID: translationsIdPut
 * `PUT: /translations/{id}`
 * Update Translation
 */
export const translationsIdPut = buildCall() //
  .args<rt.Static<typeof translationsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/translations/${args.id}`)
  .body((args) => args.Translation)
  .parseJson(withRuntype(translationRt))
  .build();

// Operation: translationsIdDelete

const translationsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: translationsIdDelete
 * `DELETE: /translations/{id}`
 * Delete Translation
 */
export const translationsIdDelete = buildCall() //
  .args<rt.Static<typeof translationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/translations/${args.id}`)
  .parseJson(withRuntype(translationRt))
  .build();

// Operation: translationsGet

const translationsGetResponseBodyRt = rt.Array(translationRt);

/**
 * operation ID: translationsGet
 * `GET: /translations`
 * Query Translation
 */
export const translationsGet = buildCall() //
  .method('get')
  .path('/translations')
  .parseJson(withRuntype(translationsGetResponseBodyRt))
  .build();

// Operation: translationsPost

const translationsPostArgsRt = rt
  .Record({ Translation: translationRt })
  .asReadonly();

/**
 * operation ID: translationsPost
 * `POST: /translations`
 * Create Translation
 */
export const translationsPost = buildCall() //
  .args<rt.Static<typeof translationsPostArgsRt>>()
  .method('post')
  .path('/translations')
  .body((args) => args.Translation)
  .build();

// Operation: translatablesIdGet

const translatablesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: translatablesIdGet
 * `GET: /translatables/{id}`
 * Get Translatable
 */
export const translatablesIdGet = buildCall() //
  .args<rt.Static<typeof translatablesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/translatables/${args.id}`)
  .parseJson(withRuntype(translatableRt))
  .build();

// Operation: translatablesIdPut

const translatablesIdPutArgsRt = rt
  .Record({ id: rt.Number, Translatable: translatableRt })
  .asReadonly();

/**
 * operation ID: translatablesIdPut
 * `PUT: /translatables/{id}`
 * Update Translatable
 */
export const translatablesIdPut = buildCall() //
  .args<rt.Static<typeof translatablesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/translatables/${args.id}`)
  .body((args) => args.Translatable)
  .parseJson(withRuntype(translatableRt))
  .build();

// Operation: translatablesIdDelete

const translatablesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: translatablesIdDelete
 * `DELETE: /translatables/{id}`
 * Delete Translatable
 */
export const translatablesIdDelete = buildCall() //
  .args<rt.Static<typeof translatablesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/translatables/${args.id}`)
  .parseJson(withRuntype(translatableRt))
  .build();

// Operation: translatablesGet

const translatablesGetResponseBodyRt = rt.Array(translatableRt);

/**
 * operation ID: translatablesGet
 * `GET: /translatables`
 * Query Translatable
 */
export const translatablesGet = buildCall() //
  .method('get')
  .path('/translatables')
  .parseJson(withRuntype(translatablesGetResponseBodyRt))
  .build();

// Operation: translatablesPost

const translatablesPostArgsRt = rt
  .Record({ Translatable: translatableRt })
  .asReadonly();

/**
 * operation ID: translatablesPost
 * `POST: /translatables`
 * Create Translatable
 */
export const translatablesPost = buildCall() //
  .args<rt.Static<typeof translatablesPostArgsRt>>()
  .method('post')
  .path('/translatables')
  .body((args) => args.Translatable)
  .build();

// Operation: languagesIdGet

const languagesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: languagesIdGet
 * `GET: /languages/{id}`
 * Get Language
 */
export const languagesIdGet = buildCall() //
  .args<rt.Static<typeof languagesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/languages/${args.id}`)
  .parseJson(withRuntype(languageRt))
  .build();

// Operation: languagesIdPut

const languagesIdPutArgsRt = rt
  .Record({ id: rt.Number, Language: languageRt })
  .asReadonly();

/**
 * operation ID: languagesIdPut
 * `PUT: /languages/{id}`
 * Update Language
 */
export const languagesIdPut = buildCall() //
  .args<rt.Static<typeof languagesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/languages/${args.id}`)
  .body((args) => args.Language)
  .parseJson(withRuntype(languageRt))
  .build();

// Operation: languagesIdDelete

const languagesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: languagesIdDelete
 * `DELETE: /languages/{id}`
 * Delete Language
 */
export const languagesIdDelete = buildCall() //
  .args<rt.Static<typeof languagesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/languages/${args.id}`)
  .parseJson(withRuntype(languageRt))
  .build();

// Operation: languagesGet

const languagesGetResponseBodyRt = rt.Array(languageRt);

/**
 * operation ID: languagesGet
 * `GET: /languages`
 * Query Language
 */
export const languagesGet = buildCall() //
  .method('get')
  .path('/languages')
  .parseJson(withRuntype(languagesGetResponseBodyRt))
  .build();

// Operation: languagesPost

const languagesPostArgsRt = rt.Record({ Language: languageRt }).asReadonly();

/**
 * operation ID: languagesPost
 * `POST: /languages`
 * Create Language
 */
export const languagesPost = buildCall() //
  .args<rt.Static<typeof languagesPostArgsRt>>()
  .method('post')
  .path('/languages')
  .body((args) => args.Language)
  .build();

// Operation: numberSeriesActionGetActiveNumberseriesGet

const numberSeriesActionGetActiveNumberseriesGetArgsRt = rt
  .Record({ entityType: rt.String, year: rt.Number })
  .asPartial()
  .asReadonly();

const numberSeriesActionGetActiveNumberseriesGetResponseBodyRt =
  rt.Array(numberSeriesRt);

/**
 * operation ID: numberSeriesActionGetActiveNumberseriesGet
 * `GET: /number-series?action=get-active-numberseries`
 * get-active-numberseries Action
 */
export const numberSeriesActionGetActiveNumberseriesGet = buildCall() //
  .args<rt.Static<typeof numberSeriesActionGetActiveNumberseriesGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series?action=get-active-numberseries`)
  .parseJson(
    withRuntype(numberSeriesActionGetActiveNumberseriesGetResponseBodyRt),
  )
  .build();

// Operation: numberSeriesActionGetNumberseriesAsinvoiceGet

/**
 * operation ID: numberSeriesActionGetNumberseriesAsinvoiceGet
 * `GET: /number-series?action=get-numberseries-asinvoice`
 * get-numberseries-asinvoice Action
 */
export const numberSeriesActionGetNumberseriesAsinvoiceGet = buildCall() //
  .method('get')
  .path('/number-series?action=get-numberseries-asinvoice')
  .parseJson(withRuntype(numberSeriesRt))
  .build();

// Operation: numberSeriesActionResetNumberseriesNextNumberPut

const numberSeriesActionResetNumberseriesNextNumberPutArgsRt = rt
  .Record({ numberSeriesID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * numberSeriesActionResetNumberseriesNextNumberPut
 * `PUT: /number-series?action=reset-numberseries-next-number`
 * reset-numberseries-next-number Action
 */
export const numberSeriesActionResetNumberseriesNextNumberPut = buildCall() //
  .args<
    rt.Static<typeof numberSeriesActionResetNumberseriesNextNumberPutArgsRt>
  >()
  .method('put')
  .path((args) => `/number-series?action=reset-numberseries-next-number`)
  .build();

// Operation: numberSeriesActionGetMaxUsedNumberGet

const numberSeriesActionGetMaxUsedNumberGetArgsRt = rt
  .Record({ numberSeriesID: rt.Number })
  .asPartial()
  .asReadonly();

const numberSeriesActionGetMaxUsedNumberGetResponseBodyRt = rt.String;

/**
 * operation ID: numberSeriesActionGetMaxUsedNumberGet
 * `GET: /number-series?action=get-max-used-number`
 * get-max-used-number Action
 */
export const numberSeriesActionGetMaxUsedNumberGet = buildCall() //
  .args<rt.Static<typeof numberSeriesActionGetMaxUsedNumberGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series?action=get-max-used-number`)
  .parseJson(withRuntype(numberSeriesActionGetMaxUsedNumberGetResponseBodyRt))
  .build();

// Operation: numberSeriesActionGetAvailableNumbersInNumberseriesGet

const numberSeriesActionGetAvailableNumbersInNumberseriesGetArgsRt = rt
  .Record({ numberSeriesID: rt.Number })
  .asPartial()
  .asReadonly();

const numberSeriesActionGetAvailableNumbersInNumberseriesGetResponseBodyRt =
  rt.String;

/**
 * operation ID:
 * numberSeriesActionGetAvailableNumbersInNumberseriesGet
 * `GET:
 * /number-series?action=get-available-numbers-in-numberseries`
 * get-available-numbers-in-numberseries Action
 */
export const numberSeriesActionGetAvailableNumbersInNumberseriesGet =
  buildCall() //
    .args<
      rt.Static<
        typeof numberSeriesActionGetAvailableNumbersInNumberseriesGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) => `/number-series?action=get-available-numbers-in-numberseries`,
    )
    .parseJson(
      withRuntype(
        numberSeriesActionGetAvailableNumbersInNumberseriesGetResponseBodyRt,
      ),
    )
    .build();

// Operation: numberSeriesIdGet

const numberSeriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: numberSeriesIdGet
 * `GET: /number-series/{id}`
 * Get NumberSeries
 */
export const numberSeriesIdGet = buildCall() //
  .args<rt.Static<typeof numberSeriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series/${args.id}`)
  .parseJson(withRuntype(numberSeriesRt))
  .build();

// Operation: numberSeriesIdPut

const numberSeriesIdPutArgsRt = rt
  .Record({ id: rt.Number, NumberSeries: numberSeriesRt })
  .asReadonly();

/**
 * operation ID: numberSeriesIdPut
 * `PUT: /number-series/{id}`
 * Update NumberSeries
 */
export const numberSeriesIdPut = buildCall() //
  .args<rt.Static<typeof numberSeriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/number-series/${args.id}`)
  .body((args) => args.NumberSeries)
  .parseJson(withRuntype(numberSeriesRt))
  .build();

// Operation: numberSeriesIdDelete

const numberSeriesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: numberSeriesIdDelete
 * `DELETE: /number-series/{id}`
 * Delete NumberSeries
 */
export const numberSeriesIdDelete = buildCall() //
  .args<rt.Static<typeof numberSeriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/number-series/${args.id}`)
  .parseJson(withRuntype(numberSeriesRt))
  .build();

// Operation: numberSeriesGet

const numberSeriesGetResponseBodyRt = rt.Array(numberSeriesRt);

/**
 * operation ID: numberSeriesGet
 * `GET: /number-series`
 * Query NumberSeries
 */
export const numberSeriesGet = buildCall() //
  .method('get')
  .path('/number-series')
  .parseJson(withRuntype(numberSeriesGetResponseBodyRt))
  .build();

// Operation: numberSeriesPost

const numberSeriesPostArgsRt = rt
  .Record({ NumberSeries: numberSeriesRt })
  .asReadonly();

/**
 * operation ID: numberSeriesPost
 * `POST: /number-series`
 * Create NumberSeries
 */
export const numberSeriesPost = buildCall() //
  .args<rt.Static<typeof numberSeriesPostArgsRt>>()
  .method('post')
  .path('/number-series')
  .body((args) => args.NumberSeries)
  .build();

// Operation: numberSeriesInvalidOverlapsIdGet

const numberSeriesInvalidOverlapsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: numberSeriesInvalidOverlapsIdGet
 * `GET: /number-series-invalid-overlaps/{id}`
 * Get NumberSeriesInvalidOverlap
 */
export const numberSeriesInvalidOverlapsIdGet = buildCall() //
  .args<rt.Static<typeof numberSeriesInvalidOverlapsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series-invalid-overlaps/${args.id}`)
  .parseJson(withRuntype(numberSeriesInvalidOverlapRt))
  .build();

// Operation: numberSeriesInvalidOverlapsIdPut

const numberSeriesInvalidOverlapsIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    NumberSeriesInvalidOverlap: numberSeriesInvalidOverlapRt,
  })
  .asReadonly();

/**
 * operation ID: numberSeriesInvalidOverlapsIdPut
 * `PUT: /number-series-invalid-overlaps/{id}`
 * Update NumberSeriesInvalidOverlap
 */
export const numberSeriesInvalidOverlapsIdPut = buildCall() //
  .args<rt.Static<typeof numberSeriesInvalidOverlapsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/number-series-invalid-overlaps/${args.id}`)
  .body((args) => args.NumberSeriesInvalidOverlap)
  .parseJson(withRuntype(numberSeriesInvalidOverlapRt))
  .build();

// Operation: numberSeriesInvalidOverlapsIdDelete

const numberSeriesInvalidOverlapsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: numberSeriesInvalidOverlapsIdDelete
 * `DELETE: /number-series-invalid-overlaps/{id}`
 * Delete NumberSeriesInvalidOverlap
 */
export const numberSeriesInvalidOverlapsIdDelete = buildCall() //
  .args<rt.Static<typeof numberSeriesInvalidOverlapsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/number-series-invalid-overlaps/${args.id}`)
  .parseJson(withRuntype(numberSeriesInvalidOverlapRt))
  .build();

// Operation: numberSeriesInvalidOverlapsGet

const numberSeriesInvalidOverlapsGetResponseBodyRt = rt.Array(
  numberSeriesInvalidOverlapRt,
);

/**
 * operation ID: numberSeriesInvalidOverlapsGet
 * `GET: /number-series-invalid-overlaps`
 * Query NumberSeriesInvalidOverlap
 */
export const numberSeriesInvalidOverlapsGet = buildCall() //
  .method('get')
  .path('/number-series-invalid-overlaps')
  .parseJson(withRuntype(numberSeriesInvalidOverlapsGetResponseBodyRt))
  .build();

// Operation: numberSeriesInvalidOverlapsPost

const numberSeriesInvalidOverlapsPostArgsRt = rt
  .Record({ NumberSeriesInvalidOverlap: numberSeriesInvalidOverlapRt })
  .asReadonly();

/**
 * operation ID: numberSeriesInvalidOverlapsPost
 * `POST: /number-series-invalid-overlaps`
 * Create NumberSeriesInvalidOverlap
 */
export const numberSeriesInvalidOverlapsPost = buildCall() //
  .args<rt.Static<typeof numberSeriesInvalidOverlapsPostArgsRt>>()
  .method('post')
  .path('/number-series-invalid-overlaps')
  .body((args) => args.NumberSeriesInvalidOverlap)
  .build();

// Operation: numberSeriesTasksActionGetActiveNumberseriestasksGet

const numberSeriesTasksActionGetActiveNumberseriestasksGetArgsRt = rt
  .Record({ entityType: rt.String, year: rt.Number })
  .asPartial()
  .asReadonly();

const numberSeriesTasksActionGetActiveNumberseriestasksGetResponseBodyRt =
  rt.Array(activeNumberSeriesTaskRt);

/**
 * operation ID:
 * numberSeriesTasksActionGetActiveNumberseriestasksGet
 * `GET:
 * /number-series-tasks?action=get-active-numberseriestasks`
 * get-active-numberseriestasks Action
 */
export const numberSeriesTasksActionGetActiveNumberseriestasksGet = buildCall() //
  .args<
    rt.Static<typeof numberSeriesTasksActionGetActiveNumberseriestasksGetArgsRt>
  >()
  .method('get')
  .path((args) => `/number-series-tasks?action=get-active-numberseriestasks`)
  .parseJson(
    withRuntype(
      numberSeriesTasksActionGetActiveNumberseriestasksGetResponseBodyRt,
    ),
  )
  .build();

// Operation: numberSeriesTasksIdGet

const numberSeriesTasksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: numberSeriesTasksIdGet
 * `GET: /number-series-tasks/{id}`
 * Get NumberSeriesTask
 */
export const numberSeriesTasksIdGet = buildCall() //
  .args<rt.Static<typeof numberSeriesTasksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series-tasks/${args.id}`)
  .parseJson(withRuntype(numberSeriesTaskRt))
  .build();

// Operation: numberSeriesTasksIdPut

const numberSeriesTasksIdPutArgsRt = rt
  .Record({ id: rt.Number, NumberSeriesTask: numberSeriesTaskRt })
  .asReadonly();

/**
 * operation ID: numberSeriesTasksIdPut
 * `PUT: /number-series-tasks/{id}`
 * Update NumberSeriesTask
 */
export const numberSeriesTasksIdPut = buildCall() //
  .args<rt.Static<typeof numberSeriesTasksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/number-series-tasks/${args.id}`)
  .body((args) => args.NumberSeriesTask)
  .parseJson(withRuntype(numberSeriesTaskRt))
  .build();

// Operation: numberSeriesTasksIdDelete

const numberSeriesTasksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: numberSeriesTasksIdDelete
 * `DELETE: /number-series-tasks/{id}`
 * Delete NumberSeriesTask
 */
export const numberSeriesTasksIdDelete = buildCall() //
  .args<rt.Static<typeof numberSeriesTasksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/number-series-tasks/${args.id}`)
  .parseJson(withRuntype(numberSeriesTaskRt))
  .build();

// Operation: numberSeriesTasksGet

const numberSeriesTasksGetResponseBodyRt = rt.Array(numberSeriesTaskRt);

/**
 * operation ID: numberSeriesTasksGet
 * `GET: /number-series-tasks`
 * Query NumberSeriesTask
 */
export const numberSeriesTasksGet = buildCall() //
  .method('get')
  .path('/number-series-tasks')
  .parseJson(withRuntype(numberSeriesTasksGetResponseBodyRt))
  .build();

// Operation: numberSeriesTasksPost

const numberSeriesTasksPostArgsRt = rt
  .Record({ NumberSeriesTask: numberSeriesTaskRt })
  .asReadonly();

/**
 * operation ID: numberSeriesTasksPost
 * `POST: /number-series-tasks`
 * Create NumberSeriesTask
 */
export const numberSeriesTasksPost = buildCall() //
  .args<rt.Static<typeof numberSeriesTasksPostArgsRt>>()
  .method('post')
  .path('/number-series-tasks')
  .body((args) => args.NumberSeriesTask)
  .build();

// Operation: numberSeriesTypesIdGet

const numberSeriesTypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: numberSeriesTypesIdGet
 * `GET: /number-series-types/{id}`
 * Get NumberSeriesType
 */
export const numberSeriesTypesIdGet = buildCall() //
  .args<rt.Static<typeof numberSeriesTypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/number-series-types/${args.id}`)
  .parseJson(withRuntype(numberSeriesTypeRt))
  .build();

// Operation: numberSeriesTypesIdPut

const numberSeriesTypesIdPutArgsRt = rt
  .Record({ id: rt.Number, NumberSeriesType: numberSeriesTypeRt })
  .asReadonly();

/**
 * operation ID: numberSeriesTypesIdPut
 * `PUT: /number-series-types/{id}`
 * Update NumberSeriesType
 */
export const numberSeriesTypesIdPut = buildCall() //
  .args<rt.Static<typeof numberSeriesTypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/number-series-types/${args.id}`)
  .body((args) => args.NumberSeriesType)
  .parseJson(withRuntype(numberSeriesTypeRt))
  .build();

// Operation: numberSeriesTypesIdDelete

const numberSeriesTypesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: numberSeriesTypesIdDelete
 * `DELETE: /number-series-types/{id}`
 * Delete NumberSeriesType
 */
export const numberSeriesTypesIdDelete = buildCall() //
  .args<rt.Static<typeof numberSeriesTypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/number-series-types/${args.id}`)
  .parseJson(withRuntype(numberSeriesTypeRt))
  .build();

// Operation: numberSeriesTypesGet

const numberSeriesTypesGetResponseBodyRt = rt.Array(numberSeriesTypeRt);

/**
 * operation ID: numberSeriesTypesGet
 * `GET: /number-series-types`
 * Query NumberSeriesType
 */
export const numberSeriesTypesGet = buildCall() //
  .method('get')
  .path('/number-series-types')
  .parseJson(withRuntype(numberSeriesTypesGetResponseBodyRt))
  .build();

// Operation: numberSeriesTypesPost

const numberSeriesTypesPostArgsRt = rt
  .Record({ NumberSeriesType: numberSeriesTypeRt })
  .asReadonly();

/**
 * operation ID: numberSeriesTypesPost
 * `POST: /number-series-types`
 * Create NumberSeriesType
 */
export const numberSeriesTypesPost = buildCall() //
  .args<rt.Static<typeof numberSeriesTypesPostArgsRt>>()
  .method('post')
  .path('/number-series-types')
  .body((args) => args.NumberSeriesType)
  .build();

// Operation: filesIdActionSetIsAttachmentPut

const filesIdActionSetIsAttachmentPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      entitytype: rt.String,
      entityid: rt.Number,
      isAttachment: rt.Boolean,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: filesIdActionSetIsAttachmentPut
 * `PUT: /files/{id}?action=set-is-attachment`
 * set-is-attachment Action
 */
export const filesIdActionSetIsAttachmentPut = buildCall() //
  .args<rt.Static<typeof filesIdActionSetIsAttachmentPutArgsRt>>()
  .method('put')
  .path((args) => `/files/${args.id}?action=set-is-attachment`)
  .build();

// Operation: filesIdActionLinkPost

const filesIdActionLinkPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ entitytype: rt.String, entityid: rt.Number })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: filesIdActionLinkPost
 * `POST: /files/{id}?action=link`
 * link Action
 */
export const filesIdActionLinkPost = buildCall() //
  .args<rt.Static<typeof filesIdActionLinkPostArgsRt>>()
  .method('post')
  .path((args) => `/files/${args.id}?action=link`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesIdActionUnlinkPost

const filesIdActionUnlinkPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ entitytype: rt.String, entityid: rt.Number })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: filesIdActionUnlinkPost
 * `POST: /files/{id}?action=unlink`
 * unlink Action
 */
export const filesIdActionUnlinkPost = buildCall() //
  .args<rt.Static<typeof filesIdActionUnlinkPostArgsRt>>()
  .method('post')
  .path((args) => `/files/${args.id}?action=unlink`)
  .build();

// Operation: filesIdActionDownloadGet

const filesIdActionDownloadGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const filesIdActionDownloadGetResponseBodyRt = rt.String;

/**
 * operation ID: filesIdActionDownloadGet
 * `GET: /files/{id}?action=download`
 * download Action
 */
export const filesIdActionDownloadGet = buildCall() //
  .args<rt.Static<typeof filesIdActionDownloadGetArgsRt>>()
  .method('get')
  .path((args) => `/files/${args.id}?action=download`)
  .parseJson(withRuntype(filesIdActionDownloadGetResponseBodyRt))
  .build();

// Operation: filesIdActionOcranalyseGet

const filesIdActionOcranalyseGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const filesIdActionOcranalyseGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: filesIdActionOcranalyseGet
 * `GET: /files/{id}?action=ocranalyse`
 * ocranalyse Action
 */
export const filesIdActionOcranalyseGet = buildCall() //
  .args<rt.Static<typeof filesIdActionOcranalyseGetArgsRt>>()
  .method('get')
  .path((args) => `/files/${args.id}?action=ocranalyse`)
  .parseJson(withRuntype(filesIdActionOcranalyseGetResponseBodyRt))
  .build();

// Operation: filesIdActionFinalizePost

const filesIdActionFinalizePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: filesIdActionFinalizePost
 * `POST: /files/{id}?action=finalize`
 * finalize Transition
 */
export const filesIdActionFinalizePost = buildCall() //
  .args<rt.Static<typeof filesIdActionFinalizePostArgsRt>>()
  .method('post')
  .path((args) => `/files/${args.id}?action=finalize`)
  .build();

// Operation: filesActionSplitFilePost

const filesActionSplitFilePostArgsRt = rt
  .Record({
    oldFileID: rt.Number,
    newFileID1: rt.Number,
    newFileID2: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: filesActionSplitFilePost
 * `POST: /files?action=split-file`
 * split-file Action
 */
export const filesActionSplitFilePost = buildCall() //
  .args<rt.Static<typeof filesActionSplitFilePostArgsRt>>()
  .method('post')
  .path((args) => `/files?action=split-file`)
  .parseJson(withRuntype(splitFileResultRt))
  .build();

// Operation: filesActionSplitFileMultiplePost

const filesActionSplitFileMultiplePostArgsRt = rt
  .Record({ oldFileID: rt.Number, newFileIds: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: filesActionSplitFileMultiplePost
 * `POST: /files?action=split-file-multiple`
 * split-file-multiple Action
 */
export const filesActionSplitFileMultiplePost = buildCall() //
  .args<rt.Static<typeof filesActionSplitFileMultiplePostArgsRt>>()
  .method('post')
  .path((args) => `/files?action=split-file-multiple`)
  .parseJson(withRuntype(splitFileMultipeResultRt))
  .build();

// Operation: filesIdGet

const filesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: filesIdGet
 * `GET: /files/{id}`
 * Get File
 */
export const filesIdGet = buildCall() //
  .args<rt.Static<typeof filesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/files/${args.id}`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesIdPut

const filesIdPutArgsRt = rt
  .Record({ id: rt.Number, File: fileRt })
  .asReadonly();

/**
 * operation ID: filesIdPut
 * `PUT: /files/{id}`
 * Update File
 */
export const filesIdPut = buildCall() //
  .args<rt.Static<typeof filesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/files/${args.id}`)
  .body((args) => args.File)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesIdDelete

const filesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: filesIdDelete
 * `DELETE: /files/{id}`
 * Delete File
 */
export const filesIdDelete = buildCall() //
  .args<rt.Static<typeof filesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/files/${args.id}`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesGet

const filesGetResponseBodyRt = rt.Array(fileRt);

/**
 * operation ID: filesGet
 * `GET: /files`
 * Query File
 */
export const filesGet = buildCall() //
  .method('get')
  .path('/files')
  .parseJson(withRuntype(filesGetResponseBodyRt))
  .build();

// Operation: filesPost

const filesPostArgsRt = rt.Record({ File: fileRt }).asReadonly();

/**
 * operation ID: filesPost
 * `POST: /files`
 * Create File
 */
export const filesPost = buildCall() //
  .args<rt.Static<typeof filesPostArgsRt>>()
  .method('post')
  .path('/files')
  .body((args) => args.File)
  .build();

// Operation: filesEntitytypeEntityidActionDeleteByFiletagDelete

const filesEntitytypeEntityidActionDeleteByFiletagDeleteArgsRt = rt
  .Record({ fileTagName: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * filesEntitytypeEntityidActionDeleteByFiletagDelete
 * `DELETE:
 * /files/{entitytype}/{entityid}?action=delete-by-filetag`
 * delete-by-filetag Action
 */
export const filesEntitytypeEntityidActionDeleteByFiletagDelete = buildCall() //
  .args<
    rt.Static<typeof filesEntitytypeEntityidActionDeleteByFiletagDeleteArgsRt>
  >()
  .method('delete')
  .path((args) => `/files/{entitytype}/{entityid}?action=delete-by-filetag`)
  .build();

// Operation: filesEntitytypeEntityidIdActionDownloadGet

const filesEntitytypeEntityidIdActionDownloadGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const filesEntitytypeEntityidIdActionDownloadGetResponseBodyRt = rt.String;

/**
 * operation ID: filesEntitytypeEntityidIdActionDownloadGet
 * `GET: /files/{entitytype}/{entityid}/{id}?action=download`
 * download Action
 */
export const filesEntitytypeEntityidIdActionDownloadGet = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidIdActionDownloadGetArgsRt>>()
  .method('get')
  .path((args) => `/files/{entitytype}/{entityid}/${args.id}?action=download`)
  .parseJson(
    withRuntype(filesEntitytypeEntityidIdActionDownloadGetResponseBodyRt),
  )
  .build();

// Operation: filesEntitytypeEntityidIdActionOcranalyseGet

const filesEntitytypeEntityidIdActionOcranalyseGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const filesEntitytypeEntityidIdActionOcranalyseGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: filesEntitytypeEntityidIdActionOcranalyseGet
 * `GET: /files/{entitytype}/{entityid}/{id}?action=ocranalyse`
 * ocranalyse Action
 */
export const filesEntitytypeEntityidIdActionOcranalyseGet = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidIdActionOcranalyseGetArgsRt>>()
  .method('get')
  .path((args) => `/files/{entitytype}/{entityid}/${args.id}?action=ocranalyse`)
  .parseJson(
    withRuntype(filesEntitytypeEntityidIdActionOcranalyseGetResponseBodyRt),
  )
  .build();

// Operation: filesEntitytypeEntityidIdActionFinalizePost

const filesEntitytypeEntityidIdActionFinalizePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: filesEntitytypeEntityidIdActionFinalizePost
 * `POST: /files/{entitytype}/{entityid}/{id}?action=finalize`
 * finalize Transition
 */
export const filesEntitytypeEntityidIdActionFinalizePost = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidIdActionFinalizePostArgsRt>>()
  .method('post')
  .path((args) => `/files/{entitytype}/{entityid}/${args.id}?action=finalize`)
  .build();

// Operation: filesEntitytypeEntityidIdGet

const filesEntitytypeEntityidIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: filesEntitytypeEntityidIdGet
 * `GET: /files/{entitytype}/{entityid}/{id}`
 * Get File
 */
export const filesEntitytypeEntityidIdGet = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidIdGetArgsRt>>()
  .method('get')
  .path((args) => `/files/{entitytype}/{entityid}/${args.id}`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesEntitytypeEntityidIdDelete

const filesEntitytypeEntityidIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: filesEntitytypeEntityidIdDelete
 * `DELETE: /files/{entitytype}/{entityid}/{id}`
 * Delete File
 */
export const filesEntitytypeEntityidIdDelete = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/files/{entitytype}/{entityid}/${args.id}`)
  .parseJson(withRuntype(fileRt))
  .build();

// Operation: filesEntitytypeEntityidGet

const filesEntitytypeEntityidGetResponseBodyRt = rt.Array(fileRt);

/**
 * operation ID: filesEntitytypeEntityidGet
 * `GET: /files/{entitytype}/{entityid}`
 * Query File
 */
export const filesEntitytypeEntityidGet = buildCall() //
  .method('get')
  .path('/files/{entitytype}/{entityid}')
  .parseJson(withRuntype(filesEntitytypeEntityidGetResponseBodyRt))
  .build();

// Operation: filesEntitytypeEntityidPost

const filesEntitytypeEntityidPostArgsRt = rt
  .Record({ File: fileRt })
  .asReadonly();

/**
 * operation ID: filesEntitytypeEntityidPost
 * `POST: /files/{entitytype}/{entityid}`
 * Create File
 */
export const filesEntitytypeEntityidPost = buildCall() //
  .args<rt.Static<typeof filesEntitytypeEntityidPostArgsRt>>()
  .method('post')
  .path('/files/{entitytype}/{entityid}')
  .body((args) => args.File)
  .build();

// Operation: filetagsIdGet

const filetagsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: filetagsIdGet
 * `GET: /filetags/{id}`
 * Get FileTag
 */
export const filetagsIdGet = buildCall() //
  .args<rt.Static<typeof filetagsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/filetags/${args.id}`)
  .parseJson(withRuntype(fileTagRt))
  .build();

// Operation: filetagsIdDelete

const filetagsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: filetagsIdDelete
 * `DELETE: /filetags/{id}`
 * Delete FileTag
 */
export const filetagsIdDelete = buildCall() //
  .args<rt.Static<typeof filetagsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/filetags/${args.id}`)
  .parseJson(withRuntype(fileTagRt))
  .build();

// Operation: filetagsGet

const filetagsGetResponseBodyRt = rt.Array(fileTagRt);

/**
 * operation ID: filetagsGet
 * `GET: /filetags`
 * Query FileTag
 */
export const filetagsGet = buildCall() //
  .method('get')
  .path('/filetags')
  .parseJson(withRuntype(filetagsGetResponseBodyRt))
  .build();

// Operation: filetagsPost

const filetagsPostArgsRt = rt.Record({ FileTag: fileTagRt }).asReadonly();

/**
 * operation ID: filetagsPost
 * `POST: /filetags`
 * Create FileTag
 */
export const filetagsPost = buildCall() //
  .args<rt.Static<typeof filetagsPostArgsRt>>()
  .method('post')
  .path('/filetags')
  .body((args) => args.FileTag)
  .build();

// Operation: filetagsTagnamesStatusActionGetSupplierInvoiceInboxCountGet

const filetagsTagnamesStatusActionGetSupplierInvoiceInboxCountGetResponseBodyRt =
  rt.Number;

/**
 * operation ID:
 * filetagsTagnamesStatusActionGetSupplierInvoiceInboxCountGet
 * `GET:
 * /filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox-count`
 * get-supplierInvoice-inbox-count Action
 */
export const filetagsTagnamesStatusActionGetSupplierInvoiceInboxCountGet =
  buildCall() //
    .method('get')
    .path(
      '/filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox-count',
    )
    .parseJson(
      withRuntype(
        filetagsTagnamesStatusActionGetSupplierInvoiceInboxCountGetResponseBodyRt,
      ),
    )
    .build();

// Operation: filetagsTagnamesStatusActionGetSupplierInvoiceInboxGet

const filetagsTagnamesStatusActionGetSupplierInvoiceInboxGetArgsRt = rt
  .Record({ top: rt.Number, skip: rt.Number })
  .asPartial()
  .asReadonly();

const filetagsTagnamesStatusActionGetSupplierInvoiceInboxGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * filetagsTagnamesStatusActionGetSupplierInvoiceInboxGet
 * `GET:
 * /filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox`
 * get-supplierInvoice-inbox Action
 */
export const filetagsTagnamesStatusActionGetSupplierInvoiceInboxGet =
  buildCall() //
    .args<
      rt.Static<
        typeof filetagsTagnamesStatusActionGetSupplierInvoiceInboxGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/filetags/{tagnames}/{status}?action=get-supplierInvoice-inbox`,
    )
    .parseJson(
      withRuntype(
        filetagsTagnamesStatusActionGetSupplierInvoiceInboxGetResponseBodyRt,
      ),
    )
    .build();

// Operation: filetagsTagnamesStatusGet

const filetagsTagnamesStatusGetResponseBodyRt = rt.Array(fileRt);

/**
 * operation ID: filetagsTagnamesStatusGet
 * `GET: /filetags/{tagnames}/{status}`
 * Query File
 */
export const filetagsTagnamesStatusGet = buildCall() //
  .method('get')
  .path('/filetags/{tagnames}/{status}')
  .parseJson(withRuntype(filetagsTagnamesStatusGetResponseBodyRt))
  .build();

// Operation: permissionsIdGet

const permissionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: permissionsIdGet
 * `GET: /permissions/{id}`
 * Get Permission
 */
export const permissionsIdGet = buildCall() //
  .args<rt.Static<typeof permissionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/permissions/${args.id}`)
  .parseJson(withRuntype(permissionRt))
  .build();

// Operation: permissionsIdDelete

const permissionsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: permissionsIdDelete
 * `DELETE: /permissions/{id}`
 * Delete Permission
 */
export const permissionsIdDelete = buildCall() //
  .args<rt.Static<typeof permissionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/permissions/${args.id}`)
  .parseJson(withRuntype(permissionRt))
  .build();

// Operation: permissionsGet

const permissionsGetResponseBodyRt = rt.Array(permissionRt);

/**
 * operation ID: permissionsGet
 * `GET: /permissions`
 * Query Permission
 */
export const permissionsGet = buildCall() //
  .method('get')
  .path('/permissions')
  .parseJson(withRuntype(permissionsGetResponseBodyRt))
  .build();

// Operation: rolesIdGet

const rolesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: rolesIdGet
 * `GET: /roles/{id}`
 * Get Role
 */
export const rolesIdGet = buildCall() //
  .args<rt.Static<typeof rolesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/roles/${args.id}`)
  .parseJson(withRuntype(roleRt))
  .build();

// Operation: rolesIdPut

const rolesIdPutArgsRt = rt
  .Record({ id: rt.Number, Role: roleRt })
  .asReadonly();

/**
 * operation ID: rolesIdPut
 * `PUT: /roles/{id}`
 * Update Role
 */
export const rolesIdPut = buildCall() //
  .args<rt.Static<typeof rolesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/roles/${args.id}`)
  .body((args) => args.Role)
  .parseJson(withRuntype(roleRt))
  .build();

// Operation: rolesIdDelete

const rolesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: rolesIdDelete
 * `DELETE: /roles/{id}`
 * Delete Role
 */
export const rolesIdDelete = buildCall() //
  .args<rt.Static<typeof rolesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/roles/${args.id}`)
  .parseJson(withRuntype(roleRt))
  .build();

// Operation: rolesGet

const rolesGetResponseBodyRt = rt.Array(roleRt);

/**
 * operation ID: rolesGet
 * `GET: /roles`
 * Query Role
 */
export const rolesGet = buildCall() //
  .method('get')
  .path('/roles')
  .parseJson(withRuntype(rolesGetResponseBodyRt))
  .build();

// Operation: rolesPost

const rolesPostArgsRt = rt.Record({ Role: roleRt }).asReadonly();

/**
 * operation ID: rolesPost
 * `POST: /roles`
 * Create Role
 */
export const rolesPost = buildCall() //
  .args<rt.Static<typeof rolesPostArgsRt>>()
  .method('post')
  .path('/roles')
  .body((args) => args.Role)
  .build();

// Operation: userrolesActionBulkInsertRolesPost

const userrolesActionBulkInsertRolesPostArgsRt = rt
  .Record({ userRoles: rt.Array(userRoleRt) })
  .asPartial()
  .asReadonly();

const userrolesActionBulkInsertRolesPostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: userrolesActionBulkInsertRolesPost
 * `POST: /userroles?action=bulk-insert-roles`
 * bulk-insert-roles Action
 */
export const userrolesActionBulkInsertRolesPost = buildCall() //
  .args<rt.Static<typeof userrolesActionBulkInsertRolesPostArgsRt>>()
  .method('post')
  .path('/userroles?action=bulk-insert-roles')
  .body((args) => args.userRoles)
  .parseJson(withRuntype(userrolesActionBulkInsertRolesPostResponseBodyRt))
  .build();

// Operation: userrolesIdGet

const userrolesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: userrolesIdGet
 * `GET: /userroles/{id}`
 * Get UserRole
 */
export const userrolesIdGet = buildCall() //
  .args<rt.Static<typeof userrolesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/userroles/${args.id}`)
  .parseJson(withRuntype(userRoleRt))
  .build();

// Operation: userrolesIdPut

const userrolesIdPutArgsRt = rt
  .Record({ id: rt.Number, UserRole: userRoleRt })
  .asReadonly();

/**
 * operation ID: userrolesIdPut
 * `PUT: /userroles/{id}`
 * Update UserRole
 */
export const userrolesIdPut = buildCall() //
  .args<rt.Static<typeof userrolesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/userroles/${args.id}`)
  .body((args) => args.UserRole)
  .parseJson(withRuntype(userRoleRt))
  .build();

// Operation: userrolesIdDelete

const userrolesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: userrolesIdDelete
 * `DELETE: /userroles/{id}`
 * Delete UserRole
 */
export const userrolesIdDelete = buildCall() //
  .args<rt.Static<typeof userrolesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/userroles/${args.id}`)
  .parseJson(withRuntype(userRoleRt))
  .build();

// Operation: userrolesGet

const userrolesGetResponseBodyRt = rt.Array(userRoleRt);

/**
 * operation ID: userrolesGet
 * `GET: /userroles`
 * Query UserRole
 */
export const userrolesGet = buildCall() //
  .method('get')
  .path('/userroles')
  .parseJson(withRuntype(userrolesGetResponseBodyRt))
  .build();

// Operation: userrolesPost

const userrolesPostArgsRt = rt.Record({ UserRole: userRoleRt }).asReadonly();

/**
 * operation ID: userrolesPost
 * `POST: /userroles`
 * Create UserRole
 */
export const userrolesPost = buildCall() //
  .args<rt.Static<typeof userrolesPostArgsRt>>()
  .method('post')
  .path('/userroles')
  .body((args) => args.UserRole)
  .build();

// Operation: accountvisibilitygroupsIdGet

const accountvisibilitygroupsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountvisibilitygroupsIdGet
 * `GET: /accountvisibilitygroups/{id}`
 * Get AccountVisibilityGroup
 */
export const accountvisibilitygroupsIdGet = buildCall() //
  .args<rt.Static<typeof accountvisibilitygroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accountvisibilitygroups/${args.id}`)
  .parseJson(withRuntype(accountVisibilityGroupRt))
  .build();

// Operation: accountvisibilitygroupsIdPut

const accountvisibilitygroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, AccountVisibilityGroup: accountVisibilityGroupRt })
  .asReadonly();

/**
 * operation ID: accountvisibilitygroupsIdPut
 * `PUT: /accountvisibilitygroups/{id}`
 * Update AccountVisibilityGroup
 */
export const accountvisibilitygroupsIdPut = buildCall() //
  .args<rt.Static<typeof accountvisibilitygroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accountvisibilitygroups/${args.id}`)
  .body((args) => args.AccountVisibilityGroup)
  .parseJson(withRuntype(accountVisibilityGroupRt))
  .build();

// Operation: accountvisibilitygroupsIdDelete

const accountvisibilitygroupsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountvisibilitygroupsIdDelete
 * `DELETE: /accountvisibilitygroups/{id}`
 * Delete AccountVisibilityGroup
 */
export const accountvisibilitygroupsIdDelete = buildCall() //
  .args<rt.Static<typeof accountvisibilitygroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accountvisibilitygroups/${args.id}`)
  .parseJson(withRuntype(accountVisibilityGroupRt))
  .build();

// Operation: accountvisibilitygroupsGet

const accountvisibilitygroupsGetResponseBodyRt = rt.Array(
  accountVisibilityGroupRt,
);

/**
 * operation ID: accountvisibilitygroupsGet
 * `GET: /accountvisibilitygroups`
 * Query AccountVisibilityGroup
 */
export const accountvisibilitygroupsGet = buildCall() //
  .method('get')
  .path('/accountvisibilitygroups')
  .parseJson(withRuntype(accountvisibilitygroupsGetResponseBodyRt))
  .build();

// Operation: accountvisibilitygroupsPost

const accountvisibilitygroupsPostArgsRt = rt
  .Record({ AccountVisibilityGroup: accountVisibilityGroupRt })
  .asReadonly();

/**
 * operation ID: accountvisibilitygroupsPost
 * `POST: /accountvisibilitygroups`
 * Create AccountVisibilityGroup
 */
export const accountvisibilitygroupsPost = buildCall() //
  .args<rt.Static<typeof accountvisibilitygroupsPostArgsRt>>()
  .method('post')
  .path('/accountvisibilitygroups')
  .body((args) => args.AccountVisibilityGroup)
  .build();

// Operation: agaZonesActionGetAgasectorsGet

const agaZonesActionGetAgasectorsGetResponseBodyRt = rt.Array(aGASectorRt);

/**
 * operation ID: agaZonesActionGetAgasectorsGet
 * `GET: /AGAZones?action=get-agasectors`
 * get-agasectors Action
 */
export const agaZonesActionGetAgasectorsGet = buildCall() //
  .method('get')
  .path('/AGAZones?action=get-agasectors')
  .parseJson(withRuntype(agaZonesActionGetAgasectorsGetResponseBodyRt))
  .build();

// Operation: agaZonesIdGet

const agaZonesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: agaZonesIdGet
 * `GET: /AGAZones/{id}`
 * Get AGAZone
 */
export const agaZonesIdGet = buildCall() //
  .args<rt.Static<typeof agaZonesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/AGAZones/${args.id}`)
  .parseJson(withRuntype(aGAZoneRt))
  .build();

// Operation: agaZonesIdPut

const agaZonesIdPutArgsRt = rt
  .Record({ id: rt.Number, AGAZone: aGAZoneRt })
  .asReadonly();

/**
 * operation ID: agaZonesIdPut
 * `PUT: /AGAZones/{id}`
 * Update AGAZone
 */
export const agaZonesIdPut = buildCall() //
  .args<rt.Static<typeof agaZonesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/AGAZones/${args.id}`)
  .body((args) => args.AGAZone)
  .parseJson(withRuntype(aGAZoneRt))
  .build();

// Operation: agaZonesGet

const agaZonesGetResponseBodyRt = rt.Array(aGAZoneRt);

/**
 * operation ID: agaZonesGet
 * `GET: /AGAZones`
 * Query AGAZone
 */
export const agaZonesGet = buildCall() //
  .method('get')
  .path('/AGAZones')
  .parseJson(withRuntype(agaZonesGetResponseBodyRt))
  .build();

// Operation: agaZonesPost

const agaZonesPostArgsRt = rt.Record({ AGAZone: aGAZoneRt }).asReadonly();

/**
 * operation ID: agaZonesPost
 * `POST: /AGAZones`
 * Create AGAZone
 */
export const agaZonesPost = buildCall() //
  .args<rt.Static<typeof agaZonesPostArgsRt>>()
  .method('post')
  .path('/AGAZones')
  .body((args) => args.AGAZone)
  .build();

// Operation: agasumsActionFreeAmountSummaryGet

/**
 * operation ID: agasumsActionFreeAmountSummaryGet
 * `GET: /agasums?action=free-amount-summary`
 * free-amount-summary Action
 */
export const agasumsActionFreeAmountSummaryGet = buildCall() //
  .method('get')
  .path('/agasums?action=free-amount-summary')
  .parseJson(withRuntype(freeAmountSummaryRt))
  .build();

// Operation: agasumsIdGet

const agasumsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: agasumsIdGet
 * `GET: /agasums/{id}`
 * Get AGASums
 */
export const agasumsIdGet = buildCall() //
  .args<rt.Static<typeof agasumsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/agasums/${args.id}`)
  .parseJson(withRuntype(aGASumsRt))
  .build();

// Operation: agasumsIdPut

const agasumsIdPutArgsRt = rt
  .Record({ id: rt.Number, AGASums: aGASumsRt })
  .asReadonly();

/**
 * operation ID: agasumsIdPut
 * `PUT: /agasums/{id}`
 * Update AGASums
 */
export const agasumsIdPut = buildCall() //
  .args<rt.Static<typeof agasumsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/agasums/${args.id}`)
  .body((args) => args.AGASums)
  .parseJson(withRuntype(aGASumsRt))
  .build();

// Operation: agasumsIdDelete

const agasumsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: agasumsIdDelete
 * `DELETE: /agasums/{id}`
 * Delete AGASums
 */
export const agasumsIdDelete = buildCall() //
  .args<rt.Static<typeof agasumsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/agasums/${args.id}`)
  .parseJson(withRuntype(aGASumsRt))
  .build();

// Operation: agasumsGet

const agasumsGetResponseBodyRt = rt.Array(aGASumsRt);

/**
 * operation ID: agasumsGet
 * `GET: /agasums`
 * Query AGASums
 */
export const agasumsGet = buildCall() //
  .method('get')
  .path('/agasums')
  .parseJson(withRuntype(agasumsGetResponseBodyRt))
  .build();

// Operation: agasumsPost

const agasumsPostArgsRt = rt.Record({ AGASums: aGASumsRt }).asReadonly();

/**
 * operation ID: agasumsPost
 * `POST: /agasums`
 * Create AGASums
 */
export const agasumsPost = buildCall() //
  .args<rt.Static<typeof agasumsPostArgsRt>>()
  .method('post')
  .path('/agasums')
  .body((args) => args.AGASums)
  .build();

// Operation: agreementsActionCurrentGet

const agreementsActionCurrentGetArgsRt = rt
  .Record({ name: rt.String, appliesto: rt.Number })
  .asPartial()
  .asReadonly();

const agreementsActionCurrentGetResponseBodyRt = rt.String;

/**
 * operation ID: agreementsActionCurrentGet
 * `GET: /agreements?action=current`
 * current Action
 */
export const agreementsActionCurrentGet = buildCall() //
  .args<rt.Static<typeof agreementsActionCurrentGetArgsRt>>()
  .method('get')
  .path((args) => `/agreements?action=current`)
  .parseJson(withRuntype(agreementsActionCurrentGetResponseBodyRt))
  .build();

// Operation: agreementsIdGet

const agreementsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: agreementsIdGet
 * `GET: /agreements/{id}`
 * Get Agreement
 */
export const agreementsIdGet = buildCall() //
  .args<rt.Static<typeof agreementsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/agreements/${args.id}`)
  .parseJson(withRuntype(agreementRt))
  .build();

// Operation: agreementsIdPut

const agreementsIdPutArgsRt = rt
  .Record({ id: rt.Number, Agreement: agreementRt })
  .asReadonly();

/**
 * operation ID: agreementsIdPut
 * `PUT: /agreements/{id}`
 * Update Agreement
 */
export const agreementsIdPut = buildCall() //
  .args<rt.Static<typeof agreementsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/agreements/${args.id}`)
  .body((args) => args.Agreement)
  .parseJson(withRuntype(agreementRt))
  .build();

// Operation: agreementsIdDelete

const agreementsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: agreementsIdDelete
 * `DELETE: /agreements/{id}`
 * Delete Agreement
 */
export const agreementsIdDelete = buildCall() //
  .args<rt.Static<typeof agreementsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/agreements/${args.id}`)
  .parseJson(withRuntype(agreementRt))
  .build();

// Operation: agreementsGet

const agreementsGetResponseBodyRt = rt.Array(agreementRt);

/**
 * operation ID: agreementsGet
 * `GET: /agreements`
 * Query Agreement
 */
export const agreementsGet = buildCall() //
  .method('get')
  .path('/agreements')
  .parseJson(withRuntype(agreementsGetResponseBodyRt))
  .build();

// Operation: agreementsPost

const agreementsPostArgsRt = rt.Record({ Agreement: agreementRt }).asReadonly();

/**
 * operation ID: agreementsPost
 * `POST: /agreements`
 * Create Agreement
 */
export const agreementsPost = buildCall() //
  .args<rt.Static<typeof agreementsPostArgsRt>>()
  .method('post')
  .path('/agreements')
  .body((args) => args.Agreement)
  .build();

// Operation: altinnActionGetPinMessagePost

const altinnActionGetPinMessagePostArgsRt = rt
  .Record({ pinCodeRequest: altinnAuthRequestRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionGetPinMessagePost
 * `POST: /altinn?action=get-pin-message`
 * get-pin-message Action
 */
export const altinnActionGetPinMessagePost = buildCall() //
  .args<rt.Static<typeof altinnActionGetPinMessagePostArgsRt>>()
  .method('post')
  .path('/altinn?action=get-pin-message')
  .body((args) => args.pinCodeRequest)
  .parseJson(withRuntype(authenticationChallengeBERt))
  .build();

// Operation: altinnActionTestUserAuthenticationGet

const altinnActionTestUserAuthenticationGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: altinnActionTestUserAuthenticationGet
 * `GET: /altinn?action=test-user-authentication`
 * test-user-authentication Action
 */
export const altinnActionTestUserAuthenticationGet = buildCall() //
  .method('get')
  .path('/altinn?action=test-user-authentication')
  .parseJson(withRuntype(altinnActionTestUserAuthenticationGetResponseBodyRt))
  .build();

// Operation: altinnIdActionSendtaxrequestPost

const altinnIdActionSendtaxrequestPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      option: rt.String,
      empId: rt.Number,
      requestAllChanges: rt.Boolean,
      categoryID: rt.Number,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: altinnIdActionSendtaxrequestPost
 * `POST: /altinn/{id}?action=sendtaxrequest`
 * sendtaxrequest Action
 */
export const altinnIdActionSendtaxrequestPost = buildCall() //
  .args<rt.Static<typeof altinnIdActionSendtaxrequestPostArgsRt>>()
  .method('post')
  .path((args) => `/altinn/${args.id}?action=sendtaxrequest`)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnActionRequestTaxPost

const altinnActionRequestTaxPostArgsRt = rt
  .Record({ employeeIDs: rt.Number, requestAllChanges: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionRequestTaxPost
 * `POST: /altinn?action=request-tax`
 * request-tax Action
 */
export const altinnActionRequestTaxPost = buildCall() //
  .args<rt.Static<typeof altinnActionRequestTaxPostArgsRt>>()
  .method('post')
  .path((args) => `/altinn?action=request-tax`)
  .body((args) => args.employeeIDs)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnActionRequestTaxChangesPost

/**
 * operation ID: altinnActionRequestTaxChangesPost
 * `POST: /altinn?action=request-tax-changes`
 * request-tax-changes Action
 */
export const altinnActionRequestTaxChangesPost = buildCall() //
  .method('post')
  .path('/altinn?action=request-tax-changes')
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnActionSendA06RequestPost

const altinnActionSendA06RequestPostArgsRt = rt
  .Record({ options: a06OptionsRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionSendA06RequestPost
 * `POST: /altinn?action=send-a06-request`
 * send-a06-request Action
 */
export const altinnActionSendA06RequestPost = buildCall() //
  .args<rt.Static<typeof altinnActionSendA06RequestPostArgsRt>>()
  .method('post')
  .path('/altinn?action=send-a06-request')
  .body((args) => args.options)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnActionGetA07ResponseGet

const altinnActionGetA07ResponseGetArgsRt = rt
  .Record({ receiptID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionGetA07ResponseGet
 * `GET: /altinn?action=get-a07-response`
 * get-a07-response Action
 */
export const altinnActionGetA07ResponseGet = buildCall() //
  .args<rt.Static<typeof altinnActionGetA07ResponseGetArgsRt>>()
  .method('get')
  .path((args) => `/altinn?action=get-a07-response`)
  .parseJson(withRuntype(a07ResponseRt))
  .build();

// Operation: altinnActionSetpasswordPut

const altinnActionSetpasswordPutArgsRt = rt
  .Record({ password: rt.String })
  .asPartial()
  .asReadonly();

const altinnActionSetpasswordPutResponseBodyRt = rt.String;

/**
 * operation ID: altinnActionSetpasswordPut
 * `PUT: /altinn?action=setpassword`
 * setpassword Action
 */
export const altinnActionSetpasswordPut = buildCall() //
  .args<rt.Static<typeof altinnActionSetpasswordPutArgsRt>>()
  .method('put')
  .path((args) => `/altinn?action=setpassword`)
  .parseJson(withRuntype(altinnActionSetpasswordPutResponseBodyRt))
  .build();

// Operation: altinnActionPingAltinnPut

const altinnActionPingAltinnPutArgsRt = rt
  .Record({ token: rt.String })
  .asPartial()
  .asReadonly();

const altinnActionPingAltinnPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: altinnActionPingAltinnPut
 * `PUT: /altinn?action=ping-altinn`
 * ping-altinn Action
 */
export const altinnActionPingAltinnPut = buildCall() //
  .args<rt.Static<typeof altinnActionPingAltinnPutArgsRt>>()
  .method('put')
  .path((args) => `/altinn?action=ping-altinn`)
  .parseJson(withRuntype(altinnActionPingAltinnPutResponseBodyRt))
  .build();

// Operation: altinnActionGetpasswordGet

const altinnActionGetpasswordGetResponseBodyRt = rt.String;

/**
 * operation ID: altinnActionGetpasswordGet
 * `GET: /altinn?action=getpassword`
 * getpassword Action
 */
export const altinnActionGetpasswordGet = buildCall() //
  .method('get')
  .path('/altinn?action=getpassword')
  .parseJson(withRuntype(altinnActionGetpasswordGetResponseBodyRt))
  .build();

// Operation: altinnActionCheckloginGet

const altinnActionCheckloginGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: altinnActionCheckloginGet
 * `GET: /altinn?action=checklogin`
 * checklogin Action
 */
export const altinnActionCheckloginGet = buildCall() //
  .method('get')
  .path('/altinn?action=checklogin')
  .parseJson(withRuntype(altinnActionCheckloginGetResponseBodyRt))
  .build();

// Operation: altinnActionSendBarnepassPost

const altinnActionSendBarnepassPostArgsRt = rt
  .Record({ request: barnepassRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionSendBarnepassPost
 * `POST: /altinn?action=send-barnepass`
 * send-barnepass Action
 */
export const altinnActionSendBarnepassPost = buildCall() //
  .args<rt.Static<typeof altinnActionSendBarnepassPostArgsRt>>()
  .method('post')
  .path('/altinn?action=send-barnepass')
  .body((args) => args.request)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnActionIsBarnepassSendtGet

const altinnActionIsBarnepassSendtGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const altinnActionIsBarnepassSendtGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: altinnActionIsBarnepassSendtGet
 * `GET: /altinn?action=is-barnepass-sendt`
 * is-barnepass-sendt Action
 */
export const altinnActionIsBarnepassSendtGet = buildCall() //
  .args<rt.Static<typeof altinnActionIsBarnepassSendtGetArgsRt>>()
  .method('get')
  .path((args) => `/altinn?action=is-barnepass-sendt`)
  .parseJson(withRuntype(altinnActionIsBarnepassSendtGetResponseBodyRt))
  .build();

// Operation: altinnActionGetBarnepassGet

const altinnActionGetBarnepassGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionGetBarnepassGet
 * `GET: /altinn?action=get-barnepass`
 * get-barnepass Action
 */
export const altinnActionGetBarnepassGet = buildCall() //
  .args<rt.Static<typeof altinnActionGetBarnepassGetArgsRt>>()
  .method('get')
  .path((args) => `/altinn?action=get-barnepass`)
  .parseJson(withRuntype(barnepassRt))
  .build();

// Operation: altinnIdActionEmailBarnepassToCustomersPut

const altinnIdActionEmailBarnepassToCustomersPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, ssns: rt.Dictionary(rt.Unknown) })
    .asPartial()
    .asReadonly(),
);

const altinnIdActionEmailBarnepassToCustomersPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: altinnIdActionEmailBarnepassToCustomersPut
 * `PUT: /altinn/{id}?action=email-barnepass-to-customers`
 * email-barnepass-to-customers Action
 */
export const altinnIdActionEmailBarnepassToCustomersPut = buildCall() //
  .args<rt.Static<typeof altinnIdActionEmailBarnepassToCustomersPutArgsRt>>()
  .method('put')
  .path((args) => `/altinn/${args.id}?action=email-barnepass-to-customers`)
  .body((args) => args.ssns)
  .parseJson(
    withRuntype(altinnIdActionEmailBarnepassToCustomersPutResponseBodyRt),
  )
  .build();

// Operation: altinnActionSendSelfemployedPost

const altinnActionSendSelfemployedPostArgsRt = rt
  .Record({ request: selfEmployedRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnActionSendSelfemployedPost
 * `POST: /altinn?action=send-selfemployed`
 * send-selfemployed Action
 */
export const altinnActionSendSelfemployedPost = buildCall() //
  .args<rt.Static<typeof altinnActionSendSelfemployedPostArgsRt>>()
  .method('post')
  .path('/altinn?action=send-selfemployed')
  .body((args) => args.request)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnIdGet

const altinnIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnIdGet
 * `GET: /altinn/{id}`
 * Get Altinn
 */
export const altinnIdGet = buildCall() //
  .args<rt.Static<typeof altinnIdGetArgsRt>>()
  .method('get')
  .path((args) => `/altinn/${args.id}`)
  .parseJson(withRuntype(altinnRt))
  .build();

// Operation: altinnIdPut

const altinnIdPutArgsRt = rt
  .Record({ id: rt.Number, Altinn: altinnRt })
  .asReadonly();

/**
 * operation ID: altinnIdPut
 * `PUT: /altinn/{id}`
 * Update Altinn
 */
export const altinnIdPut = buildCall() //
  .args<rt.Static<typeof altinnIdPutArgsRt>>()
  .method('put')
  .path((args) => `/altinn/${args.id}`)
  .body((args) => args.Altinn)
  .parseJson(withRuntype(altinnRt))
  .build();

// Operation: altinnIdDelete

const altinnIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnIdDelete
 * `DELETE: /altinn/{id}`
 * Delete Altinn
 */
export const altinnIdDelete = buildCall() //
  .args<rt.Static<typeof altinnIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/altinn/${args.id}`)
  .parseJson(withRuntype(altinnRt))
  .build();

// Operation: altinnGet

const altinnGetResponseBodyRt = rt.Array(altinnRt);

/**
 * operation ID: altinnGet
 * `GET: /altinn`
 * Query Altinn
 */
export const altinnGet = buildCall() //
  .method('get')
  .path('/altinn')
  .parseJson(withRuntype(altinnGetResponseBodyRt))
  .build();

// Operation: altinnPost

const altinnPostArgsRt = rt.Record({ Altinn: altinnRt }).asReadonly();

/**
 * operation ID: altinnPost
 * `POST: /altinn`
 * Create Altinn
 */
export const altinnPost = buildCall() //
  .args<rt.Static<typeof altinnPostArgsRt>>()
  .method('post')
  .path('/altinn')
  .body((args) => args.Altinn)
  .build();

// Operation: altinnreceiptsIdActionUpdatePut

const altinnreceiptsIdActionUpdatePutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: altinnreceiptsIdActionUpdatePut
 * `PUT: /altinnreceipts/{id}?action=update`
 * update Action
 */
export const altinnreceiptsIdActionUpdatePut = buildCall() //
  .args<rt.Static<typeof altinnreceiptsIdActionUpdatePutArgsRt>>()
  .method('put')
  .path((args) => `/altinnreceipts/${args.id}?action=update`)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnreceiptsIdGet

const altinnreceiptsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnreceiptsIdGet
 * `GET: /altinnreceipts/{id}`
 * Get AltinnReceipt
 */
export const altinnreceiptsIdGet = buildCall() //
  .args<rt.Static<typeof altinnreceiptsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/altinnreceipts/${args.id}`)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnreceiptsIdPut

const altinnreceiptsIdPutArgsRt = rt
  .Record({ id: rt.Number, AltinnReceipt: altinnReceiptRt })
  .asReadonly();

/**
 * operation ID: altinnreceiptsIdPut
 * `PUT: /altinnreceipts/{id}`
 * Update AltinnReceipt
 */
export const altinnreceiptsIdPut = buildCall() //
  .args<rt.Static<typeof altinnreceiptsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/altinnreceipts/${args.id}`)
  .body((args) => args.AltinnReceipt)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: altinnreceiptsGet

const altinnreceiptsGetResponseBodyRt = rt.Array(altinnReceiptRt);

/**
 * operation ID: altinnreceiptsGet
 * `GET: /altinnreceipts`
 * Query AltinnReceipt
 */
export const altinnreceiptsGet = buildCall() //
  .method('get')
  .path('/altinnreceipts')
  .parseJson(withRuntype(altinnreceiptsGetResponseBodyRt))
  .build();

// Operation: altinnreceiptsPost

const altinnreceiptsPostArgsRt = rt
  .Record({ AltinnReceipt: altinnReceiptRt })
  .asReadonly();

/**
 * operation ID: altinnreceiptsPost
 * `POST: /altinnreceipts`
 * Create AltinnReceipt
 */
export const altinnreceiptsPost = buildCall() //
  .args<rt.Static<typeof altinnreceiptsPostArgsRt>>()
  .method('post')
  .path('/altinnreceipts')
  .body((args) => args.AltinnReceipt)
  .build();

// Operation: altinnsigningIdActionSignPost

const altinnsigningIdActionSignPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: altinnsigningIdActionSignPost
 * `POST: /altinnsigning/{id}?action=sign`
 * sign Transition
 */
export const altinnsigningIdActionSignPost = buildCall() //
  .args<rt.Static<typeof altinnsigningIdActionSignPostArgsRt>>()
  .method('post')
  .path((args) => `/altinnsigning/${args.id}?action=sign`)
  .build();

// Operation: altinnsigningIdGet

const altinnsigningIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnsigningIdGet
 * `GET: /altinnsigning/{id}`
 * Get AltinnSigning
 */
export const altinnsigningIdGet = buildCall() //
  .args<rt.Static<typeof altinnsigningIdGetArgsRt>>()
  .method('get')
  .path((args) => `/altinnsigning/${args.id}`)
  .parseJson(withRuntype(altinnSigningRt))
  .build();

// Operation: altinnsigningIdPut

const altinnsigningIdPutArgsRt = rt
  .Record({ id: rt.Number, AltinnSigning: altinnSigningRt })
  .asReadonly();

/**
 * operation ID: altinnsigningIdPut
 * `PUT: /altinnsigning/{id}`
 * Update AltinnSigning
 */
export const altinnsigningIdPut = buildCall() //
  .args<rt.Static<typeof altinnsigningIdPutArgsRt>>()
  .method('put')
  .path((args) => `/altinnsigning/${args.id}`)
  .body((args) => args.AltinnSigning)
  .parseJson(withRuntype(altinnSigningRt))
  .build();

// Operation: altinnsigningIdDelete

const altinnsigningIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnsigningIdDelete
 * `DELETE: /altinnsigning/{id}`
 * Delete AltinnSigning
 */
export const altinnsigningIdDelete = buildCall() //
  .args<rt.Static<typeof altinnsigningIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/altinnsigning/${args.id}`)
  .parseJson(withRuntype(altinnSigningRt))
  .build();

// Operation: altinnsigningGet

const altinnsigningGetResponseBodyRt = rt.Array(altinnSigningRt);

/**
 * operation ID: altinnsigningGet
 * `GET: /altinnsigning`
 * Query AltinnSigning
 */
export const altinnsigningGet = buildCall() //
  .method('get')
  .path('/altinnsigning')
  .parseJson(withRuntype(altinnsigningGetResponseBodyRt))
  .build();

// Operation: altinnsigningPost

const altinnsigningPostArgsRt = rt
  .Record({ AltinnSigning: altinnSigningRt })
  .asReadonly();

/**
 * operation ID: altinnsigningPost
 * `POST: /altinnsigning`
 * Create AltinnSigning
 */
export const altinnsigningPost = buildCall() //
  .args<rt.Static<typeof altinnsigningPostArgsRt>>()
  .method('post')
  .path('/altinnsigning')
  .body((args) => args.AltinnSigning)
  .build();

// Operation: apikeysActionSetintegrationkeyPut

const apikeysActionSetintegrationkeyPutArgsRt = rt
  .Record({ integrationID: rt.Number, integrationkey: rt.String })
  .asPartial()
  .asReadonly();

const apikeysActionSetintegrationkeyPutResponseBodyRt = rt.String;

/**
 * operation ID: apikeysActionSetintegrationkeyPut
 * `PUT: /apikeys?action=setintegrationkey`
 * setintegrationkey Action
 */
export const apikeysActionSetintegrationkeyPut = buildCall() //
  .args<rt.Static<typeof apikeysActionSetintegrationkeyPutArgsRt>>()
  .method('put')
  .path((args) => `/apikeys?action=setintegrationkey`)
  .parseJson(withRuntype(apikeysActionSetintegrationkeyPutResponseBodyRt))
  .build();

// Operation: apikeysActionSetIntegrationDataPut

const apikeysActionSetIntegrationDataPutArgsRt = rt
  .Record({ integrationID: rt.Number, data: setIntegrationDataDtoRt })
  .asPartial()
  .asReadonly();

const apikeysActionSetIntegrationDataPutResponseBodyRt = rt.String;

/**
 * operation ID: apikeysActionSetIntegrationDataPut
 * `PUT: /apikeys?action=set-integration-data`
 * set-integration-data Action
 */
export const apikeysActionSetIntegrationDataPut = buildCall() //
  .args<rt.Static<typeof apikeysActionSetIntegrationDataPutArgsRt>>()
  .method('put')
  .path((args) => `/apikeys?action=set-integration-data`)
  .body((args) => args.data)
  .parseJson(withRuntype(apikeysActionSetIntegrationDataPutResponseBodyRt))
  .build();

// Operation: apikeysActionGetIntegrationKeyGet

const apikeysActionGetIntegrationKeyGetArgsRt = rt
  .Record({ integrationID: rt.Number })
  .asPartial()
  .asReadonly();

const apikeysActionGetIntegrationKeyGetResponseBodyRt = rt.String;

/**
 * operation ID: apikeysActionGetIntegrationKeyGet
 * `GET: /apikeys?action=get-integration-key`
 * get-integration-key Action
 */
export const apikeysActionGetIntegrationKeyGet = buildCall() //
  .args<rt.Static<typeof apikeysActionGetIntegrationKeyGetArgsRt>>()
  .method('get')
  .path((args) => `/apikeys?action=get-integration-key`)
  .parseJson(withRuntype(apikeysActionGetIntegrationKeyGetResponseBodyRt))
  .build();

// Operation: apikeysActionSetIntegrationStatusPut

const apikeysActionSetIntegrationStatusPutArgsRt = rt
  .Record({ integrationID: rt.Number, statusCode: rt.Number })
  .asPartial()
  .asReadonly();

const apikeysActionSetIntegrationStatusPutResponseBodyRt = rt.String;

/**
 * operation ID: apikeysActionSetIntegrationStatusPut
 * `PUT: /apikeys?action=set-integration-status`
 * set-integration-status Action
 */
export const apikeysActionSetIntegrationStatusPut = buildCall() //
  .args<rt.Static<typeof apikeysActionSetIntegrationStatusPutArgsRt>>()
  .method('put')
  .path((args) => `/apikeys?action=set-integration-status`)
  .parseJson(withRuntype(apikeysActionSetIntegrationStatusPutResponseBodyRt))
  .build();

// Operation: apikeysIdGet

const apikeysIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: apikeysIdGet
 * `GET: /apikeys/{id}`
 * Get ApiKey
 */
export const apikeysIdGet = buildCall() //
  .args<rt.Static<typeof apikeysIdGetArgsRt>>()
  .method('get')
  .path((args) => `/apikeys/${args.id}`)
  .parseJson(withRuntype(apiKeyRt))
  .build();

// Operation: apikeysIdPut

const apikeysIdPutArgsRt = rt
  .Record({ id: rt.Number, ApiKey: apiKeyRt })
  .asReadonly();

/**
 * operation ID: apikeysIdPut
 * `PUT: /apikeys/{id}`
 * Update ApiKey
 */
export const apikeysIdPut = buildCall() //
  .args<rt.Static<typeof apikeysIdPutArgsRt>>()
  .method('put')
  .path((args) => `/apikeys/${args.id}`)
  .body((args) => args.ApiKey)
  .parseJson(withRuntype(apiKeyRt))
  .build();

// Operation: apikeysIdDelete

const apikeysIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: apikeysIdDelete
 * `DELETE: /apikeys/{id}`
 * Delete ApiKey
 */
export const apikeysIdDelete = buildCall() //
  .args<rt.Static<typeof apikeysIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/apikeys/${args.id}`)
  .parseJson(withRuntype(apiKeyRt))
  .build();

// Operation: apikeysGet

const apikeysGetResponseBodyRt = rt.Array(apiKeyRt);

/**
 * operation ID: apikeysGet
 * `GET: /apikeys`
 * Query ApiKey
 */
export const apikeysGet = buildCall() //
  .method('get')
  .path('/apikeys')
  .parseJson(withRuntype(apikeysGetResponseBodyRt))
  .build();

// Operation: apikeysPost

const apikeysPostArgsRt = rt.Record({ ApiKey: apiKeyRt }).asReadonly();

/**
 * operation ID: apikeysPost
 * `POST: /apikeys`
 * Create ApiKey
 */
export const apikeysPost = buildCall() //
  .args<rt.Static<typeof apikeysPostArgsRt>>()
  .method('post')
  .path('/apikeys')
  .body((args) => args.ApiKey)
  .build();

// Operation: companysettingsIdActionUpdateLogoPost

const companysettingsIdActionUpdateLogoPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ logoFileId: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: companysettingsIdActionUpdateLogoPost
 * `POST: /companysettings/{id}?action=update-logo`
 * update-logo Action
 */
export const companysettingsIdActionUpdateLogoPost = buildCall() //
  .args<rt.Static<typeof companysettingsIdActionUpdateLogoPostArgsRt>>()
  .method('post')
  .path((args) => `/companysettings/${args.id}?action=update-logo`)
  .build();

// Operation: companysettingsIdActionAcceptOcrAgreementPost

const companysettingsIdActionAcceptOcrAgreementPostArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companysettingsIdActionAcceptOcrAgreementPost
 * `POST: /companysettings/{id}?action=accept-ocr-agreement`
 * accept-ocr-agreement Action
 */
export const companysettingsIdActionAcceptOcrAgreementPost = buildCall() //
  .args<rt.Static<typeof companysettingsIdActionAcceptOcrAgreementPostArgsRt>>()
  .method('post')
  .path((args) => `/companysettings/${args.id}?action=accept-ocr-agreement`)
  .build();

// Operation: companysettingsIdActionRejectOcrAgreementPost

const companysettingsIdActionRejectOcrAgreementPostArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companysettingsIdActionRejectOcrAgreementPost
 * `POST: /companysettings/{id}?action=reject-ocr-agreement`
 * reject-ocr-agreement Action
 */
export const companysettingsIdActionRejectOcrAgreementPost = buildCall() //
  .args<rt.Static<typeof companysettingsIdActionRejectOcrAgreementPostArgsRt>>()
  .method('post')
  .path((args) => `/companysettings/${args.id}?action=reject-ocr-agreement`)
  .build();

// Operation: companysettingsActionChangePeriodSeriesPost

const companysettingsActionChangePeriodSeriesPostArgsRt = rt
  .Record({ periodSeriesID: rt.Number, accountYear: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: companysettingsActionChangePeriodSeriesPost
 * `POST: /companysettings?action=change-period-series`
 * change-period-series Action
 */
export const companysettingsActionChangePeriodSeriesPost = buildCall() //
  .args<rt.Static<typeof companysettingsActionChangePeriodSeriesPostArgsRt>>()
  .method('post')
  .path((args) => `/companysettings?action=change-period-series`)
  .build();

// Operation: companysettingsActionExistsGet

const companysettingsActionExistsGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: companysettingsActionExistsGet
 * `GET: /companysettings?action=exists`
 * exists Action
 */
export const companysettingsActionExistsGet = buildCall() //
  .method('get')
  .path('/companysettings?action=exists')
  .parseJson(withRuntype(companysettingsActionExistsGetResponseBodyRt))
  .build();

// Operation: companysettingsActionFillInFromBrregGet

const companysettingsActionFillInFromBrregGetArgsRt = rt
  .Record({ orgNumber: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: companysettingsActionFillInFromBrregGet
 * `GET: /companysettings?action=fill-in-from-brreg`
 * fill-in-from-brreg Action
 */
export const companysettingsActionFillInFromBrregGet = buildCall() //
  .args<rt.Static<typeof companysettingsActionFillInFromBrregGetArgsRt>>()
  .method('get')
  .path((args) => `/companysettings?action=fill-in-from-brreg`)
  .parseJson(withRuntype(companySettingsRt))
  .build();

// Operation: companysettingsIdActionActivateEinvoicePut

const companysettingsIdActionActivateEinvoicePutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companysettingsIdActionActivateEinvoicePut
 * `PUT: /companysettings/{id}?action=activate-einvoice`
 * activate-einvoice Action
 */
export const companysettingsIdActionActivateEinvoicePut = buildCall() //
  .args<rt.Static<typeof companysettingsIdActionActivateEinvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/companysettings/${args.id}?action=activate-einvoice`)
  .build();

// Operation: companysettingsIdGet

const companysettingsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companysettingsIdGet
 * `GET: /companysettings/{id}`
 * Get CompanySettings
 */
export const companysettingsIdGet = buildCall() //
  .args<rt.Static<typeof companysettingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companysettings/${args.id}`)
  .parseJson(withRuntype(companySettingsRt))
  .build();

// Operation: companysettingsIdPut

const companysettingsIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanySettings: companySettingsRt })
  .asReadonly();

/**
 * operation ID: companysettingsIdPut
 * `PUT: /companysettings/{id}`
 * Update CompanySettings
 */
export const companysettingsIdPut = buildCall() //
  .args<rt.Static<typeof companysettingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companysettings/${args.id}`)
  .body((args) => args.CompanySettings)
  .parseJson(withRuntype(companySettingsRt))
  .build();

// Operation: companysettingsIdDelete

const companysettingsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companysettingsIdDelete
 * `DELETE: /companysettings/{id}`
 * Delete CompanySettings
 */
export const companysettingsIdDelete = buildCall() //
  .args<rt.Static<typeof companysettingsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companysettings/${args.id}`)
  .parseJson(withRuntype(companySettingsRt))
  .build();

// Operation: companysettingsGet

const companysettingsGetResponseBodyRt = rt.Array(companySettingsRt);

/**
 * operation ID: companysettingsGet
 * `GET: /companysettings`
 * Query CompanySettings
 */
export const companysettingsGet = buildCall() //
  .method('get')
  .path('/companysettings')
  .parseJson(withRuntype(companysettingsGetResponseBodyRt))
  .build();

// Operation: companysettingsPost

const companysettingsPostArgsRt = rt
  .Record({ CompanySettings: companySettingsRt })
  .asReadonly();

/**
 * operation ID: companysettingsPost
 * `POST: /companysettings`
 * Create CompanySettings
 */
export const companysettingsPost = buildCall() //
  .args<rt.Static<typeof companysettingsPostArgsRt>>()
  .method('post')
  .path('/companysettings')
  .body((args) => args.CompanySettings)
  .build();

// Operation: companytypesIdGet

const companytypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companytypesIdGet
 * `GET: /companytypes/{id}`
 * Get CompanyType
 */
export const companytypesIdGet = buildCall() //
  .args<rt.Static<typeof companytypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companytypes/${args.id}`)
  .parseJson(withRuntype(companyTypeRt))
  .build();

// Operation: companytypesIdPut

const companytypesIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanyType: companyTypeRt })
  .asReadonly();

/**
 * operation ID: companytypesIdPut
 * `PUT: /companytypes/{id}`
 * Update CompanyType
 */
export const companytypesIdPut = buildCall() //
  .args<rt.Static<typeof companytypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companytypes/${args.id}`)
  .body((args) => args.CompanyType)
  .parseJson(withRuntype(companyTypeRt))
  .build();

// Operation: companytypesIdDelete

const companytypesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companytypesIdDelete
 * `DELETE: /companytypes/{id}`
 * Delete CompanyType
 */
export const companytypesIdDelete = buildCall() //
  .args<rt.Static<typeof companytypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companytypes/${args.id}`)
  .parseJson(withRuntype(companyTypeRt))
  .build();

// Operation: companytypesGet

const companytypesGetResponseBodyRt = rt.Array(companyTypeRt);

/**
 * operation ID: companytypesGet
 * `GET: /companytypes`
 * Query CompanyType
 */
export const companytypesGet = buildCall() //
  .method('get')
  .path('/companytypes')
  .parseJson(withRuntype(companytypesGetResponseBodyRt))
  .build();

// Operation: companytypesPost

const companytypesPostArgsRt = rt
  .Record({ CompanyType: companyTypeRt })
  .asReadonly();

/**
 * operation ID: companytypesPost
 * `POST: /companytypes`
 * Create CompanyType
 */
export const companytypesPost = buildCall() //
  .args<rt.Static<typeof companytypesPostArgsRt>>()
  .method('post')
  .path('/companytypes')
  .body((args) => args.CompanyType)
  .build();

// Operation: countriesActionGetByCountrycodeGet

/**
 * operation ID: countriesActionGetByCountrycodeGet
 * `GET: /countries?action=get-by-countrycode`
 * get-by-countrycode Action
 */
export const countriesActionGetByCountrycodeGet = buildCall() //
  .method('get')
  .path('/countries?action=get-by-countrycode')
  .parseJson(withRuntype(countryRt))
  .build();

// Operation: countriesIdGet

const countriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: countriesIdGet
 * `GET: /countries/{id}`
 * Get Country
 */
export const countriesIdGet = buildCall() //
  .args<rt.Static<typeof countriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/countries/${args.id}`)
  .parseJson(withRuntype(countryRt))
  .build();

// Operation: countriesIdPut

const countriesIdPutArgsRt = rt
  .Record({ id: rt.Number, Country: countryRt })
  .asReadonly();

/**
 * operation ID: countriesIdPut
 * `PUT: /countries/{id}`
 * Update Country
 */
export const countriesIdPut = buildCall() //
  .args<rt.Static<typeof countriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/countries/${args.id}`)
  .body((args) => args.Country)
  .parseJson(withRuntype(countryRt))
  .build();

// Operation: countriesIdDelete

const countriesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: countriesIdDelete
 * `DELETE: /countries/{id}`
 * Delete Country
 */
export const countriesIdDelete = buildCall() //
  .args<rt.Static<typeof countriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/countries/${args.id}`)
  .parseJson(withRuntype(countryRt))
  .build();

// Operation: countriesGet

const countriesGetResponseBodyRt = rt.Array(countryRt);

/**
 * operation ID: countriesGet
 * `GET: /countries`
 * Query Country
 */
export const countriesGet = buildCall() //
  .method('get')
  .path('/countries')
  .parseJson(withRuntype(countriesGetResponseBodyRt))
  .build();

// Operation: countriesPost

const countriesPostArgsRt = rt.Record({ Country: countryRt }).asReadonly();

/**
 * operation ID: countriesPost
 * `POST: /countries`
 * Create Country
 */
export const countriesPost = buildCall() //
  .args<rt.Static<typeof countriesPostArgsRt>>()
  .method('post')
  .path('/countries')
  .body((args) => args.Country)
  .build();

// Operation: currencycodesIdGet

const currencycodesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: currencycodesIdGet
 * `GET: /currencycodes/{id}`
 * Get CurrencyCode
 */
export const currencycodesIdGet = buildCall() //
  .args<rt.Static<typeof currencycodesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/currencycodes/${args.id}`)
  .parseJson(withRuntype(currencyCodeRt))
  .build();

// Operation: currencycodesIdPut

const currencycodesIdPutArgsRt = rt
  .Record({ id: rt.Number, CurrencyCode: currencyCodeRt })
  .asReadonly();

/**
 * operation ID: currencycodesIdPut
 * `PUT: /currencycodes/{id}`
 * Update CurrencyCode
 */
export const currencycodesIdPut = buildCall() //
  .args<rt.Static<typeof currencycodesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/currencycodes/${args.id}`)
  .body((args) => args.CurrencyCode)
  .parseJson(withRuntype(currencyCodeRt))
  .build();

// Operation: currencycodesIdDelete

const currencycodesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: currencycodesIdDelete
 * `DELETE: /currencycodes/{id}`
 * Delete CurrencyCode
 */
export const currencycodesIdDelete = buildCall() //
  .args<rt.Static<typeof currencycodesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/currencycodes/${args.id}`)
  .parseJson(withRuntype(currencyCodeRt))
  .build();

// Operation: currencycodesGet

const currencycodesGetResponseBodyRt = rt.Array(currencyCodeRt);

/**
 * operation ID: currencycodesGet
 * `GET: /currencycodes`
 * Query CurrencyCode
 */
export const currencycodesGet = buildCall() //
  .method('get')
  .path('/currencycodes')
  .parseJson(withRuntype(currencycodesGetResponseBodyRt))
  .build();

// Operation: currencycodesPost

const currencycodesPostArgsRt = rt
  .Record({ CurrencyCode: currencyCodeRt })
  .asReadonly();

/**
 * operation ID: currencycodesPost
 * `POST: /currencycodes`
 * Create CurrencyCode
 */
export const currencycodesPost = buildCall() //
  .args<rt.Static<typeof currencycodesPostArgsRt>>()
  .method('post')
  .path('/currencycodes')
  .body((args) => args.CurrencyCode)
  .build();

// Operation: currenciesActionGetAllExchangeRatesGet

const currenciesActionGetAllExchangeRatesGetArgsRt = rt
  .Record({ toCurrencyCodeID: rt.Number, currencyDate: rt.String })
  .asPartial()
  .asReadonly();

const currenciesActionGetAllExchangeRatesGetResponseBodyRt =
  rt.Array(currencyRateDataRt);

/**
 * operation ID: currenciesActionGetAllExchangeRatesGet
 * `GET: /currencies?action=get-all-exchange-rates`
 * get-all-exchange-rates Action
 */
export const currenciesActionGetAllExchangeRatesGet = buildCall() //
  .args<rt.Static<typeof currenciesActionGetAllExchangeRatesGetArgsRt>>()
  .method('get')
  .path((args) => `/currencies?action=get-all-exchange-rates`)
  .parseJson(withRuntype(currenciesActionGetAllExchangeRatesGetResponseBodyRt))
  .build();

// Operation: currenciesActionGetCurrencyExchangeRateGet

const currenciesActionGetCurrencyExchangeRateGetArgsRt = rt
  .Record({
    fromCurrencyCodeID: rt.Number,
    toCurrencyCodeID: rt.Number,
    currencyDate: rt.Unknown,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: currenciesActionGetCurrencyExchangeRateGet
 * `GET: /currencies?action=get-currency-exchange-rate`
 * get-currency-exchange-rate Action
 */
export const currenciesActionGetCurrencyExchangeRateGet = buildCall() //
  .args<rt.Static<typeof currenciesActionGetCurrencyExchangeRateGetArgsRt>>()
  .method('get')
  .path((args) => `/currencies?action=get-currency-exchange-rate`)
  .parseJson(withRuntype(currencyRateDataRt))
  .build();

// Operation: currenciesActionDownloadFromNorgesbankGet

const currenciesActionDownloadFromNorgesbankGetArgsRt = rt
  .Record({ downloadFromDate: rt.String })
  .asPartial()
  .asReadonly();

const currenciesActionDownloadFromNorgesbankGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: currenciesActionDownloadFromNorgesbankGet
 * `GET: /currencies?action=download-from-norgesbank`
 * download-from-norgesbank Action
 */
export const currenciesActionDownloadFromNorgesbankGet = buildCall() //
  .args<rt.Static<typeof currenciesActionDownloadFromNorgesbankGetArgsRt>>()
  .method('get')
  .path((args) => `/currencies?action=download-from-norgesbank`)
  .parseJson(
    withRuntype(currenciesActionDownloadFromNorgesbankGetResponseBodyRt),
  )
  .build();

// Operation: currenciesActionGetLatestCurrencyDownloadedDateGet

const currenciesActionGetLatestCurrencyDownloadedDateGetArgsRt = rt
  .Record({ downloadSource: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * currenciesActionGetLatestCurrencyDownloadedDateGet
 * `GET:
 * /currencies?action=get-latest-currency-downloaded-date`
 * get-latest-currency-downloaded-date Action
 */
export const currenciesActionGetLatestCurrencyDownloadedDateGet = buildCall() //
  .args<
    rt.Static<typeof currenciesActionGetLatestCurrencyDownloadedDateGetArgsRt>
  >()
  .method('get')
  .path((args) => `/currencies?action=get-latest-currency-downloaded-date`)
  .build();

// Operation: currenciesIdGet

const currenciesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: currenciesIdGet
 * `GET: /currencies/{id}`
 * Get Currency
 */
export const currenciesIdGet = buildCall() //
  .args<rt.Static<typeof currenciesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/currencies/${args.id}`)
  .parseJson(withRuntype(currencyRt))
  .build();

// Operation: currenciesIdPut

const currenciesIdPutArgsRt = rt
  .Record({ id: rt.Number, Currency: currencyRt })
  .asReadonly();

/**
 * operation ID: currenciesIdPut
 * `PUT: /currencies/{id}`
 * Update Currency
 */
export const currenciesIdPut = buildCall() //
  .args<rt.Static<typeof currenciesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/currencies/${args.id}`)
  .body((args) => args.Currency)
  .parseJson(withRuntype(currencyRt))
  .build();

// Operation: currenciesIdDelete

const currenciesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: currenciesIdDelete
 * `DELETE: /currencies/{id}`
 * Delete Currency
 */
export const currenciesIdDelete = buildCall() //
  .args<rt.Static<typeof currenciesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/currencies/${args.id}`)
  .parseJson(withRuntype(currencyRt))
  .build();

// Operation: currenciesGet

const currenciesGetResponseBodyRt = rt.Array(currencyRt);

/**
 * operation ID: currenciesGet
 * `GET: /currencies`
 * Query Currency
 */
export const currenciesGet = buildCall() //
  .method('get')
  .path('/currencies')
  .parseJson(withRuntype(currenciesGetResponseBodyRt))
  .build();

// Operation: currenciesPost

const currenciesPostArgsRt = rt.Record({ Currency: currencyRt }).asReadonly();

/**
 * operation ID: currenciesPost
 * `POST: /currencies`
 * Create Currency
 */
export const currenciesPost = buildCall() //
  .args<rt.Static<typeof currenciesPostArgsRt>>()
  .method('post')
  .path('/currencies')
  .body((args) => args.Currency)
  .build();

// Operation: currencyoverridesIdGet

const currencyoverridesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: currencyoverridesIdGet
 * `GET: /currencyoverrides/{id}`
 * Get CurrencyOverride
 */
export const currencyoverridesIdGet = buildCall() //
  .args<rt.Static<typeof currencyoverridesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/currencyoverrides/${args.id}`)
  .parseJson(withRuntype(currencyOverrideRt))
  .build();

// Operation: currencyoverridesIdPut

const currencyoverridesIdPutArgsRt = rt
  .Record({ id: rt.Number, CurrencyOverride: currencyOverrideRt })
  .asReadonly();

/**
 * operation ID: currencyoverridesIdPut
 * `PUT: /currencyoverrides/{id}`
 * Update CurrencyOverride
 */
export const currencyoverridesIdPut = buildCall() //
  .args<rt.Static<typeof currencyoverridesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/currencyoverrides/${args.id}`)
  .body((args) => args.CurrencyOverride)
  .parseJson(withRuntype(currencyOverrideRt))
  .build();

// Operation: currencyoverridesIdDelete

const currencyoverridesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: currencyoverridesIdDelete
 * `DELETE: /currencyoverrides/{id}`
 * Delete CurrencyOverride
 */
export const currencyoverridesIdDelete = buildCall() //
  .args<rt.Static<typeof currencyoverridesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/currencyoverrides/${args.id}`)
  .parseJson(withRuntype(currencyOverrideRt))
  .build();

// Operation: currencyoverridesGet

const currencyoverridesGetResponseBodyRt = rt.Array(currencyOverrideRt);

/**
 * operation ID: currencyoverridesGet
 * `GET: /currencyoverrides`
 * Query CurrencyOverride
 */
export const currencyoverridesGet = buildCall() //
  .method('get')
  .path('/currencyoverrides')
  .parseJson(withRuntype(currencyoverridesGetResponseBodyRt))
  .build();

// Operation: currencyoverridesPost

const currencyoverridesPostArgsRt = rt
  .Record({ CurrencyOverride: currencyOverrideRt })
  .asReadonly();

/**
 * operation ID: currencyoverridesPost
 * `POST: /currencyoverrides`
 * Create CurrencyOverride
 */
export const currencyoverridesPost = buildCall() //
  .args<rt.Static<typeof currencyoverridesPostArgsRt>>()
  .method('post')
  .path('/currencyoverrides')
  .body((args) => args.CurrencyOverride)
  .build();

// Operation: dimensionsettingsIdGet

const dimensionsettingsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimensionsettingsIdGet
 * `GET: /dimensionsettings/{id}`
 * Get DimensionSettings
 */
export const dimensionsettingsIdGet = buildCall() //
  .args<rt.Static<typeof dimensionsettingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/dimensionsettings/${args.id}`)
  .parseJson(withRuntype(dimensionSettingsRt))
  .build();

// Operation: dimensionsettingsIdPut

const dimensionsettingsIdPutArgsRt = rt
  .Record({ id: rt.Number, DimensionSettings: dimensionSettingsRt })
  .asReadonly();

/**
 * operation ID: dimensionsettingsIdPut
 * `PUT: /dimensionsettings/{id}`
 * Update DimensionSettings
 */
export const dimensionsettingsIdPut = buildCall() //
  .args<rt.Static<typeof dimensionsettingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/dimensionsettings/${args.id}`)
  .body((args) => args.DimensionSettings)
  .parseJson(withRuntype(dimensionSettingsRt))
  .build();

// Operation: dimensionsettingsIdDelete

const dimensionsettingsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: dimensionsettingsIdDelete
 * `DELETE: /dimensionsettings/{id}`
 * Delete DimensionSettings
 */
export const dimensionsettingsIdDelete = buildCall() //
  .args<rt.Static<typeof dimensionsettingsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/dimensionsettings/${args.id}`)
  .parseJson(withRuntype(dimensionSettingsRt))
  .build();

// Operation: dimensionsettingsGet

const dimensionsettingsGetResponseBodyRt = rt.Array(dimensionSettingsRt);

/**
 * operation ID: dimensionsettingsGet
 * `GET: /dimensionsettings`
 * Query DimensionSettings
 */
export const dimensionsettingsGet = buildCall() //
  .method('get')
  .path('/dimensionsettings')
  .parseJson(withRuntype(dimensionsettingsGetResponseBodyRt))
  .build();

// Operation: dimensionsettingsPost

const dimensionsettingsPostArgsRt = rt
  .Record({ DimensionSettings: dimensionSettingsRt })
  .asReadonly();

/**
 * operation ID: dimensionsettingsPost
 * `POST: /dimensionsettings`
 * Create DimensionSettings
 */
export const dimensionsettingsPost = buildCall() //
  .args<rt.Static<typeof dimensionsettingsPostArgsRt>>()
  .method('post')
  .path('/dimensionsettings')
  .body((args) => args.DimensionSettings)
  .build();

// Operation: distributionsActionDistributePut

const distributionsActionDistributePutArgsRt = rt
  .Record({ id: rt.Number, entityType: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: distributionsActionDistributePut
 * `PUT: /distributions?action=distribute`
 * distribute Action
 */
export const distributionsActionDistributePut = buildCall() //
  .args<rt.Static<typeof distributionsActionDistributePutArgsRt>>()
  .method('put')
  .path((args) => `/distributions?action=distribute`)
  .build();

// Operation: distributionsActionDistributeListPut

const distributionsActionDistributeListPutArgsRt = rt
  .Record({ ids: rt.String, entityType: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: distributionsActionDistributeListPut
 * `PUT: /distributions?action=distribute-list`
 * distribute-list Action
 */
export const distributionsActionDistributeListPut = buildCall() //
  .args<rt.Static<typeof distributionsActionDistributeListPutArgsRt>>()
  .method('put')
  .path((args) => `/distributions?action=distribute-list`)
  .build();

// Operation: distributionsActionDistributeWithDateAndTypePut

const distributionsActionDistributeWithDateAndTypePutArgsRt = rt
  .Record({
    id: rt.Number,
    entityType: rt.String,
    distributionType: rt.String,
    distributeDate: rt.Unknown,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * distributionsActionDistributeWithDateAndTypePut
 * `PUT: /distributions?action=distribute-with-date-and-type`
 * distribute-with-date-and-type Action
 */
export const distributionsActionDistributeWithDateAndTypePut = buildCall() //
  .args<
    rt.Static<typeof distributionsActionDistributeWithDateAndTypePutArgsRt>
  >()
  .method('put')
  .path((args) => `/distributions?action=distribute-with-date-and-type`)
  .build();

// Operation: distributionsActionDistributeWithDatePut

const distributionsActionDistributeWithDatePutArgsRt = rt
  .Record({ id: rt.Number, entityType: rt.String, distributeDate: rt.Unknown })
  .asPartial()
  .asReadonly();

/**
 * operation ID: distributionsActionDistributeWithDatePut
 * `PUT: /distributions?action=distribute-with-date`
 * distribute-with-date Action
 */
export const distributionsActionDistributeWithDatePut = buildCall() //
  .args<rt.Static<typeof distributionsActionDistributeWithDatePutArgsRt>>()
  .method('put')
  .path((args) => `/distributions?action=distribute-with-date`)
  .build();

// Operation: distributionsActionDistributeWithTypePut

const distributionsActionDistributeWithTypePutArgsRt = rt
  .Record({
    id: rt.Number,
    entityType: rt.String,
    distributionType: rt.String,
    emailDTO: emailDTORt,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: distributionsActionDistributeWithTypePut
 * `PUT: /distributions?action=distribute-with-type`
 * distribute-with-type Action
 */
export const distributionsActionDistributeWithTypePut = buildCall() //
  .args<rt.Static<typeof distributionsActionDistributeWithTypePutArgsRt>>()
  .method('put')
  .path((args) => `/distributions?action=distribute-with-type`)
  .body((args) => args.emailDTO)
  .build();

// Operation: distributionsActionEntitiesWithDistributionGet

const distributionsActionEntitiesWithDistributionGetArgsRt = rt
  .Record({ entityIds: rt.String, entityType: rt.String })
  .asPartial()
  .asReadonly();

const distributionsActionEntitiesWithDistributionGetResponseBodyRt = rt.Number;

/**
 * operation ID: distributionsActionEntitiesWithDistributionGet
 * `GET: /distributions?action=entities-with-distribution`
 * entities-with-distribution Action
 */
export const distributionsActionEntitiesWithDistributionGet = buildCall() //
  .args<
    rt.Static<typeof distributionsActionEntitiesWithDistributionGetArgsRt>
  >()
  .method('get')
  .path((args) => `/distributions?action=entities-with-distribution`)
  .parseJson(
    withRuntype(distributionsActionEntitiesWithDistributionGetResponseBodyRt),
  )
  .build();

// Operation: distributionsActionGetEntitytypeListGet

const distributionsActionGetEntitytypeListGetResponseBodyRt = rt.String;

/**
 * operation ID: distributionsActionGetEntitytypeListGet
 * `GET: /distributions?action=get-entitytype-list`
 * get-entitytype-list Action
 */
export const distributionsActionGetEntitytypeListGet = buildCall() //
  .method('get')
  .path('/distributions?action=get-entitytype-list')
  .parseJson(withRuntype(distributionsActionGetEntitytypeListGetResponseBodyRt))
  .build();

// Operation: distributionsActionGetEntitytypeDistributionplansGet

const distributionsActionGetEntitytypeDistributionplansGetArgsRt = rt
  .Record({ entityType: rt.String })
  .asPartial()
  .asReadonly();

const distributionsActionGetEntitytypeDistributionplansGetResponseBodyRt =
  rt.Array(distributionPlanRt);

/**
 * operation ID:
 * distributionsActionGetEntitytypeDistributionplansGet
 * `GET:
 * /distributions?action=get-entitytype-distributionplans`
 * get-entitytype-distributionplans Action
 */
export const distributionsActionGetEntitytypeDistributionplansGet = buildCall() //
  .args<
    rt.Static<typeof distributionsActionGetEntitytypeDistributionplansGetArgsRt>
  >()
  .method('get')
  .path((args) => `/distributions?action=get-entitytype-distributionplans`)
  .parseJson(
    withRuntype(
      distributionsActionGetEntitytypeDistributionplansGetResponseBodyRt,
    ),
  )
  .build();

// Operation: distributionsActionGetLegalElementtypesGet

const distributionsActionGetLegalElementtypesGetArgsRt = rt
  .Record({ entityType: rt.String })
  .asPartial()
  .asReadonly();

const distributionsActionGetLegalElementtypesGetResponseBodyRt = rt.Array(
  distributionPlanElementTypeRt,
);

/**
 * operation ID: distributionsActionGetLegalElementtypesGet
 * `GET: /distributions?action=get-legal-elementtypes`
 * get-legal-elementtypes Action
 */
export const distributionsActionGetLegalElementtypesGet = buildCall() //
  .args<rt.Static<typeof distributionsActionGetLegalElementtypesGetArgsRt>>()
  .method('get')
  .path((args) => `/distributions?action=get-legal-elementtypes`)
  .parseJson(
    withRuntype(distributionsActionGetLegalElementtypesGetResponseBodyRt),
  )
  .build();

// Operation: distributionsActionGetValidDistributionsGet

const distributionsActionGetValidDistributionsGetArgsRt = rt
  .Record({ planId: rt.Number, invoiceId: rt.Number })
  .asPartial()
  .asReadonly();

const distributionsActionGetValidDistributionsGetResponseBodyRt = rt.Array(
  distributionPlanElementValidationRt,
);

/**
 * operation ID: distributionsActionGetValidDistributionsGet
 * `GET: /distributions?action=get-valid-distributions`
 * get-valid-distributions Action
 */
export const distributionsActionGetValidDistributionsGet = buildCall() //
  .args<rt.Static<typeof distributionsActionGetValidDistributionsGetArgsRt>>()
  .method('get')
  .path((args) => `/distributions?action=get-valid-distributions`)
  .parseJson(
    withRuntype(distributionsActionGetValidDistributionsGetResponseBodyRt),
  )
  .build();

// Operation: distributionsActionGetValidDistributionsForCustomerGet

const distributionsActionGetValidDistributionsForCustomerGetArgsRt = rt
  .Record({ customerId: rt.Number })
  .asPartial()
  .asReadonly();

const distributionsActionGetValidDistributionsForCustomerGetResponseBodyRt =
  rt.Array(distributionPlanElementValidationRt);

/**
 * operation ID:
 * distributionsActionGetValidDistributionsForCustomerGet
 * `GET:
 * /distributions?action=get-valid-distributions-for-customer`
 * get-valid-distributions-for-customer Action
 */
export const distributionsActionGetValidDistributionsForCustomerGet =
  buildCall() //
    .args<
      rt.Static<
        typeof distributionsActionGetValidDistributionsForCustomerGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) => `/distributions?action=get-valid-distributions-for-customer`,
    )
    .parseJson(
      withRuntype(
        distributionsActionGetValidDistributionsForCustomerGetResponseBodyRt,
      ),
    )
    .build();

// Operation: distributionsActionGetValidDistributionsForCustomersGet

const distributionsActionGetValidDistributionsForCustomersGetArgsRt = rt
  .Record({ customerIds: rt.String })
  .asPartial()
  .asReadonly();

const distributionsActionGetValidDistributionsForCustomersGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * distributionsActionGetValidDistributionsForCustomersGet
 * `GET:
 * /distributions?action=get-valid-distributions-for-customers`
 * get-valid-distributions-for-customers Action
 */
export const distributionsActionGetValidDistributionsForCustomersGet =
  buildCall() //
    .args<
      rt.Static<
        typeof distributionsActionGetValidDistributionsForCustomersGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) => `/distributions?action=get-valid-distributions-for-customers`,
    )
    .parseJson(
      withRuntype(
        distributionsActionGetValidDistributionsForCustomersGetResponseBodyRt,
      ),
    )
    .build();

// Operation: distributionsActionIsValidDistributionGet

const distributionsActionIsValidDistributionGetArgsRt = rt
  .Record({ invoiceId: rt.Number, planElementType: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: distributionsActionIsValidDistributionGet
 * `GET: /distributions?action=is-valid-distribution`
 * is-valid-distribution Action
 */
export const distributionsActionIsValidDistributionGet = buildCall() //
  .args<rt.Static<typeof distributionsActionIsValidDistributionGetArgsRt>>()
  .method('get')
  .path((args) => `/distributions?action=is-valid-distribution`)
  .parseJson(withRuntype(distributionPlanElementValidationRt))
  .build();

// Operation: distributionsActionGetFirstValidDistributionGet

const distributionsActionGetFirstValidDistributionGetArgsRt = rt
  .Record({ planId: rt.Number, invoiceId: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * distributionsActionGetFirstValidDistributionGet
 * `GET: /distributions?action=get-first-valid-distribution`
 * get-first-valid-distribution Action
 */
export const distributionsActionGetFirstValidDistributionGet = buildCall() //
  .args<
    rt.Static<typeof distributionsActionGetFirstValidDistributionGetArgsRt>
  >()
  .method('get')
  .path((args) => `/distributions?action=get-first-valid-distribution`)
  .parseJson(withRuntype(distributionPlanElementValidationRt))
  .build();

// Operation: distributionsActionGetDistributionplanelementErrormapGet

const distributionsActionGetDistributionplanelementErrormapGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * distributionsActionGetDistributionplanelementErrormapGet
 * `GET:
 * /distributions?action=get-distributionplanelement-errormap`
 * get-distributionplanelement-errormap Action
 */
export const distributionsActionGetDistributionplanelementErrormapGet =
  buildCall() //
    .method('get')
    .path('/distributions?action=get-distributionplanelement-errormap')
    .parseJson(
      withRuntype(
        distributionsActionGetDistributionplanelementErrormapGetResponseBodyRt,
      ),
    )
    .build();

// Operation: distributionsIdGet

const distributionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: distributionsIdGet
 * `GET: /distributions/{id}`
 * Get DistributionPlan
 */
export const distributionsIdGet = buildCall() //
  .args<rt.Static<typeof distributionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/distributions/${args.id}`)
  .parseJson(withRuntype(distributionPlanRt))
  .build();

// Operation: distributionsIdPut

const distributionsIdPutArgsRt = rt
  .Record({ id: rt.Number, DistributionPlan: distributionPlanRt })
  .asReadonly();

/**
 * operation ID: distributionsIdPut
 * `PUT: /distributions/{id}`
 * Update DistributionPlan
 */
export const distributionsIdPut = buildCall() //
  .args<rt.Static<typeof distributionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/distributions/${args.id}`)
  .body((args) => args.DistributionPlan)
  .parseJson(withRuntype(distributionPlanRt))
  .build();

// Operation: distributionsIdDelete

const distributionsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: distributionsIdDelete
 * `DELETE: /distributions/{id}`
 * Delete DistributionPlan
 */
export const distributionsIdDelete = buildCall() //
  .args<rt.Static<typeof distributionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/distributions/${args.id}`)
  .parseJson(withRuntype(distributionPlanRt))
  .build();

// Operation: distributionsGet

const distributionsGetResponseBodyRt = rt.Array(distributionPlanRt);

/**
 * operation ID: distributionsGet
 * `GET: /distributions`
 * Query DistributionPlan
 */
export const distributionsGet = buildCall() //
  .method('get')
  .path('/distributions')
  .parseJson(withRuntype(distributionsGetResponseBodyRt))
  .build();

// Operation: distributionsPost

const distributionsPostArgsRt = rt
  .Record({ DistributionPlan: distributionPlanRt })
  .asReadonly();

/**
 * operation ID: distributionsPost
 * `POST: /distributions`
 * Create DistributionPlan
 */
export const distributionsPost = buildCall() //
  .args<rt.Static<typeof distributionsPostArgsRt>>()
  .method('post')
  .path('/distributions')
  .body((args) => args.DistributionPlan)
  .build();

// Operation: emailsActionSendPost

const emailsActionSendPostArgsRt = rt
  .Record({ email: sendEmailRt })
  .asPartial()
  .asReadonly();

const emailsActionSendPostResponseBodyRt = rt.Boolean;

/**
 * operation ID: emailsActionSendPost
 * `POST: /emails?action=send`
 * send Action
 */
export const emailsActionSendPost = buildCall() //
  .args<rt.Static<typeof emailsActionSendPostArgsRt>>()
  .method('post')
  .path('/emails?action=send')
  .body((args) => args.email)
  .parseJson(withRuntype(emailsActionSendPostResponseBodyRt))
  .build();

// Operation: emailsIdGet

const emailsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: emailsIdGet
 * `GET: /emails/{id}`
 * Get EmailLog
 */
export const emailsIdGet = buildCall() //
  .args<rt.Static<typeof emailsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/emails/${args.id}`)
  .parseJson(withRuntype(emailLogRt))
  .build();

// Operation: emailsIdPut

const emailsIdPutArgsRt = rt
  .Record({ id: rt.Number, EmailLog: emailLogRt })
  .asReadonly();

/**
 * operation ID: emailsIdPut
 * `PUT: /emails/{id}`
 * Update EmailLog
 */
export const emailsIdPut = buildCall() //
  .args<rt.Static<typeof emailsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/emails/${args.id}`)
  .body((args) => args.EmailLog)
  .parseJson(withRuntype(emailLogRt))
  .build();

// Operation: emailsIdDelete

const emailsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: emailsIdDelete
 * `DELETE: /emails/{id}`
 * Delete EmailLog
 */
export const emailsIdDelete = buildCall() //
  .args<rt.Static<typeof emailsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/emails/${args.id}`)
  .parseJson(withRuntype(emailLogRt))
  .build();

// Operation: emailsGet

const emailsGetResponseBodyRt = rt.Array(emailLogRt);

/**
 * operation ID: emailsGet
 * `GET: /emails`
 * Query EmailLog
 */
export const emailsGet = buildCall() //
  .method('get')
  .path('/emails')
  .parseJson(withRuntype(emailsGetResponseBodyRt))
  .build();

// Operation: emailsPost

const emailsPostArgsRt = rt.Record({ EmailLog: emailLogRt }).asReadonly();

/**
 * operation ID: emailsPost
 * `POST: /emails`
 * Create EmailLog
 */
export const emailsPost = buildCall() //
  .args<rt.Static<typeof emailsPostArgsRt>>()
  .method('post')
  .path('/emails')
  .body((args) => args.EmailLog)
  .build();

// Operation: employmentvalidvaluesIdGet

const employmentvalidvaluesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employmentvalidvaluesIdGet
 * `GET: /employmentvalidvalues/{id}`
 * Get EmploymentValidValues
 */
export const employmentvalidvaluesIdGet = buildCall() //
  .args<rt.Static<typeof employmentvalidvaluesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/employmentvalidvalues/${args.id}`)
  .parseJson(withRuntype(employmentValidValuesRt))
  .build();

// Operation: employmentvalidvaluesIdPut

const employmentvalidvaluesIdPutArgsRt = rt
  .Record({ id: rt.Number, EmploymentValidValues: employmentValidValuesRt })
  .asReadonly();

/**
 * operation ID: employmentvalidvaluesIdPut
 * `PUT: /employmentvalidvalues/{id}`
 * Update EmploymentValidValues
 */
export const employmentvalidvaluesIdPut = buildCall() //
  .args<rt.Static<typeof employmentvalidvaluesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/employmentvalidvalues/${args.id}`)
  .body((args) => args.EmploymentValidValues)
  .parseJson(withRuntype(employmentValidValuesRt))
  .build();

// Operation: employmentvalidvaluesIdDelete

const employmentvalidvaluesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: employmentvalidvaluesIdDelete
 * `DELETE: /employmentvalidvalues/{id}`
 * Delete EmploymentValidValues
 */
export const employmentvalidvaluesIdDelete = buildCall() //
  .args<rt.Static<typeof employmentvalidvaluesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/employmentvalidvalues/${args.id}`)
  .parseJson(withRuntype(employmentValidValuesRt))
  .build();

// Operation: employmentvalidvaluesGet

const employmentvalidvaluesGetResponseBodyRt = rt.Array(
  employmentValidValuesRt,
);

/**
 * operation ID: employmentvalidvaluesGet
 * `GET: /employmentvalidvalues`
 * Query EmploymentValidValues
 */
export const employmentvalidvaluesGet = buildCall() //
  .method('get')
  .path('/employmentvalidvalues')
  .parseJson(withRuntype(employmentvalidvaluesGetResponseBodyRt))
  .build();

// Operation: employmentvalidvaluesPost

const employmentvalidvaluesPostArgsRt = rt
  .Record({ EmploymentValidValues: employmentValidValuesRt })
  .asReadonly();

/**
 * operation ID: employmentvalidvaluesPost
 * `POST: /employmentvalidvalues`
 * Create EmploymentValidValues
 */
export const employmentvalidvaluesPost = buildCall() //
  .args<rt.Static<typeof employmentvalidvaluesPostArgsRt>>()
  .method('post')
  .path('/employmentvalidvalues')
  .body((args) => args.EmploymentValidValues)
  .build();

// Operation: eventplansIdGet

const eventplansIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: eventplansIdGet
 * `GET: /eventplans/{id}`
 * Get Eventplan
 */
export const eventplansIdGet = buildCall() //
  .args<rt.Static<typeof eventplansIdGetArgsRt>>()
  .method('get')
  .path((args) => `/eventplans/${args.id}`)
  .parseJson(withRuntype(eventplanRt))
  .build();

// Operation: eventplansIdPut

const eventplansIdPutArgsRt = rt
  .Record({ id: rt.Number, Eventplan: eventplanRt })
  .asReadonly();

/**
 * operation ID: eventplansIdPut
 * `PUT: /eventplans/{id}`
 * Update Eventplan
 */
export const eventplansIdPut = buildCall() //
  .args<rt.Static<typeof eventplansIdPutArgsRt>>()
  .method('put')
  .path((args) => `/eventplans/${args.id}`)
  .body((args) => args.Eventplan)
  .parseJson(withRuntype(eventplanRt))
  .build();

// Operation: eventplansIdDelete

const eventplansIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: eventplansIdDelete
 * `DELETE: /eventplans/{id}`
 * Delete Eventplan
 */
export const eventplansIdDelete = buildCall() //
  .args<rt.Static<typeof eventplansIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/eventplans/${args.id}`)
  .parseJson(withRuntype(eventplanRt))
  .build();

// Operation: eventplansGet

const eventplansGetResponseBodyRt = rt.Array(eventplanRt);

/**
 * operation ID: eventplansGet
 * `GET: /eventplans`
 * Query Eventplan
 */
export const eventplansGet = buildCall() //
  .method('get')
  .path('/eventplans')
  .parseJson(withRuntype(eventplansGetResponseBodyRt))
  .build();

// Operation: eventplansPost

const eventplansPostArgsRt = rt.Record({ Eventplan: eventplanRt }).asReadonly();

/**
 * operation ID: eventplansPost
 * `POST: /eventplans`
 * Create Eventplan
 */
export const eventplansPost = buildCall() //
  .args<rt.Static<typeof eventplansPostArgsRt>>()
  .method('post')
  .path('/eventplans')
  .body((args) => args.Eventplan)
  .build();

// Operation: eventsubscribersIdGet

const eventsubscribersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: eventsubscribersIdGet
 * `GET: /eventsubscribers/{id}`
 * Get EventSubscriber
 */
export const eventsubscribersIdGet = buildCall() //
  .args<rt.Static<typeof eventsubscribersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/eventsubscribers/${args.id}`)
  .parseJson(withRuntype(eventSubscriberRt))
  .build();

// Operation: eventsubscribersIdPut

const eventsubscribersIdPutArgsRt = rt
  .Record({ id: rt.Number, EventSubscriber: eventSubscriberRt })
  .asReadonly();

/**
 * operation ID: eventsubscribersIdPut
 * `PUT: /eventsubscribers/{id}`
 * Update EventSubscriber
 */
export const eventsubscribersIdPut = buildCall() //
  .args<rt.Static<typeof eventsubscribersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/eventsubscribers/${args.id}`)
  .body((args) => args.EventSubscriber)
  .parseJson(withRuntype(eventSubscriberRt))
  .build();

// Operation: eventsubscribersIdDelete

const eventsubscribersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: eventsubscribersIdDelete
 * `DELETE: /eventsubscribers/{id}`
 * Delete EventSubscriber
 */
export const eventsubscribersIdDelete = buildCall() //
  .args<rt.Static<typeof eventsubscribersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/eventsubscribers/${args.id}`)
  .parseJson(withRuntype(eventSubscriberRt))
  .build();

// Operation: eventsubscribersGet

const eventsubscribersGetResponseBodyRt = rt.Array(eventSubscriberRt);

/**
 * operation ID: eventsubscribersGet
 * `GET: /eventsubscribers`
 * Query EventSubscriber
 */
export const eventsubscribersGet = buildCall() //
  .method('get')
  .path('/eventsubscribers')
  .parseJson(withRuntype(eventsubscribersGetResponseBodyRt))
  .build();

// Operation: eventsubscribersPost

const eventsubscribersPostArgsRt = rt
  .Record({ EventSubscriber: eventSubscriberRt })
  .asReadonly();

/**
 * operation ID: eventsubscribersPost
 * `POST: /eventsubscribers`
 * Create EventSubscriber
 */
export const eventsubscribersPost = buildCall() //
  .args<rt.Static<typeof eventsubscribersPostArgsRt>>()
  .method('post')
  .path('/eventsubscribers')
  .body((args) => args.EventSubscriber)
  .build();

// Operation: expressionfiltersIdGet

const expressionfiltersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: expressionfiltersIdGet
 * `GET: /expressionfilters/{id}`
 * Get ExpressionFilter
 */
export const expressionfiltersIdGet = buildCall() //
  .args<rt.Static<typeof expressionfiltersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/expressionfilters/${args.id}`)
  .parseJson(withRuntype(expressionFilterRt))
  .build();

// Operation: expressionfiltersIdPut

const expressionfiltersIdPutArgsRt = rt
  .Record({ id: rt.Number, ExpressionFilter: expressionFilterRt })
  .asReadonly();

/**
 * operation ID: expressionfiltersIdPut
 * `PUT: /expressionfilters/{id}`
 * Update ExpressionFilter
 */
export const expressionfiltersIdPut = buildCall() //
  .args<rt.Static<typeof expressionfiltersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/expressionfilters/${args.id}`)
  .body((args) => args.ExpressionFilter)
  .parseJson(withRuntype(expressionFilterRt))
  .build();

// Operation: expressionfiltersIdDelete

const expressionfiltersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: expressionfiltersIdDelete
 * `DELETE: /expressionfilters/{id}`
 * Delete ExpressionFilter
 */
export const expressionfiltersIdDelete = buildCall() //
  .args<rt.Static<typeof expressionfiltersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/expressionfilters/${args.id}`)
  .parseJson(withRuntype(expressionFilterRt))
  .build();

// Operation: expressionfiltersGet

const expressionfiltersGetResponseBodyRt = rt.Array(expressionFilterRt);

/**
 * operation ID: expressionfiltersGet
 * `GET: /expressionfilters`
 * Query ExpressionFilter
 */
export const expressionfiltersGet = buildCall() //
  .method('get')
  .path('/expressionfilters')
  .parseJson(withRuntype(expressionfiltersGetResponseBodyRt))
  .build();

// Operation: expressionfiltersPost

const expressionfiltersPostArgsRt = rt
  .Record({ ExpressionFilter: expressionFilterRt })
  .asReadonly();

/**
 * operation ID: expressionfiltersPost
 * `POST: /expressionfilters`
 * Create ExpressionFilter
 */
export const expressionfiltersPost = buildCall() //
  .args<rt.Static<typeof expressionfiltersPostArgsRt>>()
  .method('post')
  .path('/expressionfilters')
  .body((args) => args.ExpressionFilter)
  .build();

// Operation: municipalAgaZonesIdGet

const municipalAgaZonesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: municipalAgaZonesIdGet
 * `GET: /MunicipalAGAZones/{id}`
 * Get MunicipalAGAZone
 */
export const municipalAgaZonesIdGet = buildCall() //
  .args<rt.Static<typeof municipalAgaZonesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/MunicipalAGAZones/${args.id}`)
  .parseJson(withRuntype(municipalAGAZoneRt))
  .build();

// Operation: municipalAgaZonesIdPut

const municipalAgaZonesIdPutArgsRt = rt
  .Record({ id: rt.Number, MunicipalAGAZone: municipalAGAZoneRt })
  .asReadonly();

/**
 * operation ID: municipalAgaZonesIdPut
 * `PUT: /MunicipalAGAZones/{id}`
 * Update MunicipalAGAZone
 */
export const municipalAgaZonesIdPut = buildCall() //
  .args<rt.Static<typeof municipalAgaZonesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/MunicipalAGAZones/${args.id}`)
  .body((args) => args.MunicipalAGAZone)
  .parseJson(withRuntype(municipalAGAZoneRt))
  .build();

// Operation: municipalAgaZonesIdDelete

const municipalAgaZonesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: municipalAgaZonesIdDelete
 * `DELETE: /MunicipalAGAZones/{id}`
 * Delete MunicipalAGAZone
 */
export const municipalAgaZonesIdDelete = buildCall() //
  .args<rt.Static<typeof municipalAgaZonesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/MunicipalAGAZones/${args.id}`)
  .parseJson(withRuntype(municipalAGAZoneRt))
  .build();

// Operation: municipalAgaZonesGet

const municipalAgaZonesGetResponseBodyRt = rt.Array(municipalAGAZoneRt);

/**
 * operation ID: municipalAgaZonesGet
 * `GET: /MunicipalAGAZones`
 * Query MunicipalAGAZone
 */
export const municipalAgaZonesGet = buildCall() //
  .method('get')
  .path('/MunicipalAGAZones')
  .parseJson(withRuntype(municipalAgaZonesGetResponseBodyRt))
  .build();

// Operation: municipalAgaZonesPost

const municipalAgaZonesPostArgsRt = rt
  .Record({ MunicipalAGAZone: municipalAGAZoneRt })
  .asReadonly();

/**
 * operation ID: municipalAgaZonesPost
 * `POST: /MunicipalAGAZones`
 * Create MunicipalAGAZone
 */
export const municipalAgaZonesPost = buildCall() //
  .args<rt.Static<typeof municipalAgaZonesPostArgsRt>>()
  .method('post')
  .path('/MunicipalAGAZones')
  .body((args) => args.MunicipalAGAZone)
  .build();

// Operation: municipalsIdGet

const municipalsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: municipalsIdGet
 * `GET: /Municipals/{id}`
 * Get Municipal
 */
export const municipalsIdGet = buildCall() //
  .args<rt.Static<typeof municipalsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/Municipals/${args.id}`)
  .parseJson(withRuntype(municipalRt))
  .build();

// Operation: municipalsIdPut

const municipalsIdPutArgsRt = rt
  .Record({ id: rt.Number, Municipal: municipalRt })
  .asReadonly();

/**
 * operation ID: municipalsIdPut
 * `PUT: /Municipals/{id}`
 * Update Municipal
 */
export const municipalsIdPut = buildCall() //
  .args<rt.Static<typeof municipalsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/Municipals/${args.id}`)
  .body((args) => args.Municipal)
  .parseJson(withRuntype(municipalRt))
  .build();

// Operation: municipalsIdDelete

const municipalsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: municipalsIdDelete
 * `DELETE: /Municipals/{id}`
 * Delete Municipal
 */
export const municipalsIdDelete = buildCall() //
  .args<rt.Static<typeof municipalsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Municipals/${args.id}`)
  .parseJson(withRuntype(municipalRt))
  .build();

// Operation: municipalsGet

const municipalsGetResponseBodyRt = rt.Array(municipalRt);

/**
 * operation ID: municipalsGet
 * `GET: /Municipals`
 * Query Municipal
 */
export const municipalsGet = buildCall() //
  .method('get')
  .path('/Municipals')
  .parseJson(withRuntype(municipalsGetResponseBodyRt))
  .build();

// Operation: municipalsPost

const municipalsPostArgsRt = rt.Record({ Municipal: municipalRt }).asReadonly();

/**
 * operation ID: municipalsPost
 * `POST: /Municipals`
 * Create Municipal
 */
export const municipalsPost = buildCall() //
  .args<rt.Static<typeof municipalsPostArgsRt>>()
  .method('post')
  .path('/Municipals')
  .body((args) => args.Municipal)
  .build();

// Operation: paymentCodesIdGet

const paymentCodesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentCodesIdGet
 * `GET: /paymentCodes/{id}`
 * Get PaymentCode
 */
export const paymentCodesIdGet = buildCall() //
  .args<rt.Static<typeof paymentCodesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/paymentCodes/${args.id}`)
  .parseJson(withRuntype(paymentCodeRt))
  .build();

// Operation: paymentCodesIdPut

const paymentCodesIdPutArgsRt = rt
  .Record({ id: rt.Number, PaymentCode: paymentCodeRt })
  .asReadonly();

/**
 * operation ID: paymentCodesIdPut
 * `PUT: /paymentCodes/{id}`
 * Update PaymentCode
 */
export const paymentCodesIdPut = buildCall() //
  .args<rt.Static<typeof paymentCodesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentCodes/${args.id}`)
  .body((args) => args.PaymentCode)
  .parseJson(withRuntype(paymentCodeRt))
  .build();

// Operation: paymentCodesIdDelete

const paymentCodesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentCodesIdDelete
 * `DELETE: /paymentCodes/{id}`
 * Delete PaymentCode
 */
export const paymentCodesIdDelete = buildCall() //
  .args<rt.Static<typeof paymentCodesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/paymentCodes/${args.id}`)
  .parseJson(withRuntype(paymentCodeRt))
  .build();

// Operation: paymentCodesGet

const paymentCodesGetResponseBodyRt = rt.Array(paymentCodeRt);

/**
 * operation ID: paymentCodesGet
 * `GET: /paymentCodes`
 * Query PaymentCode
 */
export const paymentCodesGet = buildCall() //
  .method('get')
  .path('/paymentCodes')
  .parseJson(withRuntype(paymentCodesGetResponseBodyRt))
  .build();

// Operation: paymentCodesPost

const paymentCodesPostArgsRt = rt
  .Record({ PaymentCode: paymentCodeRt })
  .asReadonly();

/**
 * operation ID: paymentCodesPost
 * `POST: /paymentCodes`
 * Create PaymentCode
 */
export const paymentCodesPost = buildCall() //
  .args<rt.Static<typeof paymentCodesPostArgsRt>>()
  .method('post')
  .path('/paymentCodes')
  .body((args) => args.PaymentCode)
  .build();

// Operation: periodesIdGet

const periodesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodesIdGet
 * `GET: /periodes/{id}`
 * Get Period
 */
export const periodesIdGet = buildCall() //
  .args<rt.Static<typeof periodesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/periodes/${args.id}`)
  .parseJson(withRuntype(periodRt))
  .build();

// Operation: periodesIdPut

const periodesIdPutArgsRt = rt
  .Record({ id: rt.Number, Period: periodRt })
  .asReadonly();

/**
 * operation ID: periodesIdPut
 * `PUT: /periodes/{id}`
 * Update Period
 */
export const periodesIdPut = buildCall() //
  .args<rt.Static<typeof periodesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/periodes/${args.id}`)
  .body((args) => args.Period)
  .parseJson(withRuntype(periodRt))
  .build();

// Operation: periodesIdDelete

const periodesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodesIdDelete
 * `DELETE: /periodes/{id}`
 * Delete Period
 */
export const periodesIdDelete = buildCall() //
  .args<rt.Static<typeof periodesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/periodes/${args.id}`)
  .parseJson(withRuntype(periodRt))
  .build();

// Operation: periodesGet

const periodesGetResponseBodyRt = rt.Array(periodRt);

/**
 * operation ID: periodesGet
 * `GET: /periodes`
 * Query Period
 */
export const periodesGet = buildCall() //
  .method('get')
  .path('/periodes')
  .parseJson(withRuntype(periodesGetResponseBodyRt))
  .build();

// Operation: periodesPost

const periodesPostArgsRt = rt.Record({ Period: periodRt }).asReadonly();

/**
 * operation ID: periodesPost
 * `POST: /periodes`
 * Create Period
 */
export const periodesPost = buildCall() //
  .args<rt.Static<typeof periodesPostArgsRt>>()
  .method('post')
  .path('/periodes')
  .body((args) => args.Period)
  .build();

// Operation: periodSeriesIdGet

const periodSeriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodSeriesIdGet
 * `GET: /period-series/{id}`
 * Get PeriodSeries
 */
export const periodSeriesIdGet = buildCall() //
  .args<rt.Static<typeof periodSeriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/period-series/${args.id}`)
  .parseJson(withRuntype(periodSeriesRt))
  .build();

// Operation: periodSeriesIdPut

const periodSeriesIdPutArgsRt = rt
  .Record({ id: rt.Number, PeriodSeries: periodSeriesRt })
  .asReadonly();

/**
 * operation ID: periodSeriesIdPut
 * `PUT: /period-series/{id}`
 * Update PeriodSeries
 */
export const periodSeriesIdPut = buildCall() //
  .args<rt.Static<typeof periodSeriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/period-series/${args.id}`)
  .body((args) => args.PeriodSeries)
  .parseJson(withRuntype(periodSeriesRt))
  .build();

// Operation: periodSeriesIdDelete

const periodSeriesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodSeriesIdDelete
 * `DELETE: /period-series/{id}`
 * Delete PeriodSeries
 */
export const periodSeriesIdDelete = buildCall() //
  .args<rt.Static<typeof periodSeriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/period-series/${args.id}`)
  .parseJson(withRuntype(periodSeriesRt))
  .build();

// Operation: periodSeriesGet

const periodSeriesGetResponseBodyRt = rt.Array(periodSeriesRt);

/**
 * operation ID: periodSeriesGet
 * `GET: /period-series`
 * Query PeriodSeries
 */
export const periodSeriesGet = buildCall() //
  .method('get')
  .path('/period-series')
  .parseJson(withRuntype(periodSeriesGetResponseBodyRt))
  .build();

// Operation: periodSeriesPost

const periodSeriesPostArgsRt = rt
  .Record({ PeriodSeries: periodSeriesRt })
  .asReadonly();

/**
 * operation ID: periodSeriesPost
 * `POST: /period-series`
 * Create PeriodSeries
 */
export const periodSeriesPost = buildCall() //
  .args<rt.Static<typeof periodSeriesPostArgsRt>>()
  .method('post')
  .path('/period-series')
  .body((args) => args.PeriodSeries)
  .build();

// Operation: periodTemplatesIdGet

const periodTemplatesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodTemplatesIdGet
 * `GET: /period-templates/{id}`
 * Get PeriodTemplate
 */
export const periodTemplatesIdGet = buildCall() //
  .args<rt.Static<typeof periodTemplatesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/period-templates/${args.id}`)
  .parseJson(withRuntype(periodTemplateRt))
  .build();

// Operation: periodTemplatesIdPut

const periodTemplatesIdPutArgsRt = rt
  .Record({ id: rt.Number, PeriodTemplate: periodTemplateRt })
  .asReadonly();

/**
 * operation ID: periodTemplatesIdPut
 * `PUT: /period-templates/{id}`
 * Update PeriodTemplate
 */
export const periodTemplatesIdPut = buildCall() //
  .args<rt.Static<typeof periodTemplatesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/period-templates/${args.id}`)
  .body((args) => args.PeriodTemplate)
  .parseJson(withRuntype(periodTemplateRt))
  .build();

// Operation: periodTemplatesIdDelete

const periodTemplatesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: periodTemplatesIdDelete
 * `DELETE: /period-templates/{id}`
 * Delete PeriodTemplate
 */
export const periodTemplatesIdDelete = buildCall() //
  .args<rt.Static<typeof periodTemplatesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/period-templates/${args.id}`)
  .parseJson(withRuntype(periodTemplateRt))
  .build();

// Operation: periodTemplatesGet

const periodTemplatesGetResponseBodyRt = rt.Array(periodTemplateRt);

/**
 * operation ID: periodTemplatesGet
 * `GET: /period-templates`
 * Query PeriodTemplate
 */
export const periodTemplatesGet = buildCall() //
  .method('get')
  .path('/period-templates')
  .parseJson(withRuntype(periodTemplatesGetResponseBodyRt))
  .build();

// Operation: periodTemplatesPost

const periodTemplatesPostArgsRt = rt
  .Record({ PeriodTemplate: periodTemplateRt })
  .asReadonly();

/**
 * operation ID: periodTemplatesPost
 * `POST: /period-templates`
 * Create PeriodTemplate
 */
export const periodTemplatesPost = buildCall() //
  .args<rt.Static<typeof periodTemplatesPostArgsRt>>()
  .method('post')
  .path('/period-templates')
  .body((args) => args.PeriodTemplate)
  .build();

// Operation: postalcodesIdGet

const postalcodesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: postalcodesIdGet
 * `GET: /postalcodes/{id}`
 * Get PostalCode
 */
export const postalcodesIdGet = buildCall() //
  .args<rt.Static<typeof postalcodesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/postalcodes/${args.id}`)
  .parseJson(withRuntype(postalCodeRt))
  .build();

// Operation: postalcodesIdPut

const postalcodesIdPutArgsRt = rt
  .Record({ id: rt.Number, PostalCode: postalCodeRt })
  .asReadonly();

/**
 * operation ID: postalcodesIdPut
 * `PUT: /postalcodes/{id}`
 * Update PostalCode
 */
export const postalcodesIdPut = buildCall() //
  .args<rt.Static<typeof postalcodesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/postalcodes/${args.id}`)
  .body((args) => args.PostalCode)
  .parseJson(withRuntype(postalCodeRt))
  .build();

// Operation: postalcodesIdDelete

const postalcodesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: postalcodesIdDelete
 * `DELETE: /postalcodes/{id}`
 * Delete PostalCode
 */
export const postalcodesIdDelete = buildCall() //
  .args<rt.Static<typeof postalcodesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/postalcodes/${args.id}`)
  .parseJson(withRuntype(postalCodeRt))
  .build();

// Operation: postalcodesGet

const postalcodesGetResponseBodyRt = rt.Array(postalCodeRt);

/**
 * operation ID: postalcodesGet
 * `GET: /postalcodes`
 * Query PostalCode
 */
export const postalcodesGet = buildCall() //
  .method('get')
  .path('/postalcodes')
  .parseJson(withRuntype(postalcodesGetResponseBodyRt))
  .build();

// Operation: postalcodesPost

const postalcodesPostArgsRt = rt
  .Record({ PostalCode: postalCodeRt })
  .asReadonly();

/**
 * operation ID: postalcodesPost
 * `POST: /postalcodes`
 * Create PostalCode
 */
export const postalcodesPost = buildCall() //
  .args<rt.Static<typeof postalcodesPostArgsRt>>()
  .method('post')
  .path('/postalcodes')
  .body((args) => args.PostalCode)
  .build();

// Operation: predefineddescriptionsActionGetPredefinedDescriptionGet

const predefineddescriptionsActionGetPredefinedDescriptionGetArgsRt = rt
  .Record({ code: rt.String, type: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * predefineddescriptionsActionGetPredefinedDescriptionGet
 * `GET:
 * /predefineddescriptions?action=get-predefined-description`
 * get-predefined-description Action
 */
export const predefineddescriptionsActionGetPredefinedDescriptionGet =
  buildCall() //
    .args<
      rt.Static<
        typeof predefineddescriptionsActionGetPredefinedDescriptionGetArgsRt
      >
    >()
    .method('get')
    .path((args) => `/predefineddescriptions?action=get-predefined-description`)
    .parseJson(withRuntype(predefinedDescriptionRt))
    .build();

// Operation: predefineddescriptionsActionGetPredefinedDescriptionsGet

const predefineddescriptionsActionGetPredefinedDescriptionsGetArgsRt = rt
  .Record({ type: rt.Number })
  .asPartial()
  .asReadonly();

const predefineddescriptionsActionGetPredefinedDescriptionsGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * predefineddescriptionsActionGetPredefinedDescriptionsGet
 * `GET:
 * /predefineddescriptions?action=get-predefined-descriptions`
 * get-predefined-descriptions Action
 */
export const predefineddescriptionsActionGetPredefinedDescriptionsGet =
  buildCall() //
    .args<
      rt.Static<
        typeof predefineddescriptionsActionGetPredefinedDescriptionsGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) => `/predefineddescriptions?action=get-predefined-descriptions`,
    )
    .parseJson(
      withRuntype(
        predefineddescriptionsActionGetPredefinedDescriptionsGetResponseBodyRt,
      ),
    )
    .build();

// Operation: predefineddescriptionsIdGet

const predefineddescriptionsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: predefineddescriptionsIdGet
 * `GET: /predefineddescriptions/{id}`
 * Get PredefinedDescription
 */
export const predefineddescriptionsIdGet = buildCall() //
  .args<rt.Static<typeof predefineddescriptionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/predefineddescriptions/${args.id}`)
  .parseJson(withRuntype(predefinedDescriptionRt))
  .build();

// Operation: predefineddescriptionsIdPut

const predefineddescriptionsIdPutArgsRt = rt
  .Record({ id: rt.Number, PredefinedDescription: predefinedDescriptionRt })
  .asReadonly();

/**
 * operation ID: predefineddescriptionsIdPut
 * `PUT: /predefineddescriptions/{id}`
 * Update PredefinedDescription
 */
export const predefineddescriptionsIdPut = buildCall() //
  .args<rt.Static<typeof predefineddescriptionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/predefineddescriptions/${args.id}`)
  .body((args) => args.PredefinedDescription)
  .parseJson(withRuntype(predefinedDescriptionRt))
  .build();

// Operation: predefineddescriptionsIdDelete

const predefineddescriptionsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: predefineddescriptionsIdDelete
 * `DELETE: /predefineddescriptions/{id}`
 * Delete PredefinedDescription
 */
export const predefineddescriptionsIdDelete = buildCall() //
  .args<rt.Static<typeof predefineddescriptionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/predefineddescriptions/${args.id}`)
  .parseJson(withRuntype(predefinedDescriptionRt))
  .build();

// Operation: predefineddescriptionsGet

const predefineddescriptionsGetResponseBodyRt = rt.Array(
  predefinedDescriptionRt,
);

/**
 * operation ID: predefineddescriptionsGet
 * `GET: /predefineddescriptions`
 * Query PredefinedDescription
 */
export const predefineddescriptionsGet = buildCall() //
  .method('get')
  .path('/predefineddescriptions')
  .parseJson(withRuntype(predefineddescriptionsGetResponseBodyRt))
  .build();

// Operation: predefineddescriptionsPost

const predefineddescriptionsPostArgsRt = rt
  .Record({ PredefinedDescription: predefinedDescriptionRt })
  .asReadonly();

/**
 * operation ID: predefineddescriptionsPost
 * `POST: /predefineddescriptions`
 * Create PredefinedDescription
 */
export const predefineddescriptionsPost = buildCall() //
  .args<rt.Static<typeof predefineddescriptionsPostArgsRt>>()
  .method('post')
  .path('/predefineddescriptions')
  .body((args) => args.PredefinedDescription)
  .build();

// Operation: rssActionRssGet

/**
 * operation ID: rssActionRssGet
 * `GET: /rss?action=rss`
 * rss Action
 */
export const rssActionRssGet = buildCall() //
  .method('get')
  .path('/rss?action=rss')
  .parseJson(withRuntype(rssListRt))
  .build();

// Operation: rssIdGet

const rssIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: rssIdGet
 * `GET: /rss/{id}`
 * Get RssList
 */
export const rssIdGet = buildCall() //
  .args<rt.Static<typeof rssIdGetArgsRt>>()
  .method('get')
  .path((args) => `/rss/${args.id}`)
  .parseJson(withRuntype(rssListRt))
  .build();

// Operation: salaryvalidvaluesActionGetallGet

const salaryvalidvaluesActionGetallGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: salaryvalidvaluesActionGetallGet
 * `GET: /salaryvalidvalues?action=getall`
 * getall Action
 */
export const salaryvalidvaluesActionGetallGet = buildCall() //
  .method('get')
  .path('/salaryvalidvalues?action=getall')
  .parseJson(withRuntype(salaryvalidvaluesActionGetallGetResponseBodyRt))
  .build();

// Operation: salaryvalidvalueTypesActionGetallGet

const salaryvalidvalueTypesActionGetallGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: salaryvalidvalueTypesActionGetallGet
 * `GET: /salaryvalidvalue/types?action=getall`
 * getall Action
 */
export const salaryvalidvalueTypesActionGetallGet = buildCall() //
  .method('get')
  .path('/salaryvalidvalue/types?action=getall')
  .parseJson(withRuntype(salaryvalidvalueTypesActionGetallGetResponseBodyRt))
  .build();

// Operation: sharingsIdActionCancelPost

const sharingsIdActionCancelPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: sharingsIdActionCancelPost
 * `POST: /sharings/{id}?action=Cancel`
 * Cancel Transition
 */
export const sharingsIdActionCancelPost = buildCall() //
  .args<rt.Static<typeof sharingsIdActionCancelPostArgsRt>>()
  .method('post')
  .path((args) => `/sharings/${args.id}?action=Cancel`)
  .build();

// Operation: sharingsActionBulkupdatePut

const sharingsActionBulkupdatePutArgsRt = rt
  .Record({ sharings: sharingUpdatesRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: sharingsActionBulkupdatePut
 * `PUT: /sharings?action=bulkupdate`
 * bulkupdate Action
 */
export const sharingsActionBulkupdatePut = buildCall() //
  .args<rt.Static<typeof sharingsActionBulkupdatePutArgsRt>>()
  .method('put')
  .path('/sharings?action=bulkupdate')
  .body((args) => args.sharings)
  .build();

// Operation: sharingsIdGet

const sharingsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: sharingsIdGet
 * `GET: /sharings/{id}`
 * Get Sharing
 */
export const sharingsIdGet = buildCall() //
  .args<rt.Static<typeof sharingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/sharings/${args.id}`)
  .parseJson(withRuntype(sharingRt))
  .build();

// Operation: sharingsIdPut

const sharingsIdPutArgsRt = rt
  .Record({ id: rt.Number, Sharing: sharingRt })
  .asReadonly();

/**
 * operation ID: sharingsIdPut
 * `PUT: /sharings/{id}`
 * Update Sharing
 */
export const sharingsIdPut = buildCall() //
  .args<rt.Static<typeof sharingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/sharings/${args.id}`)
  .body((args) => args.Sharing)
  .parseJson(withRuntype(sharingRt))
  .build();

// Operation: sharingsGet

const sharingsGetResponseBodyRt = rt.Array(sharingRt);

/**
 * operation ID: sharingsGet
 * `GET: /sharings`
 * Query Sharing
 */
export const sharingsGet = buildCall() //
  .method('get')
  .path('/sharings')
  .parseJson(withRuntype(sharingsGetResponseBodyRt))
  .build();

// Operation: sharingsPost

const sharingsPostArgsRt = rt.Record({ Sharing: sharingRt }).asReadonly();

/**
 * operation ID: sharingsPost
 * `POST: /sharings`
 * Create Sharing
 */
export const sharingsPost = buildCall() //
  .args<rt.Static<typeof sharingsPostArgsRt>>()
  .method('post')
  .path('/sharings')
  .body((args) => args.Sharing)
  .build();

// Operation: staticRegisterIdGet

const staticRegisterIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: staticRegisterIdGet
 * `GET: /StaticRegister/{id}`
 * Get StaticRegister
 */
export const staticRegisterIdGet = buildCall() //
  .args<rt.Static<typeof staticRegisterIdGetArgsRt>>()
  .method('get')
  .path((args) => `/StaticRegister/${args.id}`)
  .parseJson(withRuntype(staticRegisterRt))
  .build();

// Operation: staticRegisterIdPut

const staticRegisterIdPutArgsRt = rt
  .Record({ id: rt.Number, StaticRegister: staticRegisterRt })
  .asReadonly();

/**
 * operation ID: staticRegisterIdPut
 * `PUT: /StaticRegister/{id}`
 * Update StaticRegister
 */
export const staticRegisterIdPut = buildCall() //
  .args<rt.Static<typeof staticRegisterIdPutArgsRt>>()
  .method('put')
  .path((args) => `/StaticRegister/${args.id}`)
  .body((args) => args.StaticRegister)
  .parseJson(withRuntype(staticRegisterRt))
  .build();

// Operation: staticRegisterIdDelete

const staticRegisterIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: staticRegisterIdDelete
 * `DELETE: /StaticRegister/{id}`
 * Delete StaticRegister
 */
export const staticRegisterIdDelete = buildCall() //
  .args<rt.Static<typeof staticRegisterIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/StaticRegister/${args.id}`)
  .parseJson(withRuntype(staticRegisterRt))
  .build();

// Operation: staticRegisterGet

const staticRegisterGetResponseBodyRt = rt.Array(staticRegisterRt);

/**
 * operation ID: staticRegisterGet
 * `GET: /StaticRegister`
 * Query StaticRegister
 */
export const staticRegisterGet = buildCall() //
  .method('get')
  .path('/StaticRegister')
  .parseJson(withRuntype(staticRegisterGetResponseBodyRt))
  .build();

// Operation: staticRegisterPost

const staticRegisterPostArgsRt = rt
  .Record({ StaticRegister: staticRegisterRt })
  .asReadonly();

/**
 * operation ID: staticRegisterPost
 * `POST: /StaticRegister`
 * Create StaticRegister
 */
export const staticRegisterPost = buildCall() //
  .args<rt.Static<typeof staticRegisterPostArgsRt>>()
  .method('post')
  .path('/StaticRegister')
  .body((args) => args.StaticRegister)
  .build();

// Operation: styrkActionRefreshPut

const styrkActionRefreshPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: styrkActionRefreshPut
 * `PUT: /STYRK?action=refresh`
 * refresh Action
 */
export const styrkActionRefreshPut = buildCall() //
  .method('put')
  .path('/STYRK?action=refresh')
  .parseJson(withRuntype(styrkActionRefreshPutResponseBodyRt))
  .build();

// Operation: styrkIdGet

const styrkIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: styrkIdGet
 * `GET: /STYRK/{id}`
 * Get STYRKCode
 */
export const styrkIdGet = buildCall() //
  .args<rt.Static<typeof styrkIdGetArgsRt>>()
  .method('get')
  .path((args) => `/STYRK/${args.id}`)
  .parseJson(withRuntype(sTYRKCodeRt))
  .build();

// Operation: styrkGet

const styrkGetResponseBodyRt = rt.Array(sTYRKCodeRt);

/**
 * operation ID: styrkGet
 * `GET: /STYRK`
 * Query STYRKCode
 */
export const styrkGet = buildCall() //
  .method('get')
  .path('/STYRK')
  .parseJson(withRuntype(styrkGetResponseBodyRt))
  .build();

// Operation: invoiceitemsItemidTracelinksIdGet

const invoiceitemsItemidTracelinksIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoiceitemsItemidTracelinksIdGet
 * `GET: /invoiceitems/{itemid}/tracelinks/{id}`
 * Get Tracelink
 */
export const invoiceitemsItemidTracelinksIdGet = buildCall() //
  .args<rt.Static<typeof invoiceitemsItemidTracelinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/invoiceitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: invoiceitemsItemidTracelinksIdPut

const invoiceitemsItemidTracelinksIdPutArgsRt = rt
  .Record({ id: rt.Number, Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: invoiceitemsItemidTracelinksIdPut
 * `PUT: /invoiceitems/{itemid}/tracelinks/{id}`
 * Update Tracelink
 */
export const invoiceitemsItemidTracelinksIdPut = buildCall() //
  .args<rt.Static<typeof invoiceitemsItemidTracelinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/invoiceitems/{itemid}/tracelinks/${args.id}`)
  .body((args) => args.Tracelink)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: invoiceitemsItemidTracelinksIdDelete

const invoiceitemsItemidTracelinksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: invoiceitemsItemidTracelinksIdDelete
 * `DELETE: /invoiceitems/{itemid}/tracelinks/{id}`
 * Delete Tracelink
 */
export const invoiceitemsItemidTracelinksIdDelete = buildCall() //
  .args<rt.Static<typeof invoiceitemsItemidTracelinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/invoiceitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: invoiceitemsItemidTracelinksGet

const invoiceitemsItemidTracelinksGetResponseBodyRt = rt.Array(tracelinkRt);

/**
 * operation ID: invoiceitemsItemidTracelinksGet
 * `GET: /invoiceitems/{itemid}/tracelinks`
 * Query Tracelink
 */
export const invoiceitemsItemidTracelinksGet = buildCall() //
  .method('get')
  .path('/invoiceitems/{itemid}/tracelinks')
  .parseJson(withRuntype(invoiceitemsItemidTracelinksGetResponseBodyRt))
  .build();

// Operation: invoiceitemsItemidTracelinksPost

const invoiceitemsItemidTracelinksPostArgsRt = rt
  .Record({ Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: invoiceitemsItemidTracelinksPost
 * `POST: /invoiceitems/{itemid}/tracelinks`
 * Create Tracelink
 */
export const invoiceitemsItemidTracelinksPost = buildCall() //
  .args<rt.Static<typeof invoiceitemsItemidTracelinksPostArgsRt>>()
  .method('post')
  .path('/invoiceitems/{itemid}/tracelinks')
  .body((args) => args.Tracelink)
  .build();

// Operation: orderitemsItemidTracelinksIdGet

const orderitemsItemidTracelinksIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: orderitemsItemidTracelinksIdGet
 * `GET: /orderitems/{itemid}/tracelinks/{id}`
 * Get Tracelink
 */
export const orderitemsItemidTracelinksIdGet = buildCall() //
  .args<rt.Static<typeof orderitemsItemidTracelinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/orderitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: orderitemsItemidTracelinksIdPut

const orderitemsItemidTracelinksIdPutArgsRt = rt
  .Record({ id: rt.Number, Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: orderitemsItemidTracelinksIdPut
 * `PUT: /orderitems/{itemid}/tracelinks/{id}`
 * Update Tracelink
 */
export const orderitemsItemidTracelinksIdPut = buildCall() //
  .args<rt.Static<typeof orderitemsItemidTracelinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/orderitems/{itemid}/tracelinks/${args.id}`)
  .body((args) => args.Tracelink)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: orderitemsItemidTracelinksIdDelete

const orderitemsItemidTracelinksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: orderitemsItemidTracelinksIdDelete
 * `DELETE: /orderitems/{itemid}/tracelinks/{id}`
 * Delete Tracelink
 */
export const orderitemsItemidTracelinksIdDelete = buildCall() //
  .args<rt.Static<typeof orderitemsItemidTracelinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/orderitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: orderitemsItemidTracelinksGet

const orderitemsItemidTracelinksGetResponseBodyRt = rt.Array(tracelinkRt);

/**
 * operation ID: orderitemsItemidTracelinksGet
 * `GET: /orderitems/{itemid}/tracelinks`
 * Query Tracelink
 */
export const orderitemsItemidTracelinksGet = buildCall() //
  .method('get')
  .path('/orderitems/{itemid}/tracelinks')
  .parseJson(withRuntype(orderitemsItemidTracelinksGetResponseBodyRt))
  .build();

// Operation: orderitemsItemidTracelinksPost

const orderitemsItemidTracelinksPostArgsRt = rt
  .Record({ Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: orderitemsItemidTracelinksPost
 * `POST: /orderitems/{itemid}/tracelinks`
 * Create Tracelink
 */
export const orderitemsItemidTracelinksPost = buildCall() //
  .args<rt.Static<typeof orderitemsItemidTracelinksPostArgsRt>>()
  .method('post')
  .path('/orderitems/{itemid}/tracelinks')
  .body((args) => args.Tracelink)
  .build();

// Operation: quoteitemsItemidTracelinksIdGet

const quoteitemsItemidTracelinksIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: quoteitemsItemidTracelinksIdGet
 * `GET: /quoteitems/{itemid}/tracelinks/{id}`
 * Get Tracelink
 */
export const quoteitemsItemidTracelinksIdGet = buildCall() //
  .args<rt.Static<typeof quoteitemsItemidTracelinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/quoteitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: quoteitemsItemidTracelinksIdPut

const quoteitemsItemidTracelinksIdPutArgsRt = rt
  .Record({ id: rt.Number, Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: quoteitemsItemidTracelinksIdPut
 * `PUT: /quoteitems/{itemid}/tracelinks/{id}`
 * Update Tracelink
 */
export const quoteitemsItemidTracelinksIdPut = buildCall() //
  .args<rt.Static<typeof quoteitemsItemidTracelinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/quoteitems/{itemid}/tracelinks/${args.id}`)
  .body((args) => args.Tracelink)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: quoteitemsItemidTracelinksIdDelete

const quoteitemsItemidTracelinksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: quoteitemsItemidTracelinksIdDelete
 * `DELETE: /quoteitems/{itemid}/tracelinks/{id}`
 * Delete Tracelink
 */
export const quoteitemsItemidTracelinksIdDelete = buildCall() //
  .args<rt.Static<typeof quoteitemsItemidTracelinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/quoteitems/{itemid}/tracelinks/${args.id}`)
  .parseJson(withRuntype(tracelinkRt))
  .build();

// Operation: quoteitemsItemidTracelinksGet

const quoteitemsItemidTracelinksGetResponseBodyRt = rt.Array(tracelinkRt);

/**
 * operation ID: quoteitemsItemidTracelinksGet
 * `GET: /quoteitems/{itemid}/tracelinks`
 * Query Tracelink
 */
export const quoteitemsItemidTracelinksGet = buildCall() //
  .method('get')
  .path('/quoteitems/{itemid}/tracelinks')
  .parseJson(withRuntype(quoteitemsItemidTracelinksGetResponseBodyRt))
  .build();

// Operation: quoteitemsItemidTracelinksPost

const quoteitemsItemidTracelinksPostArgsRt = rt
  .Record({ Tracelink: tracelinkRt })
  .asReadonly();

/**
 * operation ID: quoteitemsItemidTracelinksPost
 * `POST: /quoteitems/{itemid}/tracelinks`
 * Create Tracelink
 */
export const quoteitemsItemidTracelinksPost = buildCall() //
  .args<rt.Static<typeof quoteitemsItemidTracelinksPostArgsRt>>()
  .method('post')
  .path('/quoteitems/{itemid}/tracelinks')
  .body((args) => args.Tracelink)
  .build();

// Operation: vatreportformsIdGet

const vatreportformsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatreportformsIdGet
 * `GET: /vatreportforms/{id}`
 * Get VatReportForm
 */
export const vatreportformsIdGet = buildCall() //
  .args<rt.Static<typeof vatreportformsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreportforms/${args.id}`)
  .parseJson(withRuntype(vatReportFormRt))
  .build();

// Operation: vatreportformsIdPut

const vatreportformsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatReportForm: vatReportFormRt })
  .asReadonly();

/**
 * operation ID: vatreportformsIdPut
 * `PUT: /vatreportforms/{id}`
 * Update VatReportForm
 */
export const vatreportformsIdPut = buildCall() //
  .args<rt.Static<typeof vatreportformsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatreportforms/${args.id}`)
  .body((args) => args.VatReportForm)
  .parseJson(withRuntype(vatReportFormRt))
  .build();

// Operation: vatreportformsIdDelete

const vatreportformsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatreportformsIdDelete
 * `DELETE: /vatreportforms/{id}`
 * Delete VatReportForm
 */
export const vatreportformsIdDelete = buildCall() //
  .args<rt.Static<typeof vatreportformsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatreportforms/${args.id}`)
  .parseJson(withRuntype(vatReportFormRt))
  .build();

// Operation: vatreportformsGet

const vatreportformsGetResponseBodyRt = rt.Array(vatReportFormRt);

/**
 * operation ID: vatreportformsGet
 * `GET: /vatreportforms`
 * Query VatReportForm
 */
export const vatreportformsGet = buildCall() //
  .method('get')
  .path('/vatreportforms')
  .parseJson(withRuntype(vatreportformsGetResponseBodyRt))
  .build();

// Operation: vatreportformsPost

const vatreportformsPostArgsRt = rt
  .Record({ VatReportForm: vatReportFormRt })
  .asReadonly();

/**
 * operation ID: vatreportformsPost
 * `POST: /vatreportforms`
 * Create VatReportForm
 */
export const vatreportformsPost = buildCall() //
  .args<rt.Static<typeof vatreportformsPostArgsRt>>()
  .method('post')
  .path('/vatreportforms')
  .body((args) => args.VatReportForm)
  .build();

// Operation: uniquerydefinitionsActionGetDistinctQuerydefinitionCategoriesGet

const uniquerydefinitionsActionGetDistinctQuerydefinitionCategoriesGetResponseBodyRt =
  rt.String;

/**
 * operation ID:
 * uniquerydefinitionsActionGetDistinctQuerydefinitionCategoriesGet
 * `GET:
 * /uniquerydefinitions?action=get-distinct-querydefinition-categories`
 * get-distinct-querydefinition-categories Action
 */
export const uniquerydefinitionsActionGetDistinctQuerydefinitionCategoriesGet =
  buildCall() //
    .method('get')
    .path('/uniquerydefinitions?action=get-distinct-querydefinition-categories')
    .parseJson(
      withRuntype(
        uniquerydefinitionsActionGetDistinctQuerydefinitionCategoriesGetResponseBodyRt,
      ),
    )
    .build();

// Operation: uniquerydefinitionsIdGet

const uniquerydefinitionsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: uniquerydefinitionsIdGet
 * `GET: /uniquerydefinitions/{id}`
 * Get UniQueryDefinition
 */
export const uniquerydefinitionsIdGet = buildCall() //
  .args<rt.Static<typeof uniquerydefinitionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/uniquerydefinitions/${args.id}`)
  .parseJson(withRuntype(uniQueryDefinitionRt))
  .build();

// Operation: uniquerydefinitionsIdPut

const uniquerydefinitionsIdPutArgsRt = rt
  .Record({ id: rt.Number, UniQueryDefinition: uniQueryDefinitionRt })
  .asReadonly();

/**
 * operation ID: uniquerydefinitionsIdPut
 * `PUT: /uniquerydefinitions/{id}`
 * Update UniQueryDefinition
 */
export const uniquerydefinitionsIdPut = buildCall() //
  .args<rt.Static<typeof uniquerydefinitionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/uniquerydefinitions/${args.id}`)
  .body((args) => args.UniQueryDefinition)
  .parseJson(withRuntype(uniQueryDefinitionRt))
  .build();

// Operation: uniquerydefinitionsIdDelete

const uniquerydefinitionsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: uniquerydefinitionsIdDelete
 * `DELETE: /uniquerydefinitions/{id}`
 * Delete UniQueryDefinition
 */
export const uniquerydefinitionsIdDelete = buildCall() //
  .args<rt.Static<typeof uniquerydefinitionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/uniquerydefinitions/${args.id}`)
  .parseJson(withRuntype(uniQueryDefinitionRt))
  .build();

// Operation: uniquerydefinitionsGet

const uniquerydefinitionsGetResponseBodyRt = rt.Array(uniQueryDefinitionRt);

/**
 * operation ID: uniquerydefinitionsGet
 * `GET: /uniquerydefinitions`
 * Query UniQueryDefinition
 */
export const uniquerydefinitionsGet = buildCall() //
  .method('get')
  .path('/uniquerydefinitions')
  .parseJson(withRuntype(uniquerydefinitionsGetResponseBodyRt))
  .build();

// Operation: uniquerydefinitionsPost

const uniquerydefinitionsPostArgsRt = rt
  .Record({ UniQueryDefinition: uniQueryDefinitionRt })
  .asReadonly();

/**
 * operation ID: uniquerydefinitionsPost
 * `POST: /uniquerydefinitions`
 * Create UniQueryDefinition
 */
export const uniquerydefinitionsPost = buildCall() //
  .args<rt.Static<typeof uniquerydefinitionsPostArgsRt>>()
  .method('post')
  .path('/uniquerydefinitions')
  .body((args) => args.UniQueryDefinition)
  .build();

// Operation: uniqueryfieldsIdGet

const uniqueryfieldsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: uniqueryfieldsIdGet
 * `GET: /uniqueryfields/{id}`
 * Get UniQueryField
 */
export const uniqueryfieldsIdGet = buildCall() //
  .args<rt.Static<typeof uniqueryfieldsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/uniqueryfields/${args.id}`)
  .parseJson(withRuntype(uniQueryFieldRt))
  .build();

// Operation: uniqueryfieldsIdPut

const uniqueryfieldsIdPutArgsRt = rt
  .Record({ id: rt.Number, UniQueryField: uniQueryFieldRt })
  .asReadonly();

/**
 * operation ID: uniqueryfieldsIdPut
 * `PUT: /uniqueryfields/{id}`
 * Update UniQueryField
 */
export const uniqueryfieldsIdPut = buildCall() //
  .args<rt.Static<typeof uniqueryfieldsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/uniqueryfields/${args.id}`)
  .body((args) => args.UniQueryField)
  .parseJson(withRuntype(uniQueryFieldRt))
  .build();

// Operation: uniqueryfieldsIdDelete

const uniqueryfieldsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: uniqueryfieldsIdDelete
 * `DELETE: /uniqueryfields/{id}`
 * Delete UniQueryField
 */
export const uniqueryfieldsIdDelete = buildCall() //
  .args<rt.Static<typeof uniqueryfieldsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/uniqueryfields/${args.id}`)
  .parseJson(withRuntype(uniQueryFieldRt))
  .build();

// Operation: uniqueryfieldsGet

const uniqueryfieldsGetResponseBodyRt = rt.Array(uniQueryFieldRt);

/**
 * operation ID: uniqueryfieldsGet
 * `GET: /uniqueryfields`
 * Query UniQueryField
 */
export const uniqueryfieldsGet = buildCall() //
  .method('get')
  .path('/uniqueryfields')
  .parseJson(withRuntype(uniqueryfieldsGetResponseBodyRt))
  .build();

// Operation: uniqueryfieldsPost

const uniqueryfieldsPostArgsRt = rt
  .Record({ UniQueryField: uniQueryFieldRt })
  .asReadonly();

/**
 * operation ID: uniqueryfieldsPost
 * `POST: /uniqueryfields`
 * Create UniQueryField
 */
export const uniqueryfieldsPost = buildCall() //
  .args<rt.Static<typeof uniqueryfieldsPostArgsRt>>()
  .method('post')
  .path('/uniqueryfields')
  .body((args) => args.UniQueryField)
  .build();

// Operation: uniqueryfiltersIdGet

const uniqueryfiltersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: uniqueryfiltersIdGet
 * `GET: /uniqueryfilters/{id}`
 * Get UniQueryFilter
 */
export const uniqueryfiltersIdGet = buildCall() //
  .args<rt.Static<typeof uniqueryfiltersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/uniqueryfilters/${args.id}`)
  .parseJson(withRuntype(uniQueryFilterRt))
  .build();

// Operation: uniqueryfiltersIdPut

const uniqueryfiltersIdPutArgsRt = rt
  .Record({ id: rt.Number, UniQueryFilter: uniQueryFilterRt })
  .asReadonly();

/**
 * operation ID: uniqueryfiltersIdPut
 * `PUT: /uniqueryfilters/{id}`
 * Update UniQueryFilter
 */
export const uniqueryfiltersIdPut = buildCall() //
  .args<rt.Static<typeof uniqueryfiltersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/uniqueryfilters/${args.id}`)
  .body((args) => args.UniQueryFilter)
  .parseJson(withRuntype(uniQueryFilterRt))
  .build();

// Operation: uniqueryfiltersIdDelete

const uniqueryfiltersIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: uniqueryfiltersIdDelete
 * `DELETE: /uniqueryfilters/{id}`
 * Delete UniQueryFilter
 */
export const uniqueryfiltersIdDelete = buildCall() //
  .args<rt.Static<typeof uniqueryfiltersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/uniqueryfilters/${args.id}`)
  .parseJson(withRuntype(uniQueryFilterRt))
  .build();

// Operation: uniqueryfiltersGet

const uniqueryfiltersGetResponseBodyRt = rt.Array(uniQueryFilterRt);

/**
 * operation ID: uniqueryfiltersGet
 * `GET: /uniqueryfilters`
 * Query UniQueryFilter
 */
export const uniqueryfiltersGet = buildCall() //
  .method('get')
  .path('/uniqueryfilters')
  .parseJson(withRuntype(uniqueryfiltersGetResponseBodyRt))
  .build();

// Operation: uniqueryfiltersPost

const uniqueryfiltersPostArgsRt = rt
  .Record({ UniQueryFilter: uniQueryFilterRt })
  .asReadonly();

/**
 * operation ID: uniqueryfiltersPost
 * `POST: /uniqueryfilters`
 * Create UniQueryFilter
 */
export const uniqueryfiltersPost = buildCall() //
  .args<rt.Static<typeof uniqueryfiltersPostArgsRt>>()
  .method('post')
  .path('/uniqueryfilters')
  .body((args) => args.UniQueryFilter)
  .build();

// Operation: teamsIdActionWorkReportGet

const teamsIdActionWorkReportGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: teamsIdActionWorkReportGet
 * `GET: /teams/{id}?action=work-report`
 * work-report Action
 */
export const teamsIdActionWorkReportGet = buildCall() //
  .args<rt.Static<typeof teamsIdActionWorkReportGetArgsRt>>()
  .method('get')
  .path((args) => `/teams/${args.id}?action=work-report`)
  .parseJson(withRuntype(teamReportRt))
  .build();

// Operation: teamsIdActionMyTeampositionGet

const teamsIdActionMyTeampositionGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: teamsIdActionMyTeampositionGet
 * `GET: /teams/{id}?action=my-teamposition`
 * my-teamposition Action
 */
export const teamsIdActionMyTeampositionGet = buildCall() //
  .args<rt.Static<typeof teamsIdActionMyTeampositionGetArgsRt>>()
  .method('get')
  .path((args) => `/teams/${args.id}?action=my-teamposition`)
  .parseJson(withRuntype(teamPositionDtoRt))
  .build();

// Operation: teamsActionMyTeamsGet

const teamsActionMyTeamsGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: teamsActionMyTeamsGet
 * `GET: /teams?action=my-teams`
 * my-teams Action
 */
export const teamsActionMyTeamsGet = buildCall() //
  .method('get')
  .path('/teams?action=my-teams')
  .parseJson(withRuntype(teamsActionMyTeamsGetResponseBodyRt))
  .build();

// Operation: teamsActionTeampositionsGet

const teamsActionTeampositionsGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: teamsActionTeampositionsGet
 * `GET: /teams?action=teampositions`
 * teampositions Action
 */
export const teamsActionTeampositionsGet = buildCall() //
  .method('get')
  .path('/teams?action=teampositions')
  .parseJson(withRuntype(teamsActionTeampositionsGetResponseBodyRt))
  .build();

// Operation: teamsIdGet

const teamsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: teamsIdGet
 * `GET: /teams/{id}`
 * Get Team
 */
export const teamsIdGet = buildCall() //
  .args<rt.Static<typeof teamsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/teams/${args.id}`)
  .parseJson(withRuntype(teamRt))
  .build();

// Operation: teamsIdPut

const teamsIdPutArgsRt = rt
  .Record({ id: rt.Number, Team: teamRt })
  .asReadonly();

/**
 * operation ID: teamsIdPut
 * `PUT: /teams/{id}`
 * Update Team
 */
export const teamsIdPut = buildCall() //
  .args<rt.Static<typeof teamsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/teams/${args.id}`)
  .body((args) => args.Team)
  .parseJson(withRuntype(teamRt))
  .build();

// Operation: teamsIdDelete

const teamsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: teamsIdDelete
 * `DELETE: /teams/{id}`
 * Delete Team
 */
export const teamsIdDelete = buildCall() //
  .args<rt.Static<typeof teamsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/teams/${args.id}`)
  .parseJson(withRuntype(teamRt))
  .build();

// Operation: teamsGet

const teamsGetResponseBodyRt = rt.Array(teamRt);

/**
 * operation ID: teamsGet
 * `GET: /teams`
 * Query Team
 */
export const teamsGet = buildCall() //
  .method('get')
  .path('/teams')
  .parseJson(withRuntype(teamsGetResponseBodyRt))
  .build();

// Operation: teamsPost

const teamsPostArgsRt = rt.Record({ Team: teamRt }).asReadonly();

/**
 * operation ID: teamsPost
 * `POST: /teams`
 * Create Team
 */
export const teamsPost = buildCall() //
  .args<rt.Static<typeof teamsPostArgsRt>>()
  .method('post')
  .path('/teams')
  .body((args) => args.Team)
  .build();

// Operation: teampositionsIdGet

const teampositionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: teampositionsIdGet
 * `GET: /teampositions/{id}`
 * Get TeamPosition
 */
export const teampositionsIdGet = buildCall() //
  .args<rt.Static<typeof teampositionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/teampositions/${args.id}`)
  .parseJson(withRuntype(teamPositionRt))
  .build();

// Operation: teampositionsIdPut

const teampositionsIdPutArgsRt = rt
  .Record({ id: rt.Number, TeamPosition: teamPositionRt })
  .asReadonly();

/**
 * operation ID: teampositionsIdPut
 * `PUT: /teampositions/{id}`
 * Update TeamPosition
 */
export const teampositionsIdPut = buildCall() //
  .args<rt.Static<typeof teampositionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/teampositions/${args.id}`)
  .body((args) => args.TeamPosition)
  .parseJson(withRuntype(teamPositionRt))
  .build();

// Operation: teampositionsIdDelete

const teampositionsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: teampositionsIdDelete
 * `DELETE: /teampositions/{id}`
 * Delete TeamPosition
 */
export const teampositionsIdDelete = buildCall() //
  .args<rt.Static<typeof teampositionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/teampositions/${args.id}`)
  .parseJson(withRuntype(teamPositionRt))
  .build();

// Operation: teampositionsGet

const teampositionsGetResponseBodyRt = rt.Array(teamPositionRt);

/**
 * operation ID: teampositionsGet
 * `GET: /teampositions`
 * Query TeamPosition
 */
export const teampositionsGet = buildCall() //
  .method('get')
  .path('/teampositions')
  .parseJson(withRuntype(teampositionsGetResponseBodyRt))
  .build();

// Operation: teampositionsPost

const teampositionsPostArgsRt = rt
  .Record({ TeamPosition: teamPositionRt })
  .asReadonly();

/**
 * operation ID: teampositionsPost
 * `POST: /teampositions`
 * Create TeamPosition
 */
export const teampositionsPost = buildCall() //
  .args<rt.Static<typeof teampositionsPostArgsRt>>()
  .method('post')
  .path('/teampositions')
  .body((args) => args.TeamPosition)
  .build();

// Operation: transitionsIdGet

const transitionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: transitionsIdGet
 * `GET: /transitions/{id}`
 * Get Transition
 */
export const transitionsIdGet = buildCall() //
  .args<rt.Static<typeof transitionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/transitions/${args.id}`)
  .parseJson(withRuntype(transitionRt))
  .build();

// Operation: transitionsGet

const transitionsGetResponseBodyRt = rt.Array(transitionRt);

/**
 * operation ID: transitionsGet
 * `GET: /transitions`
 * Query Transition
 */
export const transitionsGet = buildCall() //
  .method('get')
  .path('/transitions')
  .parseJson(withRuntype(transitionsGetResponseBodyRt))
  .build();

// Operation: companyReportIdGet

const companyReportIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companyReportIdGet
 * `GET: /company-report/{id}`
 * Get CompanyReport
 */
export const companyReportIdGet = buildCall() //
  .args<rt.Static<typeof companyReportIdGetArgsRt>>()
  .method('get')
  .path((args) => `/company-report/${args.id}`)
  .parseJson(withRuntype(companyReportRt))
  .build();

// Operation: companyReportIdPut

const companyReportIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanyReport: companyReportRt })
  .asReadonly();

/**
 * operation ID: companyReportIdPut
 * `PUT: /company-report/{id}`
 * Update CompanyReport
 */
export const companyReportIdPut = buildCall() //
  .args<rt.Static<typeof companyReportIdPutArgsRt>>()
  .method('put')
  .path((args) => `/company-report/${args.id}`)
  .body((args) => args.CompanyReport)
  .parseJson(withRuntype(companyReportRt))
  .build();

// Operation: companyReportIdDelete

const companyReportIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: companyReportIdDelete
 * `DELETE: /company-report/{id}`
 * Delete CompanyReport
 */
export const companyReportIdDelete = buildCall() //
  .args<rt.Static<typeof companyReportIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/company-report/${args.id}`)
  .parseJson(withRuntype(companyReportRt))
  .build();

// Operation: companyReportGet

const companyReportGetResponseBodyRt = rt.Array(companyReportRt);

/**
 * operation ID: companyReportGet
 * `GET: /company-report`
 * Query CompanyReport
 */
export const companyReportGet = buildCall() //
  .method('get')
  .path('/company-report')
  .parseJson(withRuntype(companyReportGetResponseBodyRt))
  .build();

// Operation: companyReportPost

const companyReportPostArgsRt = rt
  .Record({ CompanyReport: companyReportRt })
  .asReadonly();

/**
 * operation ID: companyReportPost
 * `POST: /company-report`
 * Create CompanyReport
 */
export const companyReportPost = buildCall() //
  .args<rt.Static<typeof companyReportPostArgsRt>>()
  .method('post')
  .path('/company-report')
  .body((args) => args.CompanyReport)
  .build();

// Operation: reportDefinitionsActionGetAllReportsGet

const reportDefinitionsActionGetAllReportsGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: reportDefinitionsActionGetAllReportsGet
 * `GET: /report-definitions?action=get-all-reports`
 * get-all-reports Action
 */
export const reportDefinitionsActionGetAllReportsGet = buildCall() //
  .method('get')
  .path('/report-definitions?action=get-all-reports')
  .parseJson(withRuntype(reportDefinitionsActionGetAllReportsGetResponseBodyRt))
  .build();

// Operation: reportDefinitionsActionGetCustomReportsGet

const reportDefinitionsActionGetCustomReportsGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: reportDefinitionsActionGetCustomReportsGet
 * `GET: /report-definitions?action=get-custom-reports`
 * get-custom-reports Action
 */
export const reportDefinitionsActionGetCustomReportsGet = buildCall() //
  .method('get')
  .path('/report-definitions?action=get-custom-reports')
  .parseJson(
    withRuntype(reportDefinitionsActionGetCustomReportsGetResponseBodyRt),
  )
  .build();

// Operation: reportDefinitionsActionLoadReportsGet

const reportDefinitionsActionLoadReportsGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: reportDefinitionsActionLoadReportsGet
 * `GET: /report-definitions?action=load-reports`
 * load-reports Action
 */
export const reportDefinitionsActionLoadReportsGet = buildCall() //
  .method('get')
  .path('/report-definitions?action=load-reports')
  .parseJson(withRuntype(reportDefinitionsActionLoadReportsGetResponseBodyRt))
  .build();

// Operation: reportDefinitionsIdActionClearReportCacheDelete

const reportDefinitionsIdActionClearReportCacheDeleteArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID:
 * reportDefinitionsIdActionClearReportCacheDelete
 * `DELETE: /report-definitions/{id}?action=clear-report-cache`
 * clear-report-cache Action
 */
export const reportDefinitionsIdActionClearReportCacheDelete = buildCall() //
  .args<
    rt.Static<typeof reportDefinitionsIdActionClearReportCacheDeleteArgsRt>
  >()
  .method('delete')
  .path((args) => `/report-definitions/${args.id}?action=clear-report-cache`)
  .build();

// Operation: reportDefinitionsIdGet

const reportDefinitionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: reportDefinitionsIdGet
 * `GET: /report-definitions/{id}`
 * Get ReportDefinition
 */
export const reportDefinitionsIdGet = buildCall() //
  .args<rt.Static<typeof reportDefinitionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/report-definitions/${args.id}`)
  .parseJson(withRuntype(reportDefinitionRt))
  .build();

// Operation: reportDefinitionsIdPut

const reportDefinitionsIdPutArgsRt = rt
  .Record({ id: rt.Number, ReportDefinition: reportDefinitionRt })
  .asReadonly();

/**
 * operation ID: reportDefinitionsIdPut
 * `PUT: /report-definitions/{id}`
 * Update ReportDefinition
 */
export const reportDefinitionsIdPut = buildCall() //
  .args<rt.Static<typeof reportDefinitionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/report-definitions/${args.id}`)
  .body((args) => args.ReportDefinition)
  .parseJson(withRuntype(reportDefinitionRt))
  .build();

// Operation: reportDefinitionsIdDelete

const reportDefinitionsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: reportDefinitionsIdDelete
 * `DELETE: /report-definitions/{id}`
 * Delete ReportDefinition
 */
export const reportDefinitionsIdDelete = buildCall() //
  .args<rt.Static<typeof reportDefinitionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/report-definitions/${args.id}`)
  .parseJson(withRuntype(reportDefinitionRt))
  .build();

// Operation: reportDefinitionsGet

const reportDefinitionsGetResponseBodyRt = rt.Array(reportDefinitionRt);

/**
 * operation ID: reportDefinitionsGet
 * `GET: /report-definitions`
 * Query ReportDefinition
 */
export const reportDefinitionsGet = buildCall() //
  .method('get')
  .path('/report-definitions')
  .parseJson(withRuntype(reportDefinitionsGetResponseBodyRt))
  .build();

// Operation: reportDefinitionsPost

const reportDefinitionsPostArgsRt = rt
  .Record({ ReportDefinition: reportDefinitionRt })
  .asReadonly();

/**
 * operation ID: reportDefinitionsPost
 * `POST: /report-definitions`
 * Create ReportDefinition
 */
export const reportDefinitionsPost = buildCall() //
  .args<rt.Static<typeof reportDefinitionsPostArgsRt>>()
  .method('post')
  .path('/report-definitions')
  .body((args) => args.ReportDefinition)
  .build();

// Operation: reportDefinitionDataSourcesIdGet

const reportDefinitionDataSourcesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: reportDefinitionDataSourcesIdGet
 * `GET: /report-definition-data-sources/{id}`
 * Get ReportDefinitionDataSource
 */
export const reportDefinitionDataSourcesIdGet = buildCall() //
  .args<rt.Static<typeof reportDefinitionDataSourcesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/report-definition-data-sources/${args.id}`)
  .parseJson(withRuntype(reportDefinitionDataSourceRt))
  .build();

// Operation: reportDefinitionDataSourcesIdPut

const reportDefinitionDataSourcesIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    ReportDefinitionDataSource: reportDefinitionDataSourceRt,
  })
  .asReadonly();

/**
 * operation ID: reportDefinitionDataSourcesIdPut
 * `PUT: /report-definition-data-sources/{id}`
 * Update ReportDefinitionDataSource
 */
export const reportDefinitionDataSourcesIdPut = buildCall() //
  .args<rt.Static<typeof reportDefinitionDataSourcesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/report-definition-data-sources/${args.id}`)
  .body((args) => args.ReportDefinitionDataSource)
  .parseJson(withRuntype(reportDefinitionDataSourceRt))
  .build();

// Operation: reportDefinitionDataSourcesIdDelete

const reportDefinitionDataSourcesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: reportDefinitionDataSourcesIdDelete
 * `DELETE: /report-definition-data-sources/{id}`
 * Delete ReportDefinitionDataSource
 */
export const reportDefinitionDataSourcesIdDelete = buildCall() //
  .args<rt.Static<typeof reportDefinitionDataSourcesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/report-definition-data-sources/${args.id}`)
  .parseJson(withRuntype(reportDefinitionDataSourceRt))
  .build();

// Operation: reportDefinitionDataSourcesGet

const reportDefinitionDataSourcesGetResponseBodyRt = rt.Array(
  reportDefinitionDataSourceRt,
);

/**
 * operation ID: reportDefinitionDataSourcesGet
 * `GET: /report-definition-data-sources`
 * Query ReportDefinitionDataSource
 */
export const reportDefinitionDataSourcesGet = buildCall() //
  .method('get')
  .path('/report-definition-data-sources')
  .parseJson(withRuntype(reportDefinitionDataSourcesGetResponseBodyRt))
  .build();

// Operation: reportDefinitionDataSourcesPost

const reportDefinitionDataSourcesPostArgsRt = rt
  .Record({ ReportDefinitionDataSource: reportDefinitionDataSourceRt })
  .asReadonly();

/**
 * operation ID: reportDefinitionDataSourcesPost
 * `POST: /report-definition-data-sources`
 * Create ReportDefinitionDataSource
 */
export const reportDefinitionDataSourcesPost = buildCall() //
  .args<rt.Static<typeof reportDefinitionDataSourcesPostArgsRt>>()
  .method('post')
  .path('/report-definition-data-sources')
  .body((args) => args.ReportDefinitionDataSource)
  .build();

// Operation: reportDefinitionParametersIdGet

const reportDefinitionParametersIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: reportDefinitionParametersIdGet
 * `GET: /report-definition-parameters/{id}`
 * Get ReportDefinitionParameter
 */
export const reportDefinitionParametersIdGet = buildCall() //
  .args<rt.Static<typeof reportDefinitionParametersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/report-definition-parameters/${args.id}`)
  .parseJson(withRuntype(reportDefinitionParameterRt))
  .build();

// Operation: reportDefinitionParametersIdPut

const reportDefinitionParametersIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    ReportDefinitionParameter: reportDefinitionParameterRt,
  })
  .asReadonly();

/**
 * operation ID: reportDefinitionParametersIdPut
 * `PUT: /report-definition-parameters/{id}`
 * Update ReportDefinitionParameter
 */
export const reportDefinitionParametersIdPut = buildCall() //
  .args<rt.Static<typeof reportDefinitionParametersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/report-definition-parameters/${args.id}`)
  .body((args) => args.ReportDefinitionParameter)
  .parseJson(withRuntype(reportDefinitionParameterRt))
  .build();

// Operation: reportDefinitionParametersIdDelete

const reportDefinitionParametersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: reportDefinitionParametersIdDelete
 * `DELETE: /report-definition-parameters/{id}`
 * Delete ReportDefinitionParameter
 */
export const reportDefinitionParametersIdDelete = buildCall() //
  .args<rt.Static<typeof reportDefinitionParametersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/report-definition-parameters/${args.id}`)
  .parseJson(withRuntype(reportDefinitionParameterRt))
  .build();

// Operation: reportDefinitionParametersGet

const reportDefinitionParametersGetResponseBodyRt = rt.Array(
  reportDefinitionParameterRt,
);

/**
 * operation ID: reportDefinitionParametersGet
 * `GET: /report-definition-parameters`
 * Query ReportDefinitionParameter
 */
export const reportDefinitionParametersGet = buildCall() //
  .method('get')
  .path('/report-definition-parameters')
  .parseJson(withRuntype(reportDefinitionParametersGetResponseBodyRt))
  .build();

// Operation: reportDefinitionParametersPost

const reportDefinitionParametersPostArgsRt = rt
  .Record({ ReportDefinitionParameter: reportDefinitionParameterRt })
  .asReadonly();

/**
 * operation ID: reportDefinitionParametersPost
 * `POST: /report-definition-parameters`
 * Create ReportDefinitionParameter
 */
export const reportDefinitionParametersPost = buildCall() //
  .args<rt.Static<typeof reportDefinitionParametersPostArgsRt>>()
  .method('post')
  .path('/report-definition-parameters')
  .body((args) => args.ReportDefinitionParameter)
  .build();

// Operation: projectsActionAllWithIsUsedPropGet

const projectsActionAllWithIsUsedPropGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: projectsActionAllWithIsUsedPropGet
 * `GET: /projects?action=all-with-isUsed-prop`
 * all-with-isUsed-prop Action
 */
export const projectsActionAllWithIsUsedPropGet = buildCall() //
  .method('get')
  .path('/projects?action=all-with-isUsed-prop')
  .parseJson(withRuntype(projectsActionAllWithIsUsedPropGetResponseBodyRt))
  .build();

// Operation: projectsIdActionIsUsedGet

const projectsIdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const projectsIdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: projectsIdActionIsUsedGet
 * `GET: /projects/{id}?action=is-used`
 * is-used Action
 */
export const projectsIdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof projectsIdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/projects/${args.id}?action=is-used`)
  .parseJson(withRuntype(projectsIdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: projectsIdActionStartProjectPost

const projectsIdActionStartProjectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsIdActionStartProjectPost
 * `POST: /projects/{id}?action=StartProject`
 * StartProject Transition
 */
export const projectsIdActionStartProjectPost = buildCall() //
  .args<rt.Static<typeof projectsIdActionStartProjectPostArgsRt>>()
  .method('post')
  .path((args) => `/projects/${args.id}?action=StartProject`)
  .build();

// Operation: projectsIdActionInitiateProjectPost

const projectsIdActionInitiateProjectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsIdActionInitiateProjectPost
 * `POST: /projects/{id}?action=InitiateProject`
 * InitiateProject Transition
 */
export const projectsIdActionInitiateProjectPost = buildCall() //
  .args<rt.Static<typeof projectsIdActionInitiateProjectPostArgsRt>>()
  .method('post')
  .path((args) => `/projects/${args.id}?action=InitiateProject`)
  .build();

// Operation: projectsIdActionCompleteProjectPost

const projectsIdActionCompleteProjectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsIdActionCompleteProjectPost
 * `POST: /projects/{id}?action=CompleteProject`
 * CompleteProject Transition
 */
export const projectsIdActionCompleteProjectPost = buildCall() //
  .args<rt.Static<typeof projectsIdActionCompleteProjectPostArgsRt>>()
  .method('post')
  .path((args) => `/projects/${args.id}?action=CompleteProject`)
  .build();

// Operation: projectsIdActionDiscardProjectPost

const projectsIdActionDiscardProjectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsIdActionDiscardProjectPost
 * `POST: /projects/{id}?action=DiscardProject`
 * DiscardProject Transition
 */
export const projectsIdActionDiscardProjectPost = buildCall() //
  .args<rt.Static<typeof projectsIdActionDiscardProjectPostArgsRt>>()
  .method('post')
  .path((args) => `/projects/${args.id}?action=DiscardProject`)
  .build();

// Operation: projectsIdGet

const projectsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: projectsIdGet
 * `GET: /projects/{id}`
 * Get Project
 */
export const projectsIdGet = buildCall() //
  .args<rt.Static<typeof projectsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/projects/${args.id}`)
  .parseJson(withRuntype(projectRt))
  .build();

// Operation: projectsIdPut

const projectsIdPutArgsRt = rt
  .Record({ id: rt.Number, Project: projectRt })
  .asReadonly();

/**
 * operation ID: projectsIdPut
 * `PUT: /projects/{id}`
 * Update Project
 */
export const projectsIdPut = buildCall() //
  .args<rt.Static<typeof projectsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/projects/${args.id}`)
  .body((args) => args.Project)
  .parseJson(withRuntype(projectRt))
  .build();

// Operation: projectsIdDelete

const projectsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: projectsIdDelete
 * `DELETE: /projects/{id}`
 * Delete Project
 */
export const projectsIdDelete = buildCall() //
  .args<rt.Static<typeof projectsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/projects/${args.id}`)
  .parseJson(withRuntype(projectRt))
  .build();

// Operation: projectsGet

const projectsGetResponseBodyRt = rt.Array(projectRt);

/**
 * operation ID: projectsGet
 * `GET: /projects`
 * Query Project
 */
export const projectsGet = buildCall() //
  .method('get')
  .path('/projects')
  .parseJson(withRuntype(projectsGetResponseBodyRt))
  .build();

// Operation: projectsPost

const projectsPostArgsRt = rt.Record({ Project: projectRt }).asReadonly();

/**
 * operation ID: projectsPost
 * `POST: /projects`
 * Create Project
 */
export const projectsPost = buildCall() //
  .args<rt.Static<typeof projectsPostArgsRt>>()
  .method('post')
  .path('/projects')
  .body((args) => args.Project)
  .build();

// Operation: projectsResourcesIdGet

const projectsResourcesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: projectsResourcesIdGet
 * `GET: /projects-resources/{id}`
 * Get ProjectResource
 */
export const projectsResourcesIdGet = buildCall() //
  .args<rt.Static<typeof projectsResourcesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/projects-resources/${args.id}`)
  .parseJson(withRuntype(projectResourceRt))
  .build();

// Operation: projectsResourcesIdPut

const projectsResourcesIdPutArgsRt = rt
  .Record({ id: rt.Number, ProjectResource: projectResourceRt })
  .asReadonly();

/**
 * operation ID: projectsResourcesIdPut
 * `PUT: /projects-resources/{id}`
 * Update ProjectResource
 */
export const projectsResourcesIdPut = buildCall() //
  .args<rt.Static<typeof projectsResourcesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/projects-resources/${args.id}`)
  .body((args) => args.ProjectResource)
  .parseJson(withRuntype(projectResourceRt))
  .build();

// Operation: projectsResourcesIdDelete

const projectsResourcesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: projectsResourcesIdDelete
 * `DELETE: /projects-resources/{id}`
 * Delete ProjectResource
 */
export const projectsResourcesIdDelete = buildCall() //
  .args<rt.Static<typeof projectsResourcesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/projects-resources/${args.id}`)
  .parseJson(withRuntype(projectResourceRt))
  .build();

// Operation: projectsResourcesGet

const projectsResourcesGetResponseBodyRt = rt.Array(projectResourceRt);

/**
 * operation ID: projectsResourcesGet
 * `GET: /projects-resources`
 * Query ProjectResource
 */
export const projectsResourcesGet = buildCall() //
  .method('get')
  .path('/projects-resources')
  .parseJson(withRuntype(projectsResourcesGetResponseBodyRt))
  .build();

// Operation: projectsResourcesPost

const projectsResourcesPostArgsRt = rt
  .Record({ ProjectResource: projectResourceRt })
  .asReadonly();

/**
 * operation ID: projectsResourcesPost
 * `POST: /projects-resources`
 * Create ProjectResource
 */
export const projectsResourcesPost = buildCall() //
  .args<rt.Static<typeof projectsResourcesPostArgsRt>>()
  .method('post')
  .path('/projects-resources')
  .body((args) => args.ProjectResource)
  .build();

// Operation: projectsSchedulesResourcesIdGet

const projectsSchedulesResourcesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: projectsSchedulesResourcesIdGet
 * `GET: /projects-schedules-resources/{id}`
 * Get ProjectResourceSchedule
 */
export const projectsSchedulesResourcesIdGet = buildCall() //
  .args<rt.Static<typeof projectsSchedulesResourcesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/projects-schedules-resources/${args.id}`)
  .parseJson(withRuntype(projectResourceScheduleRt))
  .build();

// Operation: projectsSchedulesResourcesIdPut

const projectsSchedulesResourcesIdPutArgsRt = rt
  .Record({ id: rt.Number, ProjectResourceSchedule: projectResourceScheduleRt })
  .asReadonly();

/**
 * operation ID: projectsSchedulesResourcesIdPut
 * `PUT: /projects-schedules-resources/{id}`
 * Update ProjectResourceSchedule
 */
export const projectsSchedulesResourcesIdPut = buildCall() //
  .args<rt.Static<typeof projectsSchedulesResourcesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/projects-schedules-resources/${args.id}`)
  .body((args) => args.ProjectResourceSchedule)
  .parseJson(withRuntype(projectResourceScheduleRt))
  .build();

// Operation: projectsSchedulesResourcesIdDelete

const projectsSchedulesResourcesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: projectsSchedulesResourcesIdDelete
 * `DELETE: /projects-schedules-resources/{id}`
 * Delete ProjectResourceSchedule
 */
export const projectsSchedulesResourcesIdDelete = buildCall() //
  .args<rt.Static<typeof projectsSchedulesResourcesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/projects-schedules-resources/${args.id}`)
  .parseJson(withRuntype(projectResourceScheduleRt))
  .build();

// Operation: projectsSchedulesResourcesGet

const projectsSchedulesResourcesGetResponseBodyRt = rt.Array(
  projectResourceScheduleRt,
);

/**
 * operation ID: projectsSchedulesResourcesGet
 * `GET: /projects-schedules-resources`
 * Query ProjectResourceSchedule
 */
export const projectsSchedulesResourcesGet = buildCall() //
  .method('get')
  .path('/projects-schedules-resources')
  .parseJson(withRuntype(projectsSchedulesResourcesGetResponseBodyRt))
  .build();

// Operation: projectsSchedulesResourcesPost

const projectsSchedulesResourcesPostArgsRt = rt
  .Record({ ProjectResourceSchedule: projectResourceScheduleRt })
  .asReadonly();

/**
 * operation ID: projectsSchedulesResourcesPost
 * `POST: /projects-schedules-resources`
 * Create ProjectResourceSchedule
 */
export const projectsSchedulesResourcesPost = buildCall() //
  .args<rt.Static<typeof projectsSchedulesResourcesPostArgsRt>>()
  .method('post')
  .path('/projects-schedules-resources')
  .body((args) => args.ProjectResourceSchedule)
  .build();

// Operation: projectsTasksIdActionActivateProjectTaskPost

const projectsTasksIdActionActivateProjectTaskPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectTaskID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsTasksIdActionActivateProjectTaskPost
 * `POST: /projects-tasks/{id}?action=ActivateProjectTask`
 * ActivateProjectTask Transition
 */
export const projectsTasksIdActionActivateProjectTaskPost = buildCall() //
  .args<rt.Static<typeof projectsTasksIdActionActivateProjectTaskPostArgsRt>>()
  .method('post')
  .path((args) => `/projects-tasks/${args.id}?action=ActivateProjectTask`)
  .build();

// Operation: projectsTasksIdActionCompleteProjectTaskPost

const projectsTasksIdActionCompleteProjectTaskPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ projectTaskID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: projectsTasksIdActionCompleteProjectTaskPost
 * `POST: /projects-tasks/{id}?action=CompleteProjectTask`
 * CompleteProjectTask Transition
 */
export const projectsTasksIdActionCompleteProjectTaskPost = buildCall() //
  .args<rt.Static<typeof projectsTasksIdActionCompleteProjectTaskPostArgsRt>>()
  .method('post')
  .path((args) => `/projects-tasks/${args.id}?action=CompleteProjectTask`)
  .build();

// Operation: projectsTasksIdGet

const projectsTasksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: projectsTasksIdGet
 * `GET: /projects-tasks/{id}`
 * Get ProjectTask
 */
export const projectsTasksIdGet = buildCall() //
  .args<rt.Static<typeof projectsTasksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/projects-tasks/${args.id}`)
  .parseJson(withRuntype(projectTaskRt))
  .build();

// Operation: projectsTasksIdPut

const projectsTasksIdPutArgsRt = rt
  .Record({ id: rt.Number, ProjectTask: projectTaskRt })
  .asReadonly();

/**
 * operation ID: projectsTasksIdPut
 * `PUT: /projects-tasks/{id}`
 * Update ProjectTask
 */
export const projectsTasksIdPut = buildCall() //
  .args<rt.Static<typeof projectsTasksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/projects-tasks/${args.id}`)
  .body((args) => args.ProjectTask)
  .parseJson(withRuntype(projectTaskRt))
  .build();

// Operation: projectsTasksIdDelete

const projectsTasksIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: projectsTasksIdDelete
 * `DELETE: /projects-tasks/{id}`
 * Delete ProjectTask
 */
export const projectsTasksIdDelete = buildCall() //
  .args<rt.Static<typeof projectsTasksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/projects-tasks/${args.id}`)
  .parseJson(withRuntype(projectTaskRt))
  .build();

// Operation: projectsTasksGet

const projectsTasksGetResponseBodyRt = rt.Array(projectTaskRt);

/**
 * operation ID: projectsTasksGet
 * `GET: /projects-tasks`
 * Query ProjectTask
 */
export const projectsTasksGet = buildCall() //
  .method('get')
  .path('/projects-tasks')
  .parseJson(withRuntype(projectsTasksGetResponseBodyRt))
  .build();

// Operation: projectsTasksPost

const projectsTasksPostArgsRt = rt
  .Record({ ProjectTask: projectTaskRt })
  .asReadonly();

/**
 * operation ID: projectsTasksPost
 * `POST: /projects-tasks`
 * Create ProjectTask
 */
export const projectsTasksPost = buildCall() //
  .args<rt.Static<typeof projectsTasksPostArgsRt>>()
  .method('post')
  .path('/projects-tasks')
  .body((args) => args.ProjectTask)
  .build();

// Operation: projectsTasksSchedulesIdGet

const projectsTasksSchedulesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: projectsTasksSchedulesIdGet
 * `GET: /projects-tasks-schedules/{id}`
 * Get ProjectTaskSchedule
 */
export const projectsTasksSchedulesIdGet = buildCall() //
  .args<rt.Static<typeof projectsTasksSchedulesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/projects-tasks-schedules/${args.id}`)
  .parseJson(withRuntype(projectTaskScheduleRt))
  .build();

// Operation: projectsTasksSchedulesIdPut

const projectsTasksSchedulesIdPutArgsRt = rt
  .Record({ id: rt.Number, ProjectTaskSchedule: projectTaskScheduleRt })
  .asReadonly();

/**
 * operation ID: projectsTasksSchedulesIdPut
 * `PUT: /projects-tasks-schedules/{id}`
 * Update ProjectTaskSchedule
 */
export const projectsTasksSchedulesIdPut = buildCall() //
  .args<rt.Static<typeof projectsTasksSchedulesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/projects-tasks-schedules/${args.id}`)
  .body((args) => args.ProjectTaskSchedule)
  .parseJson(withRuntype(projectTaskScheduleRt))
  .build();

// Operation: projectsTasksSchedulesIdDelete

const projectsTasksSchedulesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: projectsTasksSchedulesIdDelete
 * `DELETE: /projects-tasks-schedules/{id}`
 * Delete ProjectTaskSchedule
 */
export const projectsTasksSchedulesIdDelete = buildCall() //
  .args<rt.Static<typeof projectsTasksSchedulesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/projects-tasks-schedules/${args.id}`)
  .parseJson(withRuntype(projectTaskScheduleRt))
  .build();

// Operation: projectsTasksSchedulesGet

const projectsTasksSchedulesGetResponseBodyRt = rt.Array(projectTaskScheduleRt);

/**
 * operation ID: projectsTasksSchedulesGet
 * `GET: /projects-tasks-schedules`
 * Query ProjectTaskSchedule
 */
export const projectsTasksSchedulesGet = buildCall() //
  .method('get')
  .path('/projects-tasks-schedules')
  .parseJson(withRuntype(projectsTasksSchedulesGetResponseBodyRt))
  .build();

// Operation: projectsTasksSchedulesPost

const projectsTasksSchedulesPostArgsRt = rt
  .Record({ ProjectTaskSchedule: projectTaskScheduleRt })
  .asReadonly();

/**
 * operation ID: projectsTasksSchedulesPost
 * `POST: /projects-tasks-schedules`
 * Create ProjectTaskSchedule
 */
export const projectsTasksSchedulesPost = buildCall() //
  .args<rt.Static<typeof projectsTasksSchedulesPostArgsRt>>()
  .method('post')
  .path('/projects-tasks-schedules')
  .body((args) => args.ProjectTaskSchedule)
  .build();

// Operation: ehfActionActivatePost

const ehfActionActivatePostArgsRt = rt
  .Record({ customer: eHFCustomerRt, service: rt.String, direction: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: ehfActionActivatePost
 * `POST: /ehf?action=activate`
 * activate Action
 */
export const ehfActionActivatePost = buildCall() //
  .args<rt.Static<typeof ehfActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/ehf?action=activate`)
  .body((args) => args.customer)
  .build();

// Operation: ehfActionDeactivatePost

const ehfActionDeactivatePostArgsRt = rt
  .Record({ service: rt.String })
  .asPartial()
  .asReadonly();

const ehfActionDeactivatePostResponseBodyRt = rt.Boolean;

/**
 * operation ID: ehfActionDeactivatePost
 * `POST: /ehf?action=deactivate`
 * deactivate Action
 */
export const ehfActionDeactivatePost = buildCall() //
  .args<rt.Static<typeof ehfActionDeactivatePostArgsRt>>()
  .method('post')
  .path((args) => `/ehf?action=deactivate`)
  .parseJson(withRuntype(ehfActionDeactivatePostResponseBodyRt))
  .build();

// Operation: ehfActionIsEhfReceiverGet

const ehfActionIsEhfReceiverGetArgsRt = rt
  .Record({ peppoladdress: rt.String, entitytype: rt.String })
  .asPartial()
  .asReadonly();

const ehfActionIsEhfReceiverGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: ehfActionIsEhfReceiverGet
 * `GET: /ehf?action=is-ehf-receiver`
 * is-ehf-receiver Action
 */
export const ehfActionIsEhfReceiverGet = buildCall() //
  .args<rt.Static<typeof ehfActionIsEhfReceiverGetArgsRt>>()
  .method('get')
  .path((args) => `/ehf?action=is-ehf-receiver`)
  .parseJson(withRuntype(ehfActionIsEhfReceiverGetResponseBodyRt))
  .build();

// Operation: ehfActionServicemetadataGet

const ehfActionServicemetadataGetArgsRt = rt
  .Record({ peppoladdress: rt.String, entitytype: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: ehfActionServicemetadataGet
 * `GET: /ehf?action=servicemetadata`
 * servicemetadata Action
 */
export const ehfActionServicemetadataGet = buildCall() //
  .args<rt.Static<typeof ehfActionServicemetadataGetArgsRt>>()
  .method('get')
  .path((args) => `/ehf?action=servicemetadata`)
  .parseJson(withRuntype(serviceMetadataDtoRt))
  .build();

// Operation: ehfActionImportGet

const ehfActionImportGetArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: ehfActionImportGet
 * `GET: /ehf?action=import`
 * import Action
 */
export const ehfActionImportGet = buildCall() //
  .args<rt.Static<typeof ehfActionImportGetArgsRt>>()
  .method('get')
  .path((args) => `/ehf?action=import`)
  .build();

// Operation: ehfActionParseGet

const ehfActionParseGetArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

const ehfActionParseGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: ehfActionParseGet
 * `GET: /ehf?action=parse`
 * parse Action
 */
export const ehfActionParseGet = buildCall() //
  .args<rt.Static<typeof ehfActionParseGetArgsRt>>()
  .method('get')
  .path((args) => `/ehf?action=parse`)
  .parseJson(withRuntype(ehfActionParseGetResponseBodyRt))
  .build();

// Operation: ehfIdGet

const ehfIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ehfIdGet
 * `GET: /ehf/{id}`
 * Get EHFLog
 */
export const ehfIdGet = buildCall() //
  .args<rt.Static<typeof ehfIdGetArgsRt>>()
  .method('get')
  .path((args) => `/ehf/${args.id}`)
  .parseJson(withRuntype(eHFLogRt))
  .build();

// Operation: ehfIdPut

const ehfIdPutArgsRt = rt
  .Record({ id: rt.Number, EHFLog: eHFLogRt })
  .asReadonly();

/**
 * operation ID: ehfIdPut
 * `PUT: /ehf/{id}`
 * Update EHFLog
 */
export const ehfIdPut = buildCall() //
  .args<rt.Static<typeof ehfIdPutArgsRt>>()
  .method('put')
  .path((args) => `/ehf/${args.id}`)
  .body((args) => args.EHFLog)
  .parseJson(withRuntype(eHFLogRt))
  .build();

// Operation: ehfIdDelete

const ehfIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ehfIdDelete
 * `DELETE: /ehf/{id}`
 * Delete EHFLog
 */
export const ehfIdDelete = buildCall() //
  .args<rt.Static<typeof ehfIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/ehf/${args.id}`)
  .parseJson(withRuntype(eHFLogRt))
  .build();

// Operation: ehfGet

const ehfGetResponseBodyRt = rt.Array(eHFLogRt);

/**
 * operation ID: ehfGet
 * `GET: /ehf`
 * Query EHFLog
 */
export const ehfGet = buildCall() //
  .method('get')
  .path('/ehf')
  .parseJson(withRuntype(ehfGetResponseBodyRt))
  .build();

// Operation: ehfPost

const ehfPostArgsRt = rt.Record({ EHFLog: eHFLogRt }).asReadonly();

/**
 * operation ID: ehfPost
 * `POST: /ehf`
 * Create EHFLog
 */
export const ehfPost = buildCall() //
  .args<rt.Static<typeof ehfPostArgsRt>>()
  .method('post')
  .path('/ehf')
  .body((args) => args.EHFLog)
  .build();

// Operation: departmentsIdActionIsUsedGet

const departmentsIdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const departmentsIdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: departmentsIdActionIsUsedGet
 * `GET: /departments/{id}?action=is-used`
 * is-used Action
 */
export const departmentsIdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof departmentsIdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/departments/${args.id}?action=is-used`)
  .parseJson(withRuntype(departmentsIdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: departmentsIdGet

const departmentsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: departmentsIdGet
 * `GET: /departments/{id}`
 * Get Department
 */
export const departmentsIdGet = buildCall() //
  .args<rt.Static<typeof departmentsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/departments/${args.id}`)
  .parseJson(withRuntype(departmentRt))
  .build();

// Operation: departmentsIdPut

const departmentsIdPutArgsRt = rt
  .Record({ id: rt.Number, Department: departmentRt })
  .asReadonly();

/**
 * operation ID: departmentsIdPut
 * `PUT: /departments/{id}`
 * Update Department
 */
export const departmentsIdPut = buildCall() //
  .args<rt.Static<typeof departmentsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/departments/${args.id}`)
  .body((args) => args.Department)
  .parseJson(withRuntype(departmentRt))
  .build();

// Operation: departmentsIdDelete

const departmentsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: departmentsIdDelete
 * `DELETE: /departments/{id}`
 * Delete Department
 */
export const departmentsIdDelete = buildCall() //
  .args<rt.Static<typeof departmentsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/departments/${args.id}`)
  .parseJson(withRuntype(departmentRt))
  .build();

// Operation: departmentsGet

const departmentsGetResponseBodyRt = rt.Array(departmentRt);

/**
 * operation ID: departmentsGet
 * `GET: /departments`
 * Query Department
 */
export const departmentsGet = buildCall() //
  .method('get')
  .path('/departments')
  .parseJson(withRuntype(departmentsGetResponseBodyRt))
  .build();

// Operation: departmentsPost

const departmentsPostArgsRt = rt
  .Record({ Department: departmentRt })
  .asReadonly();

/**
 * operation ID: departmentsPost
 * `POST: /departments`
 * Create Department
 */
export const departmentsPost = buildCall() //
  .args<rt.Static<typeof departmentsPostArgsRt>>()
  .method('post')
  .path('/departments')
  .body((args) => args.Department)
  .build();

// Operation: dimension10IdActionIsUsedGet

const dimension10IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension10IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension10IdActionIsUsedGet
 * `GET: /Dimension10/{id}?action=is-used`
 * is-used Action
 */
export const dimension10IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension10IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension10/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension10IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension10IdGet

const dimension10IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension10IdGet
 * `GET: /Dimension10/{id}`
 * Get Dimension10
 */
export const dimension10IdGet = buildCall() //
  .args<rt.Static<typeof dimension10IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension10/${args.id}`)
  .parseJson(withRuntype(dimension10Rt))
  .build();

// Operation: dimension10IdPut

const dimension10IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension10: dimension10Rt })
  .asReadonly();

/**
 * operation ID: dimension10IdPut
 * `PUT: /Dimension10/{id}`
 * Update Dimension10
 */
export const dimension10IdPut = buildCall() //
  .args<rt.Static<typeof dimension10IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension10/${args.id}`)
  .body((args) => args.Dimension10)
  .parseJson(withRuntype(dimension10Rt))
  .build();

// Operation: dimension10IdDelete

const dimension10IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension10IdDelete
 * `DELETE: /Dimension10/{id}`
 * Delete Dimension10
 */
export const dimension10IdDelete = buildCall() //
  .args<rt.Static<typeof dimension10IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension10/${args.id}`)
  .parseJson(withRuntype(dimension10Rt))
  .build();

// Operation: dimension10Get

const dimension10GetResponseBodyRt = rt.Array(dimension10Rt);

/**
 * operation ID: dimension10Get
 * `GET: /Dimension10`
 * Query Dimension10
 */
export const dimension10Get = buildCall() //
  .method('get')
  .path('/Dimension10')
  .parseJson(withRuntype(dimension10GetResponseBodyRt))
  .build();

// Operation: dimension10Post

const dimension10PostArgsRt = rt
  .Record({ Dimension10: dimension10Rt })
  .asReadonly();

/**
 * operation ID: dimension10Post
 * `POST: /Dimension10`
 * Create Dimension10
 */
export const dimension10Post = buildCall() //
  .args<rt.Static<typeof dimension10PostArgsRt>>()
  .method('post')
  .path('/Dimension10')
  .body((args) => args.Dimension10)
  .build();

// Operation: dimension5IdActionIsUsedGet

const dimension5IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension5IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension5IdActionIsUsedGet
 * `GET: /Dimension5/{id}?action=is-used`
 * is-used Action
 */
export const dimension5IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension5IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension5/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension5IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension5IdGet

const dimension5IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension5IdGet
 * `GET: /Dimension5/{id}`
 * Get Dimension5
 */
export const dimension5IdGet = buildCall() //
  .args<rt.Static<typeof dimension5IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension5/${args.id}`)
  .parseJson(withRuntype(dimension5Rt))
  .build();

// Operation: dimension5IdPut

const dimension5IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension5: dimension5Rt })
  .asReadonly();

/**
 * operation ID: dimension5IdPut
 * `PUT: /Dimension5/{id}`
 * Update Dimension5
 */
export const dimension5IdPut = buildCall() //
  .args<rt.Static<typeof dimension5IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension5/${args.id}`)
  .body((args) => args.Dimension5)
  .parseJson(withRuntype(dimension5Rt))
  .build();

// Operation: dimension5IdDelete

const dimension5IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension5IdDelete
 * `DELETE: /Dimension5/{id}`
 * Delete Dimension5
 */
export const dimension5IdDelete = buildCall() //
  .args<rt.Static<typeof dimension5IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension5/${args.id}`)
  .parseJson(withRuntype(dimension5Rt))
  .build();

// Operation: dimension5Get

const dimension5GetResponseBodyRt = rt.Array(dimension5Rt);

/**
 * operation ID: dimension5Get
 * `GET: /Dimension5`
 * Query Dimension5
 */
export const dimension5Get = buildCall() //
  .method('get')
  .path('/Dimension5')
  .parseJson(withRuntype(dimension5GetResponseBodyRt))
  .build();

// Operation: dimension5Post

const dimension5PostArgsRt = rt
  .Record({ Dimension5: dimension5Rt })
  .asReadonly();

/**
 * operation ID: dimension5Post
 * `POST: /Dimension5`
 * Create Dimension5
 */
export const dimension5Post = buildCall() //
  .args<rt.Static<typeof dimension5PostArgsRt>>()
  .method('post')
  .path('/Dimension5')
  .body((args) => args.Dimension5)
  .build();

// Operation: dimension6IdActionIsUsedGet

const dimension6IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension6IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension6IdActionIsUsedGet
 * `GET: /Dimension6/{id}?action=is-used`
 * is-used Action
 */
export const dimension6IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension6IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension6/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension6IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension6IdGet

const dimension6IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension6IdGet
 * `GET: /Dimension6/{id}`
 * Get Dimension6
 */
export const dimension6IdGet = buildCall() //
  .args<rt.Static<typeof dimension6IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension6/${args.id}`)
  .parseJson(withRuntype(dimension6Rt))
  .build();

// Operation: dimension6IdPut

const dimension6IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension6: dimension6Rt })
  .asReadonly();

/**
 * operation ID: dimension6IdPut
 * `PUT: /Dimension6/{id}`
 * Update Dimension6
 */
export const dimension6IdPut = buildCall() //
  .args<rt.Static<typeof dimension6IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension6/${args.id}`)
  .body((args) => args.Dimension6)
  .parseJson(withRuntype(dimension6Rt))
  .build();

// Operation: dimension6IdDelete

const dimension6IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension6IdDelete
 * `DELETE: /Dimension6/{id}`
 * Delete Dimension6
 */
export const dimension6IdDelete = buildCall() //
  .args<rt.Static<typeof dimension6IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension6/${args.id}`)
  .parseJson(withRuntype(dimension6Rt))
  .build();

// Operation: dimension6Get

const dimension6GetResponseBodyRt = rt.Array(dimension6Rt);

/**
 * operation ID: dimension6Get
 * `GET: /Dimension6`
 * Query Dimension6
 */
export const dimension6Get = buildCall() //
  .method('get')
  .path('/Dimension6')
  .parseJson(withRuntype(dimension6GetResponseBodyRt))
  .build();

// Operation: dimension6Post

const dimension6PostArgsRt = rt
  .Record({ Dimension6: dimension6Rt })
  .asReadonly();

/**
 * operation ID: dimension6Post
 * `POST: /Dimension6`
 * Create Dimension6
 */
export const dimension6Post = buildCall() //
  .args<rt.Static<typeof dimension6PostArgsRt>>()
  .method('post')
  .path('/Dimension6')
  .body((args) => args.Dimension6)
  .build();

// Operation: dimension7IdActionIsUsedGet

const dimension7IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension7IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension7IdActionIsUsedGet
 * `GET: /Dimension7/{id}?action=is-used`
 * is-used Action
 */
export const dimension7IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension7IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension7/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension7IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension7IdGet

const dimension7IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension7IdGet
 * `GET: /Dimension7/{id}`
 * Get Dimension7
 */
export const dimension7IdGet = buildCall() //
  .args<rt.Static<typeof dimension7IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension7/${args.id}`)
  .parseJson(withRuntype(dimension7Rt))
  .build();

// Operation: dimension7IdPut

const dimension7IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension7: dimension7Rt })
  .asReadonly();

/**
 * operation ID: dimension7IdPut
 * `PUT: /Dimension7/{id}`
 * Update Dimension7
 */
export const dimension7IdPut = buildCall() //
  .args<rt.Static<typeof dimension7IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension7/${args.id}`)
  .body((args) => args.Dimension7)
  .parseJson(withRuntype(dimension7Rt))
  .build();

// Operation: dimension7IdDelete

const dimension7IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension7IdDelete
 * `DELETE: /Dimension7/{id}`
 * Delete Dimension7
 */
export const dimension7IdDelete = buildCall() //
  .args<rt.Static<typeof dimension7IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension7/${args.id}`)
  .parseJson(withRuntype(dimension7Rt))
  .build();

// Operation: dimension7Get

const dimension7GetResponseBodyRt = rt.Array(dimension7Rt);

/**
 * operation ID: dimension7Get
 * `GET: /Dimension7`
 * Query Dimension7
 */
export const dimension7Get = buildCall() //
  .method('get')
  .path('/Dimension7')
  .parseJson(withRuntype(dimension7GetResponseBodyRt))
  .build();

// Operation: dimension7Post

const dimension7PostArgsRt = rt
  .Record({ Dimension7: dimension7Rt })
  .asReadonly();

/**
 * operation ID: dimension7Post
 * `POST: /Dimension7`
 * Create Dimension7
 */
export const dimension7Post = buildCall() //
  .args<rt.Static<typeof dimension7PostArgsRt>>()
  .method('post')
  .path('/Dimension7')
  .body((args) => args.Dimension7)
  .build();

// Operation: dimension8IdActionIsUsedGet

const dimension8IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension8IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension8IdActionIsUsedGet
 * `GET: /Dimension8/{id}?action=is-used`
 * is-used Action
 */
export const dimension8IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension8IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension8/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension8IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension8IdGet

const dimension8IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension8IdGet
 * `GET: /Dimension8/{id}`
 * Get Dimension8
 */
export const dimension8IdGet = buildCall() //
  .args<rt.Static<typeof dimension8IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension8/${args.id}`)
  .parseJson(withRuntype(dimension8Rt))
  .build();

// Operation: dimension8IdPut

const dimension8IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension8: dimension8Rt })
  .asReadonly();

/**
 * operation ID: dimension8IdPut
 * `PUT: /Dimension8/{id}`
 * Update Dimension8
 */
export const dimension8IdPut = buildCall() //
  .args<rt.Static<typeof dimension8IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension8/${args.id}`)
  .body((args) => args.Dimension8)
  .parseJson(withRuntype(dimension8Rt))
  .build();

// Operation: dimension8IdDelete

const dimension8IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension8IdDelete
 * `DELETE: /Dimension8/{id}`
 * Delete Dimension8
 */
export const dimension8IdDelete = buildCall() //
  .args<rt.Static<typeof dimension8IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension8/${args.id}`)
  .parseJson(withRuntype(dimension8Rt))
  .build();

// Operation: dimension8Get

const dimension8GetResponseBodyRt = rt.Array(dimension8Rt);

/**
 * operation ID: dimension8Get
 * `GET: /Dimension8`
 * Query Dimension8
 */
export const dimension8Get = buildCall() //
  .method('get')
  .path('/Dimension8')
  .parseJson(withRuntype(dimension8GetResponseBodyRt))
  .build();

// Operation: dimension8Post

const dimension8PostArgsRt = rt
  .Record({ Dimension8: dimension8Rt })
  .asReadonly();

/**
 * operation ID: dimension8Post
 * `POST: /Dimension8`
 * Create Dimension8
 */
export const dimension8Post = buildCall() //
  .args<rt.Static<typeof dimension8PostArgsRt>>()
  .method('post')
  .path('/Dimension8')
  .body((args) => args.Dimension8)
  .build();

// Operation: dimension9IdActionIsUsedGet

const dimension9IdActionIsUsedGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const dimension9IdActionIsUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: dimension9IdActionIsUsedGet
 * `GET: /Dimension9/{id}?action=is-used`
 * is-used Action
 */
export const dimension9IdActionIsUsedGet = buildCall() //
  .args<rt.Static<typeof dimension9IdActionIsUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension9/${args.id}?action=is-used`)
  .parseJson(withRuntype(dimension9IdActionIsUsedGetResponseBodyRt))
  .build();

// Operation: dimension9IdGet

const dimension9IdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension9IdGet
 * `GET: /Dimension9/{id}`
 * Get Dimension9
 */
export const dimension9IdGet = buildCall() //
  .args<rt.Static<typeof dimension9IdGetArgsRt>>()
  .method('get')
  .path((args) => `/Dimension9/${args.id}`)
  .parseJson(withRuntype(dimension9Rt))
  .build();

// Operation: dimension9IdPut

const dimension9IdPutArgsRt = rt
  .Record({ id: rt.Number, Dimension9: dimension9Rt })
  .asReadonly();

/**
 * operation ID: dimension9IdPut
 * `PUT: /Dimension9/{id}`
 * Update Dimension9
 */
export const dimension9IdPut = buildCall() //
  .args<rt.Static<typeof dimension9IdPutArgsRt>>()
  .method('put')
  .path((args) => `/Dimension9/${args.id}`)
  .body((args) => args.Dimension9)
  .parseJson(withRuntype(dimension9Rt))
  .build();

// Operation: dimension9IdDelete

const dimension9IdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimension9IdDelete
 * `DELETE: /Dimension9/{id}`
 * Delete Dimension9
 */
export const dimension9IdDelete = buildCall() //
  .args<rt.Static<typeof dimension9IdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/Dimension9/${args.id}`)
  .parseJson(withRuntype(dimension9Rt))
  .build();

// Operation: dimension9Get

const dimension9GetResponseBodyRt = rt.Array(dimension9Rt);

/**
 * operation ID: dimension9Get
 * `GET: /Dimension9`
 * Query Dimension9
 */
export const dimension9Get = buildCall() //
  .method('get')
  .path('/Dimension9')
  .parseJson(withRuntype(dimension9GetResponseBodyRt))
  .build();

// Operation: dimension9Post

const dimension9PostArgsRt = rt
  .Record({ Dimension9: dimension9Rt })
  .asReadonly();

/**
 * operation ID: dimension9Post
 * `POST: /Dimension9`
 * Create Dimension9
 */
export const dimension9Post = buildCall() //
  .args<rt.Static<typeof dimension9PostArgsRt>>()
  .method('post')
  .path('/Dimension9')
  .body((args) => args.Dimension9)
  .build();

// Operation: dimensionsIdGet

const dimensionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: dimensionsIdGet
 * `GET: /dimensions/{id}`
 * Get Dimensions
 */
export const dimensionsIdGet = buildCall() //
  .args<rt.Static<typeof dimensionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/dimensions/${args.id}`)
  .parseJson(withRuntype(dimensionsRt))
  .build();

// Operation: dimensionsGet

const dimensionsGetResponseBodyRt = rt.Array(dimensionsRt);

/**
 * operation ID: dimensionsGet
 * `GET: /dimensions`
 * Query Dimensions
 */
export const dimensionsGet = buildCall() //
  .method('get')
  .path('/dimensions')
  .parseJson(withRuntype(dimensionsGetResponseBodyRt))
  .build();

// Operation: regionsIdGet

const regionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: regionsIdGet
 * `GET: /regions/{id}`
 * Get Region
 */
export const regionsIdGet = buildCall() //
  .args<rt.Static<typeof regionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/regions/${args.id}`)
  .parseJson(withRuntype(regionRt))
  .build();

// Operation: regionsIdPut

const regionsIdPutArgsRt = rt
  .Record({ id: rt.Number, Region: regionRt })
  .asReadonly();

/**
 * operation ID: regionsIdPut
 * `PUT: /regions/{id}`
 * Update Region
 */
export const regionsIdPut = buildCall() //
  .args<rt.Static<typeof regionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/regions/${args.id}`)
  .body((args) => args.Region)
  .parseJson(withRuntype(regionRt))
  .build();

// Operation: regionsIdDelete

const regionsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: regionsIdDelete
 * `DELETE: /regions/{id}`
 * Delete Region
 */
export const regionsIdDelete = buildCall() //
  .args<rt.Static<typeof regionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/regions/${args.id}`)
  .parseJson(withRuntype(regionRt))
  .build();

// Operation: regionsGet

const regionsGetResponseBodyRt = rt.Array(regionRt);

/**
 * operation ID: regionsGet
 * `GET: /regions`
 * Query Region
 */
export const regionsGet = buildCall() //
  .method('get')
  .path('/regions')
  .parseJson(withRuntype(regionsGetResponseBodyRt))
  .build();

// Operation: regionsPost

const regionsPostArgsRt = rt.Record({ Region: regionRt }).asReadonly();

/**
 * operation ID: regionsPost
 * `POST: /regions`
 * Create Region
 */
export const regionsPost = buildCall() //
  .args<rt.Static<typeof regionsPostArgsRt>>()
  .method('post')
  .path('/regions')
  .body((args) => args.Region)
  .build();

// Operation: responsiblesIdGet

const responsiblesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: responsiblesIdGet
 * `GET: /responsibles/{id}`
 * Get Responsible
 */
export const responsiblesIdGet = buildCall() //
  .args<rt.Static<typeof responsiblesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/responsibles/${args.id}`)
  .parseJson(withRuntype(responsibleRt))
  .build();

// Operation: responsiblesIdPut

const responsiblesIdPutArgsRt = rt
  .Record({ id: rt.Number, Responsible: responsibleRt })
  .asReadonly();

/**
 * operation ID: responsiblesIdPut
 * `PUT: /responsibles/{id}`
 * Update Responsible
 */
export const responsiblesIdPut = buildCall() //
  .args<rt.Static<typeof responsiblesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/responsibles/${args.id}`)
  .body((args) => args.Responsible)
  .parseJson(withRuntype(responsibleRt))
  .build();

// Operation: responsiblesIdDelete

const responsiblesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: responsiblesIdDelete
 * `DELETE: /responsibles/{id}`
 * Delete Responsible
 */
export const responsiblesIdDelete = buildCall() //
  .args<rt.Static<typeof responsiblesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/responsibles/${args.id}`)
  .parseJson(withRuntype(responsibleRt))
  .build();

// Operation: responsiblesGet

const responsiblesGetResponseBodyRt = rt.Array(responsibleRt);

/**
 * operation ID: responsiblesGet
 * `GET: /responsibles`
 * Query Responsible
 */
export const responsiblesGet = buildCall() //
  .method('get')
  .path('/responsibles')
  .parseJson(withRuntype(responsiblesGetResponseBodyRt))
  .build();

// Operation: responsiblesPost

const responsiblesPostArgsRt = rt
  .Record({ Responsible: responsibleRt })
  .asReadonly();

/**
 * operation ID: responsiblesPost
 * `POST: /responsibles`
 * Create Responsible
 */
export const responsiblesPost = buildCall() //
  .args<rt.Static<typeof responsiblesPostArgsRt>>()
  .method('post')
  .path('/responsibles')
  .body((args) => args.Responsible)
  .build();

// Operation: contractaddressesIdGet

const contractaddressesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractaddressesIdGet
 * `GET: /contractaddresses/{id}`
 * Get ContractAddress
 */
export const contractaddressesIdGet = buildCall() //
  .args<rt.Static<typeof contractaddressesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contractaddresses/${args.id}`)
  .parseJson(withRuntype(contractAddressRt))
  .build();

// Operation: contractaddressesIdPut

const contractaddressesIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractAddress: contractAddressRt })
  .asReadonly();

/**
 * operation ID: contractaddressesIdPut
 * `PUT: /contractaddresses/{id}`
 * Update ContractAddress
 */
export const contractaddressesIdPut = buildCall() //
  .args<rt.Static<typeof contractaddressesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contractaddresses/${args.id}`)
  .body((args) => args.ContractAddress)
  .parseJson(withRuntype(contractAddressRt))
  .build();

// Operation: contractaddressesIdDelete

const contractaddressesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contractaddressesIdDelete
 * `DELETE: /contractaddresses/{id}`
 * Delete ContractAddress
 */
export const contractaddressesIdDelete = buildCall() //
  .args<rt.Static<typeof contractaddressesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contractaddresses/${args.id}`)
  .parseJson(withRuntype(contractAddressRt))
  .build();

// Operation: contractaddressesGet

const contractaddressesGetResponseBodyRt = rt.Array(contractAddressRt);

/**
 * operation ID: contractaddressesGet
 * `GET: /contractaddresses`
 * Query ContractAddress
 */
export const contractaddressesGet = buildCall() //
  .method('get')
  .path('/contractaddresses')
  .parseJson(withRuntype(contractaddressesGetResponseBodyRt))
  .build();

// Operation: contractaddressesPost

const contractaddressesPostArgsRt = rt
  .Record({ ContractAddress: contractAddressRt })
  .asReadonly();

/**
 * operation ID: contractaddressesPost
 * `POST: /contractaddresses`
 * Create ContractAddress
 */
export const contractaddressesPost = buildCall() //
  .args<rt.Static<typeof contractaddressesPostArgsRt>>()
  .method('post')
  .path('/contractaddresses')
  .body((args) => args.ContractAddress)
  .build();

// Operation: contractassetsIdGet

const contractassetsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractassetsIdGet
 * `GET: /contractassets/{id}`
 * Get ContractAsset
 */
export const contractassetsIdGet = buildCall() //
  .args<rt.Static<typeof contractassetsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contractassets/${args.id}`)
  .parseJson(withRuntype(contractAssetRt))
  .build();

// Operation: contractassetsIdPut

const contractassetsIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractAsset: contractAssetRt })
  .asReadonly();

/**
 * operation ID: contractassetsIdPut
 * `PUT: /contractassets/{id}`
 * Update ContractAsset
 */
export const contractassetsIdPut = buildCall() //
  .args<rt.Static<typeof contractassetsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contractassets/${args.id}`)
  .body((args) => args.ContractAsset)
  .parseJson(withRuntype(contractAssetRt))
  .build();

// Operation: contractassetsIdDelete

const contractassetsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractassetsIdDelete
 * `DELETE: /contractassets/{id}`
 * Delete ContractAsset
 */
export const contractassetsIdDelete = buildCall() //
  .args<rt.Static<typeof contractassetsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contractassets/${args.id}`)
  .parseJson(withRuntype(contractAssetRt))
  .build();

// Operation: contractassetsGet

const contractassetsGetResponseBodyRt = rt.Array(contractAssetRt);

/**
 * operation ID: contractassetsGet
 * `GET: /contractassets`
 * Query ContractAsset
 */
export const contractassetsGet = buildCall() //
  .method('get')
  .path('/contractassets')
  .parseJson(withRuntype(contractassetsGetResponseBodyRt))
  .build();

// Operation: contractassetsPost

const contractassetsPostArgsRt = rt
  .Record({ ContractAsset: contractAssetRt })
  .asReadonly();

/**
 * operation ID: contractassetsPost
 * `POST: /contractassets`
 * Create ContractAsset
 */
export const contractassetsPost = buildCall() //
  .args<rt.Static<typeof contractassetsPostArgsRt>>()
  .method('post')
  .path('/contractassets')
  .body((args) => args.ContractAsset)
  .build();

// Operation: contractsIdActionDeployPost

const contractsIdActionDeployPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: contractsIdActionDeployPost
 * `POST: /contracts/{id}?action=deploy`
 * deploy Transition
 */
export const contractsIdActionDeployPost = buildCall() //
  .args<rt.Static<typeof contractsIdActionDeployPostArgsRt>>()
  .method('post')
  .path((args) => `/contracts/${args.id}?action=deploy`)
  .build();

// Operation: contractsIdActionKillPost

const contractsIdActionKillPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: contractsIdActionKillPost
 * `POST: /contracts/{id}?action=kill`
 * kill Transition
 */
export const contractsIdActionKillPost = buildCall() //
  .args<rt.Static<typeof contractsIdActionKillPostArgsRt>>()
  .method('post')
  .path((args) => `/contracts/${args.id}?action=kill`)
  .build();

// Operation: contractsIdActionResetPost

const contractsIdActionResetPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: contractsIdActionResetPost
 * `POST: /contracts/{id}?action=reset`
 * reset Transition
 */
export const contractsIdActionResetPost = buildCall() //
  .args<rt.Static<typeof contractsIdActionResetPostArgsRt>>()
  .method('post')
  .path((args) => `/contracts/${args.id}?action=reset`)
  .build();

// Operation: contractsIdActionCopyBasedOnPut

const contractsIdActionCopyBasedOnPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: contractsIdActionCopyBasedOnPut
 * `PUT: /contracts/{id}?action=copy-based-on`
 * copy-based-on Action
 */
export const contractsIdActionCopyBasedOnPut = buildCall() //
  .args<rt.Static<typeof contractsIdActionCopyBasedOnPutArgsRt>>()
  .method('put')
  .path((args) => `/contracts/${args.id}?action=copy-based-on`)
  .parseJson(withRuntype(contractRt))
  .build();

// Operation: contractsIdActionCompilePut

const contractsIdActionCompilePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: contractsIdActionCompilePut
 * `PUT: /contracts/{id}?action=compile`
 * compile Action
 */
export const contractsIdActionCompilePut = buildCall() //
  .args<rt.Static<typeof contractsIdActionCompilePutArgsRt>>()
  .method('put')
  .path((args) => `/contracts/${args.id}?action=compile`)
  .build();

// Operation: contractsIdGet

const contractsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractsIdGet
 * `GET: /contracts/{id}`
 * Get Contract
 */
export const contractsIdGet = buildCall() //
  .args<rt.Static<typeof contractsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contracts/${args.id}`)
  .parseJson(withRuntype(contractRt))
  .build();

// Operation: contractsIdPut

const contractsIdPutArgsRt = rt
  .Record({ id: rt.Number, Contract: contractRt })
  .asReadonly();

/**
 * operation ID: contractsIdPut
 * `PUT: /contracts/{id}`
 * Update Contract
 */
export const contractsIdPut = buildCall() //
  .args<rt.Static<typeof contractsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contracts/${args.id}`)
  .body((args) => args.Contract)
  .parseJson(withRuntype(contractRt))
  .build();

// Operation: contractsIdDelete

const contractsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractsIdDelete
 * `DELETE: /contracts/{id}`
 * Delete Contract
 */
export const contractsIdDelete = buildCall() //
  .args<rt.Static<typeof contractsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contracts/${args.id}`)
  .parseJson(withRuntype(contractRt))
  .build();

// Operation: contractsGet

const contractsGetResponseBodyRt = rt.Array(contractRt);

/**
 * operation ID: contractsGet
 * `GET: /contracts`
 * Query Contract
 */
export const contractsGet = buildCall() //
  .method('get')
  .path('/contracts')
  .parseJson(withRuntype(contractsGetResponseBodyRt))
  .build();

// Operation: contractsPost

const contractsPostArgsRt = rt.Record({ Contract: contractRt }).asReadonly();

/**
 * operation ID: contractsPost
 * `POST: /contracts`
 * Create Contract
 */
export const contractsPost = buildCall() //
  .args<rt.Static<typeof contractsPostArgsRt>>()
  .method('post')
  .path('/contracts')
  .body((args) => args.Contract)
  .build();

// Operation: contractdebuglogsIdGet

const contractdebuglogsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractdebuglogsIdGet
 * `GET: /contractdebuglogs/{id}`
 * Get ContractDebugLog
 */
export const contractdebuglogsIdGet = buildCall() //
  .args<rt.Static<typeof contractdebuglogsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contractdebuglogs/${args.id}`)
  .parseJson(withRuntype(contractDebugLogRt))
  .build();

// Operation: contractdebuglogsIdPut

const contractdebuglogsIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractDebugLog: contractDebugLogRt })
  .asReadonly();

/**
 * operation ID: contractdebuglogsIdPut
 * `PUT: /contractdebuglogs/{id}`
 * Update ContractDebugLog
 */
export const contractdebuglogsIdPut = buildCall() //
  .args<rt.Static<typeof contractdebuglogsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contractdebuglogs/${args.id}`)
  .body((args) => args.ContractDebugLog)
  .parseJson(withRuntype(contractDebugLogRt))
  .build();

// Operation: contractdebuglogsIdDelete

const contractdebuglogsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contractdebuglogsIdDelete
 * `DELETE: /contractdebuglogs/{id}`
 * Delete ContractDebugLog
 */
export const contractdebuglogsIdDelete = buildCall() //
  .args<rt.Static<typeof contractdebuglogsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contractdebuglogs/${args.id}`)
  .parseJson(withRuntype(contractDebugLogRt))
  .build();

// Operation: contractdebuglogsGet

const contractdebuglogsGetResponseBodyRt = rt.Array(contractDebugLogRt);

/**
 * operation ID: contractdebuglogsGet
 * `GET: /contractdebuglogs`
 * Query ContractDebugLog
 */
export const contractdebuglogsGet = buildCall() //
  .method('get')
  .path('/contractdebuglogs')
  .parseJson(withRuntype(contractdebuglogsGetResponseBodyRt))
  .build();

// Operation: contractdebuglogsPost

const contractdebuglogsPostArgsRt = rt
  .Record({ ContractDebugLog: contractDebugLogRt })
  .asReadonly();

/**
 * operation ID: contractdebuglogsPost
 * `POST: /contractdebuglogs`
 * Create ContractDebugLog
 */
export const contractdebuglogsPost = buildCall() //
  .args<rt.Static<typeof contractdebuglogsPostArgsRt>>()
  .method('post')
  .path('/contractdebuglogs')
  .body((args) => args.ContractDebugLog)
  .build();

// Operation: contractparametersIdGet

const contractparametersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractparametersIdGet
 * `GET: /contractparameters/{id}`
 * Get ContractParameter
 */
export const contractparametersIdGet = buildCall() //
  .args<rt.Static<typeof contractparametersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contractparameters/${args.id}`)
  .parseJson(withRuntype(contractParameterRt))
  .build();

// Operation: contractparametersIdPut

const contractparametersIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractParameter: contractParameterRt })
  .asReadonly();

/**
 * operation ID: contractparametersIdPut
 * `PUT: /contractparameters/{id}`
 * Update ContractParameter
 */
export const contractparametersIdPut = buildCall() //
  .args<rt.Static<typeof contractparametersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contractparameters/${args.id}`)
  .body((args) => args.ContractParameter)
  .parseJson(withRuntype(contractParameterRt))
  .build();

// Operation: contractparametersIdDelete

const contractparametersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contractparametersIdDelete
 * `DELETE: /contractparameters/{id}`
 * Delete ContractParameter
 */
export const contractparametersIdDelete = buildCall() //
  .args<rt.Static<typeof contractparametersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contractparameters/${args.id}`)
  .parseJson(withRuntype(contractParameterRt))
  .build();

// Operation: contractparametersGet

const contractparametersGetResponseBodyRt = rt.Array(contractParameterRt);

/**
 * operation ID: contractparametersGet
 * `GET: /contractparameters`
 * Query ContractParameter
 */
export const contractparametersGet = buildCall() //
  .method('get')
  .path('/contractparameters')
  .parseJson(withRuntype(contractparametersGetResponseBodyRt))
  .build();

// Operation: contractparametersPost

const contractparametersPostArgsRt = rt
  .Record({ ContractParameter: contractParameterRt })
  .asReadonly();

/**
 * operation ID: contractparametersPost
 * `POST: /contractparameters`
 * Create ContractParameter
 */
export const contractparametersPost = buildCall() //
  .args<rt.Static<typeof contractparametersPostArgsRt>>()
  .method('post')
  .path('/contractparameters')
  .body((args) => args.ContractParameter)
  .build();

// Operation: contractrunlogsIdGet

const contractrunlogsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractrunlogsIdGet
 * `GET: /contractrunlogs/{id}`
 * Get ContractRunLog
 */
export const contractrunlogsIdGet = buildCall() //
  .args<rt.Static<typeof contractrunlogsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contractrunlogs/${args.id}`)
  .parseJson(withRuntype(contractRunLogRt))
  .build();

// Operation: contractrunlogsIdPut

const contractrunlogsIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractRunLog: contractRunLogRt })
  .asReadonly();

/**
 * operation ID: contractrunlogsIdPut
 * `PUT: /contractrunlogs/{id}`
 * Update ContractRunLog
 */
export const contractrunlogsIdPut = buildCall() //
  .args<rt.Static<typeof contractrunlogsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contractrunlogs/${args.id}`)
  .body((args) => args.ContractRunLog)
  .parseJson(withRuntype(contractRunLogRt))
  .build();

// Operation: contractrunlogsIdDelete

const contractrunlogsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contractrunlogsIdDelete
 * `DELETE: /contractrunlogs/{id}`
 * Delete ContractRunLog
 */
export const contractrunlogsIdDelete = buildCall() //
  .args<rt.Static<typeof contractrunlogsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contractrunlogs/${args.id}`)
  .parseJson(withRuntype(contractRunLogRt))
  .build();

// Operation: contractrunlogsGet

const contractrunlogsGetResponseBodyRt = rt.Array(contractRunLogRt);

/**
 * operation ID: contractrunlogsGet
 * `GET: /contractrunlogs`
 * Query ContractRunLog
 */
export const contractrunlogsGet = buildCall() //
  .method('get')
  .path('/contractrunlogs')
  .parseJson(withRuntype(contractrunlogsGetResponseBodyRt))
  .build();

// Operation: contractrunlogsPost

const contractrunlogsPostArgsRt = rt
  .Record({ ContractRunLog: contractRunLogRt })
  .asReadonly();

/**
 * operation ID: contractrunlogsPost
 * `POST: /contractrunlogs`
 * Create ContractRunLog
 */
export const contractrunlogsPost = buildCall() //
  .args<rt.Static<typeof contractrunlogsPostArgsRt>>()
  .method('post')
  .path('/contractrunlogs')
  .body((args) => args.ContractRunLog)
  .build();

// Operation: contracttransactionsIdGet

const contracttransactionsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contracttransactionsIdGet
 * `GET: /contracttransactions/{id}`
 * Get ContractTransaction
 */
export const contracttransactionsIdGet = buildCall() //
  .args<rt.Static<typeof contracttransactionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contracttransactions/${args.id}`)
  .parseJson(withRuntype(contractTransactionRt))
  .build();

// Operation: contracttransactionsIdPut

const contracttransactionsIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractTransaction: contractTransactionRt })
  .asReadonly();

/**
 * operation ID: contracttransactionsIdPut
 * `PUT: /contracttransactions/{id}`
 * Update ContractTransaction
 */
export const contracttransactionsIdPut = buildCall() //
  .args<rt.Static<typeof contracttransactionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contracttransactions/${args.id}`)
  .body((args) => args.ContractTransaction)
  .parseJson(withRuntype(contractTransactionRt))
  .build();

// Operation: contracttransactionsIdDelete

const contracttransactionsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contracttransactionsIdDelete
 * `DELETE: /contracttransactions/{id}`
 * Delete ContractTransaction
 */
export const contracttransactionsIdDelete = buildCall() //
  .args<rt.Static<typeof contracttransactionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contracttransactions/${args.id}`)
  .parseJson(withRuntype(contractTransactionRt))
  .build();

// Operation: contracttransactionsGet

const contracttransactionsGetResponseBodyRt = rt.Array(contractTransactionRt);

/**
 * operation ID: contracttransactionsGet
 * `GET: /contracttransactions`
 * Query ContractTransaction
 */
export const contracttransactionsGet = buildCall() //
  .method('get')
  .path('/contracttransactions')
  .parseJson(withRuntype(contracttransactionsGetResponseBodyRt))
  .build();

// Operation: contracttransactionsPost

const contracttransactionsPostArgsRt = rt
  .Record({ ContractTransaction: contractTransactionRt })
  .asReadonly();

/**
 * operation ID: contracttransactionsPost
 * `POST: /contracttransactions`
 * Create ContractTransaction
 */
export const contracttransactionsPost = buildCall() //
  .args<rt.Static<typeof contracttransactionsPostArgsRt>>()
  .method('post')
  .path('/contracttransactions')
  .body((args) => args.ContractTransaction)
  .build();

// Operation: contracttriggersIdGet

const contracttriggersIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: contracttriggersIdGet
 * `GET: /contracttriggers/{id}`
 * Get ContractTrigger
 */
export const contracttriggersIdGet = buildCall() //
  .args<rt.Static<typeof contracttriggersIdGetArgsRt>>()
  .method('get')
  .path((args) => `/contracttriggers/${args.id}`)
  .parseJson(withRuntype(contractTriggerRt))
  .build();

// Operation: contracttriggersIdPut

const contracttriggersIdPutArgsRt = rt
  .Record({ id: rt.Number, ContractTrigger: contractTriggerRt })
  .asReadonly();

/**
 * operation ID: contracttriggersIdPut
 * `PUT: /contracttriggers/{id}`
 * Update ContractTrigger
 */
export const contracttriggersIdPut = buildCall() //
  .args<rt.Static<typeof contracttriggersIdPutArgsRt>>()
  .method('put')
  .path((args) => `/contracttriggers/${args.id}`)
  .body((args) => args.ContractTrigger)
  .parseJson(withRuntype(contractTriggerRt))
  .build();

// Operation: contracttriggersIdDelete

const contracttriggersIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: contracttriggersIdDelete
 * `DELETE: /contracttriggers/{id}`
 * Delete ContractTrigger
 */
export const contracttriggersIdDelete = buildCall() //
  .args<rt.Static<typeof contracttriggersIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/contracttriggers/${args.id}`)
  .parseJson(withRuntype(contractTriggerRt))
  .build();

// Operation: contracttriggersGet

const contracttriggersGetResponseBodyRt = rt.Array(contractTriggerRt);

/**
 * operation ID: contracttriggersGet
 * `GET: /contracttriggers`
 * Query ContractTrigger
 */
export const contracttriggersGet = buildCall() //
  .method('get')
  .path('/contracttriggers')
  .parseJson(withRuntype(contracttriggersGetResponseBodyRt))
  .build();

// Operation: contracttriggersPost

const contracttriggersPostArgsRt = rt
  .Record({ ContractTrigger: contractTriggerRt })
  .asReadonly();

/**
 * operation ID: contracttriggersPost
 * `POST: /contracttriggers`
 * Create ContractTrigger
 */
export const contracttriggersPost = buildCall() //
  .args<rt.Static<typeof contracttriggersPostArgsRt>>()
  .method('post')
  .path('/contracttriggers')
  .body((args) => args.ContractTrigger)
  .build();

// Operation: commentsIdGet

const commentsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: commentsIdGet
 * `GET: /comments/{id}`
 * Get Comment
 */
export const commentsIdGet = buildCall() //
  .args<rt.Static<typeof commentsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/comments/${args.id}`)
  .parseJson(withRuntype(commentRt))
  .build();

// Operation: commentsIdPut

const commentsIdPutArgsRt = rt
  .Record({ id: rt.Number, Comment: commentRt })
  .asReadonly();

/**
 * operation ID: commentsIdPut
 * `PUT: /comments/{id}`
 * Update Comment
 */
export const commentsIdPut = buildCall() //
  .args<rt.Static<typeof commentsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/comments/${args.id}`)
  .body((args) => args.Comment)
  .parseJson(withRuntype(commentRt))
  .build();

// Operation: commentsIdDelete

const commentsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: commentsIdDelete
 * `DELETE: /comments/{id}`
 * Delete Comment
 */
export const commentsIdDelete = buildCall() //
  .args<rt.Static<typeof commentsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/comments/${args.id}`)
  .parseJson(withRuntype(commentRt))
  .build();

// Operation: commentsGet

const commentsGetResponseBodyRt = rt.Array(commentRt);

/**
 * operation ID: commentsGet
 * `GET: /comments`
 * Query Comment
 */
export const commentsGet = buildCall() //
  .method('get')
  .path('/comments')
  .parseJson(withRuntype(commentsGetResponseBodyRt))
  .build();

// Operation: commentsEntitytypeEntityidIdDelete

const commentsEntitytypeEntityidIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: commentsEntitytypeEntityidIdDelete
 * `DELETE: /comments/{entitytype}/{entityid}/{id}`
 * Delete Comment
 */
export const commentsEntitytypeEntityidIdDelete = buildCall() //
  .args<rt.Static<typeof commentsEntitytypeEntityidIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/comments/{entitytype}/{entityid}/${args.id}`)
  .parseJson(withRuntype(commentRt))
  .build();

// Operation: commentsEntitytypeEntityidGet

const commentsEntitytypeEntityidGetResponseBodyRt = rt.Array(commentRt);

/**
 * operation ID: commentsEntitytypeEntityidGet
 * `GET: /comments/{entitytype}/{entityid}`
 * Query Comment
 */
export const commentsEntitytypeEntityidGet = buildCall() //
  .method('get')
  .path('/comments/{entitytype}/{entityid}')
  .parseJson(withRuntype(commentsEntitytypeEntityidGetResponseBodyRt))
  .build();

// Operation: commentsEntitytypeEntityidPost

const commentsEntitytypeEntityidPostArgsRt = rt
  .Record({ Comment: commentRt })
  .asReadonly();

/**
 * operation ID: commentsEntitytypeEntityidPost
 * `POST: /comments/{entitytype}/{entityid}`
 * Create Comment
 */
export const commentsEntitytypeEntityidPost = buildCall() //
  .args<rt.Static<typeof commentsEntitytypeEntityidPostArgsRt>>()
  .method('post')
  .path('/comments/{entitytype}/{entityid}')
  .body((args) => args.Comment)
  .build();

// Operation: notificationsActionCountGet

const notificationsActionCountGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: notificationsActionCountGet
 * `GET: /notifications?action=count`
 * count Action
 */
export const notificationsActionCountGet = buildCall() //
  .method('get')
  .path('/notifications?action=count')
  .parseJson(withRuntype(notificationsActionCountGetResponseBodyRt))
  .build();

// Operation: notificationsIdActionMarkAsReadPut

const notificationsIdActionMarkAsReadPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: notificationsIdActionMarkAsReadPut
 * `PUT: /notifications/{id}?action=mark-as-read`
 * mark-as-read Action
 */
export const notificationsIdActionMarkAsReadPut = buildCall() //
  .args<rt.Static<typeof notificationsIdActionMarkAsReadPutArgsRt>>()
  .method('put')
  .path((args) => `/notifications/${args.id}?action=mark-as-read`)
  .parseJson(withRuntype(notificationRt))
  .build();

// Operation: notificationsIdActionMarkAsMarkedPut

const notificationsIdActionMarkAsMarkedPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: notificationsIdActionMarkAsMarkedPut
 * `PUT: /notifications/{id}?action=mark-as-marked`
 * mark-as-marked Action
 */
export const notificationsIdActionMarkAsMarkedPut = buildCall() //
  .args<rt.Static<typeof notificationsIdActionMarkAsMarkedPutArgsRt>>()
  .method('put')
  .path((args) => `/notifications/${args.id}?action=mark-as-marked`)
  .parseJson(withRuntype(notificationRt))
  .build();

// Operation: notificationsIdActionMarkAsUnreadPut

const notificationsIdActionMarkAsUnreadPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: notificationsIdActionMarkAsUnreadPut
 * `PUT: /notifications/{id}?action=mark-as-unread`
 * mark-as-unread Action
 */
export const notificationsIdActionMarkAsUnreadPut = buildCall() //
  .args<rt.Static<typeof notificationsIdActionMarkAsUnreadPutArgsRt>>()
  .method('put')
  .path((args) => `/notifications/${args.id}?action=mark-as-unread`)
  .parseJson(withRuntype(notificationRt))
  .build();

// Operation: notificationsIdGet

const notificationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: notificationsIdGet
 * `GET: /notifications/{id}`
 * Get Notification
 */
export const notificationsIdGet = buildCall() //
  .args<rt.Static<typeof notificationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/notifications/${args.id}`)
  .parseJson(withRuntype(notificationRt))
  .build();

// Operation: notificationsIdDelete

const notificationsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: notificationsIdDelete
 * `DELETE: /notifications/{id}`
 * Delete Notification
 */
export const notificationsIdDelete = buildCall() //
  .args<rt.Static<typeof notificationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/notifications/${args.id}`)
  .parseJson(withRuntype(notificationRt))
  .build();

// Operation: notificationsGet

const notificationsGetResponseBodyRt = rt.Array(notificationRt);

/**
 * operation ID: notificationsGet
 * `GET: /notifications`
 * Query Notification
 */
export const notificationsGet = buildCall() //
  .method('get')
  .path('/notifications')
  .parseJson(withRuntype(notificationsGetResponseBodyRt))
  .build();

// Operation: notificationsPost

const notificationsPostArgsRt = rt
  .Record({ Notification: notificationRt })
  .asReadonly();

/**
 * operation ID: notificationsPost
 * `POST: /notifications`
 * Create Notification
 */
export const notificationsPost = buildCall() //
  .args<rt.Static<typeof notificationsPostArgsRt>>()
  .method('post')
  .path('/notifications')
  .body((args) => args.Notification)
  .build();

// Operation: altinnaccountlinksActionGetByAccountnumberGet

const altinnaccountlinksActionGetByAccountnumberGetArgsRt = rt
  .Record({ accountNumber: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: altinnaccountlinksActionGetByAccountnumberGet
 * `GET: /altinnaccountlinks?action=get-by-accountnumber`
 * get-by-accountnumber Action
 */
export const altinnaccountlinksActionGetByAccountnumberGet = buildCall() //
  .args<rt.Static<typeof altinnaccountlinksActionGetByAccountnumberGetArgsRt>>()
  .method('get')
  .path((args) => `/altinnaccountlinks?action=get-by-accountnumber`)
  .parseJson(withRuntype(altinnAccountLinkRt))
  .build();

// Operation: altinnaccountlinksActionTypeAltinnaccountsGet

const altinnaccountlinksActionTypeAltinnaccountsGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: altinnaccountlinksActionTypeAltinnaccountsGet
 * `GET: /altinnaccountlinks?action=type-altinnaccounts`
 * type-altinnaccounts Action
 */
export const altinnaccountlinksActionTypeAltinnaccountsGet = buildCall() //
  .method('get')
  .path('/altinnaccountlinks?action=type-altinnaccounts')
  .parseJson(
    withRuntype(altinnaccountlinksActionTypeAltinnaccountsGetResponseBodyRt),
  )
  .build();

// Operation: altinnaccountlinksIdGet

const altinnaccountlinksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: altinnaccountlinksIdGet
 * `GET: /altinnaccountlinks/{id}`
 * Get AltinnAccountLink
 */
export const altinnaccountlinksIdGet = buildCall() //
  .args<rt.Static<typeof altinnaccountlinksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/altinnaccountlinks/${args.id}`)
  .parseJson(withRuntype(altinnAccountLinkRt))
  .build();

// Operation: altinnaccountlinksIdPut

const altinnaccountlinksIdPutArgsRt = rt
  .Record({ id: rt.Number, AltinnAccountLink: altinnAccountLinkRt })
  .asReadonly();

/**
 * operation ID: altinnaccountlinksIdPut
 * `PUT: /altinnaccountlinks/{id}`
 * Update AltinnAccountLink
 */
export const altinnaccountlinksIdPut = buildCall() //
  .args<rt.Static<typeof altinnaccountlinksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/altinnaccountlinks/${args.id}`)
  .body((args) => args.AltinnAccountLink)
  .parseJson(withRuntype(altinnAccountLinkRt))
  .build();

// Operation: altinnaccountlinksIdDelete

const altinnaccountlinksIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: altinnaccountlinksIdDelete
 * `DELETE: /altinnaccountlinks/{id}`
 * Delete AltinnAccountLink
 */
export const altinnaccountlinksIdDelete = buildCall() //
  .args<rt.Static<typeof altinnaccountlinksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/altinnaccountlinks/${args.id}`)
  .parseJson(withRuntype(altinnAccountLinkRt))
  .build();

// Operation: altinnaccountlinksGet

const altinnaccountlinksGetResponseBodyRt = rt.Array(altinnAccountLinkRt);

/**
 * operation ID: altinnaccountlinksGet
 * `GET: /altinnaccountlinks`
 * Query AltinnAccountLink
 */
export const altinnaccountlinksGet = buildCall() //
  .method('get')
  .path('/altinnaccountlinks')
  .parseJson(withRuntype(altinnaccountlinksGetResponseBodyRt))
  .build();

// Operation: altinnaccountlinksPost

const altinnaccountlinksPostArgsRt = rt
  .Record({ AltinnAccountLink: altinnAccountLinkRt })
  .asReadonly();

/**
 * operation ID: altinnaccountlinksPost
 * `POST: /altinnaccountlinks`
 * Create AltinnAccountLink
 */
export const altinnaccountlinksPost = buildCall() //
  .args<rt.Static<typeof altinnaccountlinksPostArgsRt>>()
  .method('post')
  .path('/altinnaccountlinks')
  .body((args) => args.AltinnAccountLink)
  .build();

// Operation: taxreportIdGet

const taxreportIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: taxreportIdGet
 * `GET: /taxreport/{id}`
 * Get TaxReport
 */
export const taxreportIdGet = buildCall() //
  .args<rt.Static<typeof taxreportIdGetArgsRt>>()
  .method('get')
  .path((args) => `/taxreport/${args.id}`)
  .parseJson(withRuntype(taxReportRt))
  .build();

// Operation: taxreportIdPut

const taxreportIdPutArgsRt = rt
  .Record({ id: rt.Number, TaxReport: taxReportRt })
  .asReadonly();

/**
 * operation ID: taxreportIdPut
 * `PUT: /taxreport/{id}`
 * Update TaxReport
 */
export const taxreportIdPut = buildCall() //
  .args<rt.Static<typeof taxreportIdPutArgsRt>>()
  .method('put')
  .path((args) => `/taxreport/${args.id}`)
  .body((args) => args.TaxReport)
  .parseJson(withRuntype(taxReportRt))
  .build();

// Operation: taxreportIdDelete

const taxreportIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: taxreportIdDelete
 * `DELETE: /taxreport/{id}`
 * Delete TaxReport
 */
export const taxreportIdDelete = buildCall() //
  .args<rt.Static<typeof taxreportIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/taxreport/${args.id}`)
  .parseJson(withRuntype(taxReportRt))
  .build();

// Operation: taxreportGet

const taxreportGetResponseBodyRt = rt.Array(taxReportRt);

/**
 * operation ID: taxreportGet
 * `GET: /taxreport`
 * Query TaxReport
 */
export const taxreportGet = buildCall() //
  .method('get')
  .path('/taxreport')
  .parseJson(withRuntype(taxreportGetResponseBodyRt))
  .build();

// Operation: taxreportPost

const taxreportPostArgsRt = rt.Record({ TaxReport: taxReportRt }).asReadonly();

/**
 * operation ID: taxreportPost
 * `POST: /taxreport`
 * Create TaxReport
 */
export const taxreportPost = buildCall() //
  .args<rt.Static<typeof taxreportPostArgsRt>>()
  .method('post')
  .path('/taxreport')
  .body((args) => args.TaxReport)
  .build();

// Operation: accountsActionValidGet

const accountsActionValidGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: accountsActionValidGet
 * `GET: /accounts?action=valid`
 * valid Action
 */
export const accountsActionValidGet = buildCall() //
  .method('get')
  .path('/accounts?action=valid')
  .parseJson(withRuntype(accountsActionValidGetResponseBodyRt))
  .build();

// Operation: accountsActionValidWithHiddenGet

const accountsActionValidWithHiddenGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: accountsActionValidWithHiddenGet
 * `GET: /accounts?action=valid-with-hidden`
 * valid-with-hidden Action
 */
export const accountsActionValidWithHiddenGet = buildCall() //
  .method('get')
  .path('/accounts?action=valid-with-hidden')
  .parseJson(withRuntype(accountsActionValidWithHiddenGetResponseBodyRt))
  .build();

// Operation: accountsActionSynchronizeStandardAccountSetupPut

/**
 * operation ID:
 * accountsActionSynchronizeStandardAccountSetupPut
 * `PUT: /accounts?action=synchronize-standard-account-setup`
 * synchronize-standard-account-setup Action
 */
export const accountsActionSynchronizeStandardAccountSetupPut = buildCall() //
  .method('put')
  .path('/accounts?action=synchronize-standard-account-setup')
  .build();

// Operation: accountsActionProfitAndLossPeriodicalGet

const accountsActionProfitAndLossPeriodicalGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionProfitAndLossPeriodicalGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: accountsActionProfitAndLossPeriodicalGet
 * `GET: /accounts?action=profit-and-loss-periodical`
 * profit-and-loss-periodical Action
 */
export const accountsActionProfitAndLossPeriodicalGet = buildCall() //
  .args<rt.Static<typeof accountsActionProfitAndLossPeriodicalGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=profit-and-loss-periodical`)
  .parseJson(
    withRuntype(accountsActionProfitAndLossPeriodicalGetResponseBodyRt),
  )
  .build();

// Operation: accountsActionProfitAndLossGroupedGet

const accountsActionProfitAndLossGroupedGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionProfitAndLossGroupedGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: accountsActionProfitAndLossGroupedGet
 * `GET: /accounts?action=profit-and-loss-grouped`
 * profit-and-loss-grouped Action
 */
export const accountsActionProfitAndLossGroupedGet = buildCall() //
  .args<rt.Static<typeof accountsActionProfitAndLossGroupedGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=profit-and-loss-grouped`)
  .parseJson(withRuntype(accountsActionProfitAndLossGroupedGetResponseBodyRt))
  .build();

// Operation: accountsActionBalanceGroupedGet

const accountsActionBalanceGroupedGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionBalanceGroupedGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: accountsActionBalanceGroupedGet
 * `GET: /accounts?action=balance-grouped`
 * balance-grouped Action
 */
export const accountsActionBalanceGroupedGet = buildCall() //
  .args<rt.Static<typeof accountsActionBalanceGroupedGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=balance-grouped`)
  .parseJson(withRuntype(accountsActionBalanceGroupedGetResponseBodyRt))
  .build();

// Operation: accountsActionBalanceGet

const accountsActionBalanceGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionBalanceGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: accountsActionBalanceGet
 * `GET: /accounts?action=balance`
 * balance Action
 */
export const accountsActionBalanceGet = buildCall() //
  .args<rt.Static<typeof accountsActionBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=balance`)
  .parseJson(withRuntype(accountsActionBalanceGetResponseBodyRt))
  .build();

// Operation: accountsActionPayablesByAgeGet

const accountsActionPayablesByAgeGetArgsRt = rt
  .Record({
    date: rt.String,
    accountFrom: rt.Number,
    accountTo: rt.Number,
    useDueDate: rt.String,
    accountType: rt.Number,
  })
  .asPartial()
  .asReadonly();

const accountsActionPayablesByAgeGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: accountsActionPayablesByAgeGet
 * `GET: /accounts?action=payables-by-age`
 * payables-by-age Action
 */
export const accountsActionPayablesByAgeGet = buildCall() //
  .args<rt.Static<typeof accountsActionPayablesByAgeGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=payables-by-age`)
  .parseJson(withRuntype(accountsActionPayablesByAgeGetResponseBodyRt))
  .build();

// Operation: accountsActionPayablesByAgeDetailedGet

const accountsActionPayablesByAgeDetailedGetArgsRt = rt
  .Record({
    date: rt.String,
    accountFrom: rt.Number,
    accountTo: rt.Number,
    useDueDate: rt.String,
    accountType: rt.Number,
  })
  .asPartial()
  .asReadonly();

const accountsActionPayablesByAgeDetailedGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: accountsActionPayablesByAgeDetailedGet
 * `GET: /accounts?action=payables-by-age-detailed`
 * payables-by-age-detailed Action
 */
export const accountsActionPayablesByAgeDetailedGet = buildCall() //
  .args<rt.Static<typeof accountsActionPayablesByAgeDetailedGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=payables-by-age-detailed`)
  .parseJson(withRuntype(accountsActionPayablesByAgeDetailedGetResponseBodyRt))
  .build();

// Operation: accountsActionGetAccountUsageGet

const accountsActionGetAccountUsageGetArgsRt = rt
  .Record({ accountID: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionGetAccountUsageGetResponseBodyRt = rt.String;

/**
 * operation ID: accountsActionGetAccountUsageGet
 * `GET: /accounts?action=get-account-usage`
 * get-account-usage Action
 */
export const accountsActionGetAccountUsageGet = buildCall() //
  .args<rt.Static<typeof accountsActionGetAccountUsageGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=get-account-usage`)
  .parseJson(withRuntype(accountsActionGetAccountUsageGetResponseBodyRt))
  .build();

// Operation: accountsActionGetAccountUsageDetailedGet

const accountsActionGetAccountUsageDetailedGetArgsRt = rt
  .Record({ accountID: rt.Number, maxHitPerEntity: rt.Number })
  .asPartial()
  .asReadonly();

const accountsActionGetAccountUsageDetailedGetResponseBodyRt = rt.Array(
  accountUsageReferenceRt,
);

/**
 * operation ID: accountsActionGetAccountUsageDetailedGet
 * `GET: /accounts?action=get-account-usage-detailed`
 * get-account-usage-detailed Action
 */
export const accountsActionGetAccountUsageDetailedGet = buildCall() //
  .args<rt.Static<typeof accountsActionGetAccountUsageDetailedGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts?action=get-account-usage-detailed`)
  .parseJson(
    withRuntype(accountsActionGetAccountUsageDetailedGetResponseBodyRt),
  )
  .build();

// Operation: accountsIdActionIsAccountUsedGet

const accountsIdActionIsAccountUsedGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const accountsIdActionIsAccountUsedGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: accountsIdActionIsAccountUsedGet
 * `GET: /accounts/{id}?action=is-account-used`
 * is-account-used Action
 */
export const accountsIdActionIsAccountUsedGet = buildCall() //
  .args<rt.Static<typeof accountsIdActionIsAccountUsedGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts/${args.id}?action=is-account-used`)
  .parseJson(withRuntype(accountsIdActionIsAccountUsedGetResponseBodyRt))
  .build();

// Operation: accountsActionBulkSavePut

const accountsActionBulkSavePutArgsRt = rt
  .Record({ accounts: rt.Array(accountRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: accountsActionBulkSavePut
 * `PUT: /accounts?action=bulk-save`
 * bulk-save Action
 */
export const accountsActionBulkSavePut = buildCall() //
  .args<rt.Static<typeof accountsActionBulkSavePutArgsRt>>()
  .method('put')
  .path('/accounts?action=bulk-save')
  .body((args) => args.accounts)
  .build();

// Operation: accountsActionSaftmappingAccountsGet

const accountsActionSaftmappingAccountsGetResponseBodyRt =
  rt.Array(saftMappingAccountRt);

/**
 * operation ID: accountsActionSaftmappingAccountsGet
 * `GET: /accounts?action=saftmapping-accounts`
 * saftmapping-accounts Action
 */
export const accountsActionSaftmappingAccountsGet = buildCall() //
  .method('get')
  .path('/accounts?action=saftmapping-accounts')
  .parseJson(withRuntype(accountsActionSaftmappingAccountsGetResponseBodyRt))
  .build();

// Operation: accountsActionSetSaftmappingsPut

const accountsActionSetSaftmappingsPutArgsRt = rt
  .Record({ accountNumbers: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: accountsActionSetSaftmappingsPut
 * `PUT: /accounts?action=set-saftmappings`
 * set-saftmappings Action
 */
export const accountsActionSetSaftmappingsPut = buildCall() //
  .args<rt.Static<typeof accountsActionSetSaftmappingsPutArgsRt>>()
  .method('put')
  .path('/accounts?action=set-saftmappings')
  .body((args) => args.accountNumbers)
  .build();

// Operation: accountsIdGet

const accountsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accountsIdGet
 * `GET: /accounts/{id}`
 * Get Account
 */
export const accountsIdGet = buildCall() //
  .args<rt.Static<typeof accountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts/${args.id}`)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsIdPut

const accountsIdPutArgsRt = rt
  .Record({ id: rt.Number, Account: accountRt })
  .asReadonly();

/**
 * operation ID: accountsIdPut
 * `PUT: /accounts/{id}`
 * Update Account
 */
export const accountsIdPut = buildCall() //
  .args<rt.Static<typeof accountsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accounts/${args.id}`)
  .body((args) => args.Account)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsIdDelete

const accountsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accountsIdDelete
 * `DELETE: /accounts/{id}`
 * Delete Account
 */
export const accountsIdDelete = buildCall() //
  .args<rt.Static<typeof accountsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accounts/${args.id}`)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsGet

const accountsGetResponseBodyRt = rt.Array(accountRt);

/**
 * operation ID: accountsGet
 * `GET: /accounts`
 * Query Account
 */
export const accountsGet = buildCall() //
  .method('get')
  .path('/accounts')
  .parseJson(withRuntype(accountsGetResponseBodyRt))
  .build();

// Operation: accountsPost

const accountsPostArgsRt = rt.Record({ Account: accountRt }).asReadonly();

/**
 * operation ID: accountsPost
 * `POST: /accounts`
 * Create Account
 */
export const accountsPost = buildCall() //
  .args<rt.Static<typeof accountsPostArgsRt>>()
  .method('post')
  .path('/accounts')
  .body((args) => args.Account)
  .build();

// Operation: accountgroupsIdGet

const accountgroupsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accountgroupsIdGet
 * `GET: /accountgroups/{id}`
 * Get AccountGroup
 */
export const accountgroupsIdGet = buildCall() //
  .args<rt.Static<typeof accountgroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accountgroups/${args.id}`)
  .parseJson(withRuntype(accountGroupRt))
  .build();

// Operation: accountgroupsIdPut

const accountgroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, AccountGroup: accountGroupRt })
  .asReadonly();

/**
 * operation ID: accountgroupsIdPut
 * `PUT: /accountgroups/{id}`
 * Update AccountGroup
 */
export const accountgroupsIdPut = buildCall() //
  .args<rt.Static<typeof accountgroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accountgroups/${args.id}`)
  .body((args) => args.AccountGroup)
  .parseJson(withRuntype(accountGroupRt))
  .build();

// Operation: accountgroupsIdDelete

const accountgroupsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accountgroupsIdDelete
 * `DELETE: /accountgroups/{id}`
 * Delete AccountGroup
 */
export const accountgroupsIdDelete = buildCall() //
  .args<rt.Static<typeof accountgroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accountgroups/${args.id}`)
  .parseJson(withRuntype(accountGroupRt))
  .build();

// Operation: accountgroupsGet

const accountgroupsGetResponseBodyRt = rt.Array(accountGroupRt);

/**
 * operation ID: accountgroupsGet
 * `GET: /accountgroups`
 * Query AccountGroup
 */
export const accountgroupsGet = buildCall() //
  .method('get')
  .path('/accountgroups')
  .parseJson(withRuntype(accountgroupsGetResponseBodyRt))
  .build();

// Operation: accountgroupsPost

const accountgroupsPostArgsRt = rt
  .Record({ AccountGroup: accountGroupRt })
  .asReadonly();

/**
 * operation ID: accountgroupsPost
 * `POST: /accountgroups`
 * Create AccountGroup
 */
export const accountgroupsPost = buildCall() //
  .args<rt.Static<typeof accountgroupsPostArgsRt>>()
  .method('post')
  .path('/accountgroups')
  .body((args) => args.AccountGroup)
  .build();

// Operation: accountgroupsetsIdGet

const accountgroupsetsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accountgroupsetsIdGet
 * `GET: /accountgroupsets/{id}`
 * Get AccountGroupSet
 */
export const accountgroupsetsIdGet = buildCall() //
  .args<rt.Static<typeof accountgroupsetsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accountgroupsets/${args.id}`)
  .parseJson(withRuntype(accountGroupSetRt))
  .build();

// Operation: accountgroupsetsIdPut

const accountgroupsetsIdPutArgsRt = rt
  .Record({ id: rt.Number, AccountGroupSet: accountGroupSetRt })
  .asReadonly();

/**
 * operation ID: accountgroupsetsIdPut
 * `PUT: /accountgroupsets/{id}`
 * Update AccountGroupSet
 */
export const accountgroupsetsIdPut = buildCall() //
  .args<rt.Static<typeof accountgroupsetsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accountgroupsets/${args.id}`)
  .body((args) => args.AccountGroupSet)
  .parseJson(withRuntype(accountGroupSetRt))
  .build();

// Operation: accountgroupsetsIdDelete

const accountgroupsetsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountgroupsetsIdDelete
 * `DELETE: /accountgroupsets/{id}`
 * Delete AccountGroupSet
 */
export const accountgroupsetsIdDelete = buildCall() //
  .args<rt.Static<typeof accountgroupsetsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accountgroupsets/${args.id}`)
  .parseJson(withRuntype(accountGroupSetRt))
  .build();

// Operation: accountgroupsetsGet

const accountgroupsetsGetResponseBodyRt = rt.Array(accountGroupSetRt);

/**
 * operation ID: accountgroupsetsGet
 * `GET: /accountgroupsets`
 * Query AccountGroupSet
 */
export const accountgroupsetsGet = buildCall() //
  .method('get')
  .path('/accountgroupsets')
  .parseJson(withRuntype(accountgroupsetsGetResponseBodyRt))
  .build();

// Operation: accountgroupsetsPost

const accountgroupsetsPostArgsRt = rt
  .Record({ AccountGroupSet: accountGroupSetRt })
  .asReadonly();

/**
 * operation ID: accountgroupsetsPost
 * `POST: /accountgroupsets`
 * Create AccountGroupSet
 */
export const accountgroupsetsPost = buildCall() //
  .args<rt.Static<typeof accountgroupsetsPostArgsRt>>()
  .method('post')
  .path('/accountgroupsets')
  .body((args) => args.AccountGroupSet)
  .build();

// Operation: accountmandatorydimensionActionCheckRecurringinvoicesGet

const accountmandatorydimensionActionCheckRecurringinvoicesGetArgsRt = rt
  .Record({ accountID: rt.Number })
  .asPartial()
  .asReadonly();

const accountmandatorydimensionActionCheckRecurringinvoicesGetResponseBodyRt =
  rt.String;

/**
 * operation ID:
 * accountmandatorydimensionActionCheckRecurringinvoicesGet
 * `GET:
 * /accountmandatorydimension?action=check-recurringinvoices`
 * check-recurringinvoices Action
 */
export const accountmandatorydimensionActionCheckRecurringinvoicesGet =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionCheckRecurringinvoicesGetArgsRt
      >
    >()
    .method('get')
    .path((args) => `/accountmandatorydimension?action=check-recurringinvoices`)
    .parseJson(
      withRuntype(
        accountmandatorydimensionActionCheckRecurringinvoicesGetResponseBodyRt,
      ),
    )
    .build();

// Operation: accountmandatorydimensionActionAddAccountsMandatoryDimensionsPut

const accountmandatorydimensionActionAddAccountsMandatoryDimensionsPutArgsRt =
  rt
    .Record({
      FromAccountNo: rt.Number,
      ToAccountNo: rt.Number,
      DimensionNo: rt.Number,
      MandatoryType: rt.Number,
    })
    .asPartial()
    .asReadonly();

const accountmandatorydimensionActionAddAccountsMandatoryDimensionsPutResponseBodyRt =
  rt.String;

/**
 * operation ID:
 * accountmandatorydimensionActionAddAccountsMandatoryDimensionsPut
 * `PUT:
 * /accountmandatorydimension?action=add-accounts-mandatory-dimensions`
 * add-accounts-mandatory-dimensions Action
 */
export const accountmandatorydimensionActionAddAccountsMandatoryDimensionsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionAddAccountsMandatoryDimensionsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/accountmandatorydimension?action=add-accounts-mandatory-dimensions`,
    )
    .parseJson(
      withRuntype(
        accountmandatorydimensionActionAddAccountsMandatoryDimensionsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: accountmandatorydimensionActionGetMandatoryDimensionsReportGet

const accountmandatorydimensionActionGetMandatoryDimensionsReportGetArgsRt = rt
  .Record({ accountID: rt.Number, dimensionsID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetMandatoryDimensionsReportGet
 * `GET:
 * /accountmandatorydimension?action=get-mandatory-dimensions-report`
 * get-mandatory-dimensions-report Action
 */
export const accountmandatorydimensionActionGetMandatoryDimensionsReportGet =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetMandatoryDimensionsReportGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-mandatory-dimensions-report`,
    )
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionActionGetMandatoryDimensionsReportByDimensionsPut

const accountmandatorydimensionActionGetMandatoryDimensionsReportByDimensionsPutArgsRt =
  rt
    .Record({ accountID: rt.Number, dimensions: dimensionsRt })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetMandatoryDimensionsReportByDimensionsPut
 * `PUT:
 * /accountmandatorydimension?action=get-mandatory-dimensions-report-by-dimensions`
 * get-mandatory-dimensions-report-by-dimensions Action
 */
export const accountmandatorydimensionActionGetMandatoryDimensionsReportByDimensionsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetMandatoryDimensionsReportByDimensionsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-mandatory-dimensions-report-by-dimensions`,
    )
    .body((args) => args.dimensions)
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionActionGetMandatoryDimensionsReportsPut

const accountmandatorydimensionActionGetMandatoryDimensionsReportsPutArgsRt = rt
  .Record({ items: rt.Array(accountDimensionRt) })
  .asPartial()
  .asReadonly();

const accountmandatorydimensionActionGetMandatoryDimensionsReportsPutResponseBodyRt =
  rt.Array(mandatoryDimensionAccountReportRt);

/**
 * operation ID:
 * accountmandatorydimensionActionGetMandatoryDimensionsReportsPut
 * `PUT:
 * /accountmandatorydimension?action=get-mandatory-dimensions-reports`
 * get-mandatory-dimensions-reports Action
 */
export const accountmandatorydimensionActionGetMandatoryDimensionsReportsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetMandatoryDimensionsReportsPutArgsRt
      >
    >()
    .method('put')
    .path('/accountmandatorydimension?action=get-mandatory-dimensions-reports')
    .body((args) => args.items)
    .parseJson(
      withRuntype(
        accountmandatorydimensionActionGetMandatoryDimensionsReportsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsIdGet

const accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsIdGetArgsRt =
  rt
    .Record({ customerID: rt.Number, dimensionsID: rt.Number })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsIdGet
 * `GET:
 * /accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensionsID`
 * get-customer-mandatory-dimensions-report-dimensionsID Action
 */
export const accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsIdGet =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsIdGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensionsID`,
    )
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsPut

const accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsPutArgsRt =
  rt
    .Record({ customerID: rt.Number, dimensions: dimensionsRt })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsPut
 * `PUT:
 * /accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensions`
 * get-customer-mandatory-dimensions-report-dimensions Action
 */
export const accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetCustomerMandatoryDimensionsReportDimensionsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-customer-mandatory-dimensions-report-dimensions`,
    )
    .body((args) => args.dimensions)
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsIdGet

const accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsIdGetArgsRt =
  rt
    .Record({ supplierID: rt.Number, dimensionsID: rt.Number })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsIdGet
 * `GET:
 * /accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensionsID`
 * get-supplier-mandatory-dimensions-report-dimensionsID Action
 */
export const accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsIdGet =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsIdGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensionsID`,
    )
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsPut

const accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsPutArgsRt =
  rt
    .Record({ supplierID: rt.Number, dimensions: dimensionsRt })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsPut
 * `PUT:
 * /accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensions`
 * get-supplier-mandatory-dimensions-report-dimensions Action
 */
export const accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof accountmandatorydimensionActionGetSupplierMandatoryDimensionsReportDimensionsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/accountmandatorydimension?action=get-supplier-mandatory-dimensions-report-dimensions`,
    )
    .body((args) => args.dimensions)
    .parseJson(withRuntype(mandatoryDimensionAccountReportRt))
    .build();

// Operation: accountmandatorydimensionIdGet

const accountmandatorydimensionIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountmandatorydimensionIdGet
 * `GET: /accountmandatorydimension/{id}`
 * Get AccountMandatoryDimension
 */
export const accountmandatorydimensionIdGet = buildCall() //
  .args<rt.Static<typeof accountmandatorydimensionIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accountmandatorydimension/${args.id}`)
  .parseJson(withRuntype(accountMandatoryDimensionRt))
  .build();

// Operation: accountmandatorydimensionIdPut

const accountmandatorydimensionIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    AccountMandatoryDimension: accountMandatoryDimensionRt,
  })
  .asReadonly();

/**
 * operation ID: accountmandatorydimensionIdPut
 * `PUT: /accountmandatorydimension/{id}`
 * Update AccountMandatoryDimension
 */
export const accountmandatorydimensionIdPut = buildCall() //
  .args<rt.Static<typeof accountmandatorydimensionIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accountmandatorydimension/${args.id}`)
  .body((args) => args.AccountMandatoryDimension)
  .parseJson(withRuntype(accountMandatoryDimensionRt))
  .build();

// Operation: accountmandatorydimensionIdDelete

const accountmandatorydimensionIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountmandatorydimensionIdDelete
 * `DELETE: /accountmandatorydimension/{id}`
 * Delete AccountMandatoryDimension
 */
export const accountmandatorydimensionIdDelete = buildCall() //
  .args<rt.Static<typeof accountmandatorydimensionIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accountmandatorydimension/${args.id}`)
  .parseJson(withRuntype(accountMandatoryDimensionRt))
  .build();

// Operation: accountmandatorydimensionGet

const accountmandatorydimensionGetResponseBodyRt = rt.Array(
  accountMandatoryDimensionRt,
);

/**
 * operation ID: accountmandatorydimensionGet
 * `GET: /accountmandatorydimension`
 * Query AccountMandatoryDimension
 */
export const accountmandatorydimensionGet = buildCall() //
  .method('get')
  .path('/accountmandatorydimension')
  .parseJson(withRuntype(accountmandatorydimensionGetResponseBodyRt))
  .build();

// Operation: accountmandatorydimensionPost

const accountmandatorydimensionPostArgsRt = rt
  .Record({ AccountMandatoryDimension: accountMandatoryDimensionRt })
  .asReadonly();

/**
 * operation ID: accountmandatorydimensionPost
 * `POST: /accountmandatorydimension`
 * Create AccountMandatoryDimension
 */
export const accountmandatorydimensionPost = buildCall() //
  .args<rt.Static<typeof accountmandatorydimensionPostArgsRt>>()
  .method('post')
  .path('/accountmandatorydimension')
  .body((args) => args.AccountMandatoryDimension)
  .build();

// Operation: accrualsIdGet

const accrualsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accrualsIdGet
 * `GET: /accruals/{id}`
 * Get Accrual
 */
export const accrualsIdGet = buildCall() //
  .args<rt.Static<typeof accrualsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accruals/${args.id}`)
  .parseJson(withRuntype(accrualRt))
  .build();

// Operation: accrualsIdPut

const accrualsIdPutArgsRt = rt
  .Record({ id: rt.Number, Accrual: accrualRt })
  .asReadonly();

/**
 * operation ID: accrualsIdPut
 * `PUT: /accruals/{id}`
 * Update Accrual
 */
export const accrualsIdPut = buildCall() //
  .args<rt.Static<typeof accrualsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accruals/${args.id}`)
  .body((args) => args.Accrual)
  .parseJson(withRuntype(accrualRt))
  .build();

// Operation: accrualsIdDelete

const accrualsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: accrualsIdDelete
 * `DELETE: /accruals/{id}`
 * Delete Accrual
 */
export const accrualsIdDelete = buildCall() //
  .args<rt.Static<typeof accrualsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accruals/${args.id}`)
  .parseJson(withRuntype(accrualRt))
  .build();

// Operation: accrualsGet

const accrualsGetResponseBodyRt = rt.Array(accrualRt);

/**
 * operation ID: accrualsGet
 * `GET: /accruals`
 * Query Accrual
 */
export const accrualsGet = buildCall() //
  .method('get')
  .path('/accruals')
  .parseJson(withRuntype(accrualsGetResponseBodyRt))
  .build();

// Operation: accrualsPost

const accrualsPostArgsRt = rt.Record({ Accrual: accrualRt }).asReadonly();

/**
 * operation ID: accrualsPost
 * `POST: /accruals`
 * Create Accrual
 */
export const accrualsPost = buildCall() //
  .args<rt.Static<typeof accrualsPostArgsRt>>()
  .method('post')
  .path('/accruals')
  .body((args) => args.Accrual)
  .build();

// Operation: annualaccountnoteinfoIdActionRecreatePost

const annualaccountnoteinfoIdActionRecreatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualaccountnoteinfoIdActionRecreatePost
 * `POST: /annualaccountnoteinfo/{id}?action=recreate`
 * recreate Action
 */
export const annualaccountnoteinfoIdActionRecreatePost = buildCall() //
  .args<rt.Static<typeof annualaccountnoteinfoIdActionRecreatePostArgsRt>>()
  .method('post')
  .path((args) => `/annualaccountnoteinfo/${args.id}?action=recreate`)
  .parseJson(withRuntype(annualAccountNoteInfoRt))
  .build();

// Operation: annualaccountnoteinfoIdGet

const annualaccountnoteinfoIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: annualaccountnoteinfoIdGet
 * `GET: /annualaccountnoteinfo/{id}`
 * Get AnnualAccountNoteInfo
 */
export const annualaccountnoteinfoIdGet = buildCall() //
  .args<rt.Static<typeof annualaccountnoteinfoIdGetArgsRt>>()
  .method('get')
  .path((args) => `/annualaccountnoteinfo/${args.id}`)
  .parseJson(withRuntype(annualAccountNoteInfoRt))
  .build();

// Operation: annualaccountnoteinfoIdPut

const annualaccountnoteinfoIdPutArgsRt = rt
  .Record({ id: rt.Number, AnnualAccountNoteInfo: annualAccountNoteInfoRt })
  .asReadonly();

/**
 * operation ID: annualaccountnoteinfoIdPut
 * `PUT: /annualaccountnoteinfo/{id}`
 * Update AnnualAccountNoteInfo
 */
export const annualaccountnoteinfoIdPut = buildCall() //
  .args<rt.Static<typeof annualaccountnoteinfoIdPutArgsRt>>()
  .method('put')
  .path((args) => `/annualaccountnoteinfo/${args.id}`)
  .body((args) => args.AnnualAccountNoteInfo)
  .parseJson(withRuntype(annualAccountNoteInfoRt))
  .build();

// Operation: annualaccountnoteinfoIdDelete

const annualaccountnoteinfoIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: annualaccountnoteinfoIdDelete
 * `DELETE: /annualaccountnoteinfo/{id}`
 * Delete AnnualAccountNoteInfo
 */
export const annualaccountnoteinfoIdDelete = buildCall() //
  .args<rt.Static<typeof annualaccountnoteinfoIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/annualaccountnoteinfo/${args.id}`)
  .parseJson(withRuntype(annualAccountNoteInfoRt))
  .build();

// Operation: annualaccountnoteinfoGet

const annualaccountnoteinfoGetResponseBodyRt = rt.Array(
  annualAccountNoteInfoRt,
);

/**
 * operation ID: annualaccountnoteinfoGet
 * `GET: /annualaccountnoteinfo`
 * Query AnnualAccountNoteInfo
 */
export const annualaccountnoteinfoGet = buildCall() //
  .method('get')
  .path('/annualaccountnoteinfo')
  .parseJson(withRuntype(annualaccountnoteinfoGetResponseBodyRt))
  .build();

// Operation: annualaccountnoteinfoPost

const annualaccountnoteinfoPostArgsRt = rt
  .Record({ AnnualAccountNoteInfo: annualAccountNoteInfoRt })
  .asReadonly();

/**
 * operation ID: annualaccountnoteinfoPost
 * `POST: /annualaccountnoteinfo`
 * Create AnnualAccountNoteInfo
 */
export const annualaccountnoteinfoPost = buildCall() //
  .args<rt.Static<typeof annualaccountnoteinfoPostArgsRt>>()
  .method('post')
  .path('/annualaccountnoteinfo')
  .body((args) => args.AnnualAccountNoteInfo)
  .build();

// Operation: assetsActionCheckAltinnAccountLinkForAssetgroupsPut

const assetsActionCheckAltinnAccountLinkForAssetgroupsPutArgsRt = rt
  .Record({ autoCorrectLinks: rt.Boolean })
  .asPartial()
  .asReadonly();

const assetsActionCheckAltinnAccountLinkForAssetgroupsPutResponseBodyRt =
  rt.Array(assetResponseMessageRt);

/**
 * operation ID:
 * assetsActionCheckAltinnAccountLinkForAssetgroupsPut
 * `PUT:
 * /assets?action=check-altinn-account-link-for-assetgroups`
 * check-altinn-account-link-for-assetgroups Action
 */
export const assetsActionCheckAltinnAccountLinkForAssetgroupsPut = buildCall() //
  .args<
    rt.Static<typeof assetsActionCheckAltinnAccountLinkForAssetgroupsPutArgsRt>
  >()
  .method('put')
  .path((args) => `/assets?action=check-altinn-account-link-for-assetgroups`)
  .parseJson(
    withRuntype(
      assetsActionCheckAltinnAccountLinkForAssetgroupsPutResponseBodyRt,
    ),
  )
  .build();

// Operation: assetsActionActivatePut

const assetsActionActivatePutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionActivatePut
 * `PUT: /assets?action=activate`
 * activate Action
 */
export const assetsActionActivatePut = buildCall() //
  .args<rt.Static<typeof assetsActionActivatePutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=activate`)
  .build();

// Operation: assetsActionSellAssetPut

const assetsActionSellAssetPutArgsRt = rt
  .Record({
    assetID: rt.Number,
    customerID: rt.Number,
    vatTypeID: rt.Number,
    invoiceDate: rt.Unknown,
    amount: rt.Unknown,
    createInvoice: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionSellAssetPut
 * `PUT: /assets?action=sell-asset`
 * sell-asset Action
 */
export const assetsActionSellAssetPut = buildCall() //
  .args<rt.Static<typeof assetsActionSellAssetPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=sell-asset`)
  .build();

// Operation: assetsActionGetRealEstateAssetsGet

const assetsActionGetRealEstateAssetsGetArgsRt = rt
  .Record({ year: rt.Number, onlyRealEstatesPurchasedBefore1984: rt.Boolean })
  .asPartial()
  .asReadonly();

const assetsActionGetRealEstateAssetsGetResponseBodyRt = rt.Array(assetRt);

/**
 * operation ID: assetsActionGetRealEstateAssetsGet
 * `GET: /assets?action=get-real-estate-assets`
 * get-real-estate-assets Action
 */
export const assetsActionGetRealEstateAssetsGet = buildCall() //
  .args<rt.Static<typeof assetsActionGetRealEstateAssetsGetArgsRt>>()
  .method('get')
  .path((args) => `/assets?action=get-real-estate-assets`)
  .parseJson(withRuntype(assetsActionGetRealEstateAssetsGetResponseBodyRt))
  .build();

// Operation: assetsActionUpdateRealEstateAssetsPut

const assetsActionUpdateRealEstateAssetsPutArgsRt = rt
  .Record({ realEstateAssets: rt.Array(assetRt) })
  .asPartial()
  .asReadonly();

const assetsActionUpdateRealEstateAssetsPutResponseBodyRt = rt.Array(assetRt);

/**
 * operation ID: assetsActionUpdateRealEstateAssetsPut
 * `PUT: /assets?action=update-real-estate-assets`
 * update-real-estate-assets Action
 */
export const assetsActionUpdateRealEstateAssetsPut = buildCall() //
  .args<rt.Static<typeof assetsActionUpdateRealEstateAssetsPutArgsRt>>()
  .method('put')
  .path('/assets?action=update-real-estate-assets')
  .body((args) => args.realEstateAssets)
  .parseJson(withRuntype(assetsActionUpdateRealEstateAssetsPutResponseBodyRt))
  .build();

// Operation: assetsActionSetAssetAslostPut

const assetsActionSetAssetAslostPutArgsRt = rt
  .Record({ ID: rt.Number, date: rt.Unknown, description: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionSetAssetAslostPut
 * `PUT: /assets?action=set-asset-aslost`
 * set-asset-aslost Action
 */
export const assetsActionSetAssetAslostPut = buildCall() //
  .args<rt.Static<typeof assetsActionSetAssetAslostPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=set-asset-aslost`)
  .build();

// Operation: assetsActionWriteOffAssetPut

const assetsActionWriteOffAssetPutArgsRt = rt
  .Record({
    ID: rt.Number,
    amount: rt.Unknown,
    date: rt.Unknown,
    description: rt.String,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionWriteOffAssetPut
 * `PUT: /assets?action=write-off-asset`
 * write-off-asset Action
 */
export const assetsActionWriteOffAssetPut = buildCall() //
  .args<rt.Static<typeof assetsActionWriteOffAssetPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=write-off-asset`)
  .build();

// Operation: assetsActionAnyDepreciationsGet

const assetsActionAnyDepreciationsGetArgsRt = rt
  .Record({ date: rt.Unknown })
  .asPartial()
  .asReadonly();

const assetsActionAnyDepreciationsGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: assetsActionAnyDepreciationsGet
 * `GET: /assets?action=any-depreciations`
 * any-depreciations Action
 */
export const assetsActionAnyDepreciationsGet = buildCall() //
  .args<rt.Static<typeof assetsActionAnyDepreciationsGetArgsRt>>()
  .method('get')
  .path((args) => `/assets?action=any-depreciations`)
  .parseJson(withRuntype(assetsActionAnyDepreciationsGetResponseBodyRt))
  .build();

// Operation: assetsActionDepreciateMonthPut

const assetsActionDepreciateMonthPutArgsRt = rt
  .Record({ date: rt.Unknown })
  .asPartial()
  .asReadonly();

const assetsActionDepreciateMonthPutResponseBodyRt = rt.String;

/**
 * operation ID: assetsActionDepreciateMonthPut
 * `PUT: /assets?action=depreciate-month`
 * depreciate-month Action
 */
export const assetsActionDepreciateMonthPut = buildCall() //
  .args<rt.Static<typeof assetsActionDepreciateMonthPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=depreciate-month`)
  .parseJson(withRuntype(assetsActionDepreciateMonthPutResponseBodyRt))
  .build();

// Operation: assetsActionDepreciateYearPut

const assetsActionDepreciateYearPutArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionDepreciateYearPut
 * `PUT: /assets?action=depreciate-year`
 * depreciate-year Action
 */
export const assetsActionDepreciateYearPut = buildCall() //
  .args<rt.Static<typeof assetsActionDepreciateYearPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=depreciate-year`)
  .build();

// Operation: assetsActionDepreciateMissingPut

const assetsActionDepreciateMissingPutResponseBodyRt = rt.String;

/**
 * operation ID: assetsActionDepreciateMissingPut
 * `PUT: /assets?action=depreciate-missing`
 * depreciate-missing Action
 */
export const assetsActionDepreciateMissingPut = buildCall() //
  .method('put')
  .path('/assets?action=depreciate-missing')
  .parseJson(withRuntype(assetsActionDepreciateMissingPutResponseBodyRt))
  .build();

// Operation: assetsActionDepreciatePut

const assetsActionDepreciatePutArgsRt = rt
  .Record({ ID: rt.Number, date: rt.Unknown, amount: rt.Unknown })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionDepreciatePut
 * `PUT: /assets?action=depreciate`
 * depreciate Action
 */
export const assetsActionDepreciatePut = buildCall() //
  .args<rt.Static<typeof assetsActionDepreciatePutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=depreciate`)
  .build();

// Operation: assetsActionGetUseAssetGet

const assetsActionGetUseAssetGetResponseBodyRt = rt.Dictionary(rt.Unknown);

/**
 * operation ID: assetsActionGetUseAssetGet
 * `GET: /assets?action=get-use-asset`
 * get-use-asset Action
 */
export const assetsActionGetUseAssetGet = buildCall() //
  .method('get')
  .path('/assets?action=get-use-asset')
  .parseJson(withRuntype(assetsActionGetUseAssetGetResponseBodyRt))
  .build();

// Operation: assetsActionSetUseAssetPut

const assetsActionSetUseAssetPutArgsRt = rt
  .Record({ use: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionSetUseAssetPut
 * `PUT: /assets?action=set-use-asset`
 * set-use-asset Action
 */
export const assetsActionSetUseAssetPut = buildCall() //
  .args<rt.Static<typeof assetsActionSetUseAssetPutArgsRt>>()
  .method('put')
  .path((args) => `/assets?action=set-use-asset`)
  .build();

// Operation: assetsActionCreatePost

const assetsActionCreatePostArgsRt = rt
  .Record({
    invoiceID: rt.Number,
    accountID: rt.Number,
    accountNumber: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionCreatePost
 * `POST: /assets?action=create`
 * create Action
 */
export const assetsActionCreatePost = buildCall() //
  .args<rt.Static<typeof assetsActionCreatePostArgsRt>>()
  .method('post')
  .path((args) => `/assets?action=create`)
  .parseJson(withRuntype(assetRt))
  .build();

// Operation: assetsActionCalculateDepreciationAmountPut

const assetsActionCalculateDepreciationAmountPutArgsRt = rt
  .Record({ asset: assetRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionCalculateDepreciationAmountPut
 * `PUT: /assets?action=calculate-depreciation-amount`
 * calculate-depreciation-amount Action
 */
export const assetsActionCalculateDepreciationAmountPut = buildCall() //
  .args<rt.Static<typeof assetsActionCalculateDepreciationAmountPutArgsRt>>()
  .method('put')
  .path('/assets?action=calculate-depreciation-amount')
  .body((args) => args.asset)
  .build();

// Operation: assetsActionCalculateLifetimePut

const assetsActionCalculateLifetimePutArgsRt = rt
  .Record({ asset: assetRt })
  .asPartial()
  .asReadonly();

const assetsActionCalculateLifetimePutResponseBodyRt = rt.Number;

/**
 * operation ID: assetsActionCalculateLifetimePut
 * `PUT: /assets?action=calculate-lifetime`
 * calculate-lifetime Action
 */
export const assetsActionCalculateLifetimePut = buildCall() //
  .args<rt.Static<typeof assetsActionCalculateLifetimePutArgsRt>>()
  .method('put')
  .path('/assets?action=calculate-lifetime')
  .body((args) => args.asset)
  .parseJson(withRuntype(assetsActionCalculateLifetimePutResponseBodyRt))
  .build();

// Operation: assetsActionIsBalanceOkGet

const assetsActionIsBalanceOkGetArgsRt = rt
  .Record({ accountID: rt.Number, amount: rt.Unknown })
  .asPartial()
  .asReadonly();

const assetsActionIsBalanceOkGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: assetsActionIsBalanceOkGet
 * `GET: /assets?action=is-balance-ok`
 * is-balance-ok Action
 */
export const assetsActionIsBalanceOkGet = buildCall() //
  .args<rt.Static<typeof assetsActionIsBalanceOkGetArgsRt>>()
  .method('get')
  .path((args) => `/assets?action=is-balance-ok`)
  .parseJson(withRuntype(assetsActionIsBalanceOkGetResponseBodyRt))
  .build();

// Operation: assetsActionGetAssetsReportGet

const assetsActionGetAssetsReportGetArgsRt = rt
  .Record({ date: rt.Unknown, assetID: rt.Number })
  .asPartial()
  .asReadonly();

const assetsActionGetAssetsReportGetResponseBodyRt = rt.Array(assetReportDTORt);

/**
 * operation ID: assetsActionGetAssetsReportGet
 * `GET: /assets?action=get-assets-report`
 * get-assets-report Action
 */
export const assetsActionGetAssetsReportGet = buildCall() //
  .args<rt.Static<typeof assetsActionGetAssetsReportGetArgsRt>>()
  .method('get')
  .path((args) => `/assets?action=get-assets-report`)
  .parseJson(withRuntype(assetsActionGetAssetsReportGetResponseBodyRt))
  .build();

// Operation: assetsActionGetAssetGroupsGet

const assetsActionGetAssetGroupsGetResponseBodyRt = rt.Array(assetGroupRt);

/**
 * operation ID: assetsActionGetAssetGroupsGet
 * `GET: /assets?action=get-asset-groups`
 * get-asset-groups Action
 */
export const assetsActionGetAssetGroupsGet = buildCall() //
  .method('get')
  .path('/assets?action=get-asset-groups')
  .parseJson(withRuntype(assetsActionGetAssetGroupsGetResponseBodyRt))
  .build();

// Operation: assetsActionGetAssetsIncomingFinancialValueGet

const assetsActionGetAssetsIncomingFinancialValueGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionGetAssetsIncomingFinancialValueGet
 * `GET: /assets?action=get-assets-incoming-financial-value`
 * get-assets-incoming-financial-value Action
 */
export const assetsActionGetAssetsIncomingFinancialValueGet = buildCall() //
  .args<
    rt.Static<typeof assetsActionGetAssetsIncomingFinancialValueGetArgsRt>
  >()
  .method('get')
  .path((args) => `/assets?action=get-assets-incoming-financial-value`)
  .build();

// Operation: assetsActionGetAssetsNetFinancialValueGet

const assetsActionGetAssetsNetFinancialValueGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionGetAssetsNetFinancialValueGet
 * `GET: /assets?action=get-assets-net-financial-value`
 * get-assets-net-financial-value Action
 */
export const assetsActionGetAssetsNetFinancialValueGet = buildCall() //
  .args<rt.Static<typeof assetsActionGetAssetsNetFinancialValueGetArgsRt>>()
  .method('get')
  .path((args) => `/assets?action=get-assets-net-financial-value`)
  .build();

// Operation: assetsActionGetAssetsForAccountingbasedIbUpdateGet

const assetsActionGetAssetsForAccountingbasedIbUpdateGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const assetsActionGetAssetsForAccountingbasedIbUpdateGetResponseBodyRt =
  rt.Array(assetDtoRt);

/**
 * operation ID:
 * assetsActionGetAssetsForAccountingbasedIbUpdateGet
 * `GET:
 * /assets?action=get-assets-for-accountingbasedIB-update`
 * get-assets-for-accountingbasedIB-update Action
 */
export const assetsActionGetAssetsForAccountingbasedIbUpdateGet = buildCall() //
  .args<
    rt.Static<typeof assetsActionGetAssetsForAccountingbasedIbUpdateGetArgsRt>
  >()
  .method('get')
  .path((args) => `/assets?action=get-assets-for-accountingbasedIB-update`)
  .parseJson(
    withRuntype(
      assetsActionGetAssetsForAccountingbasedIbUpdateGetResponseBodyRt,
    ),
  )
  .build();

// Operation: assetsActionUpdateAccountingbasedIbPut

const assetsActionUpdateAccountingbasedIbPutArgsRt = rt
  .Record({ assetDtos: rt.Array(assetDtoRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: assetsActionUpdateAccountingbasedIbPut
 * `PUT: /assets?action=update_accountingbasedIB`
 * update_accountingbasedIB Action
 */
export const assetsActionUpdateAccountingbasedIbPut = buildCall() //
  .args<rt.Static<typeof assetsActionUpdateAccountingbasedIbPutArgsRt>>()
  .method('put')
  .path('/assets?action=update_accountingbasedIB')
  .body((args) => args.assetDtos)
  .build();

// Operation: assetsIdGet

const assetsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: assetsIdGet
 * `GET: /assets/{id}`
 * Get Asset
 */
export const assetsIdGet = buildCall() //
  .args<rt.Static<typeof assetsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/assets/${args.id}`)
  .parseJson(withRuntype(assetRt))
  .build();

// Operation: assetsIdPut

const assetsIdPutArgsRt = rt
  .Record({ id: rt.Number, Asset: assetRt })
  .asReadonly();

/**
 * operation ID: assetsIdPut
 * `PUT: /assets/{id}`
 * Update Asset
 */
export const assetsIdPut = buildCall() //
  .args<rt.Static<typeof assetsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/assets/${args.id}`)
  .body((args) => args.Asset)
  .parseJson(withRuntype(assetRt))
  .build();

// Operation: assetsIdDelete

const assetsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: assetsIdDelete
 * `DELETE: /assets/{id}`
 * Delete Asset
 */
export const assetsIdDelete = buildCall() //
  .args<rt.Static<typeof assetsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/assets/${args.id}`)
  .parseJson(withRuntype(assetRt))
  .build();

// Operation: assetsGet

const assetsGetResponseBodyRt = rt.Array(assetRt);

/**
 * operation ID: assetsGet
 * `GET: /assets`
 * Query Asset
 */
export const assetsGet = buildCall() //
  .method('get')
  .path('/assets')
  .parseJson(withRuntype(assetsGetResponseBodyRt))
  .build();

// Operation: assetsPost

const assetsPostArgsRt = rt.Record({ Asset: assetRt }).asReadonly();

/**
 * operation ID: assetsPost
 * `POST: /assets`
 * Create Asset
 */
export const assetsPost = buildCall() //
  .args<rt.Static<typeof assetsPostArgsRt>>()
  .method('post')
  .path('/assets')
  .body((args) => args.Asset)
  .build();

// Operation: bankaccountsIdActionLockPut

const bankaccountsIdActionLockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankaccountsIdActionLockPut
 * `PUT: /bankaccounts/{id}?action=lock`
 * lock Action
 */
export const bankaccountsIdActionLockPut = buildCall() //
  .args<rt.Static<typeof bankaccountsIdActionLockPutArgsRt>>()
  .method('put')
  .path((args) => `/bankaccounts/${args.id}?action=lock`)
  .build();

// Operation: bankaccountsIdActionUnlockPut

const bankaccountsIdActionUnlockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankaccountsIdActionUnlockPut
 * `PUT: /bankaccounts/{id}?action=unlock`
 * unlock Action
 */
export const bankaccountsIdActionUnlockPut = buildCall() //
  .args<rt.Static<typeof bankaccountsIdActionUnlockPutArgsRt>>()
  .method('put')
  .path((args) => `/bankaccounts/${args.id}?action=unlock`)
  .build();

// Operation: bankaccountsIdActionBankBalanceGet

const bankaccountsIdActionBankBalanceGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const bankaccountsIdActionBankBalanceGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: bankaccountsIdActionBankBalanceGet
 * `GET: /bankaccounts/{id}?action=bank-balance`
 * bank-balance Action
 */
export const bankaccountsIdActionBankBalanceGet = buildCall() //
  .args<rt.Static<typeof bankaccountsIdActionBankBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/bankaccounts/${args.id}?action=bank-balance`)
  .parseJson(withRuntype(bankaccountsIdActionBankBalanceGetResponseBodyRt))
  .build();

// Operation: bankaccountsActionGetAllBankBalancesGet

const bankaccountsActionGetAllBankBalancesGetResponseBodyRt =
  rt.Array(bankBalanceDtoRt);

/**
 * operation ID: bankaccountsActionGetAllBankBalancesGet
 * `GET: /bankaccounts?action=get-all-bank-balances`
 * get-all-bank-balances Action
 */
export const bankaccountsActionGetAllBankBalancesGet = buildCall() //
  .method('get')
  .path('/bankaccounts?action=get-all-bank-balances')
  .parseJson(withRuntype(bankaccountsActionGetAllBankBalancesGetResponseBodyRt))
  .build();

// Operation: bankaccountsActionGetConnectedBankaccountsToAccountGet

const bankaccountsActionGetConnectedBankaccountsToAccountGetArgsRt = rt
  .Record({ accountID: rt.Number, skipBankAccountID: rt.Number })
  .asPartial()
  .asReadonly();

const bankaccountsActionGetConnectedBankaccountsToAccountGetResponseBodyRt =
  rt.Array(bankAccountRt);

/**
 * operation ID:
 * bankaccountsActionGetConnectedBankaccountsToAccountGet
 * `GET:
 * /bankaccounts?action=get-connected-bankaccounts-to-account`
 * get-connected-bankaccounts-to-account Action
 */
export const bankaccountsActionGetConnectedBankaccountsToAccountGet =
  buildCall() //
    .args<
      rt.Static<
        typeof bankaccountsActionGetConnectedBankaccountsToAccountGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) => `/bankaccounts?action=get-connected-bankaccounts-to-account`,
    )
    .parseJson(
      withRuntype(
        bankaccountsActionGetConnectedBankaccountsToAccountGetResponseBodyRt,
      ),
    )
    .build();

// Operation: bankaccountsActionGetBankserviceBankaccountsGet

const bankaccountsActionGetBankserviceBankaccountsGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * bankaccountsActionGetBankserviceBankaccountsGet
 * `GET: /bankaccounts?action=get-bankservice-bankaccounts`
 * get-bankservice-bankaccounts Action
 */
export const bankaccountsActionGetBankserviceBankaccountsGet = buildCall() //
  .method('get')
  .path('/bankaccounts?action=get-bankservice-bankaccounts')
  .parseJson(
    withRuntype(bankaccountsActionGetBankserviceBankaccountsGetResponseBodyRt),
  )
  .build();

// Operation: bankaccountsActionCreateBankaccountsFromBankserviceBankaccountsPost

const bankaccountsActionCreateBankaccountsFromBankserviceBankaccountsPostArgsRt =
  rt
    .Record({ accountPairs: rt.Array(rt.Unknown) })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * bankaccountsActionCreateBankaccountsFromBankserviceBankaccountsPost
 * `POST:
 * /bankaccounts?action=create-bankaccounts-from-bankservice-bankaccounts`
 * create-bankaccounts-from-bankservice-bankaccounts Action
 */
export const bankaccountsActionCreateBankaccountsFromBankserviceBankaccountsPost =
  buildCall() //
    .args<
      rt.Static<
        typeof bankaccountsActionCreateBankaccountsFromBankserviceBankaccountsPostArgsRt
      >
    >()
    .method('post')
    .path(
      '/bankaccounts?action=create-bankaccounts-from-bankservice-bankaccounts',
    )
    .body((args) => args.accountPairs)
    .build();

// Operation: bankaccountsIdGet

const bankaccountsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankaccountsIdGet
 * `GET: /bankaccounts/{id}`
 * Get BankAccount
 */
export const bankaccountsIdGet = buildCall() //
  .args<rt.Static<typeof bankaccountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankaccounts/${args.id}`)
  .parseJson(withRuntype(bankAccountRt))
  .build();

// Operation: bankaccountsIdPut

const bankaccountsIdPutArgsRt = rt
  .Record({ id: rt.Number, BankAccount: bankAccountRt })
  .asReadonly();

/**
 * operation ID: bankaccountsIdPut
 * `PUT: /bankaccounts/{id}`
 * Update BankAccount
 */
export const bankaccountsIdPut = buildCall() //
  .args<rt.Static<typeof bankaccountsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bankaccounts/${args.id}`)
  .body((args) => args.BankAccount)
  .parseJson(withRuntype(bankAccountRt))
  .build();

// Operation: bankaccountsIdDelete

const bankaccountsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankaccountsIdDelete
 * `DELETE: /bankaccounts/{id}`
 * Delete BankAccount
 */
export const bankaccountsIdDelete = buildCall() //
  .args<rt.Static<typeof bankaccountsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankaccounts/${args.id}`)
  .parseJson(withRuntype(bankAccountRt))
  .build();

// Operation: bankaccountsGet

const bankaccountsGetResponseBodyRt = rt.Array(bankAccountRt);

/**
 * operation ID: bankaccountsGet
 * `GET: /bankaccounts`
 * Query BankAccount
 */
export const bankaccountsGet = buildCall() //
  .method('get')
  .path('/bankaccounts')
  .parseJson(withRuntype(bankaccountsGetResponseBodyRt))
  .build();

// Operation: bankaccountsPost

const bankaccountsPostArgsRt = rt
  .Record({ BankAccount: bankAccountRt })
  .asReadonly();

/**
 * operation ID: bankaccountsPost
 * `POST: /bankaccounts`
 * Create BankAccount
 */
export const bankaccountsPost = buildCall() //
  .args<rt.Static<typeof bankaccountsPostArgsRt>>()
  .method('post')
  .path('/bankaccounts')
  .body((args) => args.BankAccount)
  .build();

// Operation: banksActionGetBankFromAccountnumberLookupGet

const banksActionGetBankFromAccountnumberLookupGetArgsRt = rt
  .Record({ bankAccountNumber: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: banksActionGetBankFromAccountnumberLookupGet
 * `GET: /banks?action=get-bank-from-accountnumber-lookup`
 * get-bank-from-accountnumber-lookup Action
 */
export const banksActionGetBankFromAccountnumberLookupGet = buildCall() //
  .args<rt.Static<typeof banksActionGetBankFromAccountnumberLookupGetArgsRt>>()
  .method('get')
  .path((args) => `/banks?action=get-bank-from-accountnumber-lookup`)
  .parseJson(withRuntype(bankRt))
  .build();

// Operation: banksActionGetIbanFromAccountnumberLookupGet

const banksActionGetIbanFromAccountnumberLookupGetArgsRt = rt
  .Record({ bankAccountNumber: rt.String })
  .asPartial()
  .asReadonly();

const banksActionGetIbanFromAccountnumberLookupGetResponseBodyRt = rt.String;

/**
 * operation ID: banksActionGetIbanFromAccountnumberLookupGet
 * `GET: /banks?action=get-iban-from-accountnumber-lookup`
 * get-iban-from-accountnumber-lookup Action
 */
export const banksActionGetIbanFromAccountnumberLookupGet = buildCall() //
  .args<rt.Static<typeof banksActionGetIbanFromAccountnumberLookupGetArgsRt>>()
  .method('get')
  .path((args) => `/banks?action=get-iban-from-accountnumber-lookup`)
  .parseJson(
    withRuntype(banksActionGetIbanFromAccountnumberLookupGetResponseBodyRt),
  )
  .build();

// Operation: banksActionGetIbanUpsertBankGet

const banksActionGetIbanUpsertBankGetArgsRt = rt
  .Record({ bankAccountNumber: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: banksActionGetIbanUpsertBankGet
 * `GET: /banks?action=get-iban-upsert-bank`
 * get-iban-upsert-bank Action
 */
export const banksActionGetIbanUpsertBankGet = buildCall() //
  .args<rt.Static<typeof banksActionGetIbanUpsertBankGetArgsRt>>()
  .method('get')
  .path((args) => `/banks?action=get-iban-upsert-bank`)
  .parseJson(withRuntype(bankDataRt))
  .build();

// Operation: banksActionVerifyIbanGet

const banksActionVerifyIbanGetArgsRt = rt
  .Record({ iban: rt.String })
  .asPartial()
  .asReadonly();

const banksActionVerifyIbanGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: banksActionVerifyIbanGet
 * `GET: /banks?action=verify-iban`
 * verify-iban Action
 */
export const banksActionVerifyIbanGet = buildCall() //
  .args<rt.Static<typeof banksActionVerifyIbanGetArgsRt>>()
  .method('get')
  .path((args) => `/banks?action=verify-iban`)
  .parseJson(withRuntype(banksActionVerifyIbanGetResponseBodyRt))
  .build();

// Operation: banksActionVerifyIbanUpsertBankGet

const banksActionVerifyIbanUpsertBankGetArgsRt = rt
  .Record({ iban: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: banksActionVerifyIbanUpsertBankGet
 * `GET: /banks?action=verify-iban-upsert-bank`
 * verify-iban-upsert-bank Action
 */
export const banksActionVerifyIbanUpsertBankGet = buildCall() //
  .args<rt.Static<typeof banksActionVerifyIbanUpsertBankGetArgsRt>>()
  .method('get')
  .path((args) => `/banks?action=verify-iban-upsert-bank`)
  .parseJson(withRuntype(bankDataRt))
  .build();

// Operation: banksIdGet

const banksIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: banksIdGet
 * `GET: /banks/{id}`
 * Get Bank
 */
export const banksIdGet = buildCall() //
  .args<rt.Static<typeof banksIdGetArgsRt>>()
  .method('get')
  .path((args) => `/banks/${args.id}`)
  .parseJson(withRuntype(bankRt))
  .build();

// Operation: banksIdPut

const banksIdPutArgsRt = rt
  .Record({ id: rt.Number, Bank: bankRt })
  .asReadonly();

/**
 * operation ID: banksIdPut
 * `PUT: /banks/{id}`
 * Update Bank
 */
export const banksIdPut = buildCall() //
  .args<rt.Static<typeof banksIdPutArgsRt>>()
  .method('put')
  .path((args) => `/banks/${args.id}`)
  .body((args) => args.Bank)
  .parseJson(withRuntype(bankRt))
  .build();

// Operation: banksIdDelete

const banksIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: banksIdDelete
 * `DELETE: /banks/{id}`
 * Delete Bank
 */
export const banksIdDelete = buildCall() //
  .args<rt.Static<typeof banksIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/banks/${args.id}`)
  .parseJson(withRuntype(bankRt))
  .build();

// Operation: banksGet

const banksGetResponseBodyRt = rt.Array(bankRt);

/**
 * operation ID: banksGet
 * `GET: /banks`
 * Query Bank
 */
export const banksGet = buildCall() //
  .method('get')
  .path('/banks')
  .parseJson(withRuntype(banksGetResponseBodyRt))
  .build();

// Operation: banksPost

const banksPostArgsRt = rt.Record({ Bank: bankRt }).asReadonly();

/**
 * operation ID: banksPost
 * `POST: /banks`
 * Create Bank
 */
export const banksPost = buildCall() //
  .args<rt.Static<typeof banksPostArgsRt>>()
  .method('post')
  .path('/banks')
  .body((args) => args.Bank)
  .build();

// Operation: bankAgreementsActionAuthCodePost

const bankAgreementsActionAuthCodePostArgsRt = rt
  .Record({ password: rt.String })
  .asPartial()
  .asReadonly();

const bankAgreementsActionAuthCodePostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: bankAgreementsActionAuthCodePost
 * `POST: /bank-agreements?action=auth-code`
 * auth-code Action
 */
export const bankAgreementsActionAuthCodePost = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionAuthCodePostArgsRt>>()
  .method('post')
  .path('/bank-agreements?action=auth-code')
  .body((args) => args.password)
  .parseJson(withRuntype(bankAgreementsActionAuthCodePostResponseBodyRt))
  .build();

// Operation: bankAgreementsIdActionSetDefaultPut

const bankAgreementsIdActionSetDefaultPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: bankAgreementsIdActionSetDefaultPut
 * `PUT: /bank-agreements/{id}?action=set-default`
 * set-default Action
 */
export const bankAgreementsIdActionSetDefaultPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdActionSetDefaultPutArgsRt>>()
  .method('put')
  .path((args) => `/bank-agreements/${args.id}?action=set-default`)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsActionGetAgreementTemplatesGet

const bankAgreementsActionGetAgreementTemplatesGetArgsRt = rt
  .Record({ password: rt.String })
  .asPartial()
  .asReadonly();

const bankAgreementsActionGetAgreementTemplatesGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: bankAgreementsActionGetAgreementTemplatesGet
 * `GET: /bank-agreements?action=get-agreement-templates`
 * get-agreement-templates Action
 */
export const bankAgreementsActionGetAgreementTemplatesGet = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionGetAgreementTemplatesGetArgsRt>>()
  .method('get')
  .path((args) => `/bank-agreements?action=get-agreement-templates`)
  .parseJson(
    withRuntype(bankAgreementsActionGetAgreementTemplatesGetResponseBodyRt),
  )
  .build();

// Operation: bankAgreementsActionCreateIntegrationPost

const bankAgreementsActionCreateIntegrationPostArgsRt = rt
  .Record({ integrationDto: createBankIntegrationDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankAgreementsActionCreateIntegrationPost
 * `POST: /bank-agreements?action=create-integration`
 * create-integration Action
 */
export const bankAgreementsActionCreateIntegrationPost = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionCreateIntegrationPostArgsRt>>()
  .method('post')
  .path('/bank-agreements?action=create-integration')
  .body((args) => args.integrationDto)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsActionDeleteBankagreementsPut

const bankAgreementsActionDeleteBankagreementsPutArgsRt = rt
  .Record({
    bankAccountID: rt.Number,
    integrationSettings: rt.Number,
    emailAddress: rt.String,
  })
  .asPartial()
  .asReadonly();

const bankAgreementsActionDeleteBankagreementsPutResponseBodyRt =
  rt.Array(bankAccountRt);

/**
 * operation ID: bankAgreementsActionDeleteBankagreementsPut
 * `PUT: /bank-agreements?action=delete-bankagreements`
 * delete-bankagreements Action
 */
export const bankAgreementsActionDeleteBankagreementsPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionDeleteBankagreementsPutArgsRt>>()
  .method('put')
  .path((args) => `/bank-agreements?action=delete-bankagreements`)
  .parseJson(
    withRuntype(bankAgreementsActionDeleteBankagreementsPutResponseBodyRt),
  )
  .build();

// Operation: bankAgreementsActionDeleteAllBankagreementsPut

const bankAgreementsActionDeleteAllBankagreementsPutArgsRt = rt
  .Record({ emailAddress: rt.String })
  .asPartial()
  .asReadonly();

const bankAgreementsActionDeleteAllBankagreementsPutResponseBodyRt =
  rt.Array(bankAccountRt);

/**
 * operation ID: bankAgreementsActionDeleteAllBankagreementsPut
 * `PUT: /bank-agreements?action=delete-all-bankagreements`
 * delete-all-bankagreements Action
 */
export const bankAgreementsActionDeleteAllBankagreementsPut = buildCall() //
  .args<
    rt.Static<typeof bankAgreementsActionDeleteAllBankagreementsPutArgsRt>
  >()
  .method('put')
  .path((args) => `/bank-agreements?action=delete-all-bankagreements`)
  .parseJson(
    withRuntype(bankAgreementsActionDeleteAllBankagreementsPutResponseBodyRt),
  )
  .build();

// Operation: bankAgreementsActionCreateInitialCompanyAndBankAccountsAgreementPost

const bankAgreementsActionCreateInitialCompanyAndBankAccountsAgreementPostArgsRt =
  rt
    .Record({ integrationDto: createBankIntegrationDTORt })
    .asPartial()
    .asReadonly();

/**
 * operation ID:
 * bankAgreementsActionCreateInitialCompanyAndBankAccountsAgreementPost
 * `POST:
 * /bank-agreements?action=create-initial-company-and-bank-accounts-agreement`
 * create-initial-company-and-bank-accounts-agreement Action
 */
export const bankAgreementsActionCreateInitialCompanyAndBankAccountsAgreementPost =
  buildCall() //
    .args<
      rt.Static<
        typeof bankAgreementsActionCreateInitialCompanyAndBankAccountsAgreementPostArgsRt
      >
    >()
    .method('post')
    .path(
      '/bank-agreements?action=create-initial-company-and-bank-accounts-agreement',
    )
    .body((args) => args.integrationDto)
    .parseJson(withRuntype(bankIntegrationAgreementRt))
    .build();

// Operation: bankAgreementsActionGetDirectBankAgreementGet

const bankAgreementsActionGetDirectBankAgreementGetArgsRt = rt
  .Record({ serviceProvider: rt.Number })
  .asPartial()
  .asReadonly();

const bankAgreementsActionGetDirectBankAgreementGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: bankAgreementsActionGetDirectBankAgreementGet
 * `GET: /bank-agreements?action=get-direct-bank-agreement`
 * get-direct-bank-agreement Action
 */
export const bankAgreementsActionGetDirectBankAgreementGet = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionGetDirectBankAgreementGetArgsRt>>()
  .method('get')
  .path((args) => `/bank-agreements?action=get-direct-bank-agreement`)
  .parseJson(
    withRuntype(bankAgreementsActionGetDirectBankAgreementGetResponseBodyRt),
  )
  .build();

// Operation: bankAgreementsIdActionUpdateBankPropertiesPut

const bankAgreementsIdActionUpdateBankPropertiesPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, bankProperties: zdataUpdateBankPropertiesRt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: bankAgreementsIdActionUpdateBankPropertiesPut
 * `PUT: /bank-agreements/{id}?action=update-bank-properties`
 * update-bank-properties Action
 */
export const bankAgreementsIdActionUpdateBankPropertiesPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdActionUpdateBankPropertiesPutArgsRt>>()
  .method('put')
  .path((args) => `/bank-agreements/${args.id}?action=update-bank-properties`)
  .body((args) => args.bankProperties)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsActionAddAutobankUserPost

const bankAgreementsActionAddAutobankUserPostArgsRt = rt
  .Record({ autobankUserDto: autobankUserDTORt, password: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankAgreementsActionAddAutobankUserPost
 * `POST: /bank-agreements?action=add-autobank-user`
 * add-autobank-user Action
 */
export const bankAgreementsActionAddAutobankUserPost = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionAddAutobankUserPostArgsRt>>()
  .method('post')
  .path((args) => `/bank-agreements?action=add-autobank-user`)
  .body((args) => args.autobankUserDto)
  .parseJson(withRuntype(userRt))
  .build();

// Operation: bankAgreementsIdActionUpdateStatusPut

const bankAgreementsIdActionUpdateStatusPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, password: rt.String }).asPartial().asReadonly(),
);

/**
 * operation ID: bankAgreementsIdActionUpdateStatusPut
 * `PUT: /bank-agreements/{id}?action=update-status`
 * update-status Action
 */
export const bankAgreementsIdActionUpdateStatusPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdActionUpdateStatusPutArgsRt>>()
  .method('put')
  .path((args) => `/bank-agreements/${args.id}?action=update-status`)
  .body((args) => args.password)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsActionUpdateServicePut

const bankAgreementsActionUpdateServicePutArgsRt = rt
  .Record({ service: updateServiceStatusDTORt })
  .asPartial()
  .asReadonly();

const bankAgreementsActionUpdateServicePutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: bankAgreementsActionUpdateServicePut
 * `PUT: /bank-agreements?action=update-service`
 * update-service Action
 */
export const bankAgreementsActionUpdateServicePut = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionUpdateServicePutArgsRt>>()
  .method('put')
  .path('/bank-agreements?action=update-service')
  .body((args) => args.service)
  .parseJson(withRuntype(bankAgreementsActionUpdateServicePutResponseBodyRt))
  .build();

// Operation: bankAgreementsActionUpdateServiceidPut

const bankAgreementsActionUpdateServiceidPutArgsRt = rt
  .Record({ service: updateServiceIDDTORt })
  .asPartial()
  .asReadonly();

const bankAgreementsActionUpdateServiceidPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: bankAgreementsActionUpdateServiceidPut
 * `PUT: /bank-agreements?action=update-serviceid`
 * update-serviceid Action
 */
export const bankAgreementsActionUpdateServiceidPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionUpdateServiceidPutArgsRt>>()
  .method('put')
  .path('/bank-agreements?action=update-serviceid')
  .body((args) => args.service)
  .parseJson(withRuntype(bankAgreementsActionUpdateServiceidPutResponseBodyRt))
  .build();

// Operation: bankAgreementsActionValidatePasswordPost

const bankAgreementsActionValidatePasswordPostArgsRt = rt
  .Record({ password: rt.String })
  .asPartial()
  .asReadonly();

const bankAgreementsActionValidatePasswordPostResponseBodyRt = rt.Boolean;

/**
 * operation ID: bankAgreementsActionValidatePasswordPost
 * `POST: /bank-agreements?action=validate-password`
 * validate-password Action
 */
export const bankAgreementsActionValidatePasswordPost = buildCall() //
  .args<rt.Static<typeof bankAgreementsActionValidatePasswordPostArgsRt>>()
  .method('post')
  .path('/bank-agreements?action=validate-password')
  .body((args) => args.password)
  .parseJson(
    withRuntype(bankAgreementsActionValidatePasswordPostResponseBodyRt),
  )
  .build();

// Operation: bankAgreementsActionOrderBankIntegrationChangePost

/**
 * operation ID:
 * bankAgreementsActionOrderBankIntegrationChangePost
 * `POST:
 * /bank-agreements?action=order-bank-integration-change`
 * order-bank-integration-change Action
 */
export const bankAgreementsActionOrderBankIntegrationChangePost = buildCall() //
  .method('post')
  .path('/bank-agreements?action=order-bank-integration-change')
  .build();

// Operation: bankAgreementsActionOrderPreapprovedbankpaymentsPost

const bankAgreementsActionOrderPreapprovedbankpaymentsPostArgsRt = rt
  .Record({ bankID: rt.Number, cancel: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * bankAgreementsActionOrderPreapprovedbankpaymentsPost
 * `POST:
 * /bank-agreements?action=order-preapprovedbankpayments`
 * order-preapprovedbankpayments Action
 */
export const bankAgreementsActionOrderPreapprovedbankpaymentsPost = buildCall() //
  .args<
    rt.Static<typeof bankAgreementsActionOrderPreapprovedbankpaymentsPostArgsRt>
  >()
  .method('post')
  .path((args) => `/bank-agreements?action=order-preapprovedbankpayments`)
  .build();

// Operation: bankAgreementsActionGetDefaultServiceProviderGet

/**
 * operation ID:
 * bankAgreementsActionGetDefaultServiceProviderGet
 * `GET: /bank-agreements?action=get-default-service-provider`
 * get-default-service-provider Action
 */
export const bankAgreementsActionGetDefaultServiceProviderGet = buildCall() //
  .method('get')
  .path('/bank-agreements?action=get-default-service-provider')
  .build();

// Operation: bankAgreementsIdGet

const bankAgreementsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankAgreementsIdGet
 * `GET: /bank-agreements/{id}`
 * Get BankIntegrationAgreement
 */
export const bankAgreementsIdGet = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bank-agreements/${args.id}`)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsIdPut

const bankAgreementsIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    BankIntegrationAgreement: bankIntegrationAgreementRt,
  })
  .asReadonly();

/**
 * operation ID: bankAgreementsIdPut
 * `PUT: /bank-agreements/{id}`
 * Update BankIntegrationAgreement
 */
export const bankAgreementsIdPut = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bank-agreements/${args.id}`)
  .body((args) => args.BankIntegrationAgreement)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsIdDelete

const bankAgreementsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankAgreementsIdDelete
 * `DELETE: /bank-agreements/{id}`
 * Delete BankIntegrationAgreement
 */
export const bankAgreementsIdDelete = buildCall() //
  .args<rt.Static<typeof bankAgreementsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bank-agreements/${args.id}`)
  .parseJson(withRuntype(bankIntegrationAgreementRt))
  .build();

// Operation: bankAgreementsGet

const bankAgreementsGetResponseBodyRt = rt.Array(bankIntegrationAgreementRt);

/**
 * operation ID: bankAgreementsGet
 * `GET: /bank-agreements`
 * Query BankIntegrationAgreement
 */
export const bankAgreementsGet = buildCall() //
  .method('get')
  .path('/bank-agreements')
  .parseJson(withRuntype(bankAgreementsGetResponseBodyRt))
  .build();

// Operation: bankrulesIdGet

const bankrulesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankrulesIdGet
 * `GET: /bankrules/{id}`
 * Get BankRule
 */
export const bankrulesIdGet = buildCall() //
  .args<rt.Static<typeof bankrulesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankrules/${args.id}`)
  .parseJson(withRuntype(bankRuleRt))
  .build();

// Operation: bankrulesIdPut

const bankrulesIdPutArgsRt = rt
  .Record({ id: rt.Number, BankRule: bankRuleRt })
  .asReadonly();

/**
 * operation ID: bankrulesIdPut
 * `PUT: /bankrules/{id}`
 * Update BankRule
 */
export const bankrulesIdPut = buildCall() //
  .args<rt.Static<typeof bankrulesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bankrules/${args.id}`)
  .body((args) => args.BankRule)
  .parseJson(withRuntype(bankRuleRt))
  .build();

// Operation: bankrulesIdDelete

const bankrulesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankrulesIdDelete
 * `DELETE: /bankrules/{id}`
 * Delete BankRule
 */
export const bankrulesIdDelete = buildCall() //
  .args<rt.Static<typeof bankrulesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankrules/${args.id}`)
  .parseJson(withRuntype(bankRuleRt))
  .build();

// Operation: bankrulesGet

const bankrulesGetResponseBodyRt = rt.Array(bankRuleRt);

/**
 * operation ID: bankrulesGet
 * `GET: /bankrules`
 * Query BankRule
 */
export const bankrulesGet = buildCall() //
  .method('get')
  .path('/bankrules')
  .parseJson(withRuntype(bankrulesGetResponseBodyRt))
  .build();

// Operation: bankrulesPost

const bankrulesPostArgsRt = rt.Record({ BankRule: bankRuleRt }).asReadonly();

/**
 * operation ID: bankrulesPost
 * `POST: /bankrules`
 * Create BankRule
 */
export const bankrulesPost = buildCall() //
  .args<rt.Static<typeof bankrulesPostArgsRt>>()
  .method('post')
  .path('/bankrules')
  .body((args) => args.BankRule)
  .build();

// Operation: bankstatementsIdActionCompletePost

const bankstatementsIdActionCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: bankstatementsIdActionCompletePost
 * `POST: /bankstatements/{id}?action=complete`
 * complete Transition
 */
export const bankstatementsIdActionCompletePost = buildCall() //
  .args<rt.Static<typeof bankstatementsIdActionCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatements/${args.id}?action=complete`)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsIdActionReopenPost

const bankstatementsIdActionReopenPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: bankstatementsIdActionReopenPost
 * `POST: /bankstatements/{id}?action=reopen`
 * reopen Transition
 */
export const bankstatementsIdActionReopenPost = buildCall() //
  .args<rt.Static<typeof bankstatementsIdActionReopenPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatements/${args.id}?action=reopen`)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsActionMatchItemsPost

const bankstatementsActionMatchItemsPostArgsRt = rt
  .Record({ items: rt.Array(bankStatementMatchRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionMatchItemsPost
 * `POST: /bankstatements?action=match-items`
 * match-items Action
 */
export const bankstatementsActionMatchItemsPost = buildCall() //
  .args<rt.Static<typeof bankstatementsActionMatchItemsPostArgsRt>>()
  .method('post')
  .path('/bankstatements?action=match-items')
  .body((args) => args.items)
  .build();

// Operation: bankstatementsActionSuggestMatchPost

const bankstatementsActionSuggestMatchPostArgsRt = rt
  .Record({ matchRequest: matchRequestRt })
  .asPartial()
  .asReadonly();

const bankstatementsActionSuggestMatchPostResponseBodyRt = rt.Array(
  bankMatchSuggestionRt,
);

/**
 * operation ID: bankstatementsActionSuggestMatchPost
 * `POST: /bankstatements?action=suggest-match`
 * suggest-match Action
 */
export const bankstatementsActionSuggestMatchPost = buildCall() //
  .args<rt.Static<typeof bankstatementsActionSuggestMatchPostArgsRt>>()
  .method('post')
  .path('/bankstatements?action=suggest-match')
  .body((args) => args.matchRequest)
  .parseJson(withRuntype(bankstatementsActionSuggestMatchPostResponseBodyRt))
  .build();

// Operation: bankstatementsActionAccountStatusGet

const bankstatementsActionAccountStatusGetArgsRt = rt
  .Record({ accountid: rt.Number, fromdate: rt.String, todate: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionAccountStatusGet
 * `GET: /bankstatements?action=account-status`
 * account-status Action
 */
export const bankstatementsActionAccountStatusGet = buildCall() //
  .args<rt.Static<typeof bankstatementsActionAccountStatusGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatements?action=account-status`)
  .parseJson(withRuntype(reconciliationStatusRt))
  .build();

// Operation: bankstatementsActionAccountStatusMonthlyGet

const bankstatementsActionAccountStatusMonthlyGetArgsRt = rt
  .Record({ accountid: rt.Number, fromdate: rt.String, todate: rt.String })
  .asPartial()
  .asReadonly();

const bankstatementsActionAccountStatusMonthlyGetResponseBodyRt = rt.Array(
  reconciliationStatusRt,
);

/**
 * operation ID: bankstatementsActionAccountStatusMonthlyGet
 * `GET: /bankstatements?action=account-status-monthly`
 * account-status-monthly Action
 */
export const bankstatementsActionAccountStatusMonthlyGet = buildCall() //
  .args<rt.Static<typeof bankstatementsActionAccountStatusMonthlyGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatements?action=account-status-monthly`)
  .parseJson(
    withRuntype(bankstatementsActionAccountStatusMonthlyGetResponseBodyRt),
  )
  .build();

// Operation: bankstatementsActionAccountBalanceGet

const bankstatementsActionAccountBalanceGetArgsRt = rt
  .Record({ accountid: rt.Number, date: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionAccountBalanceGet
 * `GET: /bankstatements?action=account-balance`
 * account-balance Action
 */
export const bankstatementsActionAccountBalanceGet = buildCall() //
  .args<rt.Static<typeof bankstatementsActionAccountBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatements?action=account-balance`)
  .parseJson(withRuntype(balanceDtoRt))
  .build();

// Operation: bankstatementsActionImportPost

const bankstatementsActionImportPostArgsRt = rt
  .Record({
    accountid: rt.Number,
    fileID: rt.Number,
    maxLines: rt.Number,
    fmt: bankfileFormatRt,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionImportPost
 * `POST: /bankstatements?action=import`
 * import Action
 */
export const bankstatementsActionImportPost = buildCall() //
  .args<rt.Static<typeof bankstatementsActionImportPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatements?action=import`)
  .body((args) => args.fmt)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsActionPreviewPost

const bankstatementsActionPreviewPostArgsRt = rt
  .Record({
    accountid: rt.Number,
    fileID: rt.Number,
    maxLines: rt.Number,
    fmt: bankfileFormatRt,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionPreviewPost
 * `POST: /bankstatements?action=preview`
 * preview Action
 */
export const bankstatementsActionPreviewPost = buildCall() //
  .args<rt.Static<typeof bankstatementsActionPreviewPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatements?action=preview`)
  .body((args) => args.fmt)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsActionTemplatesGet

const bankstatementsActionTemplatesGetResponseBodyRt =
  rt.Array(bankfileFormatRt);

/**
 * operation ID: bankstatementsActionTemplatesGet
 * `GET: /bankstatements?action=templates`
 * templates Action
 */
export const bankstatementsActionTemplatesGet = buildCall() //
  .method('get')
  .path('/bankstatements?action=templates')
  .parseJson(withRuntype(bankstatementsActionTemplatesGetResponseBodyRt))
  .build();

// Operation: bankstatementsActionImportBatchPost

const bankstatementsActionImportBatchPostArgsRt = rt
  .Record({ batch: zdataEntryTransactionsDtoRt, triggerAutomation: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementsActionImportBatchPost
 * `POST: /bankstatements?action=import-batch`
 * import-batch Action
 */
export const bankstatementsActionImportBatchPost = buildCall() //
  .args<rt.Static<typeof bankstatementsActionImportBatchPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatements?action=import-batch`)
  .body((args) => args.batch)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsIdGet

const bankstatementsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankstatementsIdGet
 * `GET: /bankstatements/{id}`
 * Get BankStatement
 */
export const bankstatementsIdGet = buildCall() //
  .args<rt.Static<typeof bankstatementsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatements/${args.id}`)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsIdPut

const bankstatementsIdPutArgsRt = rt
  .Record({ id: rt.Number, BankStatement: bankStatementRt })
  .asReadonly();

/**
 * operation ID: bankstatementsIdPut
 * `PUT: /bankstatements/{id}`
 * Update BankStatement
 */
export const bankstatementsIdPut = buildCall() //
  .args<rt.Static<typeof bankstatementsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bankstatements/${args.id}`)
  .body((args) => args.BankStatement)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsIdDelete

const bankstatementsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankstatementsIdDelete
 * `DELETE: /bankstatements/{id}`
 * Delete BankStatement
 */
export const bankstatementsIdDelete = buildCall() //
  .args<rt.Static<typeof bankstatementsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankstatements/${args.id}`)
  .parseJson(withRuntype(bankStatementRt))
  .build();

// Operation: bankstatementsGet

const bankstatementsGetResponseBodyRt = rt.Array(bankStatementRt);

/**
 * operation ID: bankstatementsGet
 * `GET: /bankstatements`
 * Query BankStatement
 */
export const bankstatementsGet = buildCall() //
  .method('get')
  .path('/bankstatements')
  .parseJson(withRuntype(bankstatementsGetResponseBodyRt))
  .build();

// Operation: bankstatementsPost

const bankstatementsPostArgsRt = rt
  .Record({ BankStatement: bankStatementRt })
  .asReadonly();

/**
 * operation ID: bankstatementsPost
 * `POST: /bankstatements`
 * Create BankStatement
 */
export const bankstatementsPost = buildCall() //
  .args<rt.Static<typeof bankstatementsPostArgsRt>>()
  .method('post')
  .path('/bankstatements')
  .body((args) => args.BankStatement)
  .build();

// Operation: bankstatemententriesActionEntriesForAccountGet

const bankstatemententriesActionEntriesForAccountGetArgsRt = rt
  .Record({ accountid: rt.Number, fromdate: rt.String, todate: rt.String })
  .asPartial()
  .asReadonly();

const bankstatemententriesActionEntriesForAccountGetResponseBodyRt =
  rt.Array(bankStatementEntryRt);

/**
 * operation ID: bankstatemententriesActionEntriesForAccountGet
 * `GET: /bankstatemententries?action=entries-for-account`
 * entries-for-account Action
 */
export const bankstatemententriesActionEntriesForAccountGet = buildCall() //
  .args<
    rt.Static<typeof bankstatemententriesActionEntriesForAccountGetArgsRt>
  >()
  .method('get')
  .path((args) => `/bankstatemententries?action=entries-for-account`)
  .parseJson(
    withRuntype(bankstatemententriesActionEntriesForAccountGetResponseBodyRt),
  )
  .build();

// Operation: bankstatemententriesActionOpenEntriesReportGet

const bankstatemententriesActionOpenEntriesReportGetArgsRt = rt
  .Record({ accountid: rt.Number, fromdate: rt.String, todate: rt.String })
  .asPartial()
  .asReadonly();

const bankstatemententriesActionOpenEntriesReportGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID: bankstatemententriesActionOpenEntriesReportGet
 * `GET: /bankstatemententries?action=open-entries-report`
 * open-entries-report Action
 */
export const bankstatemententriesActionOpenEntriesReportGet = buildCall() //
  .args<
    rt.Static<typeof bankstatemententriesActionOpenEntriesReportGetArgsRt>
  >()
  .method('get')
  .path((args) => `/bankstatemententries?action=open-entries-report`)
  .parseJson(
    withRuntype(bankstatemententriesActionOpenEntriesReportGetResponseBodyRt),
  )
  .build();

// Operation: bankstatemententriesActionOpenJournalentriesReportGet

const bankstatemententriesActionOpenJournalentriesReportGetArgsRt = rt
  .Record({
    accountid: rt.Number,
    fromdate: rt.String,
    todate: rt.String,
    top: rt.Number,
  })
  .asPartial()
  .asReadonly();

const bankstatemententriesActionOpenJournalentriesReportGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * bankstatemententriesActionOpenJournalentriesReportGet
 * `GET:
 * /bankstatemententries?action=open-journalentries-report`
 * open-journalentries-report Action
 */
export const bankstatemententriesActionOpenJournalentriesReportGet = buildCall() //
  .args<
    rt.Static<
      typeof bankstatemententriesActionOpenJournalentriesReportGetArgsRt
    >
  >()
  .method('get')
  .path((args) => `/bankstatemententries?action=open-journalentries-report`)
  .parseJson(
    withRuntype(
      bankstatemententriesActionOpenJournalentriesReportGetResponseBodyRt,
    ),
  )
  .build();

// Operation: bankstatemententriesIdGet

const bankstatemententriesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankstatemententriesIdGet
 * `GET: /bankstatemententries/{id}`
 * Get BankStatementEntry
 */
export const bankstatemententriesIdGet = buildCall() //
  .args<rt.Static<typeof bankstatemententriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatemententries/${args.id}`)
  .parseJson(withRuntype(bankStatementEntryRt))
  .build();

// Operation: bankstatemententriesIdPut

const bankstatemententriesIdPutArgsRt = rt
  .Record({ id: rt.Number, BankStatementEntry: bankStatementEntryRt })
  .asReadonly();

/**
 * operation ID: bankstatemententriesIdPut
 * `PUT: /bankstatemententries/{id}`
 * Update BankStatementEntry
 */
export const bankstatemententriesIdPut = buildCall() //
  .args<rt.Static<typeof bankstatemententriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bankstatemententries/${args.id}`)
  .body((args) => args.BankStatementEntry)
  .parseJson(withRuntype(bankStatementEntryRt))
  .build();

// Operation: bankstatemententriesIdDelete

const bankstatemententriesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankstatemententriesIdDelete
 * `DELETE: /bankstatemententries/{id}`
 * Delete BankStatementEntry
 */
export const bankstatemententriesIdDelete = buildCall() //
  .args<rt.Static<typeof bankstatemententriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankstatemententries/${args.id}`)
  .parseJson(withRuntype(bankStatementEntryRt))
  .build();

// Operation: bankstatemententriesGet

const bankstatemententriesGetResponseBodyRt = rt.Array(bankStatementEntryRt);

/**
 * operation ID: bankstatemententriesGet
 * `GET: /bankstatemententries`
 * Query BankStatementEntry
 */
export const bankstatemententriesGet = buildCall() //
  .method('get')
  .path('/bankstatemententries')
  .parseJson(withRuntype(bankstatemententriesGetResponseBodyRt))
  .build();

// Operation: bankstatemententriesPost

const bankstatemententriesPostArgsRt = rt
  .Record({ BankStatementEntry: bankStatementEntryRt })
  .asReadonly();

/**
 * operation ID: bankstatemententriesPost
 * `POST: /bankstatemententries`
 * Create BankStatementEntry
 */
export const bankstatemententriesPost = buildCall() //
  .args<rt.Static<typeof bankstatemententriesPostArgsRt>>()
  .method('post')
  .path('/bankstatemententries')
  .body((args) => args.BankStatementEntry)
  .build();

// Operation: bankstatementmatchActionDeleteGroupPost

const bankstatementmatchActionDeleteGroupPostArgsRt = rt
  .Record({ group: rt.Unknown })
  .asPartial()
  .asReadonly();

/**
 * operation ID: bankstatementmatchActionDeleteGroupPost
 * `POST: /bankstatementmatch?action=delete-group`
 * delete-group Action
 */
export const bankstatementmatchActionDeleteGroupPost = buildCall() //
  .args<rt.Static<typeof bankstatementmatchActionDeleteGroupPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatementmatch?action=delete-group`)
  .build();

// Operation: bankstatementmatchIdGet

const bankstatementmatchIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankstatementmatchIdGet
 * `GET: /bankstatementmatch/{id}`
 * Get BankStatementMatch
 */
export const bankstatementmatchIdGet = buildCall() //
  .args<rt.Static<typeof bankstatementmatchIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatementmatch/${args.id}`)
  .parseJson(withRuntype(bankStatementMatchRt))
  .build();

// Operation: bankstatementmatchIdDelete

const bankstatementmatchIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankstatementmatchIdDelete
 * `DELETE: /bankstatementmatch/{id}`
 * Delete BankStatementMatch
 */
export const bankstatementmatchIdDelete = buildCall() //
  .args<rt.Static<typeof bankstatementmatchIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankstatementmatch/${args.id}`)
  .parseJson(withRuntype(bankStatementMatchRt))
  .build();

// Operation: bankstatementmatchGet

const bankstatementmatchGetResponseBodyRt = rt.Array(bankStatementMatchRt);

/**
 * operation ID: bankstatementmatchGet
 * `GET: /bankstatementmatch`
 * Query BankStatementMatch
 */
export const bankstatementmatchGet = buildCall() //
  .method('get')
  .path('/bankstatementmatch')
  .parseJson(withRuntype(bankstatementmatchGetResponseBodyRt))
  .build();

// Operation: bankstatementmatchPost

const bankstatementmatchPostArgsRt = rt
  .Record({ BankStatementMatch: bankStatementMatchRt })
  .asReadonly();

/**
 * operation ID: bankstatementmatchPost
 * `POST: /bankstatementmatch`
 * Create BankStatementMatch
 */
export const bankstatementmatchPost = buildCall() //
  .args<rt.Static<typeof bankstatementmatchPostArgsRt>>()
  .method('post')
  .path('/bankstatementmatch')
  .body((args) => args.BankStatementMatch)
  .build();

// Operation: bankstatementrulesActionApplyRulePost

const bankstatementrulesActionApplyRulePostArgsRt = rt
  .Record({ ID: rt.Number, entries: rt.Array(bankStatementEntryRt) })
  .asPartial()
  .asReadonly();

const bankstatementrulesActionApplyRulePostResponseBodyRt =
  rt.Array(journalSuggestionRt);

/**
 * operation ID: bankstatementrulesActionApplyRulePost
 * `POST: /bankstatementrules?action=apply-rule`
 * apply-rule Action
 */
export const bankstatementrulesActionApplyRulePost = buildCall() //
  .args<rt.Static<typeof bankstatementrulesActionApplyRulePostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatementrules?action=apply-rule`)
  .body((args) => args.entries)
  .parseJson(withRuntype(bankstatementrulesActionApplyRulePostResponseBodyRt))
  .build();

// Operation: bankstatementrulesActionApplyRulesPost

const bankstatementrulesActionApplyRulesPostArgsRt = rt
  .Record({ entries: rt.Array(bankStatementEntryRt), active: rt.Boolean })
  .asPartial()
  .asReadonly();

const bankstatementrulesActionApplyRulesPostResponseBodyRt =
  rt.Array(journalSuggestionRt);

/**
 * operation ID: bankstatementrulesActionApplyRulesPost
 * `POST: /bankstatementrules?action=apply-rules`
 * apply-rules Action
 */
export const bankstatementrulesActionApplyRulesPost = buildCall() //
  .args<rt.Static<typeof bankstatementrulesActionApplyRulesPostArgsRt>>()
  .method('post')
  .path((args) => `/bankstatementrules?action=apply-rules`)
  .body((args) => args.entries)
  .parseJson(withRuntype(bankstatementrulesActionApplyRulesPostResponseBodyRt))
  .build();

// Operation: bankstatementrulesIdGet

const bankstatementrulesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: bankstatementrulesIdGet
 * `GET: /bankstatementrules/{id}`
 * Get BankStatementRule
 */
export const bankstatementrulesIdGet = buildCall() //
  .args<rt.Static<typeof bankstatementrulesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/bankstatementrules/${args.id}`)
  .parseJson(withRuntype(bankStatementRuleRt))
  .build();

// Operation: bankstatementrulesIdPut

const bankstatementrulesIdPutArgsRt = rt
  .Record({ id: rt.Number, BankStatementRule: bankStatementRuleRt })
  .asReadonly();

/**
 * operation ID: bankstatementrulesIdPut
 * `PUT: /bankstatementrules/{id}`
 * Update BankStatementRule
 */
export const bankstatementrulesIdPut = buildCall() //
  .args<rt.Static<typeof bankstatementrulesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/bankstatementrules/${args.id}`)
  .body((args) => args.BankStatementRule)
  .parseJson(withRuntype(bankStatementRuleRt))
  .build();

// Operation: bankstatementrulesIdDelete

const bankstatementrulesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: bankstatementrulesIdDelete
 * `DELETE: /bankstatementrules/{id}`
 * Delete BankStatementRule
 */
export const bankstatementrulesIdDelete = buildCall() //
  .args<rt.Static<typeof bankstatementrulesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/bankstatementrules/${args.id}`)
  .parseJson(withRuntype(bankStatementRuleRt))
  .build();

// Operation: bankstatementrulesGet

const bankstatementrulesGetResponseBodyRt = rt.Array(bankStatementRuleRt);

/**
 * operation ID: bankstatementrulesGet
 * `GET: /bankstatementrules`
 * Query BankStatementRule
 */
export const bankstatementrulesGet = buildCall() //
  .method('get')
  .path('/bankstatementrules')
  .parseJson(withRuntype(bankstatementrulesGetResponseBodyRt))
  .build();

// Operation: bankstatementrulesPost

const bankstatementrulesPostArgsRt = rt
  .Record({ BankStatementRule: bankStatementRuleRt })
  .asReadonly();

/**
 * operation ID: bankstatementrulesPost
 * `POST: /bankstatementrules`
 * Create BankStatementRule
 */
export const bankstatementrulesPost = buildCall() //
  .args<rt.Static<typeof bankstatementrulesPostArgsRt>>()
  .method('post')
  .path('/bankstatementrules')
  .body((args) => args.BankStatementRule)
  .build();

// Operation: budgetsIdActionActivatePost

const budgetsIdActionActivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: budgetsIdActionActivatePost
 * `POST: /budgets/{id}?action=activate`
 * activate Transition
 */
export const budgetsIdActionActivatePost = buildCall() //
  .args<rt.Static<typeof budgetsIdActionActivatePostArgsRt>>()
  .method('post')
  .path((args) => `/budgets/${args.id}?action=activate`)
  .parseJson(withRuntype(budgetRt))
  .build();

// Operation: budgetsIdActionDeactivatePost

const budgetsIdActionDeactivatePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: budgetsIdActionDeactivatePost
 * `POST: /budgets/{id}?action=deactivate`
 * deactivate Transition
 */
export const budgetsIdActionDeactivatePost = buildCall() //
  .args<rt.Static<typeof budgetsIdActionDeactivatePostArgsRt>>()
  .method('post')
  .path((args) => `/budgets/${args.id}?action=deactivate`)
  .parseJson(withRuntype(budgetRt))
  .build();

// Operation: budgetsActionDetailsGet

const budgetsActionDetailsGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const budgetsActionDetailsGetResponseBodyRt = rt.Array(reportRowRt);

/**
 * operation ID: budgetsActionDetailsGet
 * `GET: /budgets?action=details`
 * details Action
 */
export const budgetsActionDetailsGet = buildCall() //
  .args<rt.Static<typeof budgetsActionDetailsGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets?action=details`)
  .parseJson(withRuntype(budgetsActionDetailsGetResponseBodyRt))
  .build();

// Operation: budgetsActionSummaryGet

const budgetsActionSummaryGetArgsRt = rt
  .Record({ FinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const budgetsActionSummaryGetResponseBodyRt = rt.Array(reportRowRt);

/**
 * operation ID: budgetsActionSummaryGet
 * `GET: /budgets?action=summary`
 * summary Action
 */
export const budgetsActionSummaryGet = buildCall() //
  .args<rt.Static<typeof budgetsActionSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets?action=summary`)
  .parseJson(withRuntype(budgetsActionSummaryGetResponseBodyRt))
  .build();

// Operation: budgetsIdActionDetailsGet

const budgetsIdActionDetailsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const budgetsIdActionDetailsGetResponseBodyRt = rt.Array(reportRowRt);

/**
 * operation ID: budgetsIdActionDetailsGet
 * `GET: /budgets/{id}?action=details`
 * details Action
 */
export const budgetsIdActionDetailsGet = buildCall() //
  .args<rt.Static<typeof budgetsIdActionDetailsGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets/${args.id}?action=details`)
  .parseJson(withRuntype(budgetsIdActionDetailsGetResponseBodyRt))
  .build();

// Operation: budgetsIdActionSummaryGet

const budgetsIdActionSummaryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const budgetsIdActionSummaryGetResponseBodyRt = rt.Array(reportRowRt);

/**
 * operation ID: budgetsIdActionSummaryGet
 * `GET: /budgets/{id}?action=summary`
 * summary Action
 */
export const budgetsIdActionSummaryGet = buildCall() //
  .args<rt.Static<typeof budgetsIdActionSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets/${args.id}?action=summary`)
  .parseJson(withRuntype(budgetsIdActionSummaryGetResponseBodyRt))
  .build();

// Operation: budgetsIdActionExcelbudgetPost

const budgetsIdActionExcelbudgetPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({
      id: rt.Number,
      fileid: rt.Number,
      departmentid: rt.Number,
      projectID: rt.Number,
    })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: budgetsIdActionExcelbudgetPost
 * `POST: /budgets/{id}?action=excelbudget`
 * excelbudget Action
 */
export const budgetsIdActionExcelbudgetPost = buildCall() //
  .args<rt.Static<typeof budgetsIdActionExcelbudgetPostArgsRt>>()
  .method('post')
  .path((args) => `/budgets/${args.id}?action=excelbudget`)
  .parseJson(withRuntype(budgetImportRt))
  .build();

// Operation: budgetsIdActionGetexcelbudgetGet

const budgetsIdActionGetexcelbudgetGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: budgetsIdActionGetexcelbudgetGet
 * `GET: /budgets/{id}?action=getexcelbudget`
 * getexcelbudget Action
 */
export const budgetsIdActionGetexcelbudgetGet = buildCall() //
  .args<rt.Static<typeof budgetsIdActionGetexcelbudgetGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets/${args.id}?action=getexcelbudget`)
  .parseJson(withRuntype(iActionResultRt))
  .build();

// Operation: budgetsIdGet

const budgetsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: budgetsIdGet
 * `GET: /budgets/{id}`
 * Get Budget
 */
export const budgetsIdGet = buildCall() //
  .args<rt.Static<typeof budgetsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/budgets/${args.id}`)
  .parseJson(withRuntype(budgetRt))
  .build();

// Operation: budgetsIdPut

const budgetsIdPutArgsRt = rt
  .Record({ id: rt.Number, Budget: budgetRt })
  .asReadonly();

/**
 * operation ID: budgetsIdPut
 * `PUT: /budgets/{id}`
 * Update Budget
 */
export const budgetsIdPut = buildCall() //
  .args<rt.Static<typeof budgetsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/budgets/${args.id}`)
  .body((args) => args.Budget)
  .parseJson(withRuntype(budgetRt))
  .build();

// Operation: budgetsIdDelete

const budgetsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: budgetsIdDelete
 * `DELETE: /budgets/{id}`
 * Delete Budget
 */
export const budgetsIdDelete = buildCall() //
  .args<rt.Static<typeof budgetsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/budgets/${args.id}`)
  .parseJson(withRuntype(budgetRt))
  .build();

// Operation: budgetsGet

const budgetsGetResponseBodyRt = rt.Array(budgetRt);

/**
 * operation ID: budgetsGet
 * `GET: /budgets`
 * Query Budget
 */
export const budgetsGet = buildCall() //
  .method('get')
  .path('/budgets')
  .parseJson(withRuntype(budgetsGetResponseBodyRt))
  .build();

// Operation: budgetsPost

const budgetsPostArgsRt = rt.Record({ Budget: budgetRt }).asReadonly();

/**
 * operation ID: budgetsPost
 * `POST: /budgets`
 * Create Budget
 */
export const budgetsPost = buildCall() //
  .args<rt.Static<typeof budgetsPostArgsRt>>()
  .method('post')
  .path('/budgets')
  .body((args) => args.Budget)
  .build();

// Operation: budgetentriesIdGet

const budgetentriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: budgetentriesIdGet
 * `GET: /budgetentries/{id}`
 * Get BudgetEntry
 */
export const budgetentriesIdGet = buildCall() //
  .args<rt.Static<typeof budgetentriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/budgetentries/${args.id}`)
  .parseJson(withRuntype(budgetEntryRt))
  .build();

// Operation: budgetentriesIdPut

const budgetentriesIdPutArgsRt = rt
  .Record({ id: rt.Number, BudgetEntry: budgetEntryRt })
  .asReadonly();

/**
 * operation ID: budgetentriesIdPut
 * `PUT: /budgetentries/{id}`
 * Update BudgetEntry
 */
export const budgetentriesIdPut = buildCall() //
  .args<rt.Static<typeof budgetentriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/budgetentries/${args.id}`)
  .body((args) => args.BudgetEntry)
  .parseJson(withRuntype(budgetEntryRt))
  .build();

// Operation: budgetentriesIdDelete

const budgetentriesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: budgetentriesIdDelete
 * `DELETE: /budgetentries/{id}`
 * Delete BudgetEntry
 */
export const budgetentriesIdDelete = buildCall() //
  .args<rt.Static<typeof budgetentriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/budgetentries/${args.id}`)
  .parseJson(withRuntype(budgetEntryRt))
  .build();

// Operation: budgetentriesGet

const budgetentriesGetResponseBodyRt = rt.Array(budgetEntryRt);

/**
 * operation ID: budgetentriesGet
 * `GET: /budgetentries`
 * Query BudgetEntry
 */
export const budgetentriesGet = buildCall() //
  .method('get')
  .path('/budgetentries')
  .parseJson(withRuntype(budgetentriesGetResponseBodyRt))
  .build();

// Operation: budgetentriesPost

const budgetentriesPostArgsRt = rt
  .Record({ BudgetEntry: budgetEntryRt })
  .asReadonly();

/**
 * operation ID: budgetentriesPost
 * `POST: /budgetentries`
 * Create BudgetEntry
 */
export const budgetentriesPost = buildCall() //
  .args<rt.Static<typeof budgetentriesPostArgsRt>>()
  .method('post')
  .path('/budgetentries')
  .body((args) => args.BudgetEntry)
  .build();

// Operation: companyaccountingsettingsActionGetOrCreateGet

/**
 * operation ID: companyaccountingsettingsActionGetOrCreateGet
 * `GET: /companyaccountingsettings?action=get-or-create`
 * get-or-create Action
 */
export const companyaccountingsettingsActionGetOrCreateGet = buildCall() //
  .method('get')
  .path('/companyaccountingsettings?action=get-or-create')
  .parseJson(withRuntype(companyAccountingSettingsRt))
  .build();

// Operation: companyaccountingsettingsIdGet

const companyaccountingsettingsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companyaccountingsettingsIdGet
 * `GET: /companyaccountingsettings/{id}`
 * Get CompanyAccountingSettings
 */
export const companyaccountingsettingsIdGet = buildCall() //
  .args<rt.Static<typeof companyaccountingsettingsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companyaccountingsettings/${args.id}`)
  .parseJson(withRuntype(companyAccountingSettingsRt))
  .build();

// Operation: companyaccountingsettingsIdPut

const companyaccountingsettingsIdPutArgsRt = rt
  .Record({
    id: rt.Number,
    CompanyAccountingSettings: companyAccountingSettingsRt,
  })
  .asReadonly();

/**
 * operation ID: companyaccountingsettingsIdPut
 * `PUT: /companyaccountingsettings/{id}`
 * Update CompanyAccountingSettings
 */
export const companyaccountingsettingsIdPut = buildCall() //
  .args<rt.Static<typeof companyaccountingsettingsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companyaccountingsettings/${args.id}`)
  .body((args) => args.CompanyAccountingSettings)
  .parseJson(withRuntype(companyAccountingSettingsRt))
  .build();

// Operation: companyaccountingsettingsIdDelete

const companyaccountingsettingsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companyaccountingsettingsIdDelete
 * `DELETE: /companyaccountingsettings/{id}`
 * Delete CompanyAccountingSettings
 */
export const companyaccountingsettingsIdDelete = buildCall() //
  .args<rt.Static<typeof companyaccountingsettingsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companyaccountingsettings/${args.id}`)
  .parseJson(withRuntype(companyAccountingSettingsRt))
  .build();

// Operation: companyaccountingsettingsGet

const companyaccountingsettingsGetResponseBodyRt = rt.Array(
  companyAccountingSettingsRt,
);

/**
 * operation ID: companyaccountingsettingsGet
 * `GET: /companyaccountingsettings`
 * Query CompanyAccountingSettings
 */
export const companyaccountingsettingsGet = buildCall() //
  .method('get')
  .path('/companyaccountingsettings')
  .parseJson(withRuntype(companyaccountingsettingsGetResponseBodyRt))
  .build();

// Operation: companyaccountingsettingsPost

const companyaccountingsettingsPostArgsRt = rt
  .Record({ CompanyAccountingSettings: companyAccountingSettingsRt })
  .asReadonly();

/**
 * operation ID: companyaccountingsettingsPost
 * `POST: /companyaccountingsettings`
 * Create CompanyAccountingSettings
 */
export const companyaccountingsettingsPost = buildCall() //
  .args<rt.Static<typeof companyaccountingsettingsPostArgsRt>>()
  .method('post')
  .path('/companyaccountingsettings')
  .body((args) => args.CompanyAccountingSettings)
  .build();

// Operation: companybankaccountsIdGet

const companybankaccountsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companybankaccountsIdGet
 * `GET: /companybankaccounts/{id}`
 * Get CompanyBankAccount
 */
export const companybankaccountsIdGet = buildCall() //
  .args<rt.Static<typeof companybankaccountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/companybankaccounts/${args.id}`)
  .parseJson(withRuntype(companyBankAccountRt))
  .build();

// Operation: companybankaccountsIdPut

const companybankaccountsIdPutArgsRt = rt
  .Record({ id: rt.Number, CompanyBankAccount: companyBankAccountRt })
  .asReadonly();

/**
 * operation ID: companybankaccountsIdPut
 * `PUT: /companybankaccounts/{id}`
 * Update CompanyBankAccount
 */
export const companybankaccountsIdPut = buildCall() //
  .args<rt.Static<typeof companybankaccountsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/companybankaccounts/${args.id}`)
  .body((args) => args.CompanyBankAccount)
  .parseJson(withRuntype(companyBankAccountRt))
  .build();

// Operation: companybankaccountsIdDelete

const companybankaccountsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: companybankaccountsIdDelete
 * `DELETE: /companybankaccounts/{id}`
 * Delete CompanyBankAccount
 */
export const companybankaccountsIdDelete = buildCall() //
  .args<rt.Static<typeof companybankaccountsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/companybankaccounts/${args.id}`)
  .parseJson(withRuntype(companyBankAccountRt))
  .build();

// Operation: companybankaccountsGet

const companybankaccountsGetResponseBodyRt = rt.Array(companyBankAccountRt);

/**
 * operation ID: companybankaccountsGet
 * `GET: /companybankaccounts`
 * Query CompanyBankAccount
 */
export const companybankaccountsGet = buildCall() //
  .method('get')
  .path('/companybankaccounts')
  .parseJson(withRuntype(companybankaccountsGetResponseBodyRt))
  .build();

// Operation: companybankaccountsPost

const companybankaccountsPostArgsRt = rt
  .Record({ CompanyBankAccount: companyBankAccountRt })
  .asReadonly();

/**
 * operation ID: companybankaccountsPost
 * `POST: /companybankaccounts`
 * Create CompanyBankAccount
 */
export const companybankaccountsPost = buildCall() //
  .args<rt.Static<typeof companybankaccountsPostArgsRt>>()
  .method('post')
  .path('/companybankaccounts')
  .body((args) => args.CompanyBankAccount)
  .build();

// Operation: costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGet

const costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGetArgsRt =
  rt
    .Record({
      supplierId: rt.Number,
      useAccountID: rt.Number,
      currencyAmount: rt.Unknown,
      currencyCodeID: rt.Number,
      exchangeRate: rt.Unknown,
      financialDate: rt.Unknown,
      vatDate: rt.Unknown,
    })
    .asPartial()
    .asReadonly();

const costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGetResponseBodyRt =
  rt.Array(journalEntryLineDraftRt);

/**
 * operation ID:
 * costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGet
 * `GET:
 * /costallocations?action=create-journalentrylinesdrafts-from-supplier-costallocation`
 * create-journalentrylinesdrafts-from-supplier-costallocation
 * Action
 */
export const costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGet =
  buildCall() //
    .args<
      rt.Static<
        typeof costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/costallocations?action=create-journalentrylinesdrafts-from-supplier-costallocation`,
    )
    .parseJson(
      withRuntype(
        costallocationsActionCreateJournalentrylinesdraftsFromSupplierCostallocationGetResponseBodyRt,
      ),
    )
    .build();

// Operation: costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGet

const costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGetArgsRt =
  rt
    .Record({
      accountID: rt.Number,
      useAccountID: rt.Number,
      currencyAmount: rt.Unknown,
      currencyCodeID: rt.Number,
      exchangeRate: rt.Unknown,
      financialDate: rt.Unknown,
      vatDate: rt.Unknown,
    })
    .asPartial()
    .asReadonly();

const costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGetResponseBodyRt =
  rt.Array(journalEntryLineDraftRt);

/**
 * operation ID:
 * costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGet
 * `GET:
 * /costallocations?action=create-journalentrylinedrafts-from-account-costallocation`
 * create-journalentrylinedrafts-from-account-costallocation
 * Action
 */
export const costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGet =
  buildCall() //
    .args<
      rt.Static<
        typeof costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/costallocations?action=create-journalentrylinedrafts-from-account-costallocation`,
    )
    .parseJson(
      withRuntype(
        costallocationsActionCreateJournalentrylinedraftsFromAccountCostallocationGetResponseBodyRt,
      ),
    )
    .build();

// Operation: costallocationsActionCreateJournalentrylinedraftsFromCostallocationGet

const costallocationsActionCreateJournalentrylinedraftsFromCostallocationGetArgsRt =
  rt
    .Record({
      costAllocationID: rt.Number,
      useAccountID: rt.Number,
      currencyAmount: rt.Unknown,
      currencyCodeID: rt.Number,
      exchangeRate: rt.Unknown,
      financialDate: rt.Unknown,
      vatDate: rt.Unknown,
    })
    .asPartial()
    .asReadonly();

const costallocationsActionCreateJournalentrylinedraftsFromCostallocationGetResponseBodyRt =
  rt.Array(journalEntryLineDraftRt);

/**
 * operation ID:
 * costallocationsActionCreateJournalentrylinedraftsFromCostallocationGet
 * `GET:
 * /costallocations?action=create-journalentrylinedrafts-from-costallocation`
 * create-journalentrylinedrafts-from-costallocation Action
 */
export const costallocationsActionCreateJournalentrylinedraftsFromCostallocationGet =
  buildCall() //
    .args<
      rt.Static<
        typeof costallocationsActionCreateJournalentrylinedraftsFromCostallocationGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/costallocations?action=create-journalentrylinedrafts-from-costallocation`,
    )
    .parseJson(
      withRuntype(
        costallocationsActionCreateJournalentrylinedraftsFromCostallocationGetResponseBodyRt,
      ),
    )
    .build();

// Operation: costallocationsIdGet

const costallocationsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: costallocationsIdGet
 * `GET: /costallocations/{id}`
 * Get CostAllocation
 */
export const costallocationsIdGet = buildCall() //
  .args<rt.Static<typeof costallocationsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/costallocations/${args.id}`)
  .parseJson(withRuntype(costAllocationRt))
  .build();

// Operation: costallocationsIdPut

const costallocationsIdPutArgsRt = rt
  .Record({ id: rt.Number, CostAllocation: costAllocationRt })
  .asReadonly();

/**
 * operation ID: costallocationsIdPut
 * `PUT: /costallocations/{id}`
 * Update CostAllocation
 */
export const costallocationsIdPut = buildCall() //
  .args<rt.Static<typeof costallocationsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/costallocations/${args.id}`)
  .body((args) => args.CostAllocation)
  .parseJson(withRuntype(costAllocationRt))
  .build();

// Operation: costallocationsIdDelete

const costallocationsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: costallocationsIdDelete
 * `DELETE: /costallocations/{id}`
 * Delete CostAllocation
 */
export const costallocationsIdDelete = buildCall() //
  .args<rt.Static<typeof costallocationsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/costallocations/${args.id}`)
  .parseJson(withRuntype(costAllocationRt))
  .build();

// Operation: costallocationsGet

const costallocationsGetResponseBodyRt = rt.Array(costAllocationRt);

/**
 * operation ID: costallocationsGet
 * `GET: /costallocations`
 * Query CostAllocation
 */
export const costallocationsGet = buildCall() //
  .method('get')
  .path('/costallocations')
  .parseJson(withRuntype(costallocationsGetResponseBodyRt))
  .build();

// Operation: costallocationsPost

const costallocationsPostArgsRt = rt
  .Record({ CostAllocation: costAllocationRt })
  .asReadonly();

/**
 * operation ID: costallocationsPost
 * `POST: /costallocations`
 * Create CostAllocation
 */
export const costallocationsPost = buildCall() //
  .args<rt.Static<typeof costallocationsPostArgsRt>>()
  .method('post')
  .path('/costallocations')
  .body((args) => args.CostAllocation)
  .build();

// Operation: costallocationitemsIdGet

const costallocationitemsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: costallocationitemsIdGet
 * `GET: /costallocationitems/{id}`
 * Get CostAllocationItem
 */
export const costallocationitemsIdGet = buildCall() //
  .args<rt.Static<typeof costallocationitemsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/costallocationitems/${args.id}`)
  .parseJson(withRuntype(costAllocationItemRt))
  .build();

// Operation: costallocationitemsIdPut

const costallocationitemsIdPutArgsRt = rt
  .Record({ id: rt.Number, CostAllocationItem: costAllocationItemRt })
  .asReadonly();

/**
 * operation ID: costallocationitemsIdPut
 * `PUT: /costallocationitems/{id}`
 * Update CostAllocationItem
 */
export const costallocationitemsIdPut = buildCall() //
  .args<rt.Static<typeof costallocationitemsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/costallocationitems/${args.id}`)
  .body((args) => args.CostAllocationItem)
  .parseJson(withRuntype(costAllocationItemRt))
  .build();

// Operation: costallocationitemsIdDelete

const costallocationitemsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: costallocationitemsIdDelete
 * `DELETE: /costallocationitems/{id}`
 * Delete CostAllocationItem
 */
export const costallocationitemsIdDelete = buildCall() //
  .args<rt.Static<typeof costallocationitemsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/costallocationitems/${args.id}`)
  .parseJson(withRuntype(costAllocationItemRt))
  .build();

// Operation: costallocationitemsGet

const costallocationitemsGetResponseBodyRt = rt.Array(costAllocationItemRt);

/**
 * operation ID: costallocationitemsGet
 * `GET: /costallocationitems`
 * Query CostAllocationItem
 */
export const costallocationitemsGet = buildCall() //
  .method('get')
  .path('/costallocationitems')
  .parseJson(withRuntype(costallocationitemsGetResponseBodyRt))
  .build();

// Operation: costallocationitemsPost

const costallocationitemsPostArgsRt = rt
  .Record({ CostAllocationItem: costAllocationItemRt })
  .asReadonly();

/**
 * operation ID: costallocationitemsPost
 * `POST: /costallocationitems`
 * Create CostAllocationItem
 */
export const costallocationitemsPost = buildCall() //
  .args<rt.Static<typeof costallocationitemsPostArgsRt>>()
  .method('post')
  .path('/costallocationitems')
  .body((args) => args.CostAllocationItem)
  .build();

// Operation: liquiditypaymentActionGetLiquidityTableDataGet

/**
 * operation ID: liquiditypaymentActionGetLiquidityTableDataGet
 * `GET: /liquiditypayment?action=getLiquidityTableData`
 * getLiquidityTableData Action
 */
export const liquiditypaymentActionGetLiquidityTableDataGet = buildCall() //
  .method('get')
  .path('/liquiditypayment?action=getLiquidityTableData')
  .parseJson(withRuntype(liquidityTableDTORt))
  .build();

// Operation: liquiditypaymentIdGet

const liquiditypaymentIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: liquiditypaymentIdGet
 * `GET: /liquiditypayment/{id}`
 * Get CustomLiquidityPayment
 */
export const liquiditypaymentIdGet = buildCall() //
  .args<rt.Static<typeof liquiditypaymentIdGetArgsRt>>()
  .method('get')
  .path((args) => `/liquiditypayment/${args.id}`)
  .parseJson(withRuntype(customLiquidityPaymentRt))
  .build();

// Operation: liquiditypaymentIdPut

const liquiditypaymentIdPutArgsRt = rt
  .Record({ id: rt.Number, CustomLiquidityPayment: customLiquidityPaymentRt })
  .asReadonly();

/**
 * operation ID: liquiditypaymentIdPut
 * `PUT: /liquiditypayment/{id}`
 * Update CustomLiquidityPayment
 */
export const liquiditypaymentIdPut = buildCall() //
  .args<rt.Static<typeof liquiditypaymentIdPutArgsRt>>()
  .method('put')
  .path((args) => `/liquiditypayment/${args.id}`)
  .body((args) => args.CustomLiquidityPayment)
  .parseJson(withRuntype(customLiquidityPaymentRt))
  .build();

// Operation: liquiditypaymentIdDelete

const liquiditypaymentIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: liquiditypaymentIdDelete
 * `DELETE: /liquiditypayment/{id}`
 * Delete CustomLiquidityPayment
 */
export const liquiditypaymentIdDelete = buildCall() //
  .args<rt.Static<typeof liquiditypaymentIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/liquiditypayment/${args.id}`)
  .parseJson(withRuntype(customLiquidityPaymentRt))
  .build();

// Operation: liquiditypaymentGet

const liquiditypaymentGetResponseBodyRt = rt.Array(customLiquidityPaymentRt);

/**
 * operation ID: liquiditypaymentGet
 * `GET: /liquiditypayment`
 * Query CustomLiquidityPayment
 */
export const liquiditypaymentGet = buildCall() //
  .method('get')
  .path('/liquiditypayment')
  .parseJson(withRuntype(liquiditypaymentGetResponseBodyRt))
  .build();

// Operation: liquiditypaymentPost

const liquiditypaymentPostArgsRt = rt
  .Record({ CustomLiquidityPayment: customLiquidityPaymentRt })
  .asReadonly();

/**
 * operation ID: liquiditypaymentPost
 * `POST: /liquiditypayment`
 * Create CustomLiquidityPayment
 */
export const liquiditypaymentPost = buildCall() //
  .args<rt.Static<typeof liquiditypaymentPostArgsRt>>()
  .method('post')
  .path('/liquiditypayment')
  .body((args) => args.CustomLiquidityPayment)
  .build();

// Operation: deadlinesActionGetAllFilteredGet

const deadlinesActionGetAllFilteredGetArgsRt = rt
  .Record({ query: rt.String })
  .asPartial()
  .asReadonly();

const deadlinesActionGetAllFilteredGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: deadlinesActionGetAllFilteredGet
 * `GET: /deadlines?action=get-all-filtered`
 * get-all-filtered Action
 */
export const deadlinesActionGetAllFilteredGet = buildCall() //
  .args<rt.Static<typeof deadlinesActionGetAllFilteredGetArgsRt>>()
  .method('get')
  .path((args) => `/deadlines?action=get-all-filtered`)
  .parseJson(withRuntype(deadlinesActionGetAllFilteredGetResponseBodyRt))
  .build();

// Operation: deadlinesActionNumberOfDaysFilteredGet

const deadlinesActionNumberOfDaysFilteredGetArgsRt = rt
  .Record({ nrOfDays: rt.Number })
  .asPartial()
  .asReadonly();

const deadlinesActionNumberOfDaysFilteredGetResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: deadlinesActionNumberOfDaysFilteredGet
 * `GET: /deadlines?action=number-of-days-filtered`
 * number-of-days-filtered Action
 */
export const deadlinesActionNumberOfDaysFilteredGet = buildCall() //
  .args<rt.Static<typeof deadlinesActionNumberOfDaysFilteredGetArgsRt>>()
  .method('get')
  .path((args) => `/deadlines?action=number-of-days-filtered`)
  .parseJson(withRuntype(deadlinesActionNumberOfDaysFilteredGetResponseBodyRt))
  .build();

// Operation: deadlinesIdGet

const deadlinesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: deadlinesIdGet
 * `GET: /deadlines/{id}`
 * Get FinancialDeadline
 */
export const deadlinesIdGet = buildCall() //
  .args<rt.Static<typeof deadlinesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/deadlines/${args.id}`)
  .parseJson(withRuntype(financialDeadlineRt))
  .build();

// Operation: deadlinesIdPut

const deadlinesIdPutArgsRt = rt
  .Record({ id: rt.Number, FinancialDeadline: financialDeadlineRt })
  .asReadonly();

/**
 * operation ID: deadlinesIdPut
 * `PUT: /deadlines/{id}`
 * Update FinancialDeadline
 */
export const deadlinesIdPut = buildCall() //
  .args<rt.Static<typeof deadlinesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/deadlines/${args.id}`)
  .body((args) => args.FinancialDeadline)
  .parseJson(withRuntype(financialDeadlineRt))
  .build();

// Operation: deadlinesIdDelete

const deadlinesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: deadlinesIdDelete
 * `DELETE: /deadlines/{id}`
 * Delete FinancialDeadline
 */
export const deadlinesIdDelete = buildCall() //
  .args<rt.Static<typeof deadlinesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/deadlines/${args.id}`)
  .parseJson(withRuntype(financialDeadlineRt))
  .build();

// Operation: deadlinesGet

const deadlinesGetResponseBodyRt = rt.Array(financialDeadlineRt);

/**
 * operation ID: deadlinesGet
 * `GET: /deadlines`
 * Query FinancialDeadline
 */
export const deadlinesGet = buildCall() //
  .method('get')
  .path('/deadlines')
  .parseJson(withRuntype(deadlinesGetResponseBodyRt))
  .build();

// Operation: deadlinesPost

const deadlinesPostArgsRt = rt
  .Record({ FinancialDeadline: financialDeadlineRt })
  .asReadonly();

/**
 * operation ID: deadlinesPost
 * `POST: /deadlines`
 * Create FinancialDeadline
 */
export const deadlinesPost = buildCall() //
  .args<rt.Static<typeof deadlinesPostArgsRt>>()
  .method('post')
  .path('/deadlines')
  .body((args) => args.FinancialDeadline)
  .build();

// Operation: financialyearsActionGetOrCreateFinancialYearGet

const financialyearsActionGetOrCreateFinancialYearGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * financialyearsActionGetOrCreateFinancialYearGet
 * `GET: /financialyears?action=get-or-create-financial-year`
 * get-or-create-financial-year Action
 */
export const financialyearsActionGetOrCreateFinancialYearGet = buildCall() //
  .args<
    rt.Static<typeof financialyearsActionGetOrCreateFinancialYearGetArgsRt>
  >()
  .method('get')
  .path((args) => `/financialyears?action=get-or-create-financial-year`)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: financialyearsActionCreateFinancialYearGet

const financialyearsActionCreateFinancialYearGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: financialyearsActionCreateFinancialYearGet
 * `GET: /financialyears?action=create-financial-year`
 * create-financial-year Action
 */
export const financialyearsActionCreateFinancialYearGet = buildCall() //
  .args<rt.Static<typeof financialyearsActionCreateFinancialYearGetArgsRt>>()
  .method('get')
  .path((args) => `/financialyears?action=create-financial-year`)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: financialyearsIdGet

const financialyearsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: financialyearsIdGet
 * `GET: /financialyears/{id}`
 * Get FinancialYear
 */
export const financialyearsIdGet = buildCall() //
  .args<rt.Static<typeof financialyearsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/financialyears/${args.id}`)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: financialyearsIdPut

const financialyearsIdPutArgsRt = rt
  .Record({ id: rt.Number, FinancialYear: financialYearRt })
  .asReadonly();

/**
 * operation ID: financialyearsIdPut
 * `PUT: /financialyears/{id}`
 * Update FinancialYear
 */
export const financialyearsIdPut = buildCall() //
  .args<rt.Static<typeof financialyearsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/financialyears/${args.id}`)
  .body((args) => args.FinancialYear)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: financialyearsIdDelete

const financialyearsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: financialyearsIdDelete
 * `DELETE: /financialyears/{id}`
 * Delete FinancialYear
 */
export const financialyearsIdDelete = buildCall() //
  .args<rt.Static<typeof financialyearsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/financialyears/${args.id}`)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: financialyearsGet

const financialyearsGetResponseBodyRt = rt.Array(financialYearRt);

/**
 * operation ID: financialyearsGet
 * `GET: /financialyears`
 * Query FinancialYear
 */
export const financialyearsGet = buildCall() //
  .method('get')
  .path('/financialyears')
  .parseJson(withRuntype(financialyearsGetResponseBodyRt))
  .build();

// Operation: financialyearsPost

const financialyearsPostArgsRt = rt
  .Record({ FinancialYear: financialYearRt })
  .asReadonly();

/**
 * operation ID: financialyearsPost
 * `POST: /financialyears`
 * Create FinancialYear
 */
export const financialyearsPost = buildCall() //
  .args<rt.Static<typeof financialyearsPostArgsRt>>()
  .method('post')
  .path('/financialyears')
  .body((args) => args.FinancialYear)
  .build();

// Operation: journalentriesActionGetOrCreateFinancialYearGet

const journalentriesActionGetOrCreateFinancialYearGetArgsRt = rt
  .Record({ current: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionGetOrCreateFinancialYearGet
 * `GET: /journalentries?action=get-or-create-financial-year`
 * get-or-create-financial-year Action
 */
export const journalentriesActionGetOrCreateFinancialYearGet = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionGetOrCreateFinancialYearGetArgsRt>
  >()
  .method('get')
  .path((args) => `/journalentries?action=get-or-create-financial-year`)
  .parseJson(withRuntype(financialYearRt))
  .build();

// Operation: journalentriesActionGetJournalEntryDataGet

const journalentriesActionGetJournalEntryDataGetArgsRt = rt
  .Record({
    batchNumber: rt.Number,
    journalEntryID: rt.Number,
    supplierInvoiceID: rt.Number,
    journalEntryDraftGroup: rt.Unknown,
  })
  .asPartial()
  .asReadonly();

const journalentriesActionGetJournalEntryDataGetResponseBodyRt =
  rt.Array(journalEntryDataRt);

/**
 * operation ID: journalentriesActionGetJournalEntryDataGet
 * `GET: /journalentries?action=get-journal-entry-data`
 * get-journal-entry-data Action
 */
export const journalentriesActionGetJournalEntryDataGet = buildCall() //
  .args<rt.Static<typeof journalentriesActionGetJournalEntryDataGetArgsRt>>()
  .method('get')
  .path((args) => `/journalentries?action=get-journal-entry-data`)
  .parseJson(
    withRuntype(journalentriesActionGetJournalEntryDataGetResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionDeleteJournalEntryDraftGroupDelete

const journalentriesActionDeleteJournalEntryDraftGroupDeleteArgsRt = rt
  .Record({ journalEntryDraftGroup: rt.Unknown })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionDeleteJournalEntryDraftGroupDelete
 * `DELETE:
 * /journalentries?action=delete-journal-entry-draft-group`
 * delete-journal-entry-draft-group Action
 */
export const journalentriesActionDeleteJournalEntryDraftGroupDelete =
  buildCall() //
    .args<
      rt.Static<
        typeof journalentriesActionDeleteJournalEntryDraftGroupDeleteArgsRt
      >
    >()
    .method('delete')
    .path((args) => `/journalentries?action=delete-journal-entry-draft-group`)
    .build();

// Operation: journalentriesActionSaveJournalEntriesAsDraftPost

const journalentriesActionSaveJournalEntriesAsDraftPostArgsRt = rt
  .Record({ journalEntries: rt.Array(journalEntryRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionSaveJournalEntriesAsDraftPost
 * `POST: /journalentries?action=save-journal-entries-as-draft`
 * save-journal-entries-as-draft Action
 */
export const journalentriesActionSaveJournalEntriesAsDraftPost = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionSaveJournalEntriesAsDraftPostArgsRt>
  >()
  .method('post')
  .path('/journalentries?action=save-journal-entries-as-draft')
  .body((args) => args.journalEntries)
  .build();

// Operation: journalentriesActionCreditJournalentryPost

const journalentriesActionCreditJournalentryPostArgsRt = rt
  .Record({ journalEntryNumber: rt.String })
  .asPartial()
  .asReadonly();

const journalentriesActionCreditJournalentryPostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: journalentriesActionCreditJournalentryPost
 * `POST: /journalentries?action=credit-journalentry`
 * credit-journalentry Action
 */
export const journalentriesActionCreditJournalentryPost = buildCall() //
  .args<rt.Static<typeof journalentriesActionCreditJournalentryPostArgsRt>>()
  .method('post')
  .path((args) => `/journalentries?action=credit-journalentry`)
  .parseJson(
    withRuntype(journalentriesActionCreditJournalentryPostResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionCreditJournalEntryPost

const journalentriesActionCreditJournalEntryPostArgsRt = rt
  .Record({ journalEntryNumber: rt.String, creditDate: rt.String })
  .asPartial()
  .asReadonly();

const journalentriesActionCreditJournalEntryPostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: journalentriesActionCreditJournalEntryPost
 * `POST: /journalentries?action=credit-journal-entry`
 * credit-journal-entry Action
 */
export const journalentriesActionCreditJournalEntryPost = buildCall() //
  .args<rt.Static<typeof journalentriesActionCreditJournalEntryPostArgsRt>>()
  .method('post')
  .path((args) => `/journalentries?action=credit-journal-entry`)
  .parseJson(
    withRuntype(journalentriesActionCreditJournalEntryPostResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionBookJournalEntriesPost

const journalentriesActionBookJournalEntriesPostArgsRt = rt
  .Record({ data: rt.Array(journalEntryRt) })
  .asPartial()
  .asReadonly();

const journalentriesActionBookJournalEntriesPostResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: journalentriesActionBookJournalEntriesPost
 * `POST: /journalentries?action=book-journal-entries`
 * book-journal-entries Action
 */
export const journalentriesActionBookJournalEntriesPost = buildCall() //
  .args<rt.Static<typeof journalentriesActionBookJournalEntriesPostArgsRt>>()
  .method('post')
  .path('/journalentries?action=book-journal-entries')
  .body((args) => args.data)
  .parseJson(
    withRuntype(journalentriesActionBookJournalEntriesPostResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionCreditAndBookJournalentryPost

const journalentriesActionCreditAndBookJournalentryPostArgsRt = rt
  .Record({ data: rt.Array(journalEntryRt), journalEntryID: rt.Number })
  .asPartial()
  .asReadonly();

const journalentriesActionCreditAndBookJournalentryPostResponseBodyRt =
  rt.Array(journalEntryRt);

/**
 * operation ID:
 * journalentriesActionCreditAndBookJournalentryPost
 * `POST: /journalentries?action=credit-and-book-journalentry`
 * credit-and-book-journalentry Action
 */
export const journalentriesActionCreditAndBookJournalentryPost = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionCreditAndBookJournalentryPostArgsRt>
  >()
  .method('post')
  .path((args) => `/journalentries?action=credit-and-book-journalentry`)
  .body((args) => args.data)
  .parseJson(
    withRuntype(
      journalentriesActionCreditAndBookJournalentryPostResponseBodyRt,
    ),
  )
  .build();

// Operation: journalentriesActionCreditAndBookJournalEntryPost

const journalentriesActionCreditAndBookJournalEntryPostArgsRt = rt
  .Record({
    data: rt.Array(journalEntryRt),
    journalEntryID: rt.Number,
    creditDate: rt.Unknown,
  })
  .asPartial()
  .asReadonly();

const journalentriesActionCreditAndBookJournalEntryPostResponseBodyRt =
  rt.Array(journalEntryRt);

/**
 * operation ID:
 * journalentriesActionCreditAndBookJournalEntryPost
 * `POST: /journalentries?action=credit-and-book-journal-entry`
 * credit-and-book-journal-entry Action
 */
export const journalentriesActionCreditAndBookJournalEntryPost = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionCreditAndBookJournalEntryPostArgsRt>
  >()
  .method('post')
  .path((args) => `/journalentries?action=credit-and-book-journal-entry`)
  .body((args) => args.data)
  .parseJson(
    withRuntype(
      journalentriesActionCreditAndBookJournalEntryPostResponseBodyRt,
    ),
  )
  .build();

// Operation: journalentriesActionNextjournalentrynumberPost

const journalentriesActionNextjournalentrynumberPostArgsRt = rt
  .Record({ data: journalEntryDataRt })
  .asPartial()
  .asReadonly();

const journalentriesActionNextjournalentrynumberPostResponseBodyRt = rt.String;

/**
 * operation ID: journalentriesActionNextjournalentrynumberPost
 * `POST: /journalentries?action=nextjournalentrynumber`
 * nextjournalentrynumber Action
 */
export const journalentriesActionNextjournalentrynumberPost = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionNextjournalentrynumberPostArgsRt>
  >()
  .method('post')
  .path('/journalentries?action=nextjournalentrynumber')
  .body((args) => args.data)
  .parseJson(
    withRuntype(journalentriesActionNextjournalentrynumberPostResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionGetJournalEntryPeriodDataGet

const journalentriesActionGetJournalEntryPeriodDataGetArgsRt = rt
  .Record({ accountID: rt.Number })
  .asPartial()
  .asReadonly();

const journalentriesActionGetJournalEntryPeriodDataGetResponseBodyRt = rt.Array(
  journalEntryPeriodDataRt,
);

/**
 * operation ID:
 * journalentriesActionGetJournalEntryPeriodDataGet
 * `GET: /journalentries?action=get-journal-entry-period-data`
 * get-journal-entry-period-data Action
 */
export const journalentriesActionGetJournalEntryPeriodDataGet = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionGetJournalEntryPeriodDataGetArgsRt>
  >()
  .method('get')
  .path((args) => `/journalentries?action=get-journal-entry-period-data`)
  .parseJson(
    withRuntype(journalentriesActionGetJournalEntryPeriodDataGetResponseBodyRt),
  )
  .build();

// Operation: journalentriesActionBookJournalEntryAgainstPaymentPost

const journalentriesActionBookJournalEntryAgainstPaymentPostArgsRt = rt
  .Record({ journalEntryID: rt.Number, paymentID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionBookJournalEntryAgainstPaymentPost
 * `POST:
 * /journalentries?action=book-journal-entry-against-payment`
 * book-journal-entry-against-payment Action
 */
export const journalentriesActionBookJournalEntryAgainstPaymentPost =
  buildCall() //
    .args<
      rt.Static<
        typeof journalentriesActionBookJournalEntryAgainstPaymentPostArgsRt
      >
    >()
    .method('post')
    .path((args) => `/journalentries?action=book-journal-entry-against-payment`)
    .parseJson(withRuntype(journalEntryRt))
    .build();

// Operation: journalentriesActionBookPaymentAgainstCustomerPut

const journalentriesActionBookPaymentAgainstCustomerPutArgsRt = rt
  .Record({
    customerID: rt.Number,
    paymentID: rt.Number,
    isBalanceKID: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionBookPaymentAgainstCustomerPut
 * `PUT: /journalentries?action=book-payment-against-customer`
 * book-payment-against-customer Action
 */
export const journalentriesActionBookPaymentAgainstCustomerPut = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionBookPaymentAgainstCustomerPutArgsRt>
  >()
  .method('put')
  .path((args) => `/journalentries?action=book-payment-against-customer`)
  .build();

// Operation: journalentriesActionBookPaymentAgainstSupplierPut

const journalentriesActionBookPaymentAgainstSupplierPutArgsRt = rt
  .Record({ supplierID: rt.Number, paymentID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionBookPaymentAgainstSupplierPut
 * `PUT: /journalentries?action=book-payment-against-supplier`
 * book-payment-against-supplier Action
 */
export const journalentriesActionBookPaymentAgainstSupplierPut = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionBookPaymentAgainstSupplierPutArgsRt>
  >()
  .method('put')
  .path((args) => `/journalentries?action=book-payment-against-supplier`)
  .build();

// Operation: journalentriesActionBookPaymentAgainstMainAccountPut

const journalentriesActionBookPaymentAgainstMainAccountPutArgsRt = rt
  .Record({ paymentID: rt.Number, accountID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentriesActionBookPaymentAgainstMainAccountPut
 * `PUT:
 * /journalentries?action=book-payment-against-main-account`
 * book-payment-against-main-account Action
 */
export const journalentriesActionBookPaymentAgainstMainAccountPut = buildCall() //
  .args<
    rt.Static<typeof journalentriesActionBookPaymentAgainstMainAccountPutArgsRt>
  >()
  .method('put')
  .path((args) => `/journalentries?action=book-payment-against-main-account`)
  .build();

// Operation: journalentriesIdGet

const journalentriesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: journalentriesIdGet
 * `GET: /journalentries/{id}`
 * Get JournalEntry
 */
export const journalentriesIdGet = buildCall() //
  .args<rt.Static<typeof journalentriesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/journalentries/${args.id}`)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: journalentriesIdPut

const journalentriesIdPutArgsRt = rt
  .Record({ id: rt.Number, JournalEntry: journalEntryRt })
  .asReadonly();

/**
 * operation ID: journalentriesIdPut
 * `PUT: /journalentries/{id}`
 * Update JournalEntry
 */
export const journalentriesIdPut = buildCall() //
  .args<rt.Static<typeof journalentriesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/journalentries/${args.id}`)
  .body((args) => args.JournalEntry)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: journalentriesIdDelete

const journalentriesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: journalentriesIdDelete
 * `DELETE: /journalentries/{id}`
 * Delete JournalEntry
 */
export const journalentriesIdDelete = buildCall() //
  .args<rt.Static<typeof journalentriesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/journalentries/${args.id}`)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: journalentriesGet

const journalentriesGetResponseBodyRt = rt.Array(journalEntryRt);

/**
 * operation ID: journalentriesGet
 * `GET: /journalentries`
 * Query JournalEntry
 */
export const journalentriesGet = buildCall() //
  .method('get')
  .path('/journalentries')
  .parseJson(withRuntype(journalentriesGetResponseBodyRt))
  .build();

// Operation: journalentriesPost

const journalentriesPostArgsRt = rt
  .Record({ JournalEntry: journalEntryRt })
  .asReadonly();

/**
 * operation ID: journalentriesPost
 * `POST: /journalentries`
 * Create JournalEntry
 */
export const journalentriesPost = buildCall() //
  .args<rt.Static<typeof journalentriesPostArgsRt>>()
  .method('post')
  .path('/journalentries')
  .body((args) => args.JournalEntry)
  .build();

// Operation: journalentrylinesActionGetJournalEntryPeriodDataGet

const journalentrylinesActionGetJournalEntryPeriodDataGetArgsRt = rt
  .Record({ odataFilter: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * journalentrylinesActionGetJournalEntryPeriodDataGet
 * `GET:
 * /journalentrylines?action=get-journal-entry-period-data`
 * get-journal-entry-period-data Action
 */
export const journalentrylinesActionGetJournalEntryPeriodDataGet = buildCall() //
  .args<
    rt.Static<typeof journalentrylinesActionGetJournalEntryPeriodDataGetArgsRt>
  >()
  .method('get')
  .path((args) => `/journalentrylines?action=get-journal-entry-period-data`)
  .parseJson(withRuntype(journalEntryLineRequestSummaryRt))
  .build();

// Operation: journalentrylinesActionGetJournalEntryPostpostDataGet

const journalentrylinesActionGetJournalEntryPostpostDataGetArgsRt = rt
  .Record({
    includeOpenPosts: rt.Boolean,
    includeMarkedPosts: rt.Boolean,
    customerID: rt.Number,
    supplierID: rt.Number,
    accountID: rt.Number,
    pointInTime: rt.String,
  })
  .asPartial()
  .asReadonly();

const journalentrylinesActionGetJournalEntryPostpostDataGetResponseBodyRt =
  rt.Array(journalEntryLinePostPostDataRt);

/**
 * operation ID:
 * journalentrylinesActionGetJournalEntryPostpostDataGet
 * `GET:
 * /journalentrylines?action=get-journal-entry-postpost-data`
 * get-journal-entry-postpost-data Action
 */
export const journalentrylinesActionGetJournalEntryPostpostDataGet = buildCall() //
  .args<
    rt.Static<
      typeof journalentrylinesActionGetJournalEntryPostpostDataGetArgsRt
    >
  >()
  .method('get')
  .path((args) => `/journalentrylines?action=get-journal-entry-postpost-data`)
  .parseJson(
    withRuntype(
      journalentrylinesActionGetJournalEntryPostpostDataGetResponseBodyRt,
    ),
  )
  .build();

// Operation: journalentrylinesIdActionMarkPost

const journalentrylinesIdActionMarkPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: journalentrylinesIdActionMarkPost
 * `POST: /journalentrylines/{id}?action=mark`
 * mark Transition
 */
export const journalentrylinesIdActionMarkPost = buildCall() //
  .args<rt.Static<typeof journalentrylinesIdActionMarkPostArgsRt>>()
  .method('post')
  .path((args) => `/journalentrylines/${args.id}?action=mark`)
  .build();

// Operation: journalentrylinesIdGet

const journalentrylinesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: journalentrylinesIdGet
 * `GET: /journalentrylines/{id}`
 * Get JournalEntryLine
 */
export const journalentrylinesIdGet = buildCall() //
  .args<rt.Static<typeof journalentrylinesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/journalentrylines/${args.id}`)
  .parseJson(withRuntype(journalEntryLineRt))
  .build();

// Operation: journalentrylinesIdPut

const journalentrylinesIdPutArgsRt = rt
  .Record({ id: rt.Number, JournalEntryLine: journalEntryLineRt })
  .asReadonly();

/**
 * operation ID: journalentrylinesIdPut
 * `PUT: /journalentrylines/{id}`
 * Update JournalEntryLine
 */
export const journalentrylinesIdPut = buildCall() //
  .args<rt.Static<typeof journalentrylinesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/journalentrylines/${args.id}`)
  .body((args) => args.JournalEntryLine)
  .parseJson(withRuntype(journalEntryLineRt))
  .build();

// Operation: journalentrylinesGet

const journalentrylinesGetResponseBodyRt = rt.Array(journalEntryLineRt);

/**
 * operation ID: journalentrylinesGet
 * `GET: /journalentrylines`
 * Query JournalEntryLine
 */
export const journalentrylinesGet = buildCall() //
  .method('get')
  .path('/journalentrylines')
  .parseJson(withRuntype(journalentrylinesGetResponseBodyRt))
  .build();

// Operation: journalentrylinedraftsIdGet

const journalentrylinedraftsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: journalentrylinedraftsIdGet
 * `GET: /journalentrylinedrafts/{id}`
 * Get JournalEntryLineDraft
 */
export const journalentrylinedraftsIdGet = buildCall() //
  .args<rt.Static<typeof journalentrylinedraftsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/journalentrylinedrafts/${args.id}`)
  .parseJson(withRuntype(journalEntryLineDraftRt))
  .build();

// Operation: journalentrylinedraftsIdPut

const journalentrylinedraftsIdPutArgsRt = rt
  .Record({ id: rt.Number, JournalEntryLineDraft: journalEntryLineDraftRt })
  .asReadonly();

/**
 * operation ID: journalentrylinedraftsIdPut
 * `PUT: /journalentrylinedrafts/{id}`
 * Update JournalEntryLineDraft
 */
export const journalentrylinedraftsIdPut = buildCall() //
  .args<rt.Static<typeof journalentrylinedraftsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/journalentrylinedrafts/${args.id}`)
  .body((args) => args.JournalEntryLineDraft)
  .parseJson(withRuntype(journalEntryLineDraftRt))
  .build();

// Operation: journalentrylinedraftsIdDelete

const journalentrylinedraftsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: journalentrylinedraftsIdDelete
 * `DELETE: /journalentrylinedrafts/{id}`
 * Delete JournalEntryLineDraft
 */
export const journalentrylinedraftsIdDelete = buildCall() //
  .args<rt.Static<typeof journalentrylinedraftsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/journalentrylinedrafts/${args.id}`)
  .parseJson(withRuntype(journalEntryLineDraftRt))
  .build();

// Operation: journalentrylinedraftsGet

const journalentrylinedraftsGetResponseBodyRt = rt.Array(
  journalEntryLineDraftRt,
);

/**
 * operation ID: journalentrylinedraftsGet
 * `GET: /journalentrylinedrafts`
 * Query JournalEntryLineDraft
 */
export const journalentrylinedraftsGet = buildCall() //
  .method('get')
  .path('/journalentrylinedrafts')
  .parseJson(withRuntype(journalentrylinedraftsGetResponseBodyRt))
  .build();

// Operation: journalentrylinedraftsPost

const journalentrylinedraftsPostArgsRt = rt
  .Record({ JournalEntryLineDraft: journalEntryLineDraftRt })
  .asReadonly();

/**
 * operation ID: journalentrylinedraftsPost
 * `POST: /journalentrylinedrafts`
 * Create JournalEntryLineDraft
 */
export const journalentrylinedraftsPost = buildCall() //
  .args<rt.Static<typeof journalentrylinedraftsPostArgsRt>>()
  .method('post')
  .path('/journalentrylinedrafts')
  .body((args) => args.JournalEntryLineDraft)
  .build();

// Operation: journalEntryModesIdGet

const journalEntryModesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: journalEntryModesIdGet
 * `GET: /journalEntryModes/{id}`
 * Get JournalEntryMode
 */
export const journalEntryModesIdGet = buildCall() //
  .args<rt.Static<typeof journalEntryModesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/journalEntryModes/${args.id}`)
  .parseJson(withRuntype(journalEntryModeRt))
  .build();

// Operation: journalEntryModesIdPut

const journalEntryModesIdPutArgsRt = rt
  .Record({ id: rt.Number, JournalEntryMode: journalEntryModeRt })
  .asReadonly();

/**
 * operation ID: journalEntryModesIdPut
 * `PUT: /journalEntryModes/{id}`
 * Update JournalEntryMode
 */
export const journalEntryModesIdPut = buildCall() //
  .args<rt.Static<typeof journalEntryModesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/journalEntryModes/${args.id}`)
  .body((args) => args.JournalEntryMode)
  .parseJson(withRuntype(journalEntryModeRt))
  .build();

// Operation: journalEntryModesIdDelete

const journalEntryModesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: journalEntryModesIdDelete
 * `DELETE: /journalEntryModes/{id}`
 * Delete JournalEntryMode
 */
export const journalEntryModesIdDelete = buildCall() //
  .args<rt.Static<typeof journalEntryModesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/journalEntryModes/${args.id}`)
  .parseJson(withRuntype(journalEntryModeRt))
  .build();

// Operation: journalEntryModesGet

const journalEntryModesGetResponseBodyRt = rt.Array(journalEntryModeRt);

/**
 * operation ID: journalEntryModesGet
 * `GET: /journalEntryModes`
 * Query JournalEntryMode
 */
export const journalEntryModesGet = buildCall() //
  .method('get')
  .path('/journalEntryModes')
  .parseJson(withRuntype(journalEntryModesGetResponseBodyRt))
  .build();

// Operation: journalEntryModesPost

const journalEntryModesPostArgsRt = rt
  .Record({ JournalEntryMode: journalEntryModeRt })
  .asReadonly();

/**
 * operation ID: journalEntryModesPost
 * `POST: /journalEntryModes`
 * Create JournalEntryMode
 */
export const journalEntryModesPost = buildCall() //
  .args<rt.Static<typeof journalEntryModesPostArgsRt>>()
  .method('post')
  .path('/journalEntryModes')
  .body((args) => args.JournalEntryMode)
  .build();

// Operation: journalentrytypesIdGet

const journalentrytypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: journalentrytypesIdGet
 * `GET: /journalentrytypes/{id}`
 * Get JournalEntryType
 */
export const journalentrytypesIdGet = buildCall() //
  .args<rt.Static<typeof journalentrytypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/journalentrytypes/${args.id}`)
  .parseJson(withRuntype(journalEntryTypeRt))
  .build();

// Operation: journalentrytypesGet

const journalentrytypesGetResponseBodyRt = rt.Array(journalEntryTypeRt);

/**
 * operation ID: journalentrytypesGet
 * `GET: /journalentrytypes`
 * Query JournalEntryType
 */
export const journalentrytypesGet = buildCall() //
  .method('get')
  .path('/journalentrytypes')
  .parseJson(withRuntype(journalentrytypesGetResponseBodyRt))
  .build();

// Operation: paymentbatchesActionGeneratePaymentFilePut

const paymentbatchesActionGeneratePaymentFilePutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGeneratePaymentFilePutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: paymentbatchesActionGeneratePaymentFilePut
 * `PUT: /paymentbatches?action=generate-payment-file`
 * generate-payment-file Action
 */
export const paymentbatchesActionGeneratePaymentFilePut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGeneratePaymentFilePutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=generate-payment-file`)
  .parseJson(
    withRuntype(paymentbatchesActionGeneratePaymentFilePutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionGenerateReceiptFilePut

const paymentbatchesActionGenerateReceiptFilePutArgsRt = rt
  .Record({ xmlcontent: rt.String })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateReceiptFilePutResponseBodyRt = rt.String;

/**
 * operation ID: paymentbatchesActionGenerateReceiptFilePut
 * `PUT: /paymentbatches?action=generate-receipt-file`
 * generate-receipt-file Action
 */
export const paymentbatchesActionGenerateReceiptFilePut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGenerateReceiptFilePutArgsRt>>()
  .method('put')
  .path('/paymentbatches?action=generate-receipt-file')
  .body((args) => args.xmlcontent)
  .parseJson(
    withRuntype(paymentbatchesActionGenerateReceiptFilePutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionGeneratePain002FilePut

const paymentbatchesActionGeneratePain002FilePutArgsRt = rt
  .Record({ xmlcontent: rt.String, status: rt.Unknown })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGeneratePain002FilePutResponseBodyRt = rt.String;

/**
 * operation ID: paymentbatchesActionGeneratePain002FilePut
 * `PUT: /paymentbatches?action=generate-pain002-file`
 * generate-pain002-file Action
 */
export const paymentbatchesActionGeneratePain002FilePut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGeneratePain002FilePutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=generate-pain002-file`)
  .body((args) => args.xmlcontent)
  .parseJson(
    withRuntype(paymentbatchesActionGeneratePain002FilePutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionRegisterReceiptFilePain002Put

const paymentbatchesActionRegisterReceiptFilePain002PutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentbatchesActionRegisterReceiptFilePain002Put
 * `PUT: /paymentbatches?action=register-receipt-file-pain002`
 * register-receipt-file-pain002 Action
 */
export const paymentbatchesActionRegisterReceiptFilePain002Put = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionRegisterReceiptFilePain002PutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=register-receipt-file-pain002`)
  .parseJson(withRuntype(paymentBatchRt))
  .build();

// Operation: paymentbatchesActionRegisterReceiptFileCamt054Put

const paymentbatchesActionRegisterReceiptFileCamt054PutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionRegisterReceiptFileCamt054PutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionRegisterReceiptFileCamt054Put
 * `PUT: /paymentbatches?action=register-receipt-file-camt054`
 * register-receipt-file-camt054 Action
 */
export const paymentbatchesActionRegisterReceiptFileCamt054Put = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionRegisterReceiptFileCamt054PutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=register-receipt-file-camt054`)
  .parseJson(
    withRuntype(
      paymentbatchesActionRegisterReceiptFileCamt054PutResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentbatchesActionRegisterReceiptFilePut

const paymentbatchesActionRegisterReceiptFilePutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionRegisterReceiptFilePutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: paymentbatchesActionRegisterReceiptFilePut
 * `PUT: /paymentbatches?action=register-receipt-file`
 * register-receipt-file Action
 */
export const paymentbatchesActionRegisterReceiptFilePut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionRegisterReceiptFilePutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=register-receipt-file`)
  .parseJson(
    withRuntype(paymentbatchesActionRegisterReceiptFilePutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionCompleteRegisteredPaymentsPut

const paymentbatchesActionCompleteRegisteredPaymentsPutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentbatchesActionCompleteRegisteredPaymentsPut
 * `PUT: /paymentbatches?action=complete-registered-payments`
 * complete-registered-payments Action
 */
export const paymentbatchesActionCompleteRegisteredPaymentsPut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionCompleteRegisteredPaymentsPutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=complete-registered-payments`)
  .build();

// Operation: paymentbatchesActionRevertPaymentBatchPut

const paymentbatchesActionRevertPaymentBatchPutArgsRt = rt
  .Record({ ID: rt.Number, recreatePayments: rt.Boolean })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentbatchesActionRevertPaymentBatchPut
 * `PUT: /paymentbatches?action=revert-payment-batch`
 * revert-payment-batch Action
 */
export const paymentbatchesActionRevertPaymentBatchPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionRevertPaymentBatchPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=revert-payment-batch`)
  .build();

// Operation: paymentbatchesActionSendBatchToPaymentPut

const paymentbatchesActionSendBatchToPaymentPutArgsRt = rt
  .Record({ batchID: rt.Number, dto: createPaymentBatchDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentbatchesActionSendBatchToPaymentPut
 * `PUT: /paymentbatches?action=send-batch-to-payment`
 * send-batch-to-payment Action
 */
export const paymentbatchesActionSendBatchToPaymentPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionSendBatchToPaymentPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=send-batch-to-payment`)
  .body((args) => args.dto)
  .parseJson(withRuntype(paymentBatchApproveStatusRt))
  .build();

// Operation: paymentbatchesActionCreateAndSendToPaymentPut

const paymentbatchesActionCreateAndSendToPaymentPutArgsRt = rt
  .Record({ dto: createPaymentBatchDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentbatchesActionCreateAndSendToPaymentPut
 * `PUT: /paymentbatches?action=create-and-send-to-payment`
 * create-and-send-to-payment Action
 */
export const paymentbatchesActionCreateAndSendToPaymentPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionCreateAndSendToPaymentPutArgsRt>>()
  .method('put')
  .path('/paymentbatches?action=create-and-send-to-payment')
  .body((args) => args.dto)
  .parseJson(withRuntype(paymentBatchApproveStatusRt))
  .build();

// Operation: paymentbatchesActionCreateAndSendAllToPaymentPut

const paymentbatchesActionCreateAndSendAllToPaymentPutArgsRt = rt
  .Record({ dto: createPaymentBatchDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentbatchesActionCreateAndSendAllToPaymentPut
 * `PUT: /paymentbatches?action=create-and-send-all-to-payment`
 * create-and-send-all-to-payment Action
 */
export const paymentbatchesActionCreateAndSendAllToPaymentPut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionCreateAndSendAllToPaymentPutArgsRt>
  >()
  .method('put')
  .path('/paymentbatches?action=create-and-send-all-to-payment')
  .body((args) => args.dto)
  .parseJson(withRuntype(paymentBatchApproveStatusRt))
  .build();

// Operation: paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPut

const paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPutArgsRt = rt
  .Record({ paymentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPutResponseBodyRt =
  rt.Array(paymentRt);

/**
 * operation ID:
 * paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPut
 * `PUT:
 * /paymentbatches?action=update-payments-to-paid-and-journal-payments`
 * update-payments-to-paid-and-journal-payments Action
 */
export const paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPutArgsRt
      >
    >()
    .method('put')
    .path('/paymentbatches?action=update-payments-to-paid-and-journal-payments')
    .body((args) => args.paymentIDs)
    .parseJson(
      withRuntype(
        paymentbatchesActionUpdatePaymentsToPaidAndJournalPaymentsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPut

const paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPutArgsRt =
  rt
    .Record({ filter: rt.String, hash: rt.String, expand: rt.String })
    .asPartial()
    .asReadonly();

const paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPut
 * `PUT:
 * /paymentbatches?action=update-all-payments-to-paid-and-journal-payments`
 * update-all-payments-to-paid-and-journal-payments Action
 */
export const paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/paymentbatches?action=update-all-payments-to-paid-and-journal-payments`,
    )
    .parseJson(
      withRuntype(
        paymentbatchesActionUpdateAllPaymentsToPaidAndJournalPaymentsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionUpdatePaymentsToCompletedPut

const paymentbatchesActionUpdatePaymentsToCompletedPutArgsRt = rt
  .Record({ paymentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionUpdatePaymentsToCompletedPutResponseBodyRt =
  rt.Array(paymentRt);

/**
 * operation ID:
 * paymentbatchesActionUpdatePaymentsToCompletedPut
 * `PUT: /paymentbatches?action=update-payments-to-completed`
 * update-payments-to-completed Action
 */
export const paymentbatchesActionUpdatePaymentsToCompletedPut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionUpdatePaymentsToCompletedPutArgsRt>
  >()
  .method('put')
  .path('/paymentbatches?action=update-payments-to-completed')
  .body((args) => args.paymentIDs)
  .parseJson(
    withRuntype(paymentbatchesActionUpdatePaymentsToCompletedPutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionApprovePut

const paymentbatchesActionApprovePutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentbatchesActionApprovePut
 * `PUT: /paymentbatches?action=approve`
 * approve Action
 */
export const paymentbatchesActionApprovePut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionApprovePutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=approve`)
  .parseJson(withRuntype(paymentBatchApproveStatusRt))
  .build();

// Operation: paymentbatchesActionDismissPut

const paymentbatchesActionDismissPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentbatchesActionDismissPut
 * `PUT: /paymentbatches?action=dismiss`
 * dismiss Action
 */
export const paymentbatchesActionDismissPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionDismissPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=dismiss`)
  .build();

// Operation: paymentbatchesActionUpdateAllPaymentsToCompletedPut

const paymentbatchesActionUpdateAllPaymentsToCompletedPutArgsRt = rt
  .Record({ filter: rt.String, hash: rt.String, expand: rt.String })
  .asPartial()
  .asReadonly();

const paymentbatchesActionUpdateAllPaymentsToCompletedPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionUpdateAllPaymentsToCompletedPut
 * `PUT:
 * /paymentbatches?action=update-all-payments-to-completed`
 * update-all-payments-to-completed Action
 */
export const paymentbatchesActionUpdateAllPaymentsToCompletedPut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionUpdateAllPaymentsToCompletedPutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=update-all-payments-to-completed`)
  .parseJson(
    withRuntype(
      paymentbatchesActionUpdateAllPaymentsToCompletedPutResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentbatchesActionGenerateCamt054CStringPut

const paymentbatchesActionGenerateCamt054CStringPutArgsRt = rt
  .Record({ customerInvoiceNumbers: rt.String })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateCamt054CStringPutResponseBodyRt = rt.String;

/**
 * operation ID: paymentbatchesActionGenerateCamt054CStringPut
 * `PUT: /paymentbatches?action=generate-camt054C-string`
 * generate-camt054C-string Action
 */
export const paymentbatchesActionGenerateCamt054CStringPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGenerateCamt054CStringPutArgsRt>>()
  .method('put')
  .path('/paymentbatches?action=generate-camt054C-string')
  .body((args) => args.customerInvoiceNumbers)
  .parseJson(
    withRuntype(paymentbatchesActionGenerateCamt054CStringPutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionGenerateOcrGiroStringPut

const paymentbatchesActionGenerateOcrGiroStringPutArgsRt = rt
  .Record({
    customerInvoiceNumbers: rt.String,
    fromBankAccountNumber: rt.String,
    customEOLChar: rt.Unknown,
  })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateOcrGiroStringPutResponseBodyRt = rt.String;

/**
 * operation ID: paymentbatchesActionGenerateOcrGiroStringPut
 * `PUT: /paymentbatches?action=generate-ocr-giro-string`
 * generate-ocr-giro-string Action
 */
export const paymentbatchesActionGenerateOcrGiroStringPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGenerateOcrGiroStringPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches?action=generate-ocr-giro-string`)
  .body((args) => args.customerInvoiceNumbers)
  .parseJson(
    withRuntype(paymentbatchesActionGenerateOcrGiroStringPutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionRegisterCustomerPaymentFilePut

const paymentbatchesActionRegisterCustomerPaymentFilePutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionRegisterCustomerPaymentFilePutResponseBodyRt =
  rt.Array(paymentBatchRt);

/**
 * operation ID:
 * paymentbatchesActionRegisterCustomerPaymentFilePut
 * `PUT: /paymentbatches?action=register-customer-payment-file`
 * register-customer-payment-file Action
 */
export const paymentbatchesActionRegisterCustomerPaymentFilePut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionRegisterCustomerPaymentFilePutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=register-customer-payment-file`)
  .parseJson(
    withRuntype(
      paymentbatchesActionRegisterCustomerPaymentFilePutResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentbatchesActionCompleteCustomerPaymentRegistrationPut

const paymentbatchesActionCompleteCustomerPaymentRegistrationPutArgsRt = rt
  .Record({ ID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionCompleteCustomerPaymentRegistrationPutResponseBodyRt =
  rt.Array(paymentBatchRt);

/**
 * operation ID:
 * paymentbatchesActionCompleteCustomerPaymentRegistrationPut
 * `PUT:
 * /paymentbatches?action=complete-customer-payment-registration`
 * complete-customer-payment-registration Action
 */
export const paymentbatchesActionCompleteCustomerPaymentRegistrationPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionCompleteCustomerPaymentRegistrationPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) => `/paymentbatches?action=complete-customer-payment-registration`,
    )
    .parseJson(
      withRuntype(
        paymentbatchesActionCompleteCustomerPaymentRegistrationPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionRegisterAndCompleteCustomerPaymentPut

const paymentbatchesActionRegisterAndCompleteCustomerPaymentPutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionRegisterAndCompleteCustomerPaymentPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionRegisterAndCompleteCustomerPaymentPut
 * `PUT:
 * /paymentbatches?action=register-and-complete-customer-payment`
 * register-and-complete-customer-payment Action
 */
export const paymentbatchesActionRegisterAndCompleteCustomerPaymentPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionRegisterAndCompleteCustomerPaymentPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) => `/paymentbatches?action=register-and-complete-customer-payment`,
    )
    .parseJson(
      withRuntype(
        paymentbatchesActionRegisterAndCompleteCustomerPaymentPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionRegisterPaymentStringPost

const paymentbatchesActionRegisterPaymentStringPostArgsRt = rt
  .Record({ paymentString: rt.String })
  .asPartial()
  .asReadonly();

const paymentbatchesActionRegisterPaymentStringPostResponseBodyRt =
  rt.Array(paymentBatchRt);

/**
 * operation ID: paymentbatchesActionRegisterPaymentStringPost
 * `POST: /paymentbatches?action=register-payment-string`
 * register-payment-string Action
 */
export const paymentbatchesActionRegisterPaymentStringPost = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionRegisterPaymentStringPostArgsRt>>()
  .method('post')
  .path('/paymentbatches?action=register-payment-string')
  .body((args) => args.paymentString)
  .parseJson(
    withRuntype(paymentbatchesActionRegisterPaymentStringPostResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesIdActionCompleteCustomerPaymentbatchPost

const paymentbatchesIdActionCompleteCustomerPaymentbatchPostArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

/**
 * operation ID:
 * paymentbatchesIdActionCompleteCustomerPaymentbatchPost
 * `POST:
 * /paymentbatches/{id}?action=complete-customer-paymentbatch`
 * complete-customer-paymentbatch Action
 */
export const paymentbatchesIdActionCompleteCustomerPaymentbatchPost =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesIdActionCompleteCustomerPaymentbatchPostArgsRt
      >
    >()
    .method('post')
    .path(
      (args) =>
        `/paymentbatches/${args.id}?action=complete-customer-paymentbatch`,
    )
    .build();

// Operation: paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPut

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPutArgsRt = rt
  .Record({ customerInvoiceNumbers: rt.String, isManual: rt.Boolean })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPut
 * `PUT:
 * /paymentbatches?action=generate-avtalegiro-batch-for-invoice-numbers`
 * generate-avtalegiro-batch-for-invoice-numbers Action
 */
export const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/paymentbatches?action=generate-avtalegiro-batch-for-invoice-numbers`,
    )
    .body((args) => args.customerInvoiceNumbers)
    .parseJson(
      withRuntype(
        paymentbatchesActionGenerateAvtalegiroBatchForInvoiceNumbersPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPut

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPutArgsRt = rt
  .Record({
    customerInvoiceIDs: rt.Number,
    isManual: rt.Boolean,
    isMergeable: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPut
 * `PUT:
 * /paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs`
 * generate-avtalegiro-batch-for-invoiceIDs Action
 */
export const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs`,
    )
    .body((args) => args.customerInvoiceIDs)
    .parseJson(
      withRuntype(
        paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPut

const paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPutArgsRt = rt
  .Record({
    paymentIDs: rt.Number,
    isManual: rt.Boolean,
    isMergeable: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPut
 * `PUT:
 * /paymentbatches?action=generate-avtalegiro-batch-for-payments`
 * generate-avtalegiro-batch-for-payments Action
 */
export const paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) => `/paymentbatches?action=generate-avtalegiro-batch-for-payments`,
    )
    .body((args) => args.paymentIDs)
    .parseJson(
      withRuntype(
        paymentbatchesActionGenerateAvtalegiroBatchForPaymentsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPut

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPutArgsRt =
  rt
    .Record({
      avtaleGiroPaymentBatch: createAvtaleGiroPaymentBatchDTORt,
      isManual: rt.Boolean,
      isMergeable: rt.Boolean,
    })
    .asPartial()
    .asReadonly();

const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPutResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPut
 * `PUT:
 * /paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs`
 * generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs
 * Action
 */
export const paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/paymentbatches?action=generate-avtalegiro-batch-for-invoiceIDs-and-paymentIDs`,
    )
    .body((args) => args.avtaleGiroPaymentBatch)
    .parseJson(
      withRuntype(
        paymentbatchesActionGenerateAvtalegiroBatchForInvoiceIDsAndPaymentIDsPutResponseBodyRt,
      ),
    )
    .build();

// Operation: paymentbatchesActionProcessAvtalegiroReceiptFilePut

const paymentbatchesActionProcessAvtalegiroReceiptFilePutArgsRt = rt
  .Record({ fileID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentbatchesActionProcessAvtalegiroReceiptFilePut
 * `PUT:
 * /paymentbatches?action=process-avtalegiro-receipt-file`
 * process-avtalegiro-receipt-file Action
 */
export const paymentbatchesActionProcessAvtalegiroReceiptFilePut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionProcessAvtalegiroReceiptFilePutArgsRt>
  >()
  .method('put')
  .path((args) => `/paymentbatches?action=process-avtalegiro-receipt-file`)
  .build();

// Operation: paymentbatchesActionProcessAvtalegiroReceiptFileContentPut

const paymentbatchesActionProcessAvtalegiroReceiptFileContentPutArgsRt = rt
  .Record({ content: rt.String, filename: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * paymentbatchesActionProcessAvtalegiroReceiptFileContentPut
 * `PUT:
 * /paymentbatches?action=process-avtalegiro-receipt-file-content`
 * process-avtalegiro-receipt-file-content Action
 */
export const paymentbatchesActionProcessAvtalegiroReceiptFileContentPut =
  buildCall() //
    .args<
      rt.Static<
        typeof paymentbatchesActionProcessAvtalegiroReceiptFileContentPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/paymentbatches?action=process-avtalegiro-receipt-file-content`,
    )
    .body((args) => args.content)
    .build();

// Operation: paymentbatchesActionGetStatusesFromFileIdsPut

const paymentbatchesActionGetStatusesFromFileIdsPutArgsRt = rt
  .Record({ fileIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGetStatusesFromFileIdsPutResponseBodyRt = rt.Number;

/**
 * operation ID: paymentbatchesActionGetStatusesFromFileIdsPut
 * `PUT: /paymentbatches?action=get-statuses-from-file-ids`
 * get-statuses-from-file-ids Action
 */
export const paymentbatchesActionGetStatusesFromFileIdsPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesActionGetStatusesFromFileIdsPutArgsRt>>()
  .method('put')
  .path('/paymentbatches?action=get-statuses-from-file-ids')
  .body((args) => args.fileIDs)
  .parseJson(
    withRuntype(paymentbatchesActionGetStatusesFromFileIdsPutResponseBodyRt),
  )
  .build();

// Operation: paymentbatchesActionGetFileStatusesFromFileIdsPut

const paymentbatchesActionGetFileStatusesFromFileIdsPutArgsRt = rt
  .Record({ fileIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentbatchesActionGetFileStatusesFromFileIdsPutResponseBodyRt =
  rt.Number;

/**
 * operation ID:
 * paymentbatchesActionGetFileStatusesFromFileIdsPut
 * `PUT:
 * /paymentbatches?action=get-file-statuses-from-file-ids`
 * get-file-statuses-from-file-ids Action
 */
export const paymentbatchesActionGetFileStatusesFromFileIdsPut = buildCall() //
  .args<
    rt.Static<typeof paymentbatchesActionGetFileStatusesFromFileIdsPutArgsRt>
  >()
  .method('put')
  .path('/paymentbatches?action=get-file-statuses-from-file-ids')
  .body((args) => args.fileIDs)
  .parseJson(
    withRuntype(
      paymentbatchesActionGetFileStatusesFromFileIdsPutResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentbatchesIdGet

const paymentbatchesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentbatchesIdGet
 * `GET: /paymentbatches/{id}`
 * Get PaymentBatch
 */
export const paymentbatchesIdGet = buildCall() //
  .args<rt.Static<typeof paymentbatchesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/paymentbatches/${args.id}`)
  .parseJson(withRuntype(paymentBatchRt))
  .build();

// Operation: paymentbatchesIdPut

const paymentbatchesIdPutArgsRt = rt
  .Record({ id: rt.Number, PaymentBatch: paymentBatchRt })
  .asReadonly();

/**
 * operation ID: paymentbatchesIdPut
 * `PUT: /paymentbatches/{id}`
 * Update PaymentBatch
 */
export const paymentbatchesIdPut = buildCall() //
  .args<rt.Static<typeof paymentbatchesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/paymentbatches/${args.id}`)
  .body((args) => args.PaymentBatch)
  .parseJson(withRuntype(paymentBatchRt))
  .build();

// Operation: paymentbatchesIdDelete

const paymentbatchesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentbatchesIdDelete
 * `DELETE: /paymentbatches/{id}`
 * Delete PaymentBatch
 */
export const paymentbatchesIdDelete = buildCall() //
  .args<rt.Static<typeof paymentbatchesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/paymentbatches/${args.id}`)
  .parseJson(withRuntype(paymentBatchRt))
  .build();

// Operation: paymentbatchesGet

const paymentbatchesGetResponseBodyRt = rt.Array(paymentBatchRt);

/**
 * operation ID: paymentbatchesGet
 * `GET: /paymentbatches`
 * Query PaymentBatch
 */
export const paymentbatchesGet = buildCall() //
  .method('get')
  .path('/paymentbatches')
  .parseJson(withRuntype(paymentbatchesGetResponseBodyRt))
  .build();

// Operation: paymentbatchesPost

const paymentbatchesPostArgsRt = rt
  .Record({ PaymentBatch: paymentBatchRt })
  .asReadonly();

/**
 * operation ID: paymentbatchesPost
 * `POST: /paymentbatches`
 * Create PaymentBatch
 */
export const paymentbatchesPost = buildCall() //
  .args<rt.Static<typeof paymentbatchesPostArgsRt>>()
  .method('post')
  .path('/paymentbatches')
  .body((args) => args.PaymentBatch)
  .build();

// Operation: paymentsActionCreatePaymentBatchPost

const paymentsActionCreatePaymentBatchPostArgsRt = rt
  .Record({
    paymentIDs: rt.Number,
    isManual: rt.Boolean,
    hash: rt.String,
    createPaymentFile: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentsActionCreatePaymentBatchPost
 * `POST: /payments?action=create-payment-batch`
 * create-payment-batch Action
 */
export const paymentsActionCreatePaymentBatchPost = buildCall() //
  .args<rt.Static<typeof paymentsActionCreatePaymentBatchPostArgsRt>>()
  .method('post')
  .path((args) => `/payments?action=create-payment-batch`)
  .body((args) => args.paymentIDs)
  .parseJson(withRuntype(paymentBatchRt))
  .build();

// Operation: paymentsActionCreatePaymentBatchForAllPaymentsPost

const paymentsActionCreatePaymentBatchForAllPaymentsPostArgsRt = rt
  .Record({
    isManual: rt.Boolean,
    hash: rt.String,
    createFile: rt.Boolean,
    filter: rt.String,
    expand: rt.String,
  })
  .asPartial()
  .asReadonly();

const paymentsActionCreatePaymentBatchForAllPaymentsPostResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * paymentsActionCreatePaymentBatchForAllPaymentsPost
 * `POST:
 * /payments?action=create-payment-batch-for-all-payments`
 * create-payment-batch-for-all-payments Action
 */
export const paymentsActionCreatePaymentBatchForAllPaymentsPost = buildCall() //
  .args<
    rt.Static<typeof paymentsActionCreatePaymentBatchForAllPaymentsPostArgsRt>
  >()
  .method('post')
  .path((args) => `/payments?action=create-payment-batch-for-all-payments`)
  .parseJson(
    withRuntype(
      paymentsActionCreatePaymentBatchForAllPaymentsPostResponseBodyRt,
    ),
  )
  .build();

// Operation: paymentsActionCreateHashForPaymentsGet

const paymentsActionCreateHashForPaymentsGetArgsRt = rt
  .Record({ filter: rt.String, expand: rt.String })
  .asPartial()
  .asReadonly();

const paymentsActionCreateHashForPaymentsGetResponseBodyRt = rt.String;

/**
 * operation ID: paymentsActionCreateHashForPaymentsGet
 * `GET: /payments?action=create-hash-for-payments`
 * create-hash-for-payments Action
 */
export const paymentsActionCreateHashForPaymentsGet = buildCall() //
  .args<rt.Static<typeof paymentsActionCreateHashForPaymentsGetArgsRt>>()
  .method('get')
  .path((args) => `/payments?action=create-hash-for-payments`)
  .parseJson(withRuntype(paymentsActionCreateHashForPaymentsGetResponseBodyRt))
  .build();

// Operation: paymentsActionCreatePaymentWithTracelinkPost

const paymentsActionCreatePaymentWithTracelinkPostArgsRt = rt
  .Record({ payment: paymentRt, journalEntryID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentsActionCreatePaymentWithTracelinkPost
 * `POST: /payments?action=create-payment-with-tracelink`
 * create-payment-with-tracelink Action
 */
export const paymentsActionCreatePaymentWithTracelinkPost = buildCall() //
  .args<rt.Static<typeof paymentsActionCreatePaymentWithTracelinkPostArgsRt>>()
  .method('post')
  .path((args) => `/payments?action=create-payment-with-tracelink`)
  .body((args) => args.payment)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: paymentsActionResetPaymentPost

const paymentsActionResetPaymentPostArgsRt = rt
  .Record({ payment: paymentRt, oldPaymentID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: paymentsActionResetPaymentPost
 * `POST: /payments?action=reset-payment`
 * reset-payment Action
 */
export const paymentsActionResetPaymentPost = buildCall() //
  .args<rt.Static<typeof paymentsActionResetPaymentPostArgsRt>>()
  .method('post')
  .path((args) => `/payments?action=reset-payment`)
  .body((args) => args.payment)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: paymentsIdActionForceDeleteDelete

const paymentsIdActionForceDeleteDeleteArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: paymentsIdActionForceDeleteDelete
 * `DELETE: /payments/{id}?action=force-delete`
 * force-delete Action
 */
export const paymentsIdActionForceDeleteDelete = buildCall() //
  .args<rt.Static<typeof paymentsIdActionForceDeleteDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payments/${args.id}?action=force-delete`)
  .build();

// Operation: paymentsIdActionDeleteAndCreditDelete

const paymentsIdActionDeleteAndCreditDeleteArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: paymentsIdActionDeleteAndCreditDelete
 * `DELETE: /payments/{id}?action=delete-and-credit`
 * delete-and-credit Action
 */
export const paymentsIdActionDeleteAndCreditDelete = buildCall() //
  .args<rt.Static<typeof paymentsIdActionDeleteAndCreditDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payments/${args.id}?action=delete-and-credit`)
  .build();

// Operation: paymentsIdActionForceDeleteAndCreditDelete

const paymentsIdActionForceDeleteAndCreditDeleteArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: paymentsIdActionForceDeleteAndCreditDelete
 * `DELETE: /payments/{id}?action=force-delete-and-credit`
 * force-delete-and-credit Action
 */
export const paymentsIdActionForceDeleteAndCreditDelete = buildCall() //
  .args<rt.Static<typeof paymentsIdActionForceDeleteAndCreditDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payments/${args.id}?action=force-delete-and-credit`)
  .build();

// Operation: paymentsActionBatchDeleteAndCreditAllPut

const paymentsActionBatchDeleteAndCreditAllPutArgsRt = rt
  .Record({
    filter: rt.String,
    hash: rt.String,
    expand: rt.String,
    credit: rt.Boolean,
  })
  .asPartial()
  .asReadonly();

const paymentsActionBatchDeleteAndCreditAllPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: paymentsActionBatchDeleteAndCreditAllPut
 * `PUT: /payments?action=batch-delete-and-credit-all`
 * batch-delete-and-credit-all Action
 */
export const paymentsActionBatchDeleteAndCreditAllPut = buildCall() //
  .args<rt.Static<typeof paymentsActionBatchDeleteAndCreditAllPutArgsRt>>()
  .method('put')
  .path((args) => `/payments?action=batch-delete-and-credit-all`)
  .parseJson(
    withRuntype(paymentsActionBatchDeleteAndCreditAllPutResponseBodyRt),
  )
  .build();

// Operation: paymentsActionBatchDeleteAndCreditPut

const paymentsActionBatchDeleteAndCreditPutArgsRt = rt
  .Record({ paymentIDs: rt.Number, credit: rt.Boolean })
  .asPartial()
  .asReadonly();

const paymentsActionBatchDeleteAndCreditPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: paymentsActionBatchDeleteAndCreditPut
 * `PUT: /payments?action=batch-delete-and-credit`
 * batch-delete-and-credit Action
 */
export const paymentsActionBatchDeleteAndCreditPut = buildCall() //
  .args<rt.Static<typeof paymentsActionBatchDeleteAndCreditPutArgsRt>>()
  .method('put')
  .path((args) => `/payments?action=batch-delete-and-credit`)
  .body((args) => args.paymentIDs)
  .parseJson(withRuntype(paymentsActionBatchDeleteAndCreditPutResponseBodyRt))
  .build();

// Operation: paymentsActionBatchCancelPaymentClaimsPut

const paymentsActionBatchCancelPaymentClaimsPutArgsRt = rt
  .Record({ paymentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentsActionBatchCancelPaymentClaimsPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: paymentsActionBatchCancelPaymentClaimsPut
 * `PUT: /payments?action=batch-cancel-payment-claims`
 * batch-cancel-payment-claims Action
 */
export const paymentsActionBatchCancelPaymentClaimsPut = buildCall() //
  .args<rt.Static<typeof paymentsActionBatchCancelPaymentClaimsPutArgsRt>>()
  .method('put')
  .path('/payments?action=batch-cancel-payment-claims')
  .body((args) => args.paymentIDs)
  .parseJson(
    withRuntype(paymentsActionBatchCancelPaymentClaimsPutResponseBodyRt),
  )
  .build();

// Operation: paymentsActionUpdatePaymentsToIgnoredPut

const paymentsActionUpdatePaymentsToIgnoredPutArgsRt = rt
  .Record({ paymentIDs: rt.Number })
  .asPartial()
  .asReadonly();

const paymentsActionUpdatePaymentsToIgnoredPutResponseBodyRt =
  rt.Array(paymentRt);

/**
 * operation ID: paymentsActionUpdatePaymentsToIgnoredPut
 * `PUT: /payments?action=update-payments-to-ignored`
 * update-payments-to-ignored Action
 */
export const paymentsActionUpdatePaymentsToIgnoredPut = buildCall() //
  .args<rt.Static<typeof paymentsActionUpdatePaymentsToIgnoredPutArgsRt>>()
  .method('put')
  .path('/payments?action=update-payments-to-ignored')
  .body((args) => args.paymentIDs)
  .parseJson(
    withRuntype(paymentsActionUpdatePaymentsToIgnoredPutResponseBodyRt),
  )
  .build();

// Operation: paymentsIdGet

const paymentsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentsIdGet
 * `GET: /payments/{id}`
 * Get Payment
 */
export const paymentsIdGet = buildCall() //
  .args<rt.Static<typeof paymentsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/payments/${args.id}`)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: paymentsIdPut

const paymentsIdPutArgsRt = rt
  .Record({ id: rt.Number, Payment: paymentRt })
  .asReadonly();

/**
 * operation ID: paymentsIdPut
 * `PUT: /payments/{id}`
 * Update Payment
 */
export const paymentsIdPut = buildCall() //
  .args<rt.Static<typeof paymentsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/payments/${args.id}`)
  .body((args) => args.Payment)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: paymentsIdDelete

const paymentsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: paymentsIdDelete
 * `DELETE: /payments/{id}`
 * Delete Payment
 */
export const paymentsIdDelete = buildCall() //
  .args<rt.Static<typeof paymentsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/payments/${args.id}`)
  .parseJson(withRuntype(paymentRt))
  .build();

// Operation: paymentsGet

const paymentsGetResponseBodyRt = rt.Array(paymentRt);

/**
 * operation ID: paymentsGet
 * `GET: /payments`
 * Query Payment
 */
export const paymentsGet = buildCall() //
  .method('get')
  .path('/payments')
  .parseJson(withRuntype(paymentsGetResponseBodyRt))
  .build();

// Operation: paymentsPost

const paymentsPostArgsRt = rt.Record({ Payment: paymentRt }).asReadonly();

/**
 * operation ID: paymentsPost
 * `POST: /payments`
 * Create Payment
 */
export const paymentsPost = buildCall() //
  .args<rt.Static<typeof paymentsPostArgsRt>>()
  .method('post')
  .path('/payments')
  .body((args) => args.Payment)
  .build();

// Operation: postpostsActionMarkpostsPost

const postpostsActionMarkpostsPostArgsRt = rt
  .Record({ journalEntryLineCouples: rt.Array(journalEntryLineCoupleRt) })
  .asPartial()
  .asReadonly();

/**
 * operation ID: postpostsActionMarkpostsPost
 * `POST: /postposts?action=markposts`
 * markposts Action
 */
export const postpostsActionMarkpostsPost = buildCall() //
  .args<rt.Static<typeof postpostsActionMarkpostsPostArgsRt>>()
  .method('post')
  .path('/postposts?action=markposts')
  .body((args) => args.journalEntryLineCouples)
  .build();

// Operation: postpostsActionRevertPostpostPost

const postpostsActionRevertPostpostPostArgsRt = rt
  .Record({ journalEntryLinesID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: postpostsActionRevertPostpostPost
 * `POST: /postposts?action=revert-postpost`
 * revert-postpost Action
 */
export const postpostsActionRevertPostpostPost = buildCall() //
  .args<rt.Static<typeof postpostsActionRevertPostpostPostArgsRt>>()
  .method('post')
  .path('/postposts?action=revert-postpost')
  .body((args) => args.journalEntryLinesID)
  .build();

// Operation: postpostsActionGetSuggestionsGet

const postpostsActionGetSuggestionsGetArgsRt = rt
  .Record({
    methods: rt.String,
    customerID: rt.Number,
    supplierID: rt.Number,
    accountID: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: postpostsActionGetSuggestionsGet
 * `GET: /postposts?action=get-suggestions`
 * get-suggestions Action
 */
export const postpostsActionGetSuggestionsGet = buildCall() //
  .args<rt.Static<typeof postpostsActionGetSuggestionsGetArgsRt>>()
  .method('get')
  .path((args) => `/postposts?action=get-suggestions`)
  .parseJson(withRuntype(markingResultRt))
  .build();

// Operation: postpostsActionResetJournalentrylinePostpostStatusToOpenPut

const postpostsActionResetJournalentrylinePostpostStatusToOpenPutArgsRt = rt
  .Record({ line: journalEntryLineRt })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * postpostsActionResetJournalentrylinePostpostStatusToOpenPut
 * `PUT:
 * /postposts?action=reset-journalentryline-postpost-status-to-open`
 * reset-journalentryline-postpost-status-to-open Action
 */
export const postpostsActionResetJournalentrylinePostpostStatusToOpenPut =
  buildCall() //
    .args<
      rt.Static<
        typeof postpostsActionResetJournalentrylinePostpostStatusToOpenPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/postposts?action=reset-journalentryline-postpost-status-to-open`,
    )
    .build();

// Operation: postpostsActionResetJournalentrylinesPostpostStatusToOpenPut

const postpostsActionResetJournalentrylinesPostpostStatusToOpenPutArgsRt = rt
  .Record({ subAccountID: rt.Number, subAccountType: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * postpostsActionResetJournalentrylinesPostpostStatusToOpenPut
 * `PUT:
 * /postposts?action=reset-journalentrylines-postpost-status-to-open`
 * reset-journalentrylines-postpost-status-to-open Action
 */
export const postpostsActionResetJournalentrylinesPostpostStatusToOpenPut =
  buildCall() //
    .args<
      rt.Static<
        typeof postpostsActionResetJournalentrylinesPostpostStatusToOpenPutArgsRt
      >
    >()
    .method('put')
    .path(
      (args) =>
        `/postposts?action=reset-journalentrylines-postpost-status-to-open`,
    )
    .build();

// Operation: postpostsIdGet

const postpostsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: postpostsIdGet
 * `GET: /postposts/{id}`
 * Get PostPost
 */
export const postpostsIdGet = buildCall() //
  .args<rt.Static<typeof postpostsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/postposts/${args.id}`)
  .parseJson(withRuntype(postPostRt))
  .build();

// Operation: postpostsIdPut

const postpostsIdPutArgsRt = rt
  .Record({ id: rt.Number, PostPost: postPostRt })
  .asReadonly();

/**
 * operation ID: postpostsIdPut
 * `PUT: /postposts/{id}`
 * Update PostPost
 */
export const postpostsIdPut = buildCall() //
  .args<rt.Static<typeof postpostsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/postposts/${args.id}`)
  .body((args) => args.PostPost)
  .parseJson(withRuntype(postPostRt))
  .build();

// Operation: postpostsIdDelete

const postpostsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: postpostsIdDelete
 * `DELETE: /postposts/{id}`
 * Delete PostPost
 */
export const postpostsIdDelete = buildCall() //
  .args<rt.Static<typeof postpostsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/postposts/${args.id}`)
  .parseJson(withRuntype(postPostRt))
  .build();

// Operation: postpostsGet

const postpostsGetResponseBodyRt = rt.Array(postPostRt);

/**
 * operation ID: postpostsGet
 * `GET: /postposts`
 * Query PostPost
 */
export const postpostsGet = buildCall() //
  .method('get')
  .path('/postposts')
  .parseJson(withRuntype(postpostsGetResponseBodyRt))
  .build();

// Operation: postpostsPost

const postpostsPostArgsRt = rt.Record({ PostPost: postPostRt }).asReadonly();

/**
 * operation ID: postpostsPost
 * `POST: /postposts`
 * Create PostPost
 */
export const postpostsPost = buildCall() //
  .args<rt.Static<typeof postpostsPostArgsRt>>()
  .method('post')
  .path('/postposts')
  .body((args) => args.PostPost)
  .build();

// Operation: reinvoicingActionMarkCreatePost

const reinvoicingActionMarkCreatePostArgsRt = rt
  .Record({
    supplierInvoiceID: rt.Number,
    reInvoice: reInvoiceRt,
    reInvoiceType: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: reinvoicingActionMarkCreatePost
 * `POST: /reinvoicing?action=mark-create`
 * mark-create Action
 */
export const reinvoicingActionMarkCreatePost = buildCall() //
  .args<rt.Static<typeof reinvoicingActionMarkCreatePostArgsRt>>()
  .method('post')
  .path((args) => `/reinvoicing?action=mark-create`)
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reInvoiceRt))
  .build();

// Operation: reinvoicingIdActionCreateOrdersPut

const reinvoicingIdActionCreateOrdersPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ reInvoice: reInvoiceRt }).asPartial().asReadonly(),
);

const reinvoicingIdActionCreateOrdersPutResponseBodyRt = rt.Number;

/**
 * operation ID: reinvoicingIdActionCreateOrdersPut
 * `PUT: /reinvoicing/{id}?action=create-orders`
 * create-orders Action
 */
export const reinvoicingIdActionCreateOrdersPut = buildCall() //
  .args<rt.Static<typeof reinvoicingIdActionCreateOrdersPutArgsRt>>()
  .method('put')
  .path((args) => `/reinvoicing/${args.id}?action=create-orders`)
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reinvoicingIdActionCreateOrdersPutResponseBodyRt))
  .build();

// Operation: reinvoicingIdActionCreateInvoicesDraftPut

const reinvoicingIdActionCreateInvoicesDraftPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ reInvoice: reInvoiceRt }).asPartial().asReadonly(),
);

const reinvoicingIdActionCreateInvoicesDraftPutResponseBodyRt = rt.Number;

/**
 * operation ID: reinvoicingIdActionCreateInvoicesDraftPut
 * `PUT: /reinvoicing/{id}?action=create-invoices-draft`
 * create-invoices-draft Action
 */
export const reinvoicingIdActionCreateInvoicesDraftPut = buildCall() //
  .args<rt.Static<typeof reinvoicingIdActionCreateInvoicesDraftPutArgsRt>>()
  .method('put')
  .path((args) => `/reinvoicing/${args.id}?action=create-invoices-draft`)
  .body((args) => args.reInvoice)
  .parseJson(
    withRuntype(reinvoicingIdActionCreateInvoicesDraftPutResponseBodyRt),
  )
  .build();

// Operation: reinvoicingIdActionCreateInvoicesPut

const reinvoicingIdActionCreateInvoicesPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ reInvoice: reInvoiceRt }).asPartial().asReadonly(),
);

const reinvoicingIdActionCreateInvoicesPutResponseBodyRt = rt.Number;

/**
 * operation ID: reinvoicingIdActionCreateInvoicesPut
 * `PUT: /reinvoicing/{id}?action=create-invoices`
 * create-invoices Action
 */
export const reinvoicingIdActionCreateInvoicesPut = buildCall() //
  .args<rt.Static<typeof reinvoicingIdActionCreateInvoicesPutArgsRt>>()
  .method('put')
  .path((args) => `/reinvoicing/${args.id}?action=create-invoices`)
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reinvoicingIdActionCreateInvoicesPutResponseBodyRt))
  .build();

// Operation: reinvoicingActionValidPut

const reinvoicingActionValidPutArgsRt = rt
  .Record({ reInvoice: reInvoiceRt })
  .asPartial()
  .asReadonly();

const reinvoicingActionValidPutResponseBodyRt = rt.Boolean;

/**
 * operation ID: reinvoicingActionValidPut
 * `PUT: /reinvoicing?action=valid`
 * valid Action
 */
export const reinvoicingActionValidPut = buildCall() //
  .args<rt.Static<typeof reinvoicingActionValidPutArgsRt>>()
  .method('put')
  .path('/reinvoicing?action=valid')
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reinvoicingActionValidPutResponseBodyRt))
  .build();

// Operation: reinvoicingActionValidMessagePut

const reinvoicingActionValidMessagePutArgsRt = rt
  .Record({ reInvoice: reInvoiceRt })
  .asPartial()
  .asReadonly();

const reinvoicingActionValidMessagePutResponseBodyRt = rt.String;

/**
 * operation ID: reinvoicingActionValidMessagePut
 * `PUT: /reinvoicing?action=valid-message`
 * valid-message Action
 */
export const reinvoicingActionValidMessagePut = buildCall() //
  .args<rt.Static<typeof reinvoicingActionValidMessagePutArgsRt>>()
  .method('put')
  .path('/reinvoicing?action=valid-message')
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reinvoicingActionValidMessagePutResponseBodyRt))
  .build();

// Operation: reinvoicingActionDeletePut

const reinvoicingActionDeletePutArgsRt = rt
  .Record({ reInvoice: reInvoiceRt })
  .asPartial()
  .asReadonly();

const reinvoicingActionDeletePutResponseBodyRt = rt.String;

/**
 * operation ID: reinvoicingActionDeletePut
 * `PUT: /reinvoicing?action=delete`
 * delete Action
 */
export const reinvoicingActionDeletePut = buildCall() //
  .args<rt.Static<typeof reinvoicingActionDeletePutArgsRt>>()
  .method('put')
  .path('/reinvoicing?action=delete')
  .body((args) => args.reInvoice)
  .parseJson(withRuntype(reinvoicingActionDeletePutResponseBodyRt))
  .build();

// Operation: reinvoicingIdActionDeletePut

const reinvoicingIdActionDeletePutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const reinvoicingIdActionDeletePutResponseBodyRt = rt.String;

/**
 * operation ID: reinvoicingIdActionDeletePut
 * `PUT: /reinvoicing/{id}?action=delete`
 * delete Action
 */
export const reinvoicingIdActionDeletePut = buildCall() //
  .args<rt.Static<typeof reinvoicingIdActionDeletePutArgsRt>>()
  .method('put')
  .path((args) => `/reinvoicing/${args.id}?action=delete`)
  .parseJson(withRuntype(reinvoicingIdActionDeletePutResponseBodyRt))
  .build();

// Operation: reinvoicingIdActionAllowChangeGet

const reinvoicingIdActionAllowChangeGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

const reinvoicingIdActionAllowChangeGetResponseBodyRt = rt.Boolean;

/**
 * operation ID: reinvoicingIdActionAllowChangeGet
 * `GET: /reinvoicing/{id}?action=allow-change`
 * allow-change Action
 */
export const reinvoicingIdActionAllowChangeGet = buildCall() //
  .args<rt.Static<typeof reinvoicingIdActionAllowChangeGetArgsRt>>()
  .method('get')
  .path((args) => `/reinvoicing/${args.id}?action=allow-change`)
  .parseJson(withRuntype(reinvoicingIdActionAllowChangeGetResponseBodyRt))
  .build();

// Operation: reinvoicingIdGet

const reinvoicingIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: reinvoicingIdGet
 * `GET: /reinvoicing/{id}`
 * Get ReInvoice
 */
export const reinvoicingIdGet = buildCall() //
  .args<rt.Static<typeof reinvoicingIdGetArgsRt>>()
  .method('get')
  .path((args) => `/reinvoicing/${args.id}`)
  .parseJson(withRuntype(reInvoiceRt))
  .build();

// Operation: reinvoicingIdPut

const reinvoicingIdPutArgsRt = rt
  .Record({ id: rt.Number, ReInvoice: reInvoiceRt })
  .asReadonly();

/**
 * operation ID: reinvoicingIdPut
 * `PUT: /reinvoicing/{id}`
 * Update ReInvoice
 */
export const reinvoicingIdPut = buildCall() //
  .args<rt.Static<typeof reinvoicingIdPutArgsRt>>()
  .method('put')
  .path((args) => `/reinvoicing/${args.id}`)
  .body((args) => args.ReInvoice)
  .parseJson(withRuntype(reInvoiceRt))
  .build();

// Operation: reinvoicingIdDelete

const reinvoicingIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: reinvoicingIdDelete
 * `DELETE: /reinvoicing/{id}`
 * Delete ReInvoice
 */
export const reinvoicingIdDelete = buildCall() //
  .args<rt.Static<typeof reinvoicingIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/reinvoicing/${args.id}`)
  .parseJson(withRuntype(reInvoiceRt))
  .build();

// Operation: reinvoicingGet

const reinvoicingGetResponseBodyRt = rt.Array(reInvoiceRt);

/**
 * operation ID: reinvoicingGet
 * `GET: /reinvoicing`
 * Query ReInvoice
 */
export const reinvoicingGet = buildCall() //
  .method('get')
  .path('/reinvoicing')
  .parseJson(withRuntype(reinvoicingGetResponseBodyRt))
  .build();

// Operation: reinvoicingPost

const reinvoicingPostArgsRt = rt
  .Record({ ReInvoice: reInvoiceRt })
  .asReadonly();

/**
 * operation ID: reinvoicingPost
 * `POST: /reinvoicing`
 * Create ReInvoice
 */
export const reinvoicingPost = buildCall() //
  .args<rt.Static<typeof reinvoicingPostArgsRt>>()
  .method('post')
  .path('/reinvoicing')
  .body((args) => args.ReInvoice)
  .build();

// Operation: accountsAccountidSubaccountsIdGet

const accountsAccountidSubaccountsIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountsAccountidSubaccountsIdGet
 * `GET: /accounts/{accountid}/subaccounts/{id}`
 * Get Account
 */
export const accountsAccountidSubaccountsIdGet = buildCall() //
  .args<rt.Static<typeof accountsAccountidSubaccountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/accounts/{accountid}/subaccounts/${args.id}`)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsAccountidSubaccountsIdPut

const accountsAccountidSubaccountsIdPutArgsRt = rt
  .Record({ id: rt.Number, Account: accountRt })
  .asReadonly();

/**
 * operation ID: accountsAccountidSubaccountsIdPut
 * `PUT: /accounts/{accountid}/subaccounts/{id}`
 * Update Account
 */
export const accountsAccountidSubaccountsIdPut = buildCall() //
  .args<rt.Static<typeof accountsAccountidSubaccountsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/accounts/{accountid}/subaccounts/${args.id}`)
  .body((args) => args.Account)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsAccountidSubaccountsIdDelete

const accountsAccountidSubaccountsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: accountsAccountidSubaccountsIdDelete
 * `DELETE: /accounts/{accountid}/subaccounts/{id}`
 * Delete Account
 */
export const accountsAccountidSubaccountsIdDelete = buildCall() //
  .args<rt.Static<typeof accountsAccountidSubaccountsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/accounts/{accountid}/subaccounts/${args.id}`)
  .parseJson(withRuntype(accountRt))
  .build();

// Operation: accountsAccountidSubaccountsGet

const accountsAccountidSubaccountsGetResponseBodyRt = rt.Array(accountRt);

/**
 * operation ID: accountsAccountidSubaccountsGet
 * `GET: /accounts/{accountid}/subaccounts`
 * Query Account
 */
export const accountsAccountidSubaccountsGet = buildCall() //
  .method('get')
  .path('/accounts/{accountid}/subaccounts')
  .parseJson(withRuntype(accountsAccountidSubaccountsGetResponseBodyRt))
  .build();

// Operation: accountsAccountidSubaccountsPost

const accountsAccountidSubaccountsPostArgsRt = rt
  .Record({ Account: accountRt })
  .asReadonly();

/**
 * operation ID: accountsAccountidSubaccountsPost
 * `POST: /accounts/{accountid}/subaccounts`
 * Create Account
 */
export const accountsAccountidSubaccountsPost = buildCall() //
  .args<rt.Static<typeof accountsAccountidSubaccountsPostArgsRt>>()
  .method('post')
  .path('/accounts/{accountid}/subaccounts')
  .body((args) => args.Account)
  .build();

// Operation: ledgersuggestionsIdGet

const ledgersuggestionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: ledgersuggestionsIdGet
 * `GET: /ledgersuggestions/{id}`
 * Get LedgerSuggestion
 */
export const ledgersuggestionsIdGet = buildCall() //
  .args<rt.Static<typeof ledgersuggestionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/ledgersuggestions/${args.id}`)
  .parseJson(withRuntype(ledgerSuggestionRt))
  .build();

// Operation: ledgersuggestionsGet

const ledgersuggestionsGetResponseBodyRt = rt.Array(ledgerSuggestionRt);

/**
 * operation ID: ledgersuggestionsGet
 * `GET: /ledgersuggestions`
 * Query LedgerSuggestion
 */
export const ledgersuggestionsGet = buildCall() //
  .method('get')
  .path('/ledgersuggestions')
  .parseJson(withRuntype(ledgersuggestionsGetResponseBodyRt))
  .build();

// Operation: supplierinvoicesIdActionSmartbookingPut

const supplierinvoicesIdActionSmartbookingPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: supplierinvoicesIdActionSmartbookingPut
 * `PUT: /supplierinvoices/{id}?action=smartbooking`
 * smartbooking Action
 */
export const supplierinvoicesIdActionSmartbookingPut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionSmartbookingPutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices/${args.id}?action=smartbooking`)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: supplierinvoicesIdActionPayInvoicePut

const supplierinvoicesIdActionPayInvoicePutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ data: invoicePaymentDataRt }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionPayInvoicePut
 * `PUT: /supplierinvoices/{id}?action=payInvoice`
 * payInvoice Action
 */
export const supplierinvoicesIdActionPayInvoicePut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionPayInvoicePutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices/${args.id}?action=payInvoice`)
  .body((args) => args.data)
  .parseJson(withRuntype(journalEntryRt))
  .build();

// Operation: supplierinvoicesActionCreditSupplierinvoiceJournalentryPost

const supplierinvoicesActionCreditSupplierinvoiceJournalentryPostArgsRt = rt
  .Record({ supplierInvoiceId: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * supplierinvoicesActionCreditSupplierinvoiceJournalentryPost
 * `POST:
 * /supplierinvoices?action=credit-supplierinvoice-journalentry`
 * credit-supplierinvoice-journalentry Action
 */
export const supplierinvoicesActionCreditSupplierinvoiceJournalentryPost =
  buildCall() //
    .args<
      rt.Static<
        typeof supplierinvoicesActionCreditSupplierinvoiceJournalentryPostArgsRt
      >
    >()
    .method('post')
    .path(
      (args) => `/supplierinvoices?action=credit-supplierinvoice-journalentry`,
    )
    .build();

// Operation: supplierinvoicesIdActionAssignPost

const supplierinvoicesIdActionAssignPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionAssignPost
 * `POST: /supplierinvoices/{id}?action=assign`
 * assign Transition
 */
export const supplierinvoicesIdActionAssignPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionAssignPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=assign`)
  .build();

// Operation: supplierinvoicesIdActionAssignToPost

const supplierinvoicesIdActionAssignToPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, details: assignmentDetailsRt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionAssignToPost
 * `POST: /supplierinvoices/{id}?action=assign-to`
 * assign-to Action
 */
export const supplierinvoicesIdActionAssignToPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionAssignToPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=assign-to`)
  .body((args) => args.details)
  .parseJson(withRuntype(taskRt))
  .build();

// Operation: supplierinvoicesIdActionNotifyApprovalTasksPost

const supplierinvoicesIdActionNotifyApprovalTasksPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ daysToDueDate: rt.Number, redirectUrl: rt.String })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID:
 * supplierinvoicesIdActionNotifyApprovalTasksPost
 * `POST: /supplierinvoices/{id}?action=notify-approval-tasks`
 * notify-approval-tasks Action
 */
export const supplierinvoicesIdActionNotifyApprovalTasksPost = buildCall() //
  .args<
    rt.Static<typeof supplierinvoicesIdActionNotifyApprovalTasksPostArgsRt>
  >()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=notify-approval-tasks`)
  .build();

// Operation: supplierinvoicesIdActionReAssignToPost

const supplierinvoicesIdActionReAssignToPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt
    .Record({ id: rt.Number, details: assignmentDetailsRt })
    .asPartial()
    .asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionReAssignToPost
 * `POST: /supplierinvoices/{id}?action=reAssign-to`
 * reAssign-to Action
 */
export const supplierinvoicesIdActionReAssignToPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionReAssignToPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=reAssign-to`)
  .body((args) => args.details)
  .build();

// Operation: supplierinvoicesIdActionRejectPut

const supplierinvoicesIdActionRejectPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionRejectPut
 * `PUT: /supplierinvoices/{id}?action=reject`
 * reject Action
 */
export const supplierinvoicesIdActionRejectPut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionRejectPutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices/${args.id}?action=reject`)
  .build();

// Operation: supplierinvoicesIdActionReAssignPost

const supplierinvoicesIdActionReAssignPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionReAssignPost
 * `POST: /supplierinvoices/{id}?action=reAssign`
 * reAssign Transition
 */
export const supplierinvoicesIdActionReAssignPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionReAssignPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=reAssign`)
  .build();

// Operation: supplierinvoicesIdActionApprovePost

const supplierinvoicesIdActionApprovePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionApprovePost
 * `POST: /supplierinvoices/{id}?action=approve`
 * approve Transition
 */
export const supplierinvoicesIdActionApprovePost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionApprovePostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=approve`)
  .build();

// Operation: supplierinvoicesIdActionRejectInvoicePost

const supplierinvoicesIdActionRejectInvoicePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionRejectInvoicePost
 * `POST: /supplierinvoices/{id}?action=rejectInvoice`
 * rejectInvoice Transition
 */
export const supplierinvoicesIdActionRejectInvoicePost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionRejectInvoicePostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=rejectInvoice`)
  .build();

// Operation: supplierinvoicesIdActionJournalPost

const supplierinvoicesIdActionJournalPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionJournalPost
 * `POST: /supplierinvoices/{id}?action=journal`
 * journal Transition
 */
export const supplierinvoicesIdActionJournalPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionJournalPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=journal`)
  .build();

// Operation: supplierinvoicesIdActionFinishPost

const supplierinvoicesIdActionFinishPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionFinishPost
 * `POST: /supplierinvoices/{id}?action=finish`
 * finish Transition
 */
export const supplierinvoicesIdActionFinishPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionFinishPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=finish`)
  .build();

// Operation: supplierinvoicesIdActionRevertFinishPost

const supplierinvoicesIdActionRevertFinishPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionRevertFinishPost
 * `POST: /supplierinvoices/{id}?action=revertFinish`
 * revertFinish Transition
 */
export const supplierinvoicesIdActionRevertFinishPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionRevertFinishPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=revertFinish`)
  .build();

// Operation: supplierinvoicesIdActionSendForPaymentPost

const supplierinvoicesIdActionSendForPaymentPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionSendForPaymentPost
 * `POST: /supplierinvoices/{id}?action=sendForPayment`
 * sendForPayment Transition
 */
export const supplierinvoicesIdActionSendForPaymentPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionSendForPaymentPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=sendForPayment`)
  .build();

// Operation: supplierinvoicesIdActionPayPost

const supplierinvoicesIdActionPayPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionPayPost
 * `POST: /supplierinvoices/{id}?action=pay`
 * pay Transition
 */
export const supplierinvoicesIdActionPayPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionPayPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=pay`)
  .build();

// Operation: supplierinvoicesActionSendForPaymentPut

const supplierinvoicesActionSendForPaymentPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

const supplierinvoicesActionSendForPaymentPutResponseBodyRt = rt.Dictionary(
  rt.Unknown,
);

/**
 * operation ID: supplierinvoicesActionSendForPaymentPut
 * `PUT: /supplierinvoices?action=sendForPayment`
 * sendForPayment Action
 */
export const supplierinvoicesActionSendForPaymentPut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesActionSendForPaymentPutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices?action=sendForPayment`)
  .parseJson(withRuntype(supplierinvoicesActionSendForPaymentPutResponseBodyRt))
  .build();

// Operation: supplierinvoicesIdActionSendForPaymentWithPaymentDataPost

const supplierinvoicesIdActionSendForPaymentWithPaymentDataPostArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt
      .Record({ id: rt.Number, invoicePaymentData: invoicePaymentDataRt })
      .asPartial()
      .asReadonly(),
  );

const supplierinvoicesIdActionSendForPaymentWithPaymentDataPostResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * supplierinvoicesIdActionSendForPaymentWithPaymentDataPost
 * `POST:
 * /supplierinvoices/{id}?action=sendForPaymentWithPaymentData`
 * sendForPaymentWithPaymentData Action
 */
export const supplierinvoicesIdActionSendForPaymentWithPaymentDataPost =
  buildCall() //
    .args<
      rt.Static<
        typeof supplierinvoicesIdActionSendForPaymentWithPaymentDataPostArgsRt
      >
    >()
    .method('post')
    .path(
      (args) =>
        `/supplierinvoices/${args.id}?action=sendForPaymentWithPaymentData`,
    )
    .body((args) => args.invoicePaymentData)
    .parseJson(
      withRuntype(
        supplierinvoicesIdActionSendForPaymentWithPaymentDataPostResponseBodyRt,
      ),
    )
    .build();

// Operation: supplierinvoicesActionPayPut

const supplierinvoicesActionPayPutArgsRt = rt
  .Record({ id: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: supplierinvoicesActionPayPut
 * `PUT: /supplierinvoices?action=pay`
 * pay Action
 */
export const supplierinvoicesActionPayPut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesActionPayPutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices?action=pay`)
  .build();

// Operation: supplierinvoicesIdActionRejectAssignmentPost

const supplierinvoicesIdActionRejectAssignmentPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionRejectAssignmentPost
 * `POST: /supplierinvoices/{id}?action=rejectAssignment`
 * rejectAssignment Transition
 */
export const supplierinvoicesIdActionRejectAssignmentPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionRejectAssignmentPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=rejectAssignment`)
  .build();

// Operation: supplierinvoicesIdActionRestorePost

const supplierinvoicesIdActionRestorePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionRestorePost
 * `POST: /supplierinvoices/{id}?action=restore`
 * restore Transition
 */
export const supplierinvoicesIdActionRestorePost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionRestorePostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=restore`)
  .build();

// Operation: supplierinvoicesIdActionCancelApprovementPost

const supplierinvoicesIdActionCancelApprovementPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: supplierinvoicesIdActionCancelApprovementPost
 * `POST: /supplierinvoices/{id}?action=cancelApprovement`
 * cancelApprovement Transition
 */
export const supplierinvoicesIdActionCancelApprovementPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdActionCancelApprovementPostArgsRt>>()
  .method('post')
  .path((args) => `/supplierinvoices/${args.id}?action=cancelApprovement`)
  .build();

// Operation: supplierinvoicesActionGetSupplierInvoiceSummaryGet

const supplierinvoicesActionGetSupplierInvoiceSummaryGetArgsRt = rt
  .Record({ odataFilter: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * supplierinvoicesActionGetSupplierInvoiceSummaryGet
 * `GET: /supplierinvoices?action=get-supplier-invoice-summary`
 * get-supplier-invoice-summary Action
 */
export const supplierinvoicesActionGetSupplierInvoiceSummaryGet = buildCall() //
  .args<
    rt.Static<typeof supplierinvoicesActionGetSupplierInvoiceSummaryGetArgsRt>
  >()
  .method('get')
  .path((args) => `/supplierinvoices?action=get-supplier-invoice-summary`)
  .parseJson(withRuntype(invoiceSummaryRt))
  .build();

// Operation: supplierinvoicesActionGetSelfemployedPaymentsGet

const supplierinvoicesActionGetSelfemployedPaymentsGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const supplierinvoicesActionGetSelfemployedPaymentsGetResponseBodyRt =
  rt.Array(selfEmployedItemRt);

/**
 * operation ID:
 * supplierinvoicesActionGetSelfemployedPaymentsGet
 * `GET: /supplierinvoices?action=get-selfemployed-payments`
 * get-selfemployed-payments Action
 */
export const supplierinvoicesActionGetSelfemployedPaymentsGet = buildCall() //
  .args<
    rt.Static<typeof supplierinvoicesActionGetSelfemployedPaymentsGetArgsRt>
  >()
  .method('get')
  .path((args) => `/supplierinvoices?action=get-selfemployed-payments`)
  .parseJson(
    withRuntype(supplierinvoicesActionGetSelfemployedPaymentsGetResponseBodyRt),
  )
  .build();

// Operation: supplierinvoicesActionGetSupplierinvoicesDetailsGet

const supplierinvoicesActionGetSupplierinvoicesDetailsGetArgsRt = rt
  .Record({
    id: rt.Number,
    supplierID: rt.Number,
    fromDate: rt.String,
    toDate: rt.String,
  })
  .asPartial()
  .asReadonly();

const supplierinvoicesActionGetSupplierinvoicesDetailsGetResponseBodyRt =
  rt.Array(supplierInvoiceDetailRt);

/**
 * operation ID:
 * supplierinvoicesActionGetSupplierinvoicesDetailsGet
 * `GET: /supplierinvoices?action=get-supplierinvoices-details`
 * get-supplierinvoices-details Action
 */
export const supplierinvoicesActionGetSupplierinvoicesDetailsGet = buildCall() //
  .args<
    rt.Static<typeof supplierinvoicesActionGetSupplierinvoicesDetailsGetArgsRt>
  >()
  .method('get')
  .path((args) => `/supplierinvoices?action=get-supplierinvoices-details`)
  .parseJson(
    withRuntype(
      supplierinvoicesActionGetSupplierinvoicesDetailsGetResponseBodyRt,
    ),
  )
  .build();

// Operation: supplierinvoicesIdGet

const supplierinvoicesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: supplierinvoicesIdGet
 * `GET: /supplierinvoices/{id}`
 * Get SupplierInvoice
 */
export const supplierinvoicesIdGet = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/supplierinvoices/${args.id}`)
  .parseJson(withRuntype(supplierInvoiceRt))
  .build();

// Operation: supplierinvoicesIdPut

const supplierinvoicesIdPutArgsRt = rt
  .Record({ id: rt.Number, SupplierInvoice: supplierInvoiceRt })
  .asReadonly();

/**
 * operation ID: supplierinvoicesIdPut
 * `PUT: /supplierinvoices/{id}`
 * Update SupplierInvoice
 */
export const supplierinvoicesIdPut = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/supplierinvoices/${args.id}`)
  .body((args) => args.SupplierInvoice)
  .parseJson(withRuntype(supplierInvoiceRt))
  .build();

// Operation: supplierinvoicesIdDelete

const supplierinvoicesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: supplierinvoicesIdDelete
 * `DELETE: /supplierinvoices/{id}`
 * Delete SupplierInvoice
 */
export const supplierinvoicesIdDelete = buildCall() //
  .args<rt.Static<typeof supplierinvoicesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/supplierinvoices/${args.id}`)
  .parseJson(withRuntype(supplierInvoiceRt))
  .build();

// Operation: supplierinvoicesGet

const supplierinvoicesGetResponseBodyRt = rt.Array(supplierInvoiceRt);

/**
 * operation ID: supplierinvoicesGet
 * `GET: /supplierinvoices`
 * Query SupplierInvoice
 */
export const supplierinvoicesGet = buildCall() //
  .method('get')
  .path('/supplierinvoices')
  .parseJson(withRuntype(supplierinvoicesGetResponseBodyRt))
  .build();

// Operation: supplierinvoicesPost

const supplierinvoicesPostArgsRt = rt
  .Record({ SupplierInvoice: supplierInvoiceRt })
  .asReadonly();

/**
 * operation ID: supplierinvoicesPost
 * `POST: /supplierinvoices`
 * Create SupplierInvoice
 */
export const supplierinvoicesPost = buildCall() //
  .args<rt.Static<typeof supplierinvoicesPostArgsRt>>()
  .method('post')
  .path('/supplierinvoices')
  .body((args) => args.SupplierInvoice)
  .build();

// Operation: vatcodegroupsIdGet

const vatcodegroupsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatcodegroupsIdGet
 * `GET: /vatcodegroups/{id}`
 * Get VatCodeGroup
 */
export const vatcodegroupsIdGet = buildCall() //
  .args<rt.Static<typeof vatcodegroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatcodegroups/${args.id}`)
  .parseJson(withRuntype(vatCodeGroupRt))
  .build();

// Operation: vatcodegroupsIdPut

const vatcodegroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatCodeGroup: vatCodeGroupRt })
  .asReadonly();

/**
 * operation ID: vatcodegroupsIdPut
 * `PUT: /vatcodegroups/{id}`
 * Update VatCodeGroup
 */
export const vatcodegroupsIdPut = buildCall() //
  .args<rt.Static<typeof vatcodegroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatcodegroups/${args.id}`)
  .body((args) => args.VatCodeGroup)
  .parseJson(withRuntype(vatCodeGroupRt))
  .build();

// Operation: vatcodegroupsIdDelete

const vatcodegroupsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatcodegroupsIdDelete
 * `DELETE: /vatcodegroups/{id}`
 * Delete VatCodeGroup
 */
export const vatcodegroupsIdDelete = buildCall() //
  .args<rt.Static<typeof vatcodegroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatcodegroups/${args.id}`)
  .parseJson(withRuntype(vatCodeGroupRt))
  .build();

// Operation: vatcodegroupsGet

const vatcodegroupsGetResponseBodyRt = rt.Array(vatCodeGroupRt);

/**
 * operation ID: vatcodegroupsGet
 * `GET: /vatcodegroups`
 * Query VatCodeGroup
 */
export const vatcodegroupsGet = buildCall() //
  .method('get')
  .path('/vatcodegroups')
  .parseJson(withRuntype(vatcodegroupsGetResponseBodyRt))
  .build();

// Operation: vatcodegroupsPost

const vatcodegroupsPostArgsRt = rt
  .Record({ VatCodeGroup: vatCodeGroupRt })
  .asReadonly();

/**
 * operation ID: vatcodegroupsPost
 * `POST: /vatcodegroups`
 * Create VatCodeGroup
 */
export const vatcodegroupsPost = buildCall() //
  .args<rt.Static<typeof vatcodegroupsPostArgsRt>>()
  .method('post')
  .path('/vatcodegroups')
  .body((args) => args.VatCodeGroup)
  .build();

// Operation: vatdeductionsIdGet

const vatdeductionsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatdeductionsIdGet
 * `GET: /vatdeductions/{id}`
 * Get VatDeduction
 */
export const vatdeductionsIdGet = buildCall() //
  .args<rt.Static<typeof vatdeductionsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatdeductions/${args.id}`)
  .parseJson(withRuntype(vatDeductionRt))
  .build();

// Operation: vatdeductionsIdPut

const vatdeductionsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatDeduction: vatDeductionRt })
  .asReadonly();

/**
 * operation ID: vatdeductionsIdPut
 * `PUT: /vatdeductions/{id}`
 * Update VatDeduction
 */
export const vatdeductionsIdPut = buildCall() //
  .args<rt.Static<typeof vatdeductionsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatdeductions/${args.id}`)
  .body((args) => args.VatDeduction)
  .parseJson(withRuntype(vatDeductionRt))
  .build();

// Operation: vatdeductionsIdDelete

const vatdeductionsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatdeductionsIdDelete
 * `DELETE: /vatdeductions/{id}`
 * Delete VatDeduction
 */
export const vatdeductionsIdDelete = buildCall() //
  .args<rt.Static<typeof vatdeductionsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatdeductions/${args.id}`)
  .parseJson(withRuntype(vatDeductionRt))
  .build();

// Operation: vatdeductionsGet

const vatdeductionsGetResponseBodyRt = rt.Array(vatDeductionRt);

/**
 * operation ID: vatdeductionsGet
 * `GET: /vatdeductions`
 * Query VatDeduction
 */
export const vatdeductionsGet = buildCall() //
  .method('get')
  .path('/vatdeductions')
  .parseJson(withRuntype(vatdeductionsGetResponseBodyRt))
  .build();

// Operation: vatdeductionsPost

const vatdeductionsPostArgsRt = rt
  .Record({ VatDeduction: vatDeductionRt })
  .asReadonly();

/**
 * operation ID: vatdeductionsPost
 * `POST: /vatdeductions`
 * Create VatDeduction
 */
export const vatdeductionsPost = buildCall() //
  .args<rt.Static<typeof vatdeductionsPostArgsRt>>()
  .method('post')
  .path('/vatdeductions')
  .body((args) => args.VatDeduction)
  .build();

// Operation: vatdeductiongroupsIdGet

const vatdeductiongroupsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatdeductiongroupsIdGet
 * `GET: /vatdeductiongroups/{id}`
 * Get VatDeductionGroup
 */
export const vatdeductiongroupsIdGet = buildCall() //
  .args<rt.Static<typeof vatdeductiongroupsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatdeductiongroups/${args.id}`)
  .parseJson(withRuntype(vatDeductionGroupRt))
  .build();

// Operation: vatdeductiongroupsIdPut

const vatdeductiongroupsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatDeductionGroup: vatDeductionGroupRt })
  .asReadonly();

/**
 * operation ID: vatdeductiongroupsIdPut
 * `PUT: /vatdeductiongroups/{id}`
 * Update VatDeductionGroup
 */
export const vatdeductiongroupsIdPut = buildCall() //
  .args<rt.Static<typeof vatdeductiongroupsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatdeductiongroups/${args.id}`)
  .body((args) => args.VatDeductionGroup)
  .parseJson(withRuntype(vatDeductionGroupRt))
  .build();

// Operation: vatdeductiongroupsIdDelete

const vatdeductiongroupsIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vatdeductiongroupsIdDelete
 * `DELETE: /vatdeductiongroups/{id}`
 * Delete VatDeductionGroup
 */
export const vatdeductiongroupsIdDelete = buildCall() //
  .args<rt.Static<typeof vatdeductiongroupsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatdeductiongroups/${args.id}`)
  .parseJson(withRuntype(vatDeductionGroupRt))
  .build();

// Operation: vatdeductiongroupsGet

const vatdeductiongroupsGetResponseBodyRt = rt.Array(vatDeductionGroupRt);

/**
 * operation ID: vatdeductiongroupsGet
 * `GET: /vatdeductiongroups`
 * Query VatDeductionGroup
 */
export const vatdeductiongroupsGet = buildCall() //
  .method('get')
  .path('/vatdeductiongroups')
  .parseJson(withRuntype(vatdeductiongroupsGetResponseBodyRt))
  .build();

// Operation: vatdeductiongroupsPost

const vatdeductiongroupsPostArgsRt = rt
  .Record({ VatDeductionGroup: vatDeductionGroupRt })
  .asReadonly();

/**
 * operation ID: vatdeductiongroupsPost
 * `POST: /vatdeductiongroups`
 * Create VatDeductionGroup
 */
export const vatdeductiongroupsPost = buildCall() //
  .args<rt.Static<typeof vatdeductiongroupsPostArgsRt>>()
  .method('post')
  .path('/vatdeductiongroups')
  .body((args) => args.VatDeductionGroup)
  .build();

// Operation: vatpostsActionGetVatpostsWithPercentageGet

const vatpostsActionGetVatpostsWithPercentageGetArgsRt = rt
  .Record({ date: rt.Unknown })
  .asPartial()
  .asReadonly();

const vatpostsActionGetVatpostsWithPercentageGetResponseBodyRt =
  rt.Array(vatPostRt);

/**
 * operation ID: vatpostsActionGetVatpostsWithPercentageGet
 * `GET: /vatposts?action=get-vatposts-with-percentage`
 * get-vatposts-with-percentage Action
 */
export const vatpostsActionGetVatpostsWithPercentageGet = buildCall() //
  .args<rt.Static<typeof vatpostsActionGetVatpostsWithPercentageGetArgsRt>>()
  .method('get')
  .path((args) => `/vatposts?action=get-vatposts-with-percentage`)
  .parseJson(
    withRuntype(vatpostsActionGetVatpostsWithPercentageGetResponseBodyRt),
  )
  .build();

// Operation: vatpostsIdGet

const vatpostsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatpostsIdGet
 * `GET: /vatposts/{id}`
 * Get VatPost
 */
export const vatpostsIdGet = buildCall() //
  .args<rt.Static<typeof vatpostsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatposts/${args.id}`)
  .parseJson(withRuntype(vatPostRt))
  .build();

// Operation: vatpostsIdPut

const vatpostsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatPost: vatPostRt })
  .asReadonly();

/**
 * operation ID: vatpostsIdPut
 * `PUT: /vatposts/{id}`
 * Update VatPost
 */
export const vatpostsIdPut = buildCall() //
  .args<rt.Static<typeof vatpostsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatposts/${args.id}`)
  .body((args) => args.VatPost)
  .parseJson(withRuntype(vatPostRt))
  .build();

// Operation: vatpostsIdDelete

const vatpostsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatpostsIdDelete
 * `DELETE: /vatposts/{id}`
 * Delete VatPost
 */
export const vatpostsIdDelete = buildCall() //
  .args<rt.Static<typeof vatpostsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatposts/${args.id}`)
  .parseJson(withRuntype(vatPostRt))
  .build();

// Operation: vatpostsGet

const vatpostsGetResponseBodyRt = rt.Array(vatPostRt);

/**
 * operation ID: vatpostsGet
 * `GET: /vatposts`
 * Query VatPost
 */
export const vatpostsGet = buildCall() //
  .method('get')
  .path('/vatposts')
  .parseJson(withRuntype(vatpostsGetResponseBodyRt))
  .build();

// Operation: vatpostsPost

const vatpostsPostArgsRt = rt.Record({ VatPost: vatPostRt }).asReadonly();

/**
 * operation ID: vatpostsPost
 * `POST: /vatposts`
 * Create VatPost
 */
export const vatpostsPost = buildCall() //
  .args<rt.Static<typeof vatpostsPostArgsRt>>()
  .method('post')
  .path('/vatposts')
  .body((args) => args.VatPost)
  .build();

// Operation: vatreportsIdActionControlVatreportGet

const vatreportsIdActionControlVatreportGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
);

const vatreportsIdActionControlVatreportGetResponseBodyRt =
  rt.Array(vatReportMessageRt);

/**
 * operation ID: vatreportsIdActionControlVatreportGet
 * `GET: /vatreports/{id}?action=control-vatreport`
 * control-vatreport Action
 */
export const vatreportsIdActionControlVatreportGet = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionControlVatreportGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreports/${args.id}?action=control-vatreport`)
  .parseJson(withRuntype(vatreportsIdActionControlVatreportGetResponseBodyRt))
  .build();

// Operation: vatreportsActionValidateVatreportsForFinancialyearGet

const vatreportsActionValidateVatreportsForFinancialyearGetArgsRt = rt
  .Record({ financialYear: rt.Number })
  .asPartial()
  .asReadonly();

const vatreportsActionValidateVatreportsForFinancialyearGetResponseBodyRt =
  rt.Array(validationMessageRt);

/**
 * operation ID:
 * vatreportsActionValidateVatreportsForFinancialyearGet
 * `GET:
 * /vatreports?action=validate-vatreports-for-financialyear`
 * validate-vatreports-for-financialyear Action
 */
export const vatreportsActionValidateVatreportsForFinancialyearGet = buildCall() //
  .args<
    rt.Static<
      typeof vatreportsActionValidateVatreportsForFinancialyearGetArgsRt
    >
  >()
  .method('get')
  .path((args) => `/vatreports?action=validate-vatreports-for-financialyear`)
  .parseJson(
    withRuntype(
      vatreportsActionValidateVatreportsForFinancialyearGetResponseBodyRt,
    ),
  )
  .build();

// Operation: vatreportsIdActionGetVatReportSummaryGet

const vatreportsIdActionGetVatReportSummaryGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
);

const vatreportsIdActionGetVatReportSummaryGetResponseBodyRt =
  rt.Array(vatReportSummaryRt);

/**
 * operation ID: vatreportsIdActionGetVatReportSummaryGet
 * `GET: /vatreports/{id}?action=get-vat-report-summary`
 * get-vat-report-summary Action
 */
export const vatreportsIdActionGetVatReportSummaryGet = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionGetVatReportSummaryGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreports/${args.id}?action=get-vat-report-summary`)
  .parseJson(
    withRuntype(vatreportsIdActionGetVatReportSummaryGetResponseBodyRt),
  )
  .build();

// Operation: vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGet

const vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
  );

const vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGetResponseBodyRt =
  rt.Array(vatReportSummaryRt);

/**
 * operation ID:
 * vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGet
 * `GET:
 * /vatreports/{id}?action=get-vat-report-summary-from-previous-periods`
 * get-vat-report-summary-from-previous-periods Action
 */
export const vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGet =
  buildCall() //
    .args<
      rt.Static<
        typeof vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/vatreports/${args.id}?action=get-vat-report-summary-from-previous-periods`,
    )
    .parseJson(
      withRuntype(
        vatreportsIdActionGetVatReportSummaryFromPreviousPeriodsGetResponseBodyRt,
      ),
    )
    .build();

// Operation: vatreportsIdActionGetVatReportSummaryPerPostGet

const vatreportsIdActionGetVatReportSummaryPerPostGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
);

const vatreportsIdActionGetVatReportSummaryPerPostGetResponseBodyRt = rt.Array(
  vatReportSummaryPerPostRt,
);

/**
 * operation ID:
 * vatreportsIdActionGetVatReportSummaryPerPostGet
 * `GET:
 * /vatreports/{id}?action=get-vat-report-summary-per-post`
 * get-vat-report-summary-per-post Action
 */
export const vatreportsIdActionGetVatReportSummaryPerPostGet = buildCall() //
  .args<
    rt.Static<typeof vatreportsIdActionGetVatReportSummaryPerPostGetArgsRt>
  >()
  .method('get')
  .path(
    (args) => `/vatreports/${args.id}?action=get-vat-report-summary-per-post`,
  )
  .parseJson(
    withRuntype(vatreportsIdActionGetVatReportSummaryPerPostGetResponseBodyRt),
  )
  .build();

// Operation: vatreportsIdActionGetVatReportSummaryPerPostPerAccountGet

const vatreportsIdActionGetVatReportSummaryPerPostPerAccountGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
  );

const vatreportsIdActionGetVatReportSummaryPerPostPerAccountGetResponseBodyRt =
  rt.Array(vatReportSummaryPerPostPerAccountRt);

/**
 * operation ID:
 * vatreportsIdActionGetVatReportSummaryPerPostPerAccountGet
 * `GET:
 * /vatreports/{id}?action=get-vat-report-summary-per-post-per-account`
 * get-vat-report-summary-per-post-per-account Action
 */
export const vatreportsIdActionGetVatReportSummaryPerPostPerAccountGet =
  buildCall() //
    .args<
      rt.Static<
        typeof vatreportsIdActionGetVatReportSummaryPerPostPerAccountGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/vatreports/${args.id}?action=get-vat-report-summary-per-post-per-account`,
    )
    .parseJson(
      withRuntype(
        vatreportsIdActionGetVatReportSummaryPerPostPerAccountGetResponseBodyRt,
      ),
    )
    .build();

// Operation: vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGet

const vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
  );

const vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGetResponseBodyRt =
  rt.Array(vatReportSummaryPerPostPerAccountRt);

/**
 * operation ID:
 * vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGet
 * `GET:
 * /vatreports/{id}?action=get-vat-report-summary-per-post-per-account-details`
 * get-vat-report-summary-per-post-per-account-details Action
 */
export const vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGet =
  buildCall() //
    .args<
      rt.Static<
        typeof vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/vatreports/${args.id}?action=get-vat-report-summary-per-post-per-account-details`,
    )
    .parseJson(
      withRuntype(
        vatreportsIdActionGetVatReportSummaryPerPostPerAccountDetailsGetResponseBodyRt,
      ),
    )
    .build();

// Operation: vatreportsActionGetNotReportedJournalentryDataGet

const vatreportsActionGetNotReportedJournalentryDataGetArgsRt = rt
  .Record({ periodID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * vatreportsActionGetNotReportedJournalentryDataGet
 * `GET: /vatreports?action=get-not-reported-journalentry-data`
 * get-not-reported-journalentry-data Action
 */
export const vatreportsActionGetNotReportedJournalentryDataGet = buildCall() //
  .args<
    rt.Static<typeof vatreportsActionGetNotReportedJournalentryDataGetArgsRt>
  >()
  .method('get')
  .path((args) => `/vatreports?action=get-not-reported-journalentry-data`)
  .parseJson(withRuntype(vatReportNotReportedJournalEntryDataRt))
  .build();

// Operation: vatreportsIdActionExecutePost

const vatreportsIdActionExecutePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionExecutePost
 * `POST: /vatreports/{id}?action=execute`
 * execute Action
 */
export const vatreportsIdActionExecutePost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionExecutePostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=execute`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdActionUndoExecutePost

const vatreportsIdActionUndoExecutePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ vatReportId: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionUndoExecutePost
 * `POST: /vatreports/{id}?action=undo-execute`
 * undo-execute Action
 */
export const vatreportsIdActionUndoExecutePost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionUndoExecutePostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=undo-execute`)
  .build();

// Operation: vatreportsIdActionUndoExecutePeriodPost

const vatreportsIdActionUndoExecutePeriodPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ periodID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionUndoExecutePeriodPost
 * `POST: /vatreports/{id}?action=undo-execute-period`
 * undo-execute-period Action
 */
export const vatreportsIdActionUndoExecutePeriodPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionUndoExecutePeriodPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=undo-execute-period`)
  .build();

// Operation: vatreportsActionCreateAdditionalVatreportPost

const vatreportsActionCreateAdditionalVatreportPostArgsRt = rt
  .Record({ periodID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: vatreportsActionCreateAdditionalVatreportPost
 * `POST: /vatreports?action=create-additional-vatreport`
 * create-additional-vatreport Action
 */
export const vatreportsActionCreateAdditionalVatreportPost = buildCall() //
  .args<rt.Static<typeof vatreportsActionCreateAdditionalVatreportPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports?action=create-additional-vatreport`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsActionCreateAdjustedVatreportPost

const vatreportsActionCreateAdjustedVatreportPostArgsRt = rt
  .Record({ periodID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: vatreportsActionCreateAdjustedVatreportPost
 * `POST: /vatreports?action=create-adjusted-vatreport`
 * create-adjusted-vatreport Action
 */
export const vatreportsActionCreateAdjustedVatreportPost = buildCall() //
  .args<rt.Static<typeof vatreportsActionCreateAdjustedVatreportPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports?action=create-adjusted-vatreport`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsActionGetSigningTextAltinnPost

const vatreportsActionGetSigningTextAltinnPostArgsRt = rt
  .Record({ vatReportID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: vatreportsActionGetSigningTextAltinnPost
 * `POST: /vatreports?action=get-signing-text-altinn`
 * get-signing-text-altinn Action
 */
export const vatreportsActionGetSigningTextAltinnPost = buildCall() //
  .args<rt.Static<typeof vatreportsActionGetSigningTextAltinnPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports?action=get-signing-text-altinn`)
  .parseJson(withRuntype(altinnSigningTextResponseRt))
  .build();

// Operation: vatreportsActionSignVatreportAltinnPost

const vatreportsActionSignVatreportAltinnPostArgsRt = rt
  .Record({ vatReportID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: vatreportsActionSignVatreportAltinnPost
 * `POST: /vatreports?action=sign-vatreport-altinn`
 * sign-vatreport-altinn Action
 */
export const vatreportsActionSignVatreportAltinnPost = buildCall() //
  .args<rt.Static<typeof vatreportsActionSignVatreportAltinnPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports?action=sign-vatreport-altinn`)
  .parseJson(withRuntype(altinnSigningRt))
  .build();

// Operation: vatreportsActionReadAndUpdateAltinnVatreportDataPost

const vatreportsActionReadAndUpdateAltinnVatreportDataPostArgsRt = rt
  .Record({ vatReportID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * vatreportsActionReadAndUpdateAltinnVatreportDataPost
 * `POST:
 * /vatreports?action=read-and-update-altinn-vatreport-data`
 * read-and-update-altinn-vatreport-data Action
 */
export const vatreportsActionReadAndUpdateAltinnVatreportDataPost = buildCall() //
  .args<
    rt.Static<typeof vatreportsActionReadAndUpdateAltinnVatreportDataPostArgsRt>
  >()
  .method('post')
  .path((args) => `/vatreports?action=read-and-update-altinn-vatreport-data`)
  .parseJson(withRuntype(altinnGetVatReportDataFromAltinnResultRt))
  .build();

// Operation: vatreportsIdActionPayVatPost

const vatreportsIdActionPayVatPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ vatReportID: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionPayVatPost
 * `POST: /vatreports/{id}?action=pay-vat`
 * pay-vat Action
 */
export const vatreportsIdActionPayVatPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionPayVatPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=pay-vat`)
  .build();

// Operation: vatreportsActionCurrentGet

/**
 * operation ID: vatreportsActionCurrentGet
 * `GET: /vatreports?action=current`
 * current Action
 */
export const vatreportsActionCurrentGet = buildCall() //
  .method('get')
  .path('/vatreports?action=current')
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdActionNextGet

const vatreportsIdActionNextGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodid: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionNextGet
 * `GET: /vatreports/{id}?action=next`
 * next Action
 */
export const vatreportsIdActionNextGet = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionNextGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreports/${args.id}?action=next`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdActionPreviousGet

const vatreportsIdActionPreviousGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, periodid: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionPreviousGet
 * `GET: /vatreports/{id}?action=previous`
 * previous Action
 */
export const vatreportsIdActionPreviousGet = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionPreviousGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreports/${args.id}?action=previous`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdActionReexecutePost

const vatreportsIdActionReexecutePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionReexecutePost
 * `POST: /vatreports/{id}?action=reexecute`
 * reexecute Transition
 */
export const vatreportsIdActionReexecutePost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionReexecutePostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=reexecute`)
  .build();

// Operation: vatreportsIdActionSubmitPost

const vatreportsIdActionSubmitPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionSubmitPost
 * `POST: /vatreports/{id}?action=submit`
 * submit Transition
 */
export const vatreportsIdActionSubmitPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionSubmitPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=submit`)
  .build();

// Operation: vatreportsIdActionApproveManuallyPost

const vatreportsIdActionApproveManuallyPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionApproveManuallyPost
 * `POST: /vatreports/{id}?action=approveManually`
 * approveManually Transition
 */
export const vatreportsIdActionApproveManuallyPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionApproveManuallyPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=approveManually`)
  .build();

// Operation: vatreportsIdActionSetToApprovedPost

const vatreportsIdActionSetToApprovedPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionSetToApprovedPost
 * `POST: /vatreports/{id}?action=setToApproved`
 * setToApproved Transition
 */
export const vatreportsIdActionSetToApprovedPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionSetToApprovedPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=setToApproved`)
  .build();

// Operation: vatreportsIdActionRejectPost

const vatreportsIdActionRejectPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionRejectPost
 * `POST: /vatreports/{id}?action=reject`
 * reject Transition
 */
export const vatreportsIdActionRejectPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionRejectPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=reject`)
  .build();

// Operation: vatreportsIdActionApprovePost

const vatreportsIdActionApprovePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionApprovePost
 * `POST: /vatreports/{id}?action=approve`
 * approve Transition
 */
export const vatreportsIdActionApprovePost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionApprovePostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=approve`)
  .build();

// Operation: vatreportsIdActionAdjustPost

const vatreportsIdActionAdjustPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: vatreportsIdActionAdjustPost
 * `POST: /vatreports/{id}?action=adjust`
 * adjust Transition
 */
export const vatreportsIdActionAdjustPost = buildCall() //
  .args<rt.Static<typeof vatreportsIdActionAdjustPostArgsRt>>()
  .method('post')
  .path((args) => `/vatreports/${args.id}?action=adjust`)
  .build();

// Operation: vatreportsIdGet

const vatreportsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatreportsIdGet
 * `GET: /vatreports/{id}`
 * Get VatReport
 */
export const vatreportsIdGet = buildCall() //
  .args<rt.Static<typeof vatreportsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreports/${args.id}`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdPut

const vatreportsIdPutArgsRt = rt
  .Record({ id: rt.Number, VatReport: vatReportRt })
  .asReadonly();

/**
 * operation ID: vatreportsIdPut
 * `PUT: /vatreports/{id}`
 * Update VatReport
 */
export const vatreportsIdPut = buildCall() //
  .args<rt.Static<typeof vatreportsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatreports/${args.id}`)
  .body((args) => args.VatReport)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsIdDelete

const vatreportsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vatreportsIdDelete
 * `DELETE: /vatreports/{id}`
 * Delete VatReport
 */
export const vatreportsIdDelete = buildCall() //
  .args<rt.Static<typeof vatreportsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatreports/${args.id}`)
  .parseJson(withRuntype(vatReportRt))
  .build();

// Operation: vatreportsGet

const vatreportsGetResponseBodyRt = rt.Array(vatReportRt);

/**
 * operation ID: vatreportsGet
 * `GET: /vatreports`
 * Query VatReport
 */
export const vatreportsGet = buildCall() //
  .method('get')
  .path('/vatreports')
  .parseJson(withRuntype(vatreportsGetResponseBodyRt))
  .build();

// Operation: vatreportsPost

const vatreportsPostArgsRt = rt.Record({ VatReport: vatReportRt }).asReadonly();

/**
 * operation ID: vatreportsPost
 * `POST: /vatreports`
 * Create VatReport
 */
export const vatreportsPost = buildCall() //
  .args<rt.Static<typeof vatreportsPostArgsRt>>()
  .method('post')
  .path('/vatreports')
  .body((args) => args.VatReport)
  .build();

// Operation: vatreportreferencesIdGet

const vatreportreferencesIdGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vatreportreferencesIdGet
 * `GET: /vatreportreferences/{id}`
 * Get VatReportReference
 */
export const vatreportreferencesIdGet = buildCall() //
  .args<rt.Static<typeof vatreportreferencesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vatreportreferences/${args.id}`)
  .parseJson(withRuntype(vatReportReferenceRt))
  .build();

// Operation: vatreportreferencesIdPut

const vatreportreferencesIdPutArgsRt = rt
  .Record({ id: rt.Number, VatReportReference: vatReportReferenceRt })
  .asReadonly();

/**
 * operation ID: vatreportreferencesIdPut
 * `PUT: /vatreportreferences/{id}`
 * Update VatReportReference
 */
export const vatreportreferencesIdPut = buildCall() //
  .args<rt.Static<typeof vatreportreferencesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vatreportreferences/${args.id}`)
  .body((args) => args.VatReportReference)
  .parseJson(withRuntype(vatReportReferenceRt))
  .build();

// Operation: vatreportreferencesIdDelete

const vatreportreferencesIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vatreportreferencesIdDelete
 * `DELETE: /vatreportreferences/{id}`
 * Delete VatReportReference
 */
export const vatreportreferencesIdDelete = buildCall() //
  .args<rt.Static<typeof vatreportreferencesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vatreportreferences/${args.id}`)
  .parseJson(withRuntype(vatReportReferenceRt))
  .build();

// Operation: vatreportreferencesGet

const vatreportreferencesGetResponseBodyRt = rt.Array(vatReportReferenceRt);

/**
 * operation ID: vatreportreferencesGet
 * `GET: /vatreportreferences`
 * Query VatReportReference
 */
export const vatreportreferencesGet = buildCall() //
  .method('get')
  .path('/vatreportreferences')
  .parseJson(withRuntype(vatreportreferencesGetResponseBodyRt))
  .build();

// Operation: vatreportreferencesPost

const vatreportreferencesPostArgsRt = rt
  .Record({ VatReportReference: vatReportReferenceRt })
  .asReadonly();

/**
 * operation ID: vatreportreferencesPost
 * `POST: /vatreportreferences`
 * Create VatReportReference
 */
export const vatreportreferencesPost = buildCall() //
  .args<rt.Static<typeof vatreportreferencesPostArgsRt>>()
  .method('post')
  .path('/vatreportreferences')
  .body((args) => args.VatReportReference)
  .build();

// Operation: vattypesIdActionVatcodeGet

const vattypesIdActionVatcodeGetArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vattypesIdActionVatcodeGet
 * `GET: /vattypes/{id}?action=vatcode`
 * vatcode Action
 */
export const vattypesIdActionVatcodeGet = buildCall() //
  .args<rt.Static<typeof vattypesIdActionVatcodeGetArgsRt>>()
  .method('get')
  .path((args) => `/vattypes/${args.id}?action=vatcode`)
  .parseJson(withRuntype(vatTypeRt))
  .build();

// Operation: vattypesActionValidGet

const vattypesActionValidGetResponseBodyRt = rt.Array(vatTypeRt);

/**
 * operation ID: vattypesActionValidGet
 * `GET: /vattypes?action=valid`
 * valid Action
 */
export const vattypesActionValidGet = buildCall() //
  .method('get')
  .path('/vattypes?action=valid')
  .parseJson(withRuntype(vattypesActionValidGetResponseBodyRt))
  .build();

// Operation: vattypesActionValidWithHiddenGet

const vattypesActionValidWithHiddenGetResponseBodyRt = rt.Array(vatTypeRt);

/**
 * operation ID: vattypesActionValidWithHiddenGet
 * `GET: /vattypes?action=valid-with-hidden`
 * valid-with-hidden Action
 */
export const vattypesActionValidWithHiddenGet = buildCall() //
  .method('get')
  .path('/vattypes?action=valid-with-hidden')
  .parseJson(withRuntype(vattypesActionValidWithHiddenGetResponseBodyRt))
  .build();

// Operation: vattypesIdActionLockPut

const vattypesIdActionLockPutArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vattypesIdActionLockPut
 * `PUT: /vattypes/{id}?action=lock`
 * lock Action
 */
export const vattypesIdActionLockPut = buildCall() //
  .args<rt.Static<typeof vattypesIdActionLockPutArgsRt>>()
  .method('put')
  .path((args) => `/vattypes/${args.id}?action=lock`)
  .build();

// Operation: vattypesIdActionUnlockPut

const vattypesIdActionUnlockPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vattypesIdActionUnlockPut
 * `PUT: /vattypes/{id}?action=unlock`
 * unlock Action
 */
export const vattypesIdActionUnlockPut = buildCall() //
  .args<rt.Static<typeof vattypesIdActionUnlockPutArgsRt>>()
  .method('put')
  .path((args) => `/vattypes/${args.id}?action=unlock`)
  .build();

// Operation: vattypesIdActionVisiblePut

const vattypesIdActionVisiblePutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vattypesIdActionVisiblePut
 * `PUT: /vattypes/{id}?action=visible`
 * visible Action
 */
export const vattypesIdActionVisiblePut = buildCall() //
  .args<rt.Static<typeof vattypesIdActionVisiblePutArgsRt>>()
  .method('put')
  .path((args) => `/vattypes/${args.id}?action=visible`)
  .build();

// Operation: vattypesIdActionHiddenPut

const vattypesIdActionHiddenPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: vattypesIdActionHiddenPut
 * `PUT: /vattypes/{id}?action=hidden`
 * hidden Action
 */
export const vattypesIdActionHiddenPut = buildCall() //
  .args<rt.Static<typeof vattypesIdActionHiddenPutArgsRt>>()
  .method('put')
  .path((args) => `/vattypes/${args.id}?action=hidden`)
  .build();

// Operation: vattypesActionSynchronizePut

/**
 * operation ID: vattypesActionSynchronizePut
 * `PUT: /vattypes?action=synchronize`
 * synchronize Action
 */
export const vattypesActionSynchronizePut = buildCall() //
  .method('put')
  .path('/vattypes?action=synchronize')
  .build();

// Operation: vattypesIdGet

const vattypesIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vattypesIdGet
 * `GET: /vattypes/{id}`
 * Get VatType
 */
export const vattypesIdGet = buildCall() //
  .args<rt.Static<typeof vattypesIdGetArgsRt>>()
  .method('get')
  .path((args) => `/vattypes/${args.id}`)
  .parseJson(withRuntype(vatTypeRt))
  .build();

// Operation: vattypesIdPut

const vattypesIdPutArgsRt = rt
  .Record({ id: rt.Number, VatType: vatTypeRt })
  .asReadonly();

/**
 * operation ID: vattypesIdPut
 * `PUT: /vattypes/{id}`
 * Update VatType
 */
export const vattypesIdPut = buildCall() //
  .args<rt.Static<typeof vattypesIdPutArgsRt>>()
  .method('put')
  .path((args) => `/vattypes/${args.id}`)
  .body((args) => args.VatType)
  .parseJson(withRuntype(vatTypeRt))
  .build();

// Operation: vattypesIdDelete

const vattypesIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: vattypesIdDelete
 * `DELETE: /vattypes/{id}`
 * Delete VatType
 */
export const vattypesIdDelete = buildCall() //
  .args<rt.Static<typeof vattypesIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/vattypes/${args.id}`)
  .parseJson(withRuntype(vatTypeRt))
  .build();

// Operation: vattypesGet

const vattypesGetResponseBodyRt = rt.Array(vatTypeRt);

/**
 * operation ID: vattypesGet
 * `GET: /vattypes`
 * Query VatType
 */
export const vattypesGet = buildCall() //
  .method('get')
  .path('/vattypes')
  .parseJson(withRuntype(vattypesGetResponseBodyRt))
  .build();

// Operation: vattypesPost

const vattypesPostArgsRt = rt.Record({ VatType: vatTypeRt }).asReadonly();

/**
 * operation ID: vattypesPost
 * `POST: /vattypes`
 * Create VatType
 */
export const vattypesPost = buildCall() //
  .args<rt.Static<typeof vattypesPostArgsRt>>()
  .method('post')
  .path('/vattypes')
  .body((args) => args.VatType)
  .build();

// Operation: reconcileActionCreateReconcilePost

const reconcileActionCreateReconcilePostArgsRt = rt
  .Record({
    reconcileTypeID: rt.Number,
    accountYear: rt.Number,
    intervalNumber: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: reconcileActionCreateReconcilePost
 * `POST: /reconcile?action=create-reconcile`
 * create-reconcile Action
 */
export const reconcileActionCreateReconcilePost = buildCall() //
  .args<rt.Static<typeof reconcileActionCreateReconcilePostArgsRt>>()
  .method('post')
  .path((args) => `/reconcile?action=create-reconcile`)
  .parseJson(withRuntype(reconcileRt))
  .build();

// Operation: reconcileActionAddAccountsToReconcilePut

const reconcileActionAddAccountsToReconcilePutArgsRt = rt
  .Record({ reconcileID: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: reconcileActionAddAccountsToReconcilePut
 * `PUT: /reconcile?action=AddAccountsToReconcile`
 * AddAccountsToReconcile Action
 */
export const reconcileActionAddAccountsToReconcilePut = buildCall() //
  .args<rt.Static<typeof reconcileActionAddAccountsToReconcilePutArgsRt>>()
  .method('put')
  .path((args) => `/reconcile?action=AddAccountsToReconcile`)
  .parseJson(withRuntype(reconcileRt))
  .build();

// Operation: reconcileIdActionBeginReconcilePost

const reconcileIdActionBeginReconcilePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: reconcileIdActionBeginReconcilePost
 * `POST: /reconcile/{id}?action=BeginReconcile`
 * BeginReconcile Transition
 */
export const reconcileIdActionBeginReconcilePost = buildCall() //
  .args<rt.Static<typeof reconcileIdActionBeginReconcilePostArgsRt>>()
  .method('post')
  .path((args) => `/reconcile/${args.id}?action=BeginReconcile`)
  .build();

// Operation: reconcileIdActionCompleteReconcilePost

const reconcileIdActionCompleteReconcilePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: reconcileIdActionCompleteReconcilePost
 * `POST: /reconcile/{id}?action=CompleteReconcile`
 * CompleteReconcile Transition
 */
export const reconcileIdActionCompleteReconcilePost = buildCall() //
  .args<rt.Static<typeof reconcileIdActionCompleteReconcilePostArgsRt>>()
  .method('post')
  .path((args) => `/reconcile/${args.id}?action=CompleteReconcile`)
  .build();

// Operation: reconcileIdActionReopenReconcilePost

const reconcileIdActionReopenReconcilePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: reconcileIdActionReopenReconcilePost
 * `POST: /reconcile/{id}?action=ReopenReconcile`
 * ReopenReconcile Transition
 */
export const reconcileIdActionReopenReconcilePost = buildCall() //
  .args<rt.Static<typeof reconcileIdActionReopenReconcilePostArgsRt>>()
  .method('post')
  .path((args) => `/reconcile/${args.id}?action=ReopenReconcile`)
  .build();

// Operation: reconcileActionApproveReconcileAccountPut

const reconcileActionApproveReconcileAccountPutArgsRt = rt
  .Record({ reconcileAccount: rt.Number, comment: rt.String })
  .asPartial()
  .asReadonly();

/**
 * operation ID: reconcileActionApproveReconcileAccountPut
 * `PUT: /reconcile?action=ApproveReconcileAccount`
 * ApproveReconcileAccount Action
 */
export const reconcileActionApproveReconcileAccountPut = buildCall() //
  .args<rt.Static<typeof reconcileActionApproveReconcileAccountPutArgsRt>>()
  .method('put')
  .path((args) => `/reconcile?action=ApproveReconcileAccount`)
  .parseJson(withRuntype(reconcileAccountRt))
  .build();

// Operation: reconcileIdGet

const reconcileIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: reconcileIdGet
 * `GET: /reconcile/{id}`
 * Get Reconcile
 */
export const reconcileIdGet = buildCall() //
  .args<rt.Static<typeof reconcileIdGetArgsRt>>()
  .method('get')
  .path((args) => `/reconcile/${args.id}`)
  .parseJson(withRuntype(reconcileRt))
  .build();

// Operation: reconcileIdPut

const reconcileIdPutArgsRt = rt
  .Record({ id: rt.Number, Reconcile: reconcileRt })
  .asReadonly();

/**
 * operation ID: reconcileIdPut
 * `PUT: /reconcile/{id}`
 * Update Reconcile
 */
export const reconcileIdPut = buildCall() //
  .args<rt.Static<typeof reconcileIdPutArgsRt>>()
  .method('put')
  .path((args) => `/reconcile/${args.id}`)
  .body((args) => args.Reconcile)
  .parseJson(withRuntype(reconcileRt))
  .build();

// Operation: reconcileIdDelete

const reconcileIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: reconcileIdDelete
 * `DELETE: /reconcile/{id}`
 * Delete Reconcile
 */
export const reconcileIdDelete = buildCall() //
  .args<rt.Static<typeof reconcileIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/reconcile/${args.id}`)
  .parseJson(withRuntype(reconcileRt))
  .build();

// Operation: reconcileGet

const reconcileGetResponseBodyRt = rt.Array(reconcileRt);

/**
 * operation ID: reconcileGet
 * `GET: /reconcile`
 * Query Reconcile
 */
export const reconcileGet = buildCall() //
  .method('get')
  .path('/reconcile')
  .parseJson(withRuntype(reconcileGetResponseBodyRt))
  .build();

// Operation: reconcilePost

const reconcilePostArgsRt = rt.Record({ Reconcile: reconcileRt }).asReadonly();

/**
 * operation ID: reconcilePost
 * `POST: /reconcile`
 * Create Reconcile
 */
export const reconcilePost = buildCall() //
  .args<rt.Static<typeof reconcilePostArgsRt>>()
  .method('post')
  .path('/reconcile')
  .body((args) => args.Reconcile)
  .build();

// Operation: annualaccountsActionCreatePost

const annualaccountsActionCreatePostArgsRt = rt
  .Record({ annualSettlementId: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: annualaccountsActionCreatePost
 * `POST: /annualaccounts?action=create`
 * create Action
 */
export const annualaccountsActionCreatePost = buildCall() //
  .args<rt.Static<typeof annualaccountsActionCreatePostArgsRt>>()
  .method('post')
  .path((args) => `/annualaccounts?action=create`)
  .parseJson(withRuntype(annualAccountRt))
  .build();

// Operation: annualaccountsIdActionSendPut

const annualaccountsIdActionSendPutArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: annualaccountsIdActionSendPut
 * `PUT: /annualaccounts/{id}?action=send`
 * send Action
 */
export const annualaccountsIdActionSendPut = buildCall() //
  .args<rt.Static<typeof annualaccountsIdActionSendPutArgsRt>>()
  .method('put')
  .path((args) => `/annualaccounts/${args.id}?action=send`)
  .parseJson(withRuntype(altinnReceiptRt))
  .build();

// Operation: annualaccountsActionReportGet

const annualaccountsActionReportGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

/**
 * operation ID: annualaccountsActionReportGet
 * `GET: /annualaccounts?action=report`
 * report Action
 */
export const annualaccountsActionReportGet = buildCall() //
  .args<rt.Static<typeof annualaccountsActionReportGetArgsRt>>()
  .method('get')
  .path((args) => `/annualaccounts?action=report`)
  .parseJson(withRuntype(annualAccountReportRt))
  .build();

// Operation: annualaccountsIdActionGenerateReportPost

const annualaccountsIdActionGenerateReportPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number, force: rt.Boolean }).asPartial().asReadonly(),
);

const annualaccountsIdActionGenerateReportPostResponseBodyRt = rt.Boolean;

/**
 * operation ID: annualaccountsIdActionGenerateReportPost
 * `POST: /annualaccounts/{id}?action=generate-report`
 * generate-report Action
 */
export const annualaccountsIdActionGenerateReportPost = buildCall() //
  .args<rt.Static<typeof annualaccountsIdActionGenerateReportPostArgsRt>>()
  .method('post')
  .path((args) => `/annualaccounts/${args.id}?action=generate-report`)
  .parseJson(
    withRuntype(annualaccountsIdActionGenerateReportPostResponseBodyRt),
  )
  .build();

// Operation: annualaccountsIdActionReopenPost

const annualaccountsIdActionReopenPostArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: annualaccountsIdActionReopenPost
 * `POST: /annualaccounts/{id}?action=reopen`
 * reopen Action
 */
export const annualaccountsIdActionReopenPost = buildCall() //
  .args<rt.Static<typeof annualaccountsIdActionReopenPostArgsRt>>()
  .method('post')
  .path((args) => `/annualaccounts/${args.id}?action=reopen`)
  .parseJson(withRuntype(annualAccountRt))
  .build();

// Operation: annualaccountsActionGetSentstatusGet

const annualaccountsActionGetSentstatusGetArgsRt = rt
  .Record({ annualSettlementId: rt.Number })
  .asPartial()
  .asReadonly();

const annualaccountsActionGetSentstatusGetResponseBodyRt = rt.String;

/**
 * operation ID: annualaccountsActionGetSentstatusGet
 * `GET: /annualaccounts?action=get-sentstatus`
 * get-sentstatus Action
 */
export const annualaccountsActionGetSentstatusGet = buildCall() //
  .args<rt.Static<typeof annualaccountsActionGetSentstatusGetArgsRt>>()
  .method('get')
  .path((args) => `/annualaccounts?action=get-sentstatus`)
  .parseJson(withRuntype(annualaccountsActionGetSentstatusGetResponseBodyRt))
  .build();

// Operation: annualaccountsIdGet

const annualaccountsIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: annualaccountsIdGet
 * `GET: /annualaccounts/{id}`
 * Get AnnualAccount
 */
export const annualaccountsIdGet = buildCall() //
  .args<rt.Static<typeof annualaccountsIdGetArgsRt>>()
  .method('get')
  .path((args) => `/annualaccounts/${args.id}`)
  .parseJson(withRuntype(annualAccountRt))
  .build();

// Operation: annualaccountsIdPut

const annualaccountsIdPutArgsRt = rt
  .Record({ id: rt.Number, AnnualAccount: annualAccountRt })
  .asReadonly();

/**
 * operation ID: annualaccountsIdPut
 * `PUT: /annualaccounts/{id}`
 * Update AnnualAccount
 */
export const annualaccountsIdPut = buildCall() //
  .args<rt.Static<typeof annualaccountsIdPutArgsRt>>()
  .method('put')
  .path((args) => `/annualaccounts/${args.id}`)
  .body((args) => args.AnnualAccount)
  .parseJson(withRuntype(annualAccountRt))
  .build();

// Operation: annualaccountsIdDelete

const annualaccountsIdDeleteArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: annualaccountsIdDelete
 * `DELETE: /annualaccounts/{id}`
 * Delete AnnualAccount
 */
export const annualaccountsIdDelete = buildCall() //
  .args<rt.Static<typeof annualaccountsIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/annualaccounts/${args.id}`)
  .parseJson(withRuntype(annualAccountRt))
  .build();

// Operation: annualaccountsGet

const annualaccountsGetResponseBodyRt = rt.Array(annualAccountRt);

/**
 * operation ID: annualaccountsGet
 * `GET: /annualaccounts`
 * Query AnnualAccount
 */
export const annualaccountsGet = buildCall() //
  .method('get')
  .path('/annualaccounts')
  .parseJson(withRuntype(annualaccountsGetResponseBodyRt))
  .build();

// Operation: annualaccountsPost

const annualaccountsPostArgsRt = rt
  .Record({ AnnualAccount: annualAccountRt })
  .asReadonly();

/**
 * operation ID: annualaccountsPost
 * `POST: /annualaccounts`
 * Create AnnualAccount
 */
export const annualaccountsPost = buildCall() //
  .args<rt.Static<typeof annualaccountsPostArgsRt>>()
  .method('post')
  .path('/annualaccounts')
  .body((args) => args.AnnualAccount)
  .build();

// Operation: annualsettlementIdActionOneToStepTwoPost

const annualsettlementIdActionOneToStepTwoPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionOneToStepTwoPost
 * `POST: /annualsettlement/{id}?action=OneToStepTwo`
 * OneToStepTwo Transition
 */
export const annualsettlementIdActionOneToStepTwoPost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionOneToStepTwoPostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=OneToStepTwo`)
  .build();

// Operation: annualsettlementIdActionTwoToStepThreePost

const annualsettlementIdActionTwoToStepThreePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionTwoToStepThreePost
 * `POST: /annualsettlement/{id}?action=TwoToStepThree`
 * TwoToStepThree Transition
 */
export const annualsettlementIdActionTwoToStepThreePost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionTwoToStepThreePostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=TwoToStepThree`)
  .build();

// Operation: annualsettlementIdActionThreeToStepFourPost

const annualsettlementIdActionThreeToStepFourPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionThreeToStepFourPost
 * `POST: /annualsettlement/{id}?action=ThreeToStepFour`
 * ThreeToStepFour Transition
 */
export const annualsettlementIdActionThreeToStepFourPost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionThreeToStepFourPostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=ThreeToStepFour`)
  .build();

// Operation: annualsettlementIdActionFourToStepFivePost

const annualsettlementIdActionFourToStepFivePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionFourToStepFivePost
 * `POST: /annualsettlement/{id}?action=FourToStepFive`
 * FourToStepFive Transition
 */
export const annualsettlementIdActionFourToStepFivePost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionFourToStepFivePostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=FourToStepFive`)
  .build();

// Operation: annualsettlementIdActionFourToStepSixPost

const annualsettlementIdActionFourToStepSixPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionFourToStepSixPost
 * `POST: /annualsettlement/{id}?action=FourToStepSix`
 * FourToStepSix Transition
 */
export const annualsettlementIdActionFourToStepSixPost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionFourToStepSixPostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=FourToStepSix`)
  .build();

// Operation: annualsettlementIdActionFiveToStepSixPost

const annualsettlementIdActionFiveToStepSixPostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionFiveToStepSixPost
 * `POST: /annualsettlement/{id}?action=FiveToStepSix`
 * FiveToStepSix Transition
 */
export const annualsettlementIdActionFiveToStepSixPost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionFiveToStepSixPostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=FiveToStepSix`)
  .build();

// Operation: annualsettlementIdActionSixToStepFivePost

const annualsettlementIdActionSixToStepFivePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionSixToStepFivePost
 * `POST: /annualsettlement/{id}?action=SixToStepFive`
 * SixToStepFive Transition
 */
export const annualsettlementIdActionSixToStepFivePost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionSixToStepFivePostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=SixToStepFive`)
  .build();

// Operation: annualsettlementIdActionFiveToCompletePost

const annualsettlementIdActionFiveToCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionFiveToCompletePost
 * `POST: /annualsettlement/{id}?action=FiveToComplete`
 * FiveToComplete Transition
 */
export const annualsettlementIdActionFiveToCompletePost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionFiveToCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=FiveToComplete`)
  .build();

// Operation: annualsettlementIdActionSixToCompletePost

const annualsettlementIdActionSixToCompletePostArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionSixToCompletePost
 * `POST: /annualsettlement/{id}?action=SixToComplete`
 * SixToComplete Transition
 */
export const annualsettlementIdActionSixToCompletePost = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionSixToCompletePostArgsRt>>()
  .method('post')
  .path((args) => `/annualsettlement/${args.id}?action=SixToComplete`)
  .build();

// Operation: annualsettlementActionJournalElectronicCommunicationEnkPost

const annualsettlementActionJournalElectronicCommunicationEnkPostArgsRt = rt
  .Record({ body: journalEComDTORt })
  .asPartial()
  .asReadonly();

/**
 * operation ID:
 * annualsettlementActionJournalElectronicCommunicationEnkPost
 * `POST:
 * /annualsettlement?action=journal-electronic-communication-enk`
 * journal-electronic-communication-enk Action
 */
export const annualsettlementActionJournalElectronicCommunicationEnkPost =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementActionJournalElectronicCommunicationEnkPostArgsRt
      >
    >()
    .method('post')
    .path('/annualsettlement?action=journal-electronic-communication-enk')
    .body((args) => args.body)
    .parseJson(withRuntype(journalEntryRt))
    .build();

// Operation: annualsettlementActionGetAccountBalanceGet

const annualsettlementActionGetAccountBalanceGetArgsRt = rt
  .Record({
    fromAccountNumber: rt.Number,
    toAccountNumber: rt.Number,
    toFinancialyear: rt.Number,
  })
  .asPartial()
  .asReadonly();

/**
 * operation ID: annualsettlementActionGetAccountBalanceGet
 * `GET: /annualsettlement?action=get-account-balance`
 * get-account-balance Action
 */
export const annualsettlementActionGetAccountBalanceGet = buildCall() //
  .args<rt.Static<typeof annualsettlementActionGetAccountBalanceGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement?action=get-account-balance`)
  .build();

// Operation: annualsettlementIdActionGetAccountSumCalculativeDepreciationGet

const annualsettlementIdActionGetAccountSumCalculativeDepreciationGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

/**
 * operation ID:
 * annualsettlementIdActionGetAccountSumCalculativeDepreciationGet
 * `GET:
 * /annualsettlement/{id}?action=get-account-sum-calculative-depreciation`
 * get-account-sum-calculative-depreciation Action
 */
export const annualsettlementIdActionGetAccountSumCalculativeDepreciationGet =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementIdActionGetAccountSumCalculativeDepreciationGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/annualsettlement/${args.id}?action=get-account-sum-calculative-depreciation`,
    )
    .build();

// Operation: annualsettlementActionGetAccountMissingSaftOrAltinnLinkGet

const annualsettlementActionGetAccountMissingSaftOrAltinnLinkGetArgsRt = rt
  .Record({ toFinancialYear: rt.Number })
  .asPartial()
  .asReadonly();

const annualsettlementActionGetAccountMissingSaftOrAltinnLinkGetResponseBodyRt =
  rt.Number;

/**
 * operation ID:
 * annualsettlementActionGetAccountMissingSaftOrAltinnLinkGet
 * `GET:
 * /annualsettlement?action=get-account-missing-saft-or-altinn-link`
 * get-account-missing-saft-or-altinn-link Action
 */
export const annualsettlementActionGetAccountMissingSaftOrAltinnLinkGet =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementActionGetAccountMissingSaftOrAltinnLinkGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/annualsettlement?action=get-account-missing-saft-or-altinn-link`,
    )
    .parseJson(
      withRuntype(
        annualsettlementActionGetAccountMissingSaftOrAltinnLinkGetResponseBodyRt,
      ),
    )
    .build();

// Operation: annualsettlementIdActionGetAccountsNotLinkedGet

const annualsettlementIdActionGetAccountsNotLinkedGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetAccountsNotLinkedGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * annualsettlementIdActionGetAccountsNotLinkedGet
 * `GET: /annualsettlement/{id}?action=get-accounts-not-linked`
 * get-accounts-not-linked Action
 */
export const annualsettlementIdActionGetAccountsNotLinkedGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementIdActionGetAccountsNotLinkedGetArgsRt>
  >()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-accounts-not-linked`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetAccountsNotLinkedGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionResetAnnualsettlementPut

const annualsettlementIdActionResetAnnualsettlementPutArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID:
 * annualsettlementIdActionResetAnnualsettlementPut
 * `PUT: /annualsettlement/{id}?action=reset-annualsettlement`
 * reset-annualsettlement Action
 */
export const annualsettlementIdActionResetAnnualsettlementPut = buildCall() //
  .args<
    rt.Static<typeof annualsettlementIdActionResetAnnualsettlementPutArgsRt>
  >()
  .method('put')
  .path((args) => `/annualsettlement/${args.id}?action=reset-annualsettlement`)
  .build();

// Operation: annualsettlementIdActionCalculateResultGet

const annualsettlementIdActionCalculateResultGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

/**
 * operation ID: annualsettlementIdActionCalculateResultGet
 * `GET: /annualsettlement/{id}?action=calculate-result`
 * calculate-result Action
 */
export const annualsettlementIdActionCalculateResultGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionCalculateResultGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=calculate-result`)
  .build();

// Operation: annualsettlementIdActionPreviewAnnualsettlementJournalentryGet

const annualsettlementIdActionPreviewAnnualsettlementJournalentryGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

/**
 * operation ID:
 * annualsettlementIdActionPreviewAnnualsettlementJournalentryGet
 * `GET:
 * /annualsettlement/{id}?action=preview-annualsettlement-journalentry`
 * preview-annualsettlement-journalentry Action
 */
export const annualsettlementIdActionPreviewAnnualsettlementJournalentryGet =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementIdActionPreviewAnnualsettlementJournalentryGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/annualsettlement/${args.id}?action=preview-annualsettlement-journalentry`,
    )
    .parseJson(withRuntype(journalEntryRt))
    .build();

// Operation: annualsettlementIdActionGenerateAnnualsettlementJournalentryGet

const annualsettlementIdActionGenerateAnnualsettlementJournalentryGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

/**
 * operation ID:
 * annualsettlementIdActionGenerateAnnualsettlementJournalentryGet
 * `GET:
 * /annualsettlement/{id}?action=generate-annualsettlement-journalentry`
 * generate-annualsettlement-journalentry Action
 */
export const annualsettlementIdActionGenerateAnnualsettlementJournalentryGet =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementIdActionGenerateAnnualsettlementJournalentryGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/annualsettlement/${args.id}?action=generate-annualsettlement-journalentry`,
    )
    .parseJson(withRuntype(journalEntryRt))
    .build();

// Operation: annualsettlementIdActionGetTaxCalculationAndDisposalGet

const annualsettlementIdActionGetTaxCalculationAndDisposalGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

const annualsettlementIdActionGetTaxCalculationAndDisposalGetResponseBodyRt =
  rt.Array(annualSettlementDisposalDisplayItemRt);

/**
 * operation ID:
 * annualsettlementIdActionGetTaxCalculationAndDisposalGet
 * `GET:
 * /annualsettlement/{id}?action=get-tax-calculation-and-disposal`
 * get-tax-calculation-and-disposal Action
 */
export const annualsettlementIdActionGetTaxCalculationAndDisposalGet =
  buildCall() //
    .args<
      rt.Static<
        typeof annualsettlementIdActionGetTaxCalculationAndDisposalGetArgsRt
      >
    >()
    .method('get')
    .path(
      (args) =>
        `/annualsettlement/${args.id}?action=get-tax-calculation-and-disposal`,
    )
    .parseJson(
      withRuntype(
        annualsettlementIdActionGetTaxCalculationAndDisposalGetResponseBodyRt,
      ),
    )
    .build();

// Operation: annualsettlementIdActionGetAssetTaxbasedIbDetailsGet

const annualsettlementIdActionGetAssetTaxbasedIbDetailsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetAssetTaxbasedIbDetailsGetResponseBodyRt =
  rt.Array(assetTaxbasedIBRt);

/**
 * operation ID:
 * annualsettlementIdActionGetAssetTaxbasedIbDetailsGet
 * `GET:
 * /annualsettlement/{id}?action=get-asset-taxbased-IB-details`
 * get-asset-taxbased-IB-details Action
 */
export const annualsettlementIdActionGetAssetTaxbasedIbDetailsGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementIdActionGetAssetTaxbasedIbDetailsGetArgsRt>
  >()
  .method('get')
  .path(
    (args) =>
      `/annualsettlement/${args.id}?action=get-asset-taxbased-IB-details`,
  )
  .parseJson(
    withRuntype(
      annualsettlementIdActionGetAssetTaxbasedIbDetailsGetResponseBodyRt,
    ),
  )
  .build();

// Operation: annualsettlementIdActionGetAssetAndGroupsGet

const annualsettlementIdActionGetAssetAndGroupsGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetAssetAndGroupsGetResponseBodyRt =
  rt.Array(assetTaxbasedIBRt);

/**
 * operation ID: annualsettlementIdActionGetAssetAndGroupsGet
 * `GET: /annualsettlement/{id}?action=get-asset-and-groups`
 * get-asset-and-groups Action
 */
export const annualsettlementIdActionGetAssetAndGroupsGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetAssetAndGroupsGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-asset-and-groups`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetAssetAndGroupsGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementActionUpdateTaxbasedIbPut

const annualsettlementActionUpdateTaxbasedIbPutArgsRt = rt
  .Record({ atb: rt.Array(assetTaxbasedIBRt), calculate: rt.Boolean })
  .asPartial()
  .asReadonly();

const annualsettlementActionUpdateTaxbasedIbPutResponseBodyRt =
  rt.Array(assetTaxbasedIBRt);

/**
 * operation ID: annualsettlementActionUpdateTaxbasedIbPut
 * `PUT: /annualsettlement?action=update-taxbased-IB`
 * update-taxbased-IB Action
 */
export const annualsettlementActionUpdateTaxbasedIbPut = buildCall() //
  .args<rt.Static<typeof annualsettlementActionUpdateTaxbasedIbPutArgsRt>>()
  .method('put')
  .path((args) => `/annualsettlement?action=update-taxbased-IB`)
  .body((args) => args.atb)
  .parseJson(
    withRuntype(annualsettlementActionUpdateTaxbasedIbPutResponseBodyRt),
  )
  .build();

// Operation: annualsettlementActionGetEmptyTransportFieldRecordGet

const annualsettlementActionGetEmptyTransportFieldRecordGetResponseBodyRt =
  rt.Dictionary(rt.Unknown);

/**
 * operation ID:
 * annualsettlementActionGetEmptyTransportFieldRecordGet
 * `GET:
 * /annualsettlement?action=get-empty-transport-field-record`
 * get-empty-transport-field-record Action
 */
export const annualsettlementActionGetEmptyTransportFieldRecordGet = buildCall() //
  .method('get')
  .path('/annualsettlement?action=get-empty-transport-field-record')
  .parseJson(
    withRuntype(
      annualsettlementActionGetEmptyTransportFieldRecordGetResponseBodyRt,
    ),
  )
  .build();

// Operation: annualsettlementActionGetStockAccountsIbAndUbGet

const annualsettlementActionGetStockAccountsIbAndUbGetArgsRt = rt
  .Record({ year: rt.Number })
  .asPartial()
  .asReadonly();

const annualsettlementActionGetStockAccountsIbAndUbGetResponseBodyRt = rt.Array(
  annualSettlementAccountIBAndUBDisplayItemRt,
);

/**
 * operation ID:
 * annualsettlementActionGetStockAccountsIbAndUbGet
 * `GET: /annualsettlement?action=get-stock-accounts-IB-and-UB`
 * get-stock-accounts-IB-and-UB Action
 */
export const annualsettlementActionGetStockAccountsIbAndUbGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementActionGetStockAccountsIbAndUbGetArgsRt>
  >()
  .method('get')
  .path((args) => `/annualsettlement?action=get-stock-accounts-IB-and-UB`)
  .parseJson(
    withRuntype(annualsettlementActionGetStockAccountsIbAndUbGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionCalculateMaxDividendAmountGet

const annualsettlementIdActionCalculateMaxDividendAmountGetArgsRt =
  rt.Intersect(
    rt.Record({ id: rt.Number }).asReadonly(),
    rt.Record({ id: rt.Number }).asPartial().asReadonly(),
  );

/**
 * operation ID:
 * annualsettlementIdActionCalculateMaxDividendAmountGet
 * `GET:
 * /annualsettlement/{id}?action=calculate-max-dividend-amount`
 * calculate-max-dividend-amount Action
 */
export const annualsettlementIdActionCalculateMaxDividendAmountGet = buildCall() //
  .args<
    rt.Static<
      typeof annualsettlementIdActionCalculateMaxDividendAmountGetArgsRt
    >
  >()
  .method('get')
  .path(
    (args) =>
      `/annualsettlement/${args.id}?action=calculate-max-dividend-amount`,
  )
  .build();

// Operation: annualsettlementIdActionGetSentstatusGet

const annualsettlementIdActionGetSentstatusGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetSentstatusGetResponseBodyRt = rt.String;

/**
 * operation ID: annualsettlementIdActionGetSentstatusGet
 * `GET: /annualsettlement/{id}?action=get-sentstatus`
 * get-sentstatus Action
 */
export const annualsettlementIdActionGetSentstatusGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetSentstatusGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-sentstatus`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetSentstatusGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionValiderSkattemeldingGet

const annualsettlementIdActionValiderSkattemeldingGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionValiderSkattemeldingGetResponseBodyRt = rt.String;

/**
 * operation ID:
 * annualsettlementIdActionValiderSkattemeldingGet
 * `GET: /annualsettlement/{id}?action=valider-skattemelding`
 * valider-skattemelding Action
 */
export const annualsettlementIdActionValiderSkattemeldingGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementIdActionValiderSkattemeldingGetArgsRt>
  >()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=valider-skattemelding`)
  .parseJson(
    withRuntype(annualsettlementIdActionValiderSkattemeldingGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionGetBeregnetSkattGet

const annualsettlementIdActionGetBeregnetSkattGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetBeregnetSkattGetResponseBodyRt =
  rt.Array(reportElementRt);

/**
 * operation ID: annualsettlementIdActionGetBeregnetSkattGet
 * `GET: /annualsettlement/{id}?action=get-beregnet-skatt`
 * get-beregnet-skatt Action
 */
export const annualsettlementIdActionGetBeregnetSkattGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetBeregnetSkattGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-beregnet-skatt`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetBeregnetSkattGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionGetAvvikEtterberegningGet

const annualsettlementIdActionGetAvvikEtterberegningGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetAvvikEtterberegningGetResponseBodyRt =
  rt.Array(avviksforekomstRt);

/**
 * operation ID:
 * annualsettlementIdActionGetAvvikEtterberegningGet
 * `GET:
 * /annualsettlement/{id}?action=get-avvik-etterberegning`
 * get-avvik-etterberegning Action
 */
export const annualsettlementIdActionGetAvvikEtterberegningGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementIdActionGetAvvikEtterberegningGetArgsRt>
  >()
  .method('get')
  .path(
    (args) => `/annualsettlement/${args.id}?action=get-avvik-etterberegning`,
  )
  .parseJson(
    withRuntype(
      annualsettlementIdActionGetAvvikEtterberegningGetResponseBodyRt,
    ),
  )
  .build();

// Operation: annualsettlementIdActionGetVeiledningGet

const annualsettlementIdActionGetVeiledningGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetVeiledningGetResponseBodyRt = rt.Array(
  veiledningsforekomstRt,
);

/**
 * operation ID: annualsettlementIdActionGetVeiledningGet
 * `GET: /annualsettlement/{id}?action=get-veiledning`
 * get-veiledning Action
 */
export const annualsettlementIdActionGetVeiledningGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetVeiledningGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-veiledning`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetVeiledningGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionGetVeiledningFeilGet

const annualsettlementIdActionGetVeiledningFeilGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetVeiledningFeilGetResponseBodyRt = rt.Array(
  veiledningsforekomstRt,
);

/**
 * operation ID: annualsettlementIdActionGetVeiledningFeilGet
 * `GET: /annualsettlement/{id}?action=get-veiledning-feil`
 * get-veiledning-feil Action
 */
export const annualsettlementIdActionGetVeiledningFeilGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetVeiledningFeilGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-veiledning-feil`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetVeiledningFeilGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementIdActionGetTilbakemeldingGet

const annualsettlementIdActionGetTilbakemeldingGetArgsRt = rt.Intersect(
  rt.Record({ id: rt.Number }).asReadonly(),
  rt.Record({ id: rt.Number }).asPartial().asReadonly(),
);

const annualsettlementIdActionGetTilbakemeldingGetResponseBodyRt = rt.String;

/**
 * operation ID: annualsettlementIdActionGetTilbakemeldingGet
 * `GET: /annualsettlement/{id}?action=get-tilbakemelding`
 * get-tilbakemelding Action
 */
export const annualsettlementIdActionGetTilbakemeldingGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdActionGetTilbakemeldingGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}?action=get-tilbakemelding`)
  .parseJson(
    withRuntype(annualsettlementIdActionGetTilbakemeldingGetResponseBodyRt),
  )
  .build();

// Operation: annualsettlementActionCheckIfCompanyIsOnAllowlistGet

const annualsettlementActionCheckIfCompanyIsOnAllowlistGetArgsRt = rt
  .Record({ year: rt.Number, fnr: rt.String })
  .asPartial()
  .asReadonly();

const annualsettlementActionCheckIfCompanyIsOnAllowlistGetResponseBodyRt =
  rt.Boolean;

/**
 * operation ID:
 * annualsettlementActionCheckIfCompanyIsOnAllowlistGet
 * `GET:
 * /annualsettlement?action=check-if-company-is-on-allowlist`
 * check-if-company-is-on-allowlist Action
 */
export const annualsettlementActionCheckIfCompanyIsOnAllowlistGet = buildCall() //
  .args<
    rt.Static<typeof annualsettlementActionCheckIfCompanyIsOnAllowlistGetArgsRt>
  >()
  .method('get')
  .path((args) => `/annualsettlement?action=check-if-company-is-on-allowlist`)
  .parseJson(
    withRuntype(
      annualsettlementActionCheckIfCompanyIsOnAllowlistGetResponseBodyRt,
    ),
  )
  .build();

// Operation: annualsettlementIdGet

const annualsettlementIdGetArgsRt = rt.Record({ id: rt.Number }).asReadonly();

/**
 * operation ID: annualsettlementIdGet
 * `GET: /annualsettlement/{id}`
 * Get AnnualSettlement
 */
export const annualsettlementIdGet = buildCall() //
  .args<rt.Static<typeof annualsettlementIdGetArgsRt>>()
  .method('get')
  .path((args) => `/annualsettlement/${args.id}`)
  .parseJson(withRuntype(annualSettlementRt))
  .build();

// Operation: annualsettlementIdPut

const annualsettlementIdPutArgsRt = rt
  .Record({ id: rt.Number, AnnualSettlement: annualSettlementRt })
  .asReadonly();

/**
 * operation ID: annualsettlementIdPut
 * `PUT: /annualsettlement/{id}`
 * Update AnnualSettlement
 */
export const annualsettlementIdPut = buildCall() //
  .args<rt.Static<typeof annualsettlementIdPutArgsRt>>()
  .method('put')
  .path((args) => `/annualsettlement/${args.id}`)
  .body((args) => args.AnnualSettlement)
  .parseJson(withRuntype(annualSettlementRt))
  .build();

// Operation: annualsettlementIdDelete

const annualsettlementIdDeleteArgsRt = rt
  .Record({ id: rt.Number })
  .asReadonly();

/**
 * operation ID: annualsettlementIdDelete
 * `DELETE: /annualsettlement/{id}`
 * Delete AnnualSettlement
 */
export const annualsettlementIdDelete = buildCall() //
  .args<rt.Static<typeof annualsettlementIdDeleteArgsRt>>()
  .method('delete')
  .path((args) => `/annualsettlement/${args.id}`)
  .parseJson(withRuntype(annualSettlementRt))
  .build();

// Operation: annualsettlementGet

const annualsettlementGetResponseBodyRt = rt.Array(annualSettlementRt);

/**
 * operation ID: annualsettlementGet
 * `GET: /annualsettlement`
 * Query AnnualSettlement
 */
export const annualsettlementGet = buildCall() //
  .method('get')
  .path('/annualsettlement')
  .parseJson(withRuntype(annualsettlementGetResponseBodyRt))
  .build();

// Operation: annualsettlementPost

const annualsettlementPostArgsRt = rt
  .Record({ AnnualSettlement: annualSettlementRt })
  .asReadonly();

/**
 * operation ID: annualsettlementPost
 * `POST: /annualsettlement`
 * Create AnnualSettlement
 */
export const annualsettlementPost = buildCall() //
  .args<rt.Static<typeof annualsettlementPostArgsRt>>()
  .method('post')
  .path('/annualsettlement')
  .body((args) => args.AnnualSettlement)
  .build();
