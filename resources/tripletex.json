{
  "swagger": "2.0",
  "info": {
    "description": "## Usage\n\n- **Download the spec** [swagger.json](/v2/swagger.json) file, it is a [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification).\n\n- **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or other that accepts [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\n    - For swagger codegen it is recommended to use the flag: **--removeOperationIdPrefix**. \n      Unique operation ids are about to be introduced to the spec, and this ensures forward compatibility - and results in less verbose generated code.\n\n\n## Overview\n\n- Partial resource updating is done using the `PUT` method with optional fields instead of the `PATCH` method.\n\n- **Actions** or **commands** are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n- **Summaries** or **aggregated** results are represented in our RESTful path with a prefixed `>`. Example: `/v2/hours/>thisWeeksBillables`.\n\n- **Request ID** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value.\n\n- **version** This is a revision number found on all persisted resources. If included, it will prevent your PUT/POST from overriding any updates to the resource since your GET.\n\n- **Date** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DD`.\n\n- **DateTime** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DDThh:mm:ss`.\n\n- **Searching** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n- **Missing fields** or even **no response data** can occur because result objects and fields are filtered on authorization.\n\n- **See [GitHub](https://github.com/Tripletex/tripletex-api2) for more documentation, examples, changelog and more.**\n\n- **See [FAQ](https://tripletex.no/execute/docViewer?articleId=906&language=0) for additional information.**\n\n\n## Authentication\n\n- **Tokens:** The Tripletex API uses 3 different tokens\n\n  - **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n  - **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=853&language=0)\n\n  - **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header. See how to create a sessionToken [here](https://tripletex.no/execute/docViewer?articleId=855&language=0).\n\n- **Authentication** is done via [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n\n  - **username** is used to specify what company to access.\n\n    - `0` or blank means the company of the employee.\n\n    - Any other value means accountant clients. Use `/company/>withLoginAccess` to get a list of those.\n\n  - **password** is the **sessionToken**.\n\n  - If you need to create the header yourself use `Authorization: Basic <encoded token>` where `encoded token` is the string `<target company id or 0>:<your session token>` Base64 encoded.\n\n\n## Tags\n\n- `[BETA]` This is a beta endpoint and can be subject to change.\n- `[DEPRECATED]` Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n\n## Fields\n\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements, done via `<field>(<subResourceFields>)`. `*` means all fields for that resource. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All resources and some subResources :  `*,activity(name),employee(*)`.\n\n\n## Sorting\n\nUse the `sorting` parameter to specify sorting. It takes a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `<field>.<subObjectField>`. Example values:\n- `date`\n- `project.name`\n- `project.name, -date`\n\n\n## Changes\n\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\n**NOTE**\n> For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n\n## Rate limiting\n\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope\n\n#### Multiple values\n\n```json\n{\n  \"fullResultSize\": ###, // {number} [DEPRECATED]\n  \"from\": ###, // {number} Paging starting from\n  \"count\": ###, // {number} Paging count\n  \"versionDigest\": \"###\", // {string} Hash of full result, null if no result\n  \"values\": [...{...object...},{...object...},{...object...}...]\n}\n```\n\n#### Single value\n\n```json\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope\n\n```json\n{\n  \"subscriptionId\": ###, // Subscription id\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Id of object this event is for\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n## Error/warning envelope\n\n```json\n{\n  \"status\": ###, // {number} HTTP status code\n  \"code\": #####, // {number} internal status code of event\n  \"message\": \"###\", // {string} Basic feedback message in your language\n  \"link\": \"###\", // {string} Link to doc\n  \"developerMessage\": \"###\", // {string} More technical message\n  \"validationMessages\": [ // {array} List of validation messages, can be null\n    {\n      \"field\": \"###\", // {string} Name of field\n      \"message\": \"###\" // {string} Validation message for field\n    }\n  ],\n  \"requestId\": \"###\" // {string} Same as x-tlx-request-id \n}\n```\n\n\n## Status codes / Error codes\n\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  -  **4000** Bad Request Exception\n  - **11000** Illegal Filter Exception\n  - **12000** Path Param Exception\n  - **24000** Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000** Authentication Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n  -  **9000** Security Exception\n- **404 Not Found** - For resources that does not exist.\n  -  **6000** Not Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000** Object Exists Exception\n  -  **8000** Revision Exception\n  - **10000** Locked Exception\n  - **14000** Duplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000** Value Validation Exception\n  - **16000** Mapping Exception\n  - **17000** Sorting Exception\n  - **18000** Validation Exception\n  - **21000** Param Exception\n  - **22000** Invalid JSON Exception\n  - **23000** Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** - Unexpected condition was encountered and no more specific message is suitable\n  - **1000** Exception\n",
    "version": "2.64.0",
    "title": "Tripletex API",
    "contact": {
      "name": "tripletex-api2 on GitHub",
      "url": "https://github.com/Tripletex/tripletex-api2"
    }
  },
  "host": "tripletex.no",
  "basePath": "/v2",
  "tags": [
    {
      "name": "activity"
    },
    {
      "name": "addon"
    },
    {
      "name": "deliveryAddress"
    },
    {
      "name": "address"
    },
    {
      "name": "internalautoPayIncomingPaymentSimulator"
    },
    {
      "name": "internalscheduling"
    },
    {
      "name": "internalsystemMessage"
    },
    {
      "name": "integrationfactoringaprila"
    },
    {
      "name": "asset"
    },
    {
      "name": "balanceSheet"
    },
    {
      "name": "bank"
    },
    {
      "name": "bankagreements"
    },
    {
      "name": "bankonboarding"
    },
    {
      "name": "bankreconciliation"
    },
    {
      "name": "bank/reconciliation"
    },
    {
      "name": "bankreconciliationfileIdsForIncomingPayments"
    },
    {
      "name": "bankreconciliationmatch"
    },
    {
      "name": "bank/reconciliation/match"
    },
    {
      "name": "bankreconciliationpaymentType"
    },
    {
      "name": "bank/reconciliation/paymentType"
    },
    {
      "name": "banksettings"
    },
    {
      "name": "bankstatement"
    },
    {
      "name": "bank/statement"
    },
    {
      "name": "bankstatementbalanceestimation"
    },
    {
      "name": "bankstatementtransaction"
    },
    {
      "name": "bank/statement/transaction"
    },
    {
      "name": "banner"
    },
    {
      "name": "exceptiontest"
    },
    {
      "name": "apiConsumer"
    },
    {
      "name": "tokenconsumer"
    },
    {
      "name": "token/consumer"
    },
    {
      "name": "tokenemployee"
    },
    {
      "name": "token/employee"
    },
    {
      "name": "tokenlogin"
    },
    {
      "name": "tokensession"
    },
    {
      "name": "token/session"
    },
    {
      "name": "company"
    },
    {
      "name": "companysettingsaltinn"
    },
    {
      "name": "company/altinn"
    },
    {
      "name": "companybrreg"
    },
    {
      "name": "companymodules"
    },
    {
      "name": "companysalesmodules"
    },
    {
      "name": "company/salesmodules"
    },
    {
      "name": "contact"
    },
    {
      "name": "country"
    },
    {
      "name": "currency"
    },
    {
      "name": "customer"
    },
    {
      "name": "customercategory"
    },
    {
      "name": "customer/category"
    },
    {
      "name": "dashboard"
    },
    {
      "name": "department"
    },
    {
      "name": "division"
    },
    {
      "name": "document"
    },
    {
      "name": "documentArchive"
    },
    {
      "name": "employee"
    },
    {
      "name": "employeecategory"
    },
    {
      "name": "employee/category"
    },
    {
      "name": "employeeemployment"
    },
    {
      "name": "employee/employment"
    },
    {
      "name": "employeeemploymentdetails"
    },
    {
      "name": "employee/employment/details"
    },
    {
      "name": "employeeemploymentemploymentType"
    },
    {
      "name": "employee/employment/employmentType"
    },
    {
      "name": "employeeemploymentleaveOfAbsence"
    },
    {
      "name": "employee/employment/leaveOfAbsence"
    },
    {
      "name": "employeeemploymentleaveOfAbsenceType"
    },
    {
      "name": "employee/employment/leaveOfAbsenceType"
    },
    {
      "name": "employeeemploymentoccupationCode"
    },
    {
      "name": "employee/employment/occupationCode"
    },
    {
      "name": "employeeemploymentremunerationType"
    },
    {
      "name": "employee/employment/remunerationType"
    },
    {
      "name": "employeeemploymentworkingHoursScheme"
    },
    {
      "name": "employee/employment/workingHoursScheme"
    },
    {
      "name": "employeehourlyCostAndRate"
    },
    {
      "name": "employee/hourlyCostAndRate"
    },
    {
      "name": "employeenextOfKin"
    },
    {
      "name": "employee/nextOfKin"
    },
    {
      "name": "employeestandardTime"
    },
    {
      "name": "employee/standardTime"
    },
    {
      "name": "employeeentitlement"
    },
    {
      "name": "employee/entitlement"
    },
    {
      "name": "event"
    },
    {
      "name": "eventbanner"
    },
    {
      "name": "eventnotification"
    },
    {
      "name": "eventsubscription"
    },
    {
      "name": "event/subscription"
    },
    {
      "name": "integrationautopaymessages"
    },
    {
      "name": "bankpayment"
    },
    {
      "name": "integrationlinkmobilityreport"
    },
    {
      "name": "integrationpg2callback"
    },
    {
      "name": "integrationsendgridparse"
    },
    {
      "name": "integrationsendgridevent"
    },
    {
      "name": "inventory"
    },
    {
      "name": "inventoryinventories"
    },
    {
      "name": "inventory/inventories"
    },
    {
      "name": "inventorylocation"
    },
    {
      "name": "inventory/location"
    },
    {
      "name": "inventorystocktaking"
    },
    {
      "name": "inventory/stocktaking"
    },
    {
      "name": "inventorystocktakingproductline"
    },
    {
      "name": "inventory/stocktaking/productline"
    },
    {
      "name": "invoice"
    },
    {
      "name": "integrationmaventastatus"
    },
    {
      "name": "invoicepaymentType"
    },
    {
      "name": "invoice/paymentType"
    },
    {
      "name": "invoicedetails"
    },
    {
      "name": "invoice/details"
    },
    {
      "name": "ledger"
    },
    {
      "name": "ledgeraccount"
    },
    {
      "name": "ledger/account"
    },
    {
      "name": "ledgeraccountingPeriod"
    },
    {
      "name": "ledger/accountingPeriod"
    },
    {
      "name": "ledgerannualAccount"
    },
    {
      "name": "ledger/annualAccount"
    },
    {
      "name": "ledgercloseGroup"
    },
    {
      "name": "ledger/closeGroup"
    },
    {
      "name": "ledgerpaymentTypeOut"
    },
    {
      "name": "ledger/paymentTypeOut"
    },
    {
      "name": "ledgerposting"
    },
    {
      "name": "ledger/posting"
    },
    {
      "name": "ledgervatType"
    },
    {
      "name": "ledger/vatType"
    },
    {
      "name": "ledgervoucher"
    },
    {
      "name": "ledger/voucher"
    },
    {
      "name": "ledgervoucherType"
    },
    {
      "name": "ledger/voucherType"
    },
    {
      "name": "lookup"
    },
    {
      "name": "mobileapp"
    },
    {
      "name": "municipality"
    },
    {
      "name": "openid"
    },
    {
      "name": "optionspage"
    },
    {
      "name": "order"
    },
    {
      "name": "orderoffer"
    },
    {
      "name": "orderorderGroup"
    },
    {
      "name": "order/orderGroup"
    },
    {
      "name": "orderorderline"
    },
    {
      "name": "order/orderline"
    },
    {
      "name": "productexternal"
    },
    {
      "name": "product/external"
    },
    {
      "name": "product"
    },
    {
      "name": "productnews"
    },
    {
      "name": "productinventoryLocation"
    },
    {
      "name": "product/inventoryLocation"
    },
    {
      "name": "productlogisticsSettings"
    },
    {
      "name": "product/logisticsSettings"
    },
    {
      "name": "productgroup"
    },
    {
      "name": "product/group"
    },
    {
      "name": "productgroupRelation"
    },
    {
      "name": "product/groupRelation"
    },
    {
      "name": "productproductPrice"
    },
    {
      "name": "product/productPrice"
    },
    {
      "name": "productunit"
    },
    {
      "name": "product/unit"
    },
    {
      "name": "productunitmaster"
    },
    {
      "name": "product/unit/master"
    },
    {
      "name": "project"
    },
    {
      "name": "project/import"
    },
    {
      "name": "projectcategory"
    },
    {
      "name": "project/category"
    },
    {
      "name": "projectorderline"
    },
    {
      "name": "project/orderline"
    },
    {
      "name": "projectparticipant"
    },
    {
      "name": "project/participant"
    },
    {
      "name": "project{id}period"
    },
    {
      "name": "project/period"
    },
    {
      "name": "projectprojectActivity"
    },
    {
      "name": "project/projectActivity"
    },
    {
      "name": "projectcontrolForm"
    },
    {
      "name": "project/controlForm"
    },
    {
      "name": "projectcontrolFormType"
    },
    {
      "name": "project/controlFormType"
    },
    {
      "name": "projecthourlyRates"
    },
    {
      "name": "project/hourlyRates"
    },
    {
      "name": "projecthourlyRatesprojectSpecificRates"
    },
    {
      "name": "project/hourlyRates/projectSpecificRates"
    },
    {
      "name": "projectsettings"
    },
    {
      "name": "project/settings"
    },
    {
      "name": "projecttask"
    },
    {
      "name": "project/task"
    },
    {
      "name": "projecttemplate"
    },
    {
      "name": "project/template"
    },
    {
      "name": "crmprospect"
    },
    {
      "name": "crm/prospect"
    },
    {
      "name": "pickupPoint"
    },
    {
      "name": "purchaseOrder"
    },
    {
      "name": "transportType"
    },
    {
      "name": "purchaseOrderdeviation"
    },
    {
      "name": "purchaseOrder/deviation"
    },
    {
      "name": "purchaseOrdergoodsReceipt"
    },
    {
      "name": "purchaseOrder/goodsReceipt"
    },
    {
      "name": "purchaseOrdergoodsReceiptLine"
    },
    {
      "name": "purchaseOrder/goodsReceiptLine"
    },
    {
      "name": "purchaseOrderpurchaseOrderIncomingInvoiceRelation"
    },
    {
      "name": "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
    },
    {
      "name": "purchaseOrderorderline"
    },
    {
      "name": "purchaseOrder/orderline"
    },
    {
      "name": "reminder"
    },
    {
      "name": "report"
    },
    {
      "name": "reportgroup"
    },
    {
      "name": "reportsystem"
    },
    {
      "name": "resultbudget"
    },
    {
      "name": "salarytype"
    },
    {
      "name": "salary/type"
    },
    {
      "name": "salarycompilation"
    },
    {
      "name": "salary/compilation"
    },
    {
      "name": "salarypayslip"
    },
    {
      "name": "salary/payslip"
    },
    {
      "name": "salarysettings"
    },
    {
      "name": "salary/settings"
    },
    {
      "name": "salarysettingsholiday"
    },
    {
      "name": "salary/settings/holiday"
    },
    {
      "name": "salarysettingspensionScheme"
    },
    {
      "name": "salary/settings/pensionScheme"
    },
    {
      "name": "salaryspecification"
    },
    {
      "name": "salarytransaction"
    },
    {
      "name": "salary/transaction"
    },
    {
      "name": "supplier"
    },
    {
      "name": "supplierInvoice"
    },
    {
      "name": "voucherApprovalListElement"
    },
    {
      "name": "timesheetentry"
    },
    {
      "name": "timesheet/entry"
    },
    {
      "name": "timesheetmonth"
    },
    {
      "name": "timesheet/month"
    },
    {
      "name": "timesheetsalaryTypeSpecification"
    },
    {
      "name": "timesheet/salaryTypeSpecification"
    },
    {
      "name": "timesheetsettings"
    },
    {
      "name": "timesheet/settings"
    },
    {
      "name": "timesheettimeClock"
    },
    {
      "name": "timesheet/timeClock"
    },
    {
      "name": "timesheetweek"
    },
    {
      "name": "timesheet/week"
    },
    {
      "name": "travelExpenseaccommodationAllowance"
    },
    {
      "name": "travelExpense/accommodationAllowance"
    },
    {
      "name": "travelExpensecost"
    },
    {
      "name": "travelExpense/cost"
    },
    {
      "name": "travelExpensemileageAllowance"
    },
    {
      "name": "travelExpense/mileageAllowance"
    },
    {
      "name": "travelExpensepassenger"
    },
    {
      "name": "travelExpense/passenger"
    },
    {
      "name": "travelExpenseperDiemCompensation"
    },
    {
      "name": "travelExpense/perDiemCompensation"
    },
    {
      "name": "travelExpense"
    },
    {
      "name": "travelExpenserate"
    },
    {
      "name": "travelExpense/rate"
    },
    {
      "name": "travelExpenserateCategory"
    },
    {
      "name": "travelExpense/rateCategory"
    },
    {
      "name": "travelExpenserateCategoryGroup"
    },
    {
      "name": "travelExpense/rateCategoryGroup"
    },
    {
      "name": "travelExpensecostCategory"
    },
    {
      "name": "travelExpense/costCategory"
    },
    {
      "name": "travelExpensepaymentType"
    },
    {
      "name": "travelExpense/paymentType"
    },
    {
      "name": "travelExpensesettings"
    },
    {
      "name": "travelExpense/settings"
    },
    {
      "name": "travelExpensezone"
    },
    {
      "name": "tripletexAccount"
    },
    {
      "name": "tripletexAccountcompanyModules"
    },
    {
      "name": "tripletexAccountPrices"
    },
    {
      "name": "tripletexAccountsalesForceAccountInfo"
    },
    {
      "name": "tripletexAccountsalesForceEmployeeRole"
    },
    {
      "name": "tripletexAccountsalesForceOpportunity"
    },
    {
      "name": "tripletexAccountsalesForceUser"
    },
    {
      "name": "voucherMessage"
    },
    {
      "name": "voucherStatus"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/activity": {
      "get": {
        "tags": ["activity"],
        "summary": "Find activities corresponding with sent data.",
        "description": "",
        "operationId": "Activity_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isProjectActivity",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isGeneral",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isChargeable",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isTask",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["activity"],
        "summary": "Add activity.",
        "description": "",
        "operationId": "Activity_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/list": {
      "post": {
        "tags": ["activity"],
        "summary": "Add multiple activities.",
        "description": "",
        "operationId": "ActivityList_postList",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Activity"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/>forTimeSheet": {
      "get": {
        "tags": ["activity"],
        "summary": "Find applicable time sheet activities for an employee on a specific day.",
        "description": "",
        "operationId": "ActivityForTimeSheet_getForTimeSheet",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "tags": ["activity"],
        "summary": "Find activity by ID.",
        "description": "",
        "operationId": "Activity_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress/{id}": {
      "get": {
        "tags": ["deliveryAddress"],
        "summary": "Get address by ID.",
        "description": "",
        "operationId": "DeliveryAddress_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["deliveryAddress"],
        "summary": "Update address.",
        "description": "",
        "operationId": "DeliveryAddress_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/deliveryAddress": {
      "get": {
        "tags": ["deliveryAddress"],
        "summary": "Find addresses corresponding with sent data.",
        "description": "",
        "operationId": "DeliveryAddress_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "addressLine1",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "addressLine2",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "city",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/asset": {
      "get": {
        "tags": ["asset"],
        "summary": "Find assets corresponding with sent data.",
        "description": "",
        "operationId": "Asset_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["asset"],
        "summary": "Create one asset.",
        "description": "",
        "operationId": "Asset_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/asset/list": {
      "post": {
        "tags": ["asset"],
        "summary": "Create several assets.",
        "description": "",
        "operationId": "AssetList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/asset/{id}": {
      "get": {
        "tags": ["asset"],
        "summary": "Get asset by ID.",
        "description": "",
        "operationId": "Asset_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["asset"],
        "summary": "Update asset.",
        "description": "",
        "operationId": "Asset_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["asset"],
        "summary": "Delete asset.",
        "description": "",
        "operationId": "Asset_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/balanceSheet": {
      "get": {
        "tags": ["balanceSheet"],
        "summary": "[BETA] Get balance sheet (saldobalanse).",
        "description": "",
        "operationId": "BalanceSheet_search",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountNumberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountNumberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeSubProjects",
            "in": "query",
            "description": "Should sub projects of the given project be included",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeActiveAccountsWithoutMovements",
            "in": "query",
            "description": "Should active accounts with no movements be included",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBalanceSheetAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/{id}": {
      "get": {
        "tags": ["bank"],
        "summary": "[BETA] Get bank.",
        "description": "",
        "operationId": "Bank_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBank"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank": {
      "get": {
        "tags": ["bank"],
        "summary": "[BETA] Find bank corresponding with sent data.",
        "description": "",
        "operationId": "Bank_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "registerNumbers",
            "in": "query",
            "description": "Bank register number (four digits)",
            "required": false,
            "type": "string"
          },
          {
            "name": "isBankReconciliationSupport",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isAutoPaySupported",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBank"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation": {
      "get": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Find bank reconciliation corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliation_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountingPeriodId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Post a bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/>lastClosed": {
      "get": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Get last closed reconciliation by account ID.",
        "description": "",
        "operationId": "BankReconciliationLastClosed_lastClosed",
        "parameters": [
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}": {
      "get": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Get bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Update a bank reconciliation.",
        "description": "",
        "operationId": "BankReconciliation_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Delete bank reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/{id}/:adjustment": {
      "put": {
        "tags": ["bank/reconciliation"],
        "summary": "[BETA] Add an adjustment to reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliationAdjustment_adjustment",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Adjustments",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankReconciliationAdjustment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationAdjustment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match": {
      "get": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Find bank reconciliation match corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliationMatch_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "List of bank reconciliation IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Create a bank reconciliation match.",
        "description": "",
        "operationId": "BankReconciliationMatch_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/:suggest": {
      "put": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Suggest matches for a bank reconciliation by ID.",
        "description": "",
        "operationId": "BankReconciliationMatchSuggest_suggest",
        "parameters": [
          {
            "name": "bankReconciliationId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/match/{id}": {
      "get": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Get bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatch_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Update a bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatch_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["bank/reconciliation/match"],
        "summary": "[BETA] Delete a bank reconciliation match by ID.",
        "description": "",
        "operationId": "BankReconciliationMatch_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType/{id}": {
      "get": {
        "tags": ["bank/reconciliation/paymentType"],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "BankReconciliationPaymentType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/reconciliation/paymentType": {
      "get": {
        "tags": ["bank/reconciliation/paymentType"],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "BankReconciliationPaymentType_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/import": {
      "post": {
        "tags": ["bank/statement"],
        "summary": "[BETA] Upload bank statement file.",
        "description": "",
        "operationId": "BankStatementImport_importBankStatement",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "bankId",
            "in": "query",
            "description": "Bank ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Account ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "External ID",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format",
            "required": true,
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The bank statement file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/{id}": {
      "get": {
        "tags": ["bank/statement"],
        "summary": "[BETA] Get bank statement.",
        "description": "",
        "operationId": "BankStatement_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["bank/statement"],
        "summary": "[BETA] Delete bank statement by ID.",
        "description": "",
        "operationId": "BankStatement_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement": {
      "get": {
        "tags": ["bank/statement"],
        "summary": "[BETA] Find bank statement corresponding with sent data.",
        "description": "",
        "operationId": "BankStatement_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format",
            "required": false,
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}/details": {
      "get": {
        "tags": ["bank/statement/transaction"],
        "summary": "[BETA] Get additional details about transaction by ID.",
        "description": "",
        "operationId": "BankStatementTransactionDetails_getDetails",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperObject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction/{id}": {
      "get": {
        "tags": ["bank/statement/transaction"],
        "summary": "[BETA] Get bank transaction by ID.",
        "description": "",
        "operationId": "BankStatementTransaction_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/bank/statement/transaction": {
      "get": {
        "tags": ["bank/statement/transaction"],
        "summary": "[BETA] Find bank transaction corresponding with sent data.",
        "description": "",
        "operationId": "BankStatementTransaction_search",
        "parameters": [
          {
            "name": "bankStatementId",
            "in": "query",
            "description": "Bank statement ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/consumer/byToken": {
      "get": {
        "tags": ["token/consumer"],
        "summary": "Get consumer token by token string.",
        "description": "",
        "operationId": "TokenConsumerByToken_getByToken",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperConsumerToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/employee/:create": {
      "put": {
        "tags": ["token/employee"],
        "summary": "Create an employee token. Only selected consumers are allowed",
        "description": "",
        "operationId": "TokenEmployeeCreate_create",
        "parameters": [
          {
            "name": "tokenName",
            "in": "query",
            "description": "A user defined name for the new token",
            "required": true,
            "type": "string"
          },
          {
            "name": "consumerName",
            "in": "query",
            "description": "The name of the consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "The id of the employee",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "companyOwned",
            "in": "query",
            "description": "Is the key company owned",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the employeeToken",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/>whoAmI": {
      "get": {
        "tags": ["token/session"],
        "summary": "Find information about the current user.",
        "description": "",
        "operationId": "TokenSessionWhoAmI_whoAmI",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLoggedInUserInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/{token}": {
      "delete": {
        "tags": ["token/session"],
        "summary": "Delete session token.",
        "description": "",
        "operationId": "TokenSession_delete",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The login token string to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/token/session/:create": {
      "put": {
        "tags": ["token/session"],
        "summary": "Create session token.",
        "description": "",
        "operationId": "TokenSessionCreate_create",
        "parameters": [
          {
            "name": "consumerToken",
            "in": "query",
            "description": "Token of the API consumer",
            "required": true,
            "type": "string"
          },
          {
            "name": "employeeToken",
            "in": "query",
            "description": "The employees token",
            "required": true,
            "type": "string"
          },
          {
            "name": "expirationDate",
            "in": "query",
            "description": "Expiration date for the combined token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSessionToken"
            }
          }
        }
      }
    },
    "/company/>withLoginAccess": {
      "get": {
        "tags": ["company"],
        "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
        "description": "",
        "operationId": "CompanyWithLoginAccess_getWithLoginAccess",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/divisions": {
      "get": {
        "tags": ["company"],
        "summary": "[DEPRECATED] Find divisions.",
        "description": "",
        "operationId": "CompanyDivisions_getDivisions",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "tags": ["company"],
        "summary": "Find company by ID.",
        "description": "",
        "operationId": "Company_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company": {
      "put": {
        "tags": ["company"],
        "summary": "Update company information.",
        "description": "",
        "operationId": "Company_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/settings/altinn": {
      "get": {
        "tags": ["company/altinn"],
        "summary": "[BETA] Find Altinn id for login in company.",
        "description": "",
        "operationId": "CompanySettingsAltinn_search",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["company/altinn"],
        "summary": "[BETA] Update AltInn id and password.",
        "description": "",
        "operationId": "CompanySettingsAltinn_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AltinnCompanyModule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/company/salesmodules": {
      "get": {
        "tags": ["company/salesmodules"],
        "summary": "[BETA] Get active sales modules.",
        "description": "",
        "operationId": "CompanySalesmodules_get",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["company/salesmodules"],
        "summary": "[BETA] Add (activate) a new sales module.",
        "description": "",
        "operationId": "CompanySalesmodules_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesModuleDTO"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact": {
      "get": {
        "tags": ["contact"],
        "summary": "Find contacts corresponding with sent data.",
        "description": "",
        "operationId": "Contact_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["contact"],
        "summary": "Create contact.",
        "description": "",
        "operationId": "Contact_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "tags": ["contact"],
        "summary": "Get contact by ID.",
        "description": "",
        "operationId": "Contact_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["contact"],
        "summary": "[BETA] Update contact.",
        "description": "",
        "operationId": "Contact_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country/{id}": {
      "get": {
        "tags": ["country"],
        "summary": "Get country by ID.",
        "description": "",
        "operationId": "Country_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": ["country"],
        "summary": "Find countries corresponding with sent data.",
        "description": "",
        "operationId": "Country_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}": {
      "get": {
        "tags": ["currency"],
        "summary": "Get currency by ID.",
        "description": "",
        "operationId": "Currency_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency": {
      "get": {
        "tags": ["currency"],
        "summary": "Find currencies corresponding with sent data.",
        "description": "",
        "operationId": "Currency_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Currency codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/currency/{id}/rate": {
      "get": {
        "tags": ["currency"],
        "summary": "Find currency exchange rate corresponding with sent data.",
        "description": "",
        "operationId": "CurrencyRate_getRate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Currency id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Format is yyyy-MM-dd",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrencyExchangeRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer": {
      "get": {
        "tags": ["customer"],
        "summary": "Find customers corresponding with sent data.",
        "description": "",
        "operationId": "Customer_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerAccountNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["customer"],
        "summary": "Create customer. Related customer addresses may also be created.",
        "description": "",
        "operationId": "Customer_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/list": {
      "post": {
        "tags": ["customer"],
        "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "CustomerList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["customer"],
        "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
        "description": "",
        "operationId": "CustomerList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/{id}": {
      "get": {
        "tags": ["customer"],
        "summary": "Get customer by ID.",
        "description": "",
        "operationId": "Customer_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["customer"],
        "summary": "Update customer. ",
        "description": "",
        "operationId": "Customer_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["customer"],
        "summary": "[BETA] Delete customer by ID",
        "description": "",
        "operationId": "Customer_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category": {
      "get": {
        "tags": ["customer/category"],
        "summary": "Find customer/supplier categories corresponding with sent data.",
        "description": "",
        "operationId": "CustomerCategory_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["customer/category"],
        "summary": "Add new customer/supplier category.",
        "description": "",
        "operationId": "CustomerCategory_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/customer/category/{id}": {
      "get": {
        "tags": ["customer/category"],
        "summary": "Find customer/supplier category by ID.",
        "description": "",
        "operationId": "CustomerCategory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["customer/category"],
        "summary": "Update customer/supplier category.",
        "description": "",
        "operationId": "CustomerCategory_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department": {
      "get": {
        "tags": ["department"],
        "summary": "Find department corresponding with sent data.",
        "description": "",
        "operationId": "Department_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["department"],
        "summary": "[BETA] Add new department.",
        "description": "",
        "operationId": "Department_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/list": {
      "post": {
        "tags": ["department"],
        "summary": "[BETA] Register new departments.",
        "description": "",
        "operationId": "DepartmentList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["department"],
        "summary": "[BETA] Update multiple departments.",
        "description": "",
        "operationId": "DepartmentList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/department/{id}": {
      "get": {
        "tags": ["department"],
        "summary": "Get department by ID.",
        "description": "",
        "operationId": "Department_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["department"],
        "summary": "[BETA] Update department.",
        "description": "",
        "operationId": "Department_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["department"],
        "summary": "Delete department by ID",
        "description": "",
        "operationId": "Department_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division": {
      "get": {
        "tags": ["division"],
        "summary": "[BETA] Get divisions.",
        "description": "",
        "operationId": "Division_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["division"],
        "summary": "[BETA] Create division.",
        "description": "",
        "operationId": "Division_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/list": {
      "post": {
        "tags": ["division"],
        "summary": "[BETA] Create divisions.",
        "description": "",
        "operationId": "DivisionList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["division"],
        "summary": "[BETA] Update multiple divisions.",
        "description": "",
        "operationId": "DivisionList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/division/{id}": {
      "put": {
        "tags": ["division"],
        "summary": "[BETA] Update division information.",
        "description": "",
        "operationId": "Division_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}/content": {
      "get": {
        "tags": ["document"],
        "summary": "[BETA] Get content of document given by ID.",
        "description": "",
        "operationId": "DocumentContent_downloadContent",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of document to download content from.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/document/{id}": {
      "get": {
        "tags": ["document"],
        "summary": "[BETA] Get document by ID.",
        "description": "",
        "operationId": "Document_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocument"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/reception": {
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
        "description": "",
        "operationId": "DocumentArchiveReception_receptionPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/customer/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with customer object type.",
        "description": "",
        "operationId": "DocumentArchiveCustomer_getCustomer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Customer Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveCustomer_customerPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/project/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with project object type.",
        "description": "",
        "operationId": "DocumentArchiveProject_getProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Project Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProject_projectPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/supplier/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with supplier object type.",
        "description": "",
        "operationId": "DocumentArchiveSupplier_getSupplier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Supplier Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveSupplier_supplierPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/employee/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with employee object type.",
        "description": "",
        "operationId": "DocumentArchiveEmployee_getEmployee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Employee Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveEmployee_employeePost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/product/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with product object type.",
        "description": "",
        "operationId": "DocumentArchiveProduct_getProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Product Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProduct_productPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/account/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with account object type.",
        "description": "",
        "operationId": "DocumentArchiveAccount_getAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Account Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveAccount_accountPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/prospect/{id}": {
      "get": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Find documents archived associated with prospect object type.",
        "description": "",
        "operationId": "DocumentArchiveProspect_getProspect",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Upload file to Prospect Document Archive.",
        "description": "",
        "operationId": "DocumentArchiveProspect_prospectPost",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/documentArchive/{id}": {
      "put": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Update document archive.",
        "description": "",
        "operationId": "DocumentArchive_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentArchive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["documentArchive"],
        "summary": "[BETA] Delete document archive.",
        "description": "",
        "operationId": "DocumentArchive_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee": {
      "get": {
        "tags": ["employee"],
        "summary": "Find employees corresponding with sent data.",
        "description": "",
        "operationId": "Employee_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowInformationRegistration",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeContacts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyProjectManagers",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "assignableProjectManagers",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "periodStart",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "periodEnd",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "hasSystemAccess",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee"],
        "summary": "[BETA] Create one employee.",
        "description": "",
        "operationId": "Employee_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/list": {
      "post": {
        "tags": ["employee"],
        "summary": "[BETA] Create several employees.",
        "description": "",
        "operationId": "EmployeeList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Employee"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/{id}": {
      "get": {
        "tags": ["employee"],
        "summary": "Get employee by ID.",
        "description": "",
        "operationId": "Employee_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee"],
        "summary": "Update employee.",
        "description": "",
        "operationId": "Employee_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/category": {
      "get": {
        "tags": ["employee/category"],
        "summary": "[BETA] Find employee category corresponding with sent data.",
        "description": "",
        "operationId": "EmployeeCategory_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/category"],
        "summary": "[BETA] Create a new employee category.",
        "description": "",
        "operationId": "EmployeeCategory_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/category/list": {
      "post": {
        "tags": ["employee/category"],
        "summary": "[BETA] Create new employee categories.",
        "description": "",
        "operationId": "EmployeeCategoryList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeCategory"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/category"],
        "summary": "[BETA] Update multiple employee categories.",
        "description": "",
        "operationId": "EmployeeCategoryList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EmployeeCategory"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["employee/category"],
        "summary": "[BETA] Delete multiple employee categories",
        "description": "",
        "operationId": "EmployeeCategoryList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/category/{id}": {
      "get": {
        "tags": ["employee/category"],
        "summary": "[BETA] Get employee category by ID.",
        "description": "",
        "operationId": "EmployeeCategory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/category"],
        "summary": "[BETA] Update employee category information.",
        "description": "",
        "operationId": "EmployeeCategory_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["employee/category"],
        "summary": "[BETA] Delete employee category by ID",
        "description": "",
        "operationId": "EmployeeCategory_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment": {
      "get": {
        "tags": ["employee/employment"],
        "summary": "Find all employments for employee.",
        "description": "",
        "operationId": "EmployeeEmployment_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/employment"],
        "summary": "[BETA] Create employment.",
        "description": "",
        "operationId": "EmployeeEmployment_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/{id}": {
      "get": {
        "tags": ["employee/employment"],
        "summary": "Find employment by ID.",
        "description": "",
        "operationId": "EmployeeEmployment_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/employment"],
        "summary": "[BETA] Update employemnt. ",
        "description": "",
        "operationId": "EmployeeEmployment_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details": {
      "get": {
        "tags": ["employee/employment/details"],
        "summary": "[BETA] Find all employmentdetails for employment.",
        "description": "",
        "operationId": "EmployeeEmploymentDetails_search",
        "parameters": [
          {
            "name": "employmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/employment/details"],
        "summary": "[BETA] Create employment details.",
        "description": "",
        "operationId": "EmployeeEmploymentDetails_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/details/{id}": {
      "get": {
        "tags": ["employee/employment/details"],
        "summary": "[BETA] Find employment details by ID.",
        "description": "",
        "operationId": "EmployeeEmploymentDetails_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/employment/details"],
        "summary": "[BETA] Update employment details. ",
        "description": "",
        "operationId": "EmployeeEmploymentDetails_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/maritimeEmploymentType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all maritime employment type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeMaritimeEmploymentType_getMaritimeEmploymentType",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "maritimeEmploymentType",
            "required": true,
            "type": "string",
            "enum": ["SHIP_REGISTER", "SHIP_TYPE", "TRADE_AREA"]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/salaryType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all salary type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeSalaryType_getSalaryType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/scheduleType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all schedule type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeScheduleType_getScheduleType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/employmentFormType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all employment form type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeEmploymentFormType_getEmploymentFormType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType/employmentEndReasonType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all employment end reason type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeEmploymentEndReasonType_getEmploymentEndReasonType",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/employmentType": {
      "get": {
        "tags": ["employee/employment/employmentType"],
        "summary": "[BETA] Find all employment type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentType_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence": {
      "post": {
        "tags": ["employee/employment/leaveOfAbsence"],
        "summary": "[BETA] Create leave of absence.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/list": {
      "post": {
        "tags": ["employee/employment/leaveOfAbsence"],
        "summary": "[BETA] Create multiple leave of absences.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LeaveOfAbsence"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/{id}": {
      "get": {
        "tags": ["employee/employment/leaveOfAbsence"],
        "summary": "[BETA] Find leave of absence by ID.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/employment/leaveOfAbsence"],
        "summary": "[BETA] Update leave of absence. ",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/leaveOfAbsenceType": {
      "get": {
        "tags": ["employee/employment/leaveOfAbsenceType"],
        "summary": "[BETA] Find all leave of absence type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceType_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsenceType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/occupationCode": {
      "get": {
        "tags": ["employee/employment/occupationCode"],
        "summary": "[BETA] Find all profession codes.",
        "description": "",
        "operationId": "EmployeeEmploymentOccupationCode_search",
        "parameters": [
          {
            "name": "nameNO",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOccupationCode"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/remunerationType": {
      "get": {
        "tags": ["employee/employment/remunerationType"],
        "summary": "[BETA] Find all remuneration type IDs.",
        "description": "",
        "operationId": "EmployeeEmploymentRemunerationType_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseRemunerationType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/employment/workingHoursScheme": {
      "get": {
        "tags": ["employee/employment/workingHoursScheme"],
        "summary": "[BETA] Find working hours scheme ID.",
        "description": "",
        "operationId": "EmployeeEmploymentWorkingHoursScheme_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWorkingHoursScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate": {
      "get": {
        "tags": ["employee/hourlyCostAndRate"],
        "summary": "Find all hourly cost and rates for employee.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/hourlyCostAndRate"],
        "summary": "[BETA] Create hourly cost and rate.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/hourlyCostAndRate/{id}": {
      "get": {
        "tags": ["employee/hourlyCostAndRate"],
        "summary": "[BETA] Find hourly cost and rate by ID.",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/hourlyCostAndRate"],
        "summary": "[BETA] Update hourly cost and rate. ",
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin": {
      "get": {
        "tags": ["employee/nextOfKin"],
        "summary": "Find all next of kin for employee.",
        "description": "",
        "operationId": "EmployeeNextOfKin_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/nextOfKin"],
        "summary": "[BETA] Create next of kin.",
        "description": "",
        "operationId": "EmployeeNextOfKin_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/nextOfKin/{id}": {
      "get": {
        "tags": ["employee/nextOfKin"],
        "summary": "[BETA] Find next of kin by ID.",
        "description": "",
        "operationId": "EmployeeNextOfKin_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/nextOfKin"],
        "summary": "[BETA] Update next of kin. ",
        "description": "",
        "operationId": "EmployeeNextOfKin_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime": {
      "get": {
        "tags": ["employee/standardTime"],
        "summary": "[BETA] Find all standard times for employee.",
        "description": "",
        "operationId": "EmployeeStandardTime_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["employee/standardTime"],
        "summary": "[BETA] Create standard time.",
        "description": "",
        "operationId": "EmployeeStandardTime_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/standardTime/{id}": {
      "get": {
        "tags": ["employee/standardTime"],
        "summary": "[BETA] Find standard time by ID.",
        "description": "",
        "operationId": "EmployeeStandardTime_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["employee/standardTime"],
        "summary": "[BETA] Update standard time. ",
        "description": "",
        "operationId": "EmployeeStandardTime_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement": {
      "get": {
        "tags": ["employee/entitlement"],
        "summary": "Find all entitlements for user.",
        "description": "",
        "operationId": "EmployeeEntitlement_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantClientEntitlementsByTemplate": {
      "put": {
        "tags": ["employee/entitlement"],
        "summary": "[BETA] Update employee entitlements in client account.",
        "description": "",
        "operationId": "EmployeeEntitlementGrantClientEntitlementsByTemplate_grantClientEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "type": "string",
            "enum": [
              "NONE_PRIVILEGES",
              "STANDARD_PRIVILEGES_ACCOUNTANT",
              "STANDARD_PRIVILEGES_AUDITOR",
              "ALL_PRIVILEGES",
              "AGRO_READ_ONLY",
              "AGRO_READ_APPROVE",
              "AGRO_READ_WRITE",
              "AGRO_READ_WRITE_APPROVE",
              "MAMUT_PAYROLL_ADMIN",
              "MAMUT_PAYROLL_CLERK",
              "AGRO_PAYROLL_ADMIN",
              "AGRO_PAYROLL_CLERK",
              "AGRO_INVOICE_ADMIN",
              "AGRO_INVOICE_CLERK"
            ]
          },
          {
            "name": "addToExisting",
            "in": "query",
            "description": "Add template to existing entitlements",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/:grantEntitlementsByTemplate": {
      "put": {
        "tags": ["employee/entitlement"],
        "summary": "[BETA] Update employee entitlements.",
        "description": "The user will only receive the entitlements which are possible with the registered user type",
        "operationId": "EmployeeEntitlementGrantEntitlementsByTemplate_grantEntitlementsByTemplate",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "template",
            "in": "query",
            "description": "Template",
            "required": true,
            "type": "string",
            "enum": [
              "NONE_PRIVILEGES",
              "ALL_PRIVILEGES",
              "INVOICING_MANAGER",
              "PERSONELL_MANAGER",
              "ACCOUNTANT",
              "AUDITOR",
              "DEPARTMENT_LEADER",
              "MAMUT_USER_ADMIN",
              "MAMUT_USER"
            ]
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/client": {
      "get": {
        "tags": ["employee/entitlement"],
        "summary": "[BETA] Find all entitlements at client for user.",
        "description": "",
        "operationId": "EmployeeEntitlementClient_client",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Client ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/employee/entitlement/{id}": {
      "get": {
        "tags": ["employee/entitlement"],
        "summary": "Get entitlement by ID.",
        "description": "",
        "operationId": "EmployeeEntitlement_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/{eventType}": {
      "get": {
        "tags": ["event"],
        "summary": "[BETA] Get example webhook payload",
        "description": "",
        "operationId": "Event_example",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "description": "Event type, from /event endpoint",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEventInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event": {
      "get": {
        "tags": ["event"],
        "summary": "[BETA] Get all (WebHook) event keys.",
        "description": "",
        "operationId": "Event_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMapStringEventInfoDescription"
            }
          }
        }
      }
    },
    "/event/subscription": {
      "get": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Find all ongoing subscriptions.",
        "description": "",
        "operationId": "EventSubscription_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Create a new subscription for current EmployeeToken.",
        "description": "",
        "operationId": "EventSubscription_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription/list": {
      "post": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Create multiple subscriptions for current EmployeeToken.",
        "description": "",
        "operationId": "EventSubscriptionList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Update multiple subscription.",
        "description": "",
        "operationId": "EventSubscriptionList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Subscription"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Delete multiple subscriptions.",
        "description": "",
        "operationId": "EventSubscriptionList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/event/subscription/{id}": {
      "get": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Get subscription by ID.",
        "description": "",
        "operationId": "EventSubscription_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Change a current subscription, based on id.",
        "description": "",
        "operationId": "EventSubscription_put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["event/subscription"],
        "summary": "[BETA] Delete the given subscription.",
        "description": "",
        "operationId": "EventSubscription_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory": {
      "get": {
        "tags": ["inventory"],
        "summary": "Find inventory corresponding with sent data.",
        "description": "",
        "operationId": "Inventory_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMainInventory",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["inventory"],
        "summary": "Create new inventory.",
        "description": "",
        "operationId": "Inventory_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/{id}": {
      "get": {
        "tags": ["inventory"],
        "summary": "Get inventory by ID.",
        "description": "",
        "operationId": "Inventory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["inventory"],
        "summary": "Update inventory.",
        "description": "",
        "operationId": "Inventory_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["inventory"],
        "summary": "[BETA] Delete inventory.",
        "description": "",
        "operationId": "Inventory_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/inventories": {
      "get": {
        "tags": ["inventory/inventories"],
        "summary": "[BETA] Find inventories corresponding with sent data.",
        "description": "",
        "operationId": "InventoryInventories_search",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventories"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/location": {
      "get": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Find inventory locations by inventory ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocation_search",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Create new inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InventoryLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/location/list": {
      "post": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Add multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocationList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryLocation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Update multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocationList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryLocation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/location/{id}": {
      "get": {
        "tags": ["inventory/location"],
        "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Update inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocation_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["inventory/location"],
        "summary": "[BETA] Delete inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "InventoryLocation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking": {
      "get": {
        "tags": ["inventory/stocktaking"],
        "summary": "[BETA] Find stocktaking corresponding with sent data.",
        "description": "",
        "operationId": "InventoryStocktaking_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCompleted",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["inventory/stocktaking"],
        "summary": "[BETA] Create new stocktaking.",
        "description": "",
        "operationId": "InventoryStocktaking_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "typeOfStocktaking",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL_PRODUCTS_WITH_INVENTORIES",
              "INCLUDE_PRODUCTS",
              "NO_PRODUCTS"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/{id}": {
      "get": {
        "tags": ["inventory/stocktaking"],
        "summary": "[BETA] Get stocktaking by ID.",
        "description": "",
        "operationId": "InventoryStocktaking_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["inventory/stocktaking"],
        "summary": "[BETA] Update stocktaking.",
        "description": "",
        "operationId": "InventoryStocktaking_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["inventory/stocktaking"],
        "summary": "[BETA] Delete stocktaking.",
        "description": "",
        "operationId": "InventoryStocktaking_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline": {
      "get": {
        "tags": ["inventory/stocktaking/productline"],
        "summary": "[BETA] Find all product lines by stocktaking ID.",
        "description": "",
        "operationId": "InventoryStocktakingProductline_search",
        "parameters": [
          {
            "name": "stocktakingId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["inventory/stocktaking/productline"],
        "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
        "description": "",
        "operationId": "InventoryStocktakingProductline_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/inventory/stocktaking/productline/{id}": {
      "get": {
        "tags": ["inventory/stocktaking/productline"],
        "summary": "[BETA] Get product line by ID.",
        "description": "",
        "operationId": "InventoryStocktakingProductline_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["inventory/stocktaking/productline"],
        "summary": "[BETA] Update product line.",
        "description": "",
        "operationId": "InventoryStocktakingProductline_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["inventory/stocktaking/productline"],
        "summary": "[BETA] Delete product line.",
        "description": "",
        "operationId": "InventoryStocktakingProductline_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice": {
      "get": {
        "tags": ["invoice"],
        "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
        "description": "",
        "operationId": "Invoice_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kid",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["invoice"],
        "summary": "Create invoice. Related Order and OrderLines can be created first, or included as new objects inside the Invoice.",
        "description": "",
        "operationId": "Invoice_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/list": {
      "post": {
        "tags": ["invoice"],
        "summary": "[BETA] Create multiple invoices. Max 100 at a time.",
        "description": "",
        "operationId": "InvoiceList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invoice"
              }
            }
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{invoiceId}/pdf": {
      "get": {
        "tags": ["invoice"],
        "summary": "Get invoice document by invoice ID.",
        "description": "",
        "operationId": "InvoicePdf_downloadPdf",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:send": {
      "put": {
        "tags": ["invoice"],
        "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
        "description": "",
        "operationId": "InvoiceSend_send",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sendType",
            "in": "query",
            "description": "SendType",
            "required": true,
            "type": "string",
            "enum": ["EMAIL", "EHF", "EFAKTURA", "VIPPS", "PAPER"]
          },
          {
            "name": "overrideEmailAddress",
            "in": "query",
            "description": "Will override email address if sendType = EMAIL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:payment": {
      "put": {
        "tags": ["invoice"],
        "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
        "description": "",
        "operationId": "InvoicePayment_payment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paymentDate",
            "in": "query",
            "description": "Payment date",
            "required": true,
            "type": "string"
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "PaymentType id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Amount paid by customer in the company currency, typically NOK.",
            "required": true,
            "type": "number"
          },
          {
            "name": "paidAmountCurrency",
            "in": "query",
            "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createCreditNote": {
      "put": {
        "tags": ["invoice"],
        "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
        "description": "",
        "operationId": "InvoiceCreateCreditNote_createCreditNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Credit note date",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Comment",
            "required": false,
            "type": "string"
          },
          {
            "name": "creditNoteEmail",
            "in": "query",
            "description": "The credit note will be sent electronically if this field is filled out",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}/:createReminder": {
      "put": {
        "tags": ["invoice"],
        "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
        "description": "",
        "operationId": "InvoiceCreateReminder_createReminder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type",
            "required": true,
            "type": "string",
            "enum": [
              "SOFT_REMINDER",
              "REMINDER",
              "NOTICE_OF_DEBT_COLLECTION",
              "DEBT_COLLECTION"
            ]
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeCharge",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeInterest",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "dispatchType",
            "in": "query",
            "description": "dispatchType",
            "required": true,
            "type": "string",
            "enum": ["NETS_PRINT", "EMAIL", "SMS"]
          },
          {
            "name": "smsNumber",
            "in": "query",
            "description": "SMS number (must be a valid Norwegian telephone number)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/{id}": {
      "get": {
        "tags": ["invoice"],
        "summary": "Get invoice by ID.",
        "description": "",
        "operationId": "Invoice_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType/{id}": {
      "get": {
        "tags": ["invoice/paymentType"],
        "summary": "Get payment type by ID.",
        "description": "",
        "operationId": "InvoicePaymentType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/paymentType": {
      "get": {
        "tags": ["invoice/paymentType"],
        "summary": "Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "InvoicePaymentType_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details/{id}": {
      "get": {
        "tags": ["invoice/details"],
        "summary": "Get ProjectInvoiceDetails by ID.",
        "description": "",
        "operationId": "InvoiceDetails_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/invoice/details": {
      "get": {
        "tags": ["invoice/details"],
        "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
        "description": "",
        "operationId": "InvoiceDetails_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/openPost": {
      "get": {
        "tags": ["ledger"],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerOpenPost_openPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger": {
      "get": {
        "tags": ["ledger"],
        "summary": "Get ledger (hovedbok).",
        "description": "",
        "operationId": "Ledger_search",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account": {
      "get": {
        "tags": ["ledger/account"],
        "summary": "Find accounts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAccount_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isBankAccount",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isApplicableForSupplierInvoice",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ledgerType",
            "in": "query",
            "description": "Ledger type",
            "required": false,
            "type": "string",
            "enum": ["GENERAL", "CUSTOMER", "VENDOR", "EMPLOYEE", "ASSET"]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Create a new account.",
        "description": "",
        "operationId": "LedgerAccount_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/list": {
      "post": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Create several accounts.",
        "description": "",
        "operationId": "LedgerAccountList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Update multiple accounts.",
        "description": "",
        "operationId": "LedgerAccountList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Delete multiple accounts.",
        "description": "",
        "operationId": "LedgerAccountList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/account/{id}": {
      "get": {
        "tags": ["ledger/account"],
        "summary": "Get account by ID.",
        "description": "",
        "operationId": "LedgerAccount_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Update account.",
        "description": "",
        "operationId": "LedgerAccount_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["ledger/account"],
        "summary": "[BETA] Delete account.",
        "description": "",
        "operationId": "LedgerAccount_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod/{id}": {
      "get": {
        "tags": ["ledger/accountingPeriod"],
        "summary": "Get accounting period by ID.",
        "description": "",
        "operationId": "LedgerAccountingPeriod_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/accountingPeriod": {
      "get": {
        "tags": ["ledger/accountingPeriod"],
        "summary": "Find accounting periods corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAccountingPeriod_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "endFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1400,
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount/{id}": {
      "get": {
        "tags": ["ledger/annualAccount"],
        "summary": "Get annual account by ID.",
        "description": "",
        "operationId": "LedgerAnnualAccount_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/annualAccount": {
      "get": {
        "tags": ["ledger/annualAccount"],
        "summary": "Find annual accounts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerAnnualAccount_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup/{id}": {
      "get": {
        "tags": ["ledger/closeGroup"],
        "summary": "Get close group by ID.",
        "description": "",
        "operationId": "LedgerCloseGroup_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/closeGroup": {
      "get": {
        "tags": ["ledger/closeGroup"],
        "summary": "Find close groups corresponding with sent data.",
        "description": "",
        "operationId": "LedgerCloseGroup_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut": {
      "get": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Gets payment types for outgoing payments",
        "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
        "operationId": "LedgerPaymentTypeOut_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Create new payment type for outgoing payments",
        "description": "",
        "operationId": "LedgerPaymentTypeOut_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/list": {
      "post": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Create multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "LedgerPaymentTypeOutList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Update multiple payment types for outgoing payments at once",
        "description": "",
        "operationId": "LedgerPaymentTypeOutList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/paymentTypeOut/{id}": {
      "get": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Get payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "LedgerPaymentTypeOut_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Update existing payment type for outgoing payments",
        "description": "",
        "operationId": "LedgerPaymentTypeOut_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["ledger/paymentTypeOut"],
        "summary": "[BETA] Delete payment type for outgoing payments by ID.",
        "description": "",
        "operationId": "LedgerPaymentTypeOut_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/openPost": {
      "get": {
        "tags": ["ledger/posting"],
        "summary": "Find open posts corresponding with sent data.",
        "description": "",
        "operationId": "LedgerPostingOpenPost_openPost",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting/{id}": {
      "get": {
        "tags": ["ledger/posting"],
        "summary": "Find postings by ID.",
        "description": "",
        "operationId": "LedgerPosting_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/posting": {
      "get": {
        "tags": ["ledger/posting"],
        "summary": "Find postings corresponding with sent data.",
        "description": "",
        "operationId": "LedgerPosting_search",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "openPostings",
            "in": "query",
            "description": "Deprecated",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "string",
            "enum": [
              "INCOMING_PAYMENT",
              "INCOMING_PAYMENT_OPPOSITE",
              "INVOICE_EXPENSE",
              "OUTGOING_INVOICE_CUSTOMER_POSTING"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType/{id}": {
      "get": {
        "tags": ["ledger/vatType"],
        "summary": "Get vat type by ID.",
        "description": "",
        "operationId": "LedgerVatType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/vatType": {
      "get": {
        "tags": ["ledger/vatType"],
        "summary": "Find vat types corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVatType_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "typeOfVat",
            "in": "query",
            "description": "Type of VAT",
            "required": false,
            "type": "string",
            "enum": ["OUTGOING", "INCOMING"]
          },
          {
            "name": "vatDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today. Note that this is only used in combination with typeOfVat-parameter. Only valid vatTypes on the given date are returned.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "Find vouchers corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVoucher_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "numberFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "numberTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherSearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["ledger/voucher"],
        "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
        "description": "",
        "operationId": "LedgerVoucher_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/list": {
      "put": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "LedgerVoucherList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Voucher"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToLedger": {
      "put": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Send voucher to ledger.",
        "description": "",
        "operationId": "LedgerVoucherSendToLedger_sendToLedger",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to ledger.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to ledger.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importDocument": {
      "post": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherImportDocument_importDocument",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "description",
            "in": "formData",
            "description": "Optional description to use for the voucher(s). If omitted the file name will be used.",
            "required": false,
            "type": "string"
          },
          {
            "name": "split",
            "in": "query",
            "description": "If the document consists of several pages, should the document be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/>nonPosted": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Find non-posted vouchers.",
        "description": "",
        "operationId": "LedgerVoucherNonPosted_nonPosted",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeNonApproved",
            "in": "query",
            "description": "Include non-approved vouchers in the result.",
            "required": true,
            "type": "boolean",
            "default": false
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/>voucherReception": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "Find vouchers in voucher reception.",
        "description": "",
        "operationId": "LedgerVoucherVoucherReception_voucherReception",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "Get PDF representation of voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucherPdf_downloadPdf",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf/{fileName}": {
      "post": {
        "tags": ["ledger/voucher"],
        "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
        "description": "",
        "operationId": "LedgerVoucherPdf_uploadPdf",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID to upload PDF to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{voucherId}/attachment": {
      "post": {
        "tags": ["ledger/voucher"],
        "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherAttachment_uploadAttachment",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Voucher ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "LedgerVoucherAttachment_deleteAttachment",
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "ID of voucher containing the attachment to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToInbox": {
      "put": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Send voucher to inbox.",
        "description": "",
        "operationId": "LedgerVoucherSendToInbox_sendToInbox",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be sent to inbox.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher that should be sent to inbox.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/importGbat10": {
      "post": {
        "tags": ["ledger/voucher"],
        "summary": "Import GBAT10. Send as multipart form.",
        "description": "",
        "operationId": "LedgerVoucherImportGbat10_importGbat10",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "generateVatPostings",
            "in": "formData",
            "description": "If the import should generate VAT postings",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "encoding",
            "in": "formData",
            "description": "The file encoding",
            "required": false,
            "type": "string",
            "default": "utf-8"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "Get voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucher_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
        "description": "",
        "operationId": "LedgerVoucher_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Delete voucher by ID.",
        "description": "",
        "operationId": "LedgerVoucher_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/:reverse": {
      "put": {
        "tags": ["ledger/voucher"],
        "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
        "description": "",
        "operationId": "LedgerVoucherReverse_reverse",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of voucher that should be reversed.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Reverse voucher date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucher/{id}/options": {
      "get": {
        "tags": ["ledger/voucher"],
        "summary": "[BETA] Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
        "description": "",
        "operationId": "LedgerVoucherOptions_options",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherOptions"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType/{id}": {
      "get": {
        "tags": ["ledger/voucherType"],
        "summary": "Get voucher type by ID.",
        "description": "",
        "operationId": "LedgerVoucherType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/ledger/voucherType": {
      "get": {
        "tags": ["ledger/voucherType"],
        "summary": "Find voucher types corresponding with sent data.",
        "description": "",
        "operationId": "LedgerVoucherType_search",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/municipality": {
      "get": {
        "tags": ["municipality"],
        "summary": "[BETA] Get municipalities.",
        "description": "",
        "operationId": "Municipality_search",
        "parameters": [
          {
            "name": "includePayrollTaxZones",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMunicipality"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order": {
      "get": {
        "tags": ["order"],
        "summary": "Find orders corresponding with sent data.",
        "description": "",
        "operationId": "Order_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "orderDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isSubscription",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["order"],
        "summary": "Create order.",
        "description": "",
        "operationId": "Order_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/list": {
      "post": {
        "tags": ["order"],
        "summary": "[BETA] Create multiple Orders with OrderLines. Max 100 at a time.",
        "description": "",
        "operationId": "OrderList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:invoice": {
      "put": {
        "tags": ["order"],
        "summary": "Create new invoice from order.",
        "description": "",
        "operationId": "OrderInvoice_invoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to invoice.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "type": "string"
          },
          {
            "name": "sendToCustomer",
            "in": "query",
            "description": "Send invoice to customer",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "paymentTypeId",
            "in": "query",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paidAmount",
            "in": "query",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/:invoiceMultipleOrders": {
      "put": {
        "tags": ["order"],
        "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email and attn.",
        "description": "",
        "operationId": "OrderInvoiceMultipleOrders_invoiceMultipleOrders",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of Order IDs - to the same customer, separated by comma.",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The invoice date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:approveSubscriptionInvoice": {
      "put": {
        "tags": ["order"],
        "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
        "description": "",
        "operationId": "OrderApproveSubscriptionInvoice_approveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to approve for subscription invoicing.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "invoiceDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:unApproveSubscriptionInvoice": {
      "put": {
        "tags": ["order"],
        "summary": "Unapproves the order for subscription invoicing.",
        "description": "",
        "operationId": "OrderUnApproveSubscriptionInvoice_unApproveSubscriptionInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of order to unapprove for subscription invoicing.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}": {
      "get": {
        "tags": ["order"],
        "summary": "Get order by ID.",
        "description": "",
        "operationId": "Order_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["order"],
        "summary": "Update order.",
        "description": "",
        "operationId": "Order_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/{id}/:attach": {
      "put": {
        "tags": ["order"],
        "summary": "Attach document to specified order ID.",
        "description": "",
        "operationId": "OrderAttach_attach",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderGroup": {
      "get": {
        "tags": ["order/orderGroup"],
        "summary": "[BETA] Find orderGroups corresponding with sent data.",
        "description": "",
        "operationId": "OrderOrderGroup_search",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["order/orderGroup"],
        "summary": "[Beta] Post orderGroup.",
        "description": "",
        "operationId": "OrderOrderGroup_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderGroup"
            }
          },
          {
            "name": "orderLineIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["order/orderGroup"],
        "summary": "[Beta] Put orderGroup.",
        "description": "",
        "operationId": "OrderOrderGroup_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderGroup"
            }
          },
          {
            "name": "OrderLineIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "removeExistingOrderLines",
            "in": "query",
            "description": "Should existing orderLines be removed from this orderGroup",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderGroup/{id}": {
      "get": {
        "tags": ["order/orderGroup"],
        "summary": "[Beta] Get orderGroup by ID. A orderGroup is a way to group orderLines, and add comments and subtotals",
        "description": "",
        "operationId": "OrderOrderGroup_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["order/orderGroup"],
        "summary": "[Beta] Delete orderGroup by ID.",
        "description": "",
        "operationId": "OrderOrderGroup_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline": {
      "post": {
        "tags": ["order/orderline"],
        "summary": "Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "OrderOrderline_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/list": {
      "post": {
        "tags": ["order/orderline"],
        "summary": "Create multiple order lines.",
        "description": "",
        "operationId": "OrderOrderlineList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/order/orderline/{id}": {
      "get": {
        "tags": ["order/orderline"],
        "summary": "Get order line by ID.",
        "description": "",
        "operationId": "OrderOrderline_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["order/orderline"],
        "summary": "[BETA] Put order line",
        "description": "",
        "operationId": "OrderOrderline_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["order/orderline"],
        "summary": "[BETA] Delete order line by ID.",
        "description": "",
        "operationId": "OrderOrderline_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external/{id}": {
      "get": {
        "tags": ["product/external"],
        "summary": "[BETA] Get external product by ID.",
        "description": "",
        "operationId": "ProductExternal_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/external": {
      "get": {
        "tags": ["product/external"],
        "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
        "description": "",
        "operationId": "ProductExternal_search",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "wholesaler",
            "in": "query",
            "description": "Wholesaler",
            "required": false,
            "type": "string",
            "enum": [
              "AHLSELL",
              "BROEDRENE_DAHL",
              "ELEKTROSKANDIA",
              "HEIDENREICH",
              "ONNINEN",
              "OTRA",
              "SOLAR",
              "BERGAARD_AMUNDSEN",
              "BERGAARD_AMUNDSEN_STAVANGER",
              "SORLANDET_ELEKTRO",
              "ETMAN_DISTRIBUSJON",
              "ETM_OST",
              "CENIKA",
              "EP_ENGROS",
              "BETEK",
              "DGROUP",
              "FAGERHULT",
              "GLAMOX",
              "SCHNEIDER",
              "STOKKAN",
              "WURTH",
              "ELEKTROIMPORTOEREN",
              "THERMOFLOOR",
              "LYSKOMPONENTER",
              "NORDESIGN"
            ]
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
            "required": false,
            "type": "string"
          },
          {
            "name": "elNumber",
            "in": "query",
            "description": "List of valid el numbers",
            "required": false,
            "type": "string"
          },
          {
            "name": "nrfNumber",
            "in": "query",
            "description": "List of valid nrf numbers",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product": {
      "get": {
        "tags": ["product"],
        "summary": "Find products corresponding with sent data.",
        "description": "",
        "operationId": "Product_search",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "DEPRECATED. List of product numbers (Integer only)",
            "required": false,
            "type": "string"
          },
          {
            "name": "productNumber",
            "in": "query",
            "description": "List of valid product numbers",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "ean",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isStockItem",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isSupplierProduct",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "productUnitId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "costExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "costExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceExcludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceExcludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceIncludingVatCurrencyFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "number"
          },
          {
            "name": "priceIncludingVatCurrencyTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "number"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["product"],
        "summary": "Create new product.",
        "description": "",
        "operationId": "Product_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/list": {
      "post": {
        "tags": ["product"],
        "summary": "[BETA] Add multiple products.",
        "description": "",
        "operationId": "ProductList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product"],
        "summary": "[BETA] Update a list of products.",
        "description": "",
        "operationId": "ProductList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/{id}": {
      "get": {
        "tags": ["product"],
        "summary": "Get product by ID.",
        "description": "",
        "operationId": "Product_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product"],
        "summary": "Update product.",
        "description": "",
        "operationId": "Product_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product"],
        "summary": "[BETA] Delete product.",
        "description": "",
        "operationId": "Product_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/inventoryLocation": {
      "get": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Find inventory locations by product ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocation_search",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isMainLocation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Create new product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductInventoryLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/inventoryLocation/list": {
      "post": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Add multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocationList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductInventoryLocation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Update multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocationList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductInventoryLocation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/inventoryLocation/{id}": {
      "get": {
        "tags": ["product/inventoryLocation"],
        "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Update product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocation_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductInventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/inventoryLocation"],
        "summary": "[BETA] Delete product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductInventoryLocation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/logisticsSettings": {
      "get": {
        "tags": ["product/logisticsSettings"],
        "summary": "[BETA] Get logistics settings of logged in company.",
        "description": "",
        "operationId": "ProductLogisticsSettings_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLogisticsSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/logisticsSettings"],
        "summary": "[BETA] Update logistics settings of logged in company.",
        "description": "",
        "operationId": "ProductLogisticsSettings_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogisticsSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLogisticsSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group": {
      "get": {
        "tags": ["product/group"],
        "summary": "[BETA] Find product group with sent data",
        "description": "",
        "operationId": "ProductGroup_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["product/group"],
        "summary": "[BETA] Create new product group.",
        "description": "",
        "operationId": "ProductGroup_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group/list": {
      "post": {
        "tags": ["product/group"],
        "summary": "[BETA] Add multiple products groups.",
        "description": "",
        "operationId": "ProductGroupList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/group"],
        "summary": "[BETA] Update a list of product groups.",
        "description": "",
        "operationId": "ProductGroupList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroup"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/group"],
        "summary": "[BETA] Delete multiple product groups.",
        "description": "",
        "operationId": "ProductGroupList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/group/{id}": {
      "get": {
        "tags": ["product/group"],
        "summary": "[BETA] Find product group by ID.",
        "description": "",
        "operationId": "ProductGroup_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/group"],
        "summary": "[BETA] Update product group.",
        "description": "",
        "operationId": "ProductGroup_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/group"],
        "summary": "[BETA] Delete product group.",
        "description": "",
        "operationId": "ProductGroup_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation": {
      "get": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Find product group relation with sent data.",
        "description": "",
        "operationId": "ProductGroupRelation_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "productGroupId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Create new product group relation.",
        "description": "",
        "operationId": "ProductGroupRelation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroupRelation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation/list": {
      "post": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Add multiple products group relations.",
        "description": "",
        "operationId": "ProductGroupRelationList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductGroupRelation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Delete multiple product group relations.",
        "description": "",
        "operationId": "ProductGroupRelationList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/groupRelation/{id}": {
      "get": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Find product group relation by ID.",
        "description": "",
        "operationId": "ProductGroupRelation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/groupRelation"],
        "summary": "[BETA] Delete product group relation.",
        "description": "",
        "operationId": "ProductGroupRelation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/productPrice": {
      "get": {
        "tags": ["product/productPrice"],
        "summary": "[BETA] Find prices for a product. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "ProductProductPrice_search",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductPrice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit": {
      "get": {
        "tags": ["product/unit"],
        "summary": "Find product units corresponding with sent data.",
        "description": "",
        "operationId": "ProductUnit_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Names",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameShort",
            "in": "query",
            "description": "Short names",
            "required": false,
            "type": "string"
          },
          {
            "name": "commonCode",
            "in": "query",
            "description": "Common codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["product/unit"],
        "summary": "[BETA] Create new product unit.",
        "description": "",
        "operationId": "ProductUnit_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductUnit"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/list": {
      "post": {
        "tags": ["product/unit"],
        "summary": "[BETA] Create multiple product units.",
        "description": "",
        "operationId": "ProductUnitList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductUnit"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/unit"],
        "summary": "[BETA] Update list of product units.",
        "description": "",
        "operationId": "ProductUnitList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductUnit"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/{id}": {
      "get": {
        "tags": ["product/unit"],
        "summary": "Get product unit by ID.",
        "description": "",
        "operationId": "ProductUnit_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["product/unit"],
        "summary": "[BETA] Update product unit.",
        "description": "",
        "operationId": "ProductUnit_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["product/unit"],
        "summary": "[BETA] Delete product unit by ID.",
        "description": "",
        "operationId": "ProductUnit_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/master/{id}": {
      "get": {
        "tags": ["product/unit/master"],
        "summary": "[BETA] Get product unit master by ID.",
        "description": "",
        "operationId": "ProductUnitMaster_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnitMaster"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/product/unit/master": {
      "get": {
        "tags": ["product/unit/master"],
        "summary": "[BETA] Find product units master corresponding with sent data.",
        "description": "",
        "operationId": "ProductUnitMaster_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Names",
            "required": false,
            "type": "string"
          },
          {
            "name": "nameShort",
            "in": "query",
            "description": "Short names",
            "required": false,
            "type": "string"
          },
          {
            "name": "commonCode",
            "in": "query",
            "description": "Common codes",
            "required": false,
            "type": "string"
          },
          {
            "name": "peppolName",
            "in": "query",
            "description": "Peppol names",
            "required": false,
            "type": "string"
          },
          {
            "name": "peppolSymbol",
            "in": "query",
            "description": "Peppol symbols",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Inactive units",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 2100,
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnitMaster"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project": {
      "get": {
        "tags": ["project"],
        "summary": "Find projects corresponding with sent data.",
        "description": "",
        "operationId": "Project_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isOffer",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeInProjectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalAccountsNumber",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["project"],
        "summary": "[BETA] Add new project.",
        "description": "",
        "operationId": "Project_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project"],
        "summary": "[BETA] Delete multiple projects.",
        "description": "",
        "operationId": "Project_deleteList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/list": {
      "post": {
        "tags": ["project"],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        "description": "",
        "operationId": "ProjectList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project"],
        "summary": "[BETA] Update multiple projects.",
        "description": "",
        "operationId": "ProjectList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project"],
        "summary": "[BETA] Delete projects.",
        "description": "",
        "operationId": "ProjectList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/>forTimeSheet": {
      "get": {
        "tags": ["project"],
        "summary": "Find projects applicable for time sheet registration on a specific day.",
        "description": "",
        "operationId": "ProjectForTimeSheet_getForTimeSheet",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/import": {
      "post": {
        "tags": ["project/import"],
        "summary": "Upload project import file.",
        "description": "",
        "operationId": "ProjectImport_importProjectStatement",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "fileFormat",
            "in": "query",
            "description": "File format",
            "required": true,
            "type": "string",
            "enum": ["XLS", "CSV"]
          },
          {
            "name": "encoding",
            "in": "query",
            "description": "Encoding",
            "required": false,
            "type": "string"
          },
          {
            "name": "delimiter",
            "in": "query",
            "description": "Delimiter",
            "required": false,
            "type": "string"
          },
          {
            "name": "ignoreFirstRow",
            "in": "query",
            "description": "Ignore first row",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The project import file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}": {
      "get": {
        "tags": ["project"],
        "summary": "Find project by ID.",
        "description": "",
        "operationId": "Project_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project"],
        "summary": "[BETA] Update project.",
        "description": "",
        "operationId": "Project_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project"],
        "summary": "[BETA] Delete project.",
        "description": "",
        "operationId": "Project_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category": {
      "get": {
        "tags": ["project/category"],
        "summary": "Find project categories corresponding with sent data.",
        "description": "",
        "operationId": "ProjectCategory_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["project/category"],
        "summary": "Add new project category.",
        "description": "",
        "operationId": "ProjectCategory_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/category/{id}": {
      "get": {
        "tags": ["project/category"],
        "summary": "Find project category by ID.",
        "description": "",
        "operationId": "ProjectCategory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/category"],
        "summary": "Update project category.",
        "description": "",
        "operationId": "ProjectCategory_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline": {
      "get": {
        "tags": ["project/orderline"],
        "summary": "[BETA] Find all order lines for project.",
        "description": "",
        "operationId": "ProjectOrderline_search",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["project/orderline"],
        "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
        "description": "",
        "operationId": "ProjectOrderline_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/list": {
      "post": {
        "tags": ["project/orderline"],
        "summary": "[BETA] Create multiple order lines.",
        "description": "",
        "operationId": "ProjectOrderlineList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectOrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/orderline/{id}": {
      "get": {
        "tags": ["project/orderline"],
        "summary": "[BETA] Get order line by ID.",
        "description": "",
        "operationId": "ProjectOrderline_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/orderline"],
        "summary": "[BETA] Update project orderline.",
        "description": "",
        "operationId": "ProjectOrderline_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/orderline"],
        "summary": "Delete order line by ID.",
        "description": "",
        "operationId": "ProjectOrderline_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant": {
      "post": {
        "tags": ["project/participant"],
        "summary": "[BETA] Add new project participant.",
        "description": "",
        "operationId": "ProjectParticipant_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/list": {
      "post": {
        "tags": ["project/participant"],
        "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
        "description": "",
        "operationId": "ProjectParticipantList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectParticipant"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/participant"],
        "summary": "[BETA] Delete project participants.",
        "description": "",
        "operationId": "ProjectParticipantList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/participant/{id}": {
      "get": {
        "tags": ["project/participant"],
        "summary": "[BETA] Find project participant by ID.",
        "description": "",
        "operationId": "ProjectParticipant_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/participant"],
        "summary": "[BETA] Update project participant.",
        "description": "",
        "operationId": "ProjectParticipant_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoicingReserve": {
      "get": {
        "tags": ["project/period"],
        "summary": "Find invoicing reserve by project period.",
        "description": "",
        "operationId": "ProjectPeriodInvoicingReserve_invoicingReserve",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoicingReserve"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/invoiced": {
      "get": {
        "tags": ["project/period"],
        "summary": "Find invoiced info by project period.",
        "description": "",
        "operationId": "ProjectPeriodInvoiced_invoiced",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoiced"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/overallStatus": {
      "get": {
        "tags": ["project/period"],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "ProjectPeriodOverallStatus_overallStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodOverallStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/monthlyStatus": {
      "get": {
        "tags": ["project/period"],
        "summary": "Find overall status by project period.",
        "description": "",
        "operationId": "ProjectPeriodMonthlyStatus_monthlyStatus",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectPeriodMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/{id}/period/hourlistReport": {
      "get": {
        "tags": ["project/period"],
        "summary": "Find hourlist report by project period.",
        "description": "",
        "operationId": "ProjectPeriodHourlistReport_hourlistReport",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodHourlyReport"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity": {
      "post": {
        "tags": ["project/projectActivity"],
        "summary": "Add project activity.",
        "description": "",
        "operationId": "ProjectProjectActivity_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectActivity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/list": {
      "delete": {
        "tags": ["project/projectActivity"],
        "summary": "Delete project activities",
        "description": "",
        "operationId": "ProjectProjectActivityList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/projectActivity/{id}": {
      "get": {
        "tags": ["project/projectActivity"],
        "summary": "Find project activity by id",
        "description": "",
        "operationId": "ProjectProjectActivity_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/projectActivity"],
        "summary": "Delete project activity",
        "description": "",
        "operationId": "ProjectProjectActivity_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm/{id}": {
      "get": {
        "tags": ["project/controlForm"],
        "summary": "[BETA] Get project control form by ID.",
        "description": "",
        "operationId": "ProjectControlForm_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlForm": {
      "get": {
        "tags": ["project/controlForm"],
        "summary": "[BETA] Get project control forms by project ID.",
        "description": "",
        "operationId": "ProjectControlForm_search",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlFormType/{id}": {
      "get": {
        "tags": ["project/controlFormType"],
        "summary": "[BETA] Get project control form type by ID.",
        "description": "",
        "operationId": "ProjectControlFormType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectControlFormType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/controlFormType": {
      "get": {
        "tags": ["project/controlFormType"],
        "summary": "[BETA] Get project control form types",
        "description": "",
        "operationId": "ProjectControlFormType_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectControlFormType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates": {
      "get": {
        "tags": ["project/hourlyRates"],
        "summary": "Find project hourly rates corresponding with sent data.",
        "description": "",
        "operationId": "ProjectHourlyRates_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "TYPE_PREDEFINED_HOURLY_RATES",
              "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
              "TYPE_FIXED_HOURLY_RATE"
            ]
          },
          {
            "name": "startDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "showInProjectOrder",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["project/hourlyRates"],
        "summary": "Create a project hourly rate. ",
        "description": "",
        "operationId": "ProjectHourlyRates_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/list": {
      "post": {
        "tags": ["project/hourlyRates"],
        "summary": "Create multiple project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/hourlyRates"],
        "summary": "Update multiple project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/hourlyRates"],
        "summary": "Delete project hourly rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/{id}": {
      "get": {
        "tags": ["project/hourlyRates"],
        "summary": "Find project hourly rate by ID.",
        "description": "",
        "operationId": "ProjectHourlyRates_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/hourlyRates"],
        "summary": "Update a project hourly rate.",
        "description": "",
        "operationId": "ProjectHourlyRates_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/hourlyRates"],
        "summary": "Delete Project Hourly Rate ",
        "description": "",
        "operationId": "ProjectHourlyRates_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates": {
      "get": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Find project specific rates corresponding with sent data.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectHourlyRateId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Create new project specific rate. ",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/list": {
      "post": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Create multiple new project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Update multiple project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Delete project specific rates.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/{id}": {
      "get": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Find project specific rate by ID.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Update a project specific rate.",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["project/hourlyRates/projectSpecificRates"],
        "summary": "Delete project specific rate ",
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/settings": {
      "get": {
        "tags": ["project/settings"],
        "summary": "Get project settings of logged in company.",
        "description": "",
        "operationId": "ProjectSettings_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["project/settings"],
        "summary": "Update project settings for company",
        "description": "",
        "operationId": "ProjectSettings_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/task": {
      "get": {
        "tags": ["project/task"],
        "summary": "Find all tasks for project.",
        "description": "",
        "operationId": "ProjectTask_search",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTask"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/project/template/{id}": {
      "get": {
        "tags": ["project/template"],
        "summary": "Get project template by ID.",
        "description": "",
        "operationId": "ProjectTemplate_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectTemplate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect": {
      "get": {
        "tags": ["crm/prospect"],
        "summary": "Find prospects corresponding with sent data.",
        "description": "",
        "operationId": "CrmProspect_search",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "createdDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "salesEmployeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "closedReason",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "closedDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "closedDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitor",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "prospectType",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectOfferId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/crm/prospect/{id}": {
      "get": {
        "tags": ["crm/prospect"],
        "summary": "Get prospect by ID.",
        "description": "",
        "operationId": "CrmProspect_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/pickupPoint/{id}": {
      "get": {
        "tags": ["pickupPoint"],
        "summary": "[BETA] Find pickup point by ID.",
        "description": "",
        "operationId": "PickupPoint_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPickupPoint"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/pickupPoint": {
      "get": {
        "tags": ["pickupPoint"],
        "summary": "[BETA] Search pickup points.",
        "description": "",
        "operationId": "PickupPoint_search",
        "parameters": [
          {
            "name": "supplierId",
            "in": "query",
            "description": "Valid ids.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "transportTypeId",
            "in": "query",
            "description": "Valid TransportType ids.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePickupPoint"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder": {
      "get": {
        "tags": ["purchaseOrder"],
        "summary": "[BETA] Find purchase orders with send data",
        "description": "",
        "operationId": "PurchaseOrder_search",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "deliveryDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "creationDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "creationDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isClosed",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "withDeviationOnly",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrder"],
        "summary": "[BETA] Creates a new purchase order",
        "description": "",
        "operationId": "PurchaseOrder_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}/attachment": {
      "post": {
        "tags": ["purchaseOrder"],
        "summary": "[BETA] Upload attachment to Purchase Order.",
        "description": "",
        "operationId": "PurchaseOrderAttachment_uploadAttachment",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}/:send": {
      "put": {
        "tags": ["purchaseOrder"],
        "summary": "[BETA] Send purchase order by id and sendType.",
        "description": "",
        "operationId": "PurchaseOrderSend_send",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sendType",
            "in": "query",
            "description": "Send type.DEFAULT will determine the send parameter based on the supplier type.If supplier is not wholesaler, receiverEmail from the PO will be used if it's specified.If receiverEmail empty it will take the vendor email.",
            "required": false,
            "type": "string",
            "default": "DEFAULT",
            "enum": ["DEFAULT", "EMAIL", "FTP"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}/:sendByEmail": {
      "put": {
        "tags": ["purchaseOrder"],
        "summary": "[BETA] Send purchase order by customisable email.",
        "description": "",
        "operationId": "PurchaseOrderSendByEmail_sendByEmail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Email address",
            "required": true,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Subject",
            "required": true,
            "type": "string"
          },
          {
            "name": "message",
            "in": "query",
            "description": "Message",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/{id}": {
      "get": {
        "tags": ["purchaseOrder"],
        "summary": " [BETA] Find purchase order by ID.",
        "description": "",
        "operationId": "PurchaseOrder_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder"],
        "summary": " [BETA] Update purchase order.",
        "description": "",
        "operationId": "PurchaseOrder_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder"],
        "summary": " [BETA] Delete purchase order.",
        "description": "",
        "operationId": "PurchaseOrder_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/transportType/{id}": {
      "get": {
        "tags": ["transportType"],
        "summary": " [BETA] Find transport type by ID.",
        "description": "",
        "operationId": "TransportType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTransportType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/transportType": {
      "get": {
        "tags": ["transportType"],
        "summary": " [BETA] Search transport type.",
        "description": "",
        "operationId": "TransportType_search",
        "parameters": [
          {
            "name": "supplierId",
            "in": "query",
            "description": "List of valid suppliers ids.",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTransportType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation": {
      "get": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Find handled deviations for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviation_search",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Register deviation on goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/list": {
      "post": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Register multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deviation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Update multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Deviation"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:approve": {
      "put": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Approve deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationApprove_approve",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:deliver": {
      "put": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Send deviations to approval. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationDeliver_deliver",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:undeliver": {
      "put": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Undeliver the deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviationUndeliver_undeliver",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/deviation/{id}": {
      "get": {
        "tags": ["purchaseOrder/deviation"],
        "summary": " [BETA] Get deviation by order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "Update deviation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviation_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/deviation"],
        "summary": "[BETA] Delete goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderDeviation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt": {
      "get": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_search",
        "parameters": [
          {
            "name": "receivedDateFrom",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "receivedDateTo",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": ["STATUS_OPEN", "STATUS_CONFIRMED"]
          },
          {
            "name": "withoutPurchase",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/list": {
      "post": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoodsReceipt"
              }
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
      "put": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptRegisterGoodsReceipt_registerGoodsReceipt",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "registrationDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:confirm": {
      "put": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptConfirm_confirm",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "createRestOrder",
            "in": "query",
            "description": "Create restorder if quantity received is less than ordered",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
      "put": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptReceiveAndConfirm_receiveAndConfirm",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Purchase Order ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "receivedDate",
            "in": "query",
            "description": "The approval date for the subscription.",
            "required": true,
            "type": "string"
          },
          {
            "name": "inventoryId",
            "in": "query",
            "description": "ID of inventory. Main inventory is set as default",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}": {
      "get": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Goods Receipt ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string",
            "default": "*"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/goodsReceipt"],
        "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine": {
      "get": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_search",
        "parameters": [
          {
            "name": "purchaseOrderId",
            "in": "query",
            "description": "Equals",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/list": {
      "post": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Update goods receipt lines on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Delete goods receipt lines by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_deleteList",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/{id}": {
      "get": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Update a goods receipt line on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Goods receipt Line ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/goodsReceiptLine"],
        "summary": "[BETA] Delete goods receipt line by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation": {
      "get": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Find purchase order relation to voucher with sent data. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderOutId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Create new relation between purchase order and a voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/list": {
      "post": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Create a new list of relations between purchase order and voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Delete multiple purchase order voucher relations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/{id}": {
      "get": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Find purchase order relation to voucher by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/purchaseOrderIncomingInvoiceRelation"],
        "summary": "[BETA] Delete purchase order voucher relation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline": {
      "post": {
        "tags": ["purchaseOrder/orderline"],
        "summary": " [BETA] Creates purchase order line.",
        "description": "",
        "operationId": "PurchaseOrderOrderline_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/purchaseOrder/orderline/{id}": {
      "get": {
        "tags": ["purchaseOrder/orderline"],
        "summary": " [BETA] Find purchase order line by ID.",
        "description": "",
        "operationId": "PurchaseOrderOrderline_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["purchaseOrder/orderline"],
        "summary": " [BETA] Updates purchase order line",
        "description": "",
        "operationId": "PurchaseOrderOrderline_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["purchaseOrder/orderline"],
        "summary": " [BETA] Delete purchase order line.",
        "description": "",
        "operationId": "PurchaseOrderOrderline_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder/{id}": {
      "get": {
        "tags": ["reminder"],
        "summary": "Get reminder by ID.",
        "description": "",
        "operationId": "Reminder_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/reminder": {
      "get": {
        "tags": ["reminder"],
        "summary": "Find reminders corresponding with sent data.",
        "description": "",
        "operationId": "Reminder_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "termOfPaymentTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "termOfPaymentFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/resultbudget/company": {
      "get": {
        "tags": ["resultbudget"],
        "summary": "Get result budget for company",
        "description": "",
        "operationId": "ResultbudgetCompany_getCompanyResultBudget",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to current year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/resultbudget/department/{id}": {
      "get": {
        "tags": ["resultbudget"],
        "summary": "Get result budget associated with a departmentId",
        "description": "",
        "operationId": "ResultbudgetDepartment_getDepartmentResultBudget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to current year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/resultbudget/project/{id}": {
      "get": {
        "tags": ["resultbudget"],
        "summary": "Get result budget associated with a projectId",
        "description": "",
        "operationId": "ResultbudgetProject_getProjectResultBudget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to current year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/resultbudget/product/{id}": {
      "get": {
        "tags": ["resultbudget"],
        "summary": "Get result budget associated with a productId",
        "description": "",
        "operationId": "ResultbudgetProduct_getProductResultBudget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to current year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/resultbudget/employee/{id}": {
      "get": {
        "tags": ["resultbudget"],
        "summary": "Get result budget associated with an employeeId",
        "description": "",
        "operationId": "ResultbudgetEmployee_getEmployeeResultBudget",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to current year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type": {
      "get": {
        "tags": ["salary/type"],
        "summary": "[BETA] Find salary type corresponding with sent data.",
        "description": "",
        "operationId": "SalaryType_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "number",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "showInTimesheet",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/type/{id}": {
      "get": {
        "tags": ["salary/type"],
        "summary": "[BETA] Find salary type by ID.",
        "description": "",
        "operationId": "SalaryType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation/pdf": {
      "get": {
        "tags": ["salary/compilation"],
        "summary": "[BETA] Find salary compilation (PDF document) by employee.",
        "description": "",
        "operationId": "SalaryCompilationPdf_downloadPdf",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/compilation": {
      "get": {
        "tags": ["salary/compilation"],
        "summary": "[BETA] Find salary compilation by employee.",
        "description": "",
        "operationId": "SalaryCompilation_get",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "year",
            "in": "query",
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryCompilation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip": {
      "get": {
        "tags": ["salary/payslip"],
        "summary": "[BETA] Find payslips corresponding with sent data.",
        "description": "",
        "operationId": "SalaryPayslip_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "wageTransactionId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "yearFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "yearTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "monthTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "voucherDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}/pdf": {
      "get": {
        "tags": ["salary/payslip"],
        "summary": "[BETA] Find payslip (PDF document) by ID.",
        "description": "",
        "operationId": "SalaryPayslipPdf_downloadPdf",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/payslip/{id}": {
      "get": {
        "tags": ["salary/payslip"],
        "summary": "[BETA] Find payslip by ID.",
        "description": "",
        "operationId": "SalaryPayslip_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings": {
      "get": {
        "tags": ["salary/settings"],
        "summary": "[BETA] Get salary settings of logged in company.",
        "description": "",
        "operationId": "SalarySettings_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["salary/settings"],
        "summary": "[BETA] Update settings of logged in company.",
        "description": "",
        "operationId": "SalarySettings_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalarySettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday": {
      "get": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] Find holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHoliday_search",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] Create a holiday setting of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHoliday_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/list": {
      "post": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] Create multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] update multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] delete multiple holiday settings of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHolidayList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/holiday/{id}": {
      "put": {
        "tags": ["salary/settings/holiday"],
        "summary": "[BETA] update a holiday setting of current logged in company.",
        "description": "",
        "operationId": "SalarySettingsHoliday_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/pensionScheme": {
      "get": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Find pension schemes.",
        "description": "",
        "operationId": "SalarySettingsPensionScheme_search",
        "parameters": [
          {
            "name": "number",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Create a Pension Scheme.",
        "description": "",
        "operationId": "SalarySettingsPensionScheme_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PensionScheme"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/pensionScheme/list": {
      "post": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Create multiple Pension Schemes.",
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PensionScheme"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] update multiple Pension Schemes.",
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PensionScheme"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] delete multiple Pension Schemes.",
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_deleteByIds",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/settings/pensionScheme/{id}": {
      "get": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Get Pension Scheme for a specific ID",
        "description": "",
        "operationId": "SalarySettingsPensionScheme_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Update a Pension Scheme",
        "description": "",
        "operationId": "SalarySettingsPensionScheme_put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PensionScheme"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["salary/settings/pensionScheme"],
        "summary": "[BETA] Delete a Pension Scheme",
        "description": "",
        "operationId": "SalarySettingsPensionScheme_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction": {
      "post": {
        "tags": ["salary/transaction"],
        "summary": "[BETA] Create a new salary transaction.",
        "description": "",
        "operationId": "SalaryTransaction_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalaryTransaction"
            }
          },
          {
            "name": "generateTaxDeduction",
            "in": "query",
            "description": "Generate tax deduction",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/salary/transaction/{id}": {
      "get": {
        "tags": ["salary/transaction"],
        "summary": "[BETA] Find salary transaction by ID.",
        "description": "",
        "operationId": "SalaryTransaction_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["salary/transaction"],
        "summary": "[BETA] Delete salary transaction by ID.",
        "description": "",
        "operationId": "SalaryTransaction_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier": {
      "get": {
        "tags": ["supplier"],
        "summary": "Find suppliers corresponding with sent data.",
        "description": "",
        "operationId": "Supplier_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierNumber",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceEmail",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "accountManagerId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "changedSince",
            "in": "query",
            "description": "Only return elements that have changed since this date and time",
            "required": false,
            "type": "string"
          },
          {
            "name": "isWholesaler",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showProducts",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["supplier"],
        "summary": "Create supplier. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "Supplier_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/list": {
      "post": {
        "tags": ["supplier"],
        "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
        "description": "",
        "operationId": "SupplierList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["supplier"],
        "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
        "description": "",
        "operationId": "SupplierList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing updates to object. Should have ID and version set.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplier/{id}": {
      "get": {
        "tags": ["supplier"],
        "summary": "Get supplier by ID.",
        "description": "",
        "operationId": "Supplier_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["supplier"],
        "summary": "Update supplier. ",
        "description": "",
        "operationId": "Supplier_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["supplier"],
        "summary": "[BETA] Delete supplier by ID",
        "description": "",
        "operationId": "Supplier_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice": {
      "get": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Find supplierInvoices corresponding with sent data.",
        "description": "",
        "operationId": "SupplierInvoice_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "invoiceDateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kid",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "supplierId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:approve": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Approve supplier invoice.",
        "description": "",
        "operationId": "SupplierInvoiceApprove_approve",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "ID of the elements",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/pdf": {
      "get": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Get supplierInvoice document by invoice ID.",
        "description": "",
        "operationId": "SupplierInvoicePdf_downloadPdf",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID from which document is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/forApproval": {
      "get": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Get supplierInvoices for approval",
        "description": "",
        "operationId": "SupplierInvoiceForApproval_getApprovalInvoices",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Search for department, employee, project and more",
            "required": false,
            "type": "string"
          },
          {
            "name": "showAll",
            "in": "query",
            "description": "Show all or just your own",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Default is logged in employee",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/voucher/{id}/postings": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Put debit postings.",
        "description": "",
        "operationId": "SupplierInvoiceVoucherPostings_putPostings",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Voucher id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Postings",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderLinePostingDTO"
              }
            }
          },
          {
            "name": "sendToLedger",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/:approve": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Approve supplier invoices.",
        "description": "",
        "operationId": "SupplierInvoiceApprove_approveMany",
        "parameters": [
          {
            "name": "invoiceIds",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/:addRecipient": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Add recipient.",
        "description": "",
        "operationId": "SupplierInvoiceAddRecipient_addRecipientToMany",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "invoiceIds",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:addRecipient": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Add recipient to supplier invoices.",
        "description": "",
        "operationId": "SupplierInvoiceAddRecipient_addRecipient",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of the elements",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/:reject": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] reject supplier invoices.",
        "description": "",
        "operationId": "SupplierInvoiceReject_rejectMany",
        "parameters": [
          {
            "name": "comment",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "invoiceIds",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:addPayment": {
      "post": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Register payment, paymentType == 0 finds the last paymentType for this vendor",
        "description": "",
        "operationId": "SupplierInvoiceAddPayment_addPayment",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "paymentType",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "kidOrReceiverReference",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "bban",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useDefaultPaymentType",
            "in": "query",
            "description": "Set paymentType to last type for vendor, autopay, nets or first available other type",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "partialPayment",
            "in": "query",
            "description": "Set to true to allow multiple payments registered.",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:reject": {
      "put": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] reject supplier invoice.",
        "description": "",
        "operationId": "SupplierInvoiceReject_reject",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Invoice ID.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "comment",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/supplierInvoice/{id}": {
      "get": {
        "tags": ["supplierInvoice"],
        "summary": "[BETA] Get supplierInvoice by ID.",
        "description": "",
        "operationId": "SupplierInvoice_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/voucherApprovalListElement/{id}": {
      "get": {
        "tags": ["voucherApprovalListElement"],
        "summary": "[BETA] Get by ID.",
        "description": "",
        "operationId": "VoucherApprovalListElement_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherApprovalListElement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry": {
      "get": {
        "tags": ["timesheet/entry"],
        "summary": "Find timesheet entry corresponding with sent data.",
        "description": "",
        "operationId": "TimesheetEntry_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": true,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimesheetEntrySearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["timesheet/entry"],
        "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
        "description": "",
        "operationId": "TimesheetEntry_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/list": {
      "post": {
        "tags": ["timesheet/entry"],
        "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
        "description": "",
        "operationId": "TimesheetEntryList_postList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of timesheet entry objects",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["timesheet/entry"],
        "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
        "description": "",
        "operationId": "TimesheetEntryList_putList",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of timesheet entry objects to update",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentProjects": {
      "get": {
        "tags": ["timesheet/entry"],
        "summary": "Find projects with recent activities (timesheet entry registered).",
        "description": "",
        "operationId": "TimesheetEntryRecentProjects_getRecentProjects",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee with recent project hours Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>recentActivities": {
      "get": {
        "tags": ["timesheet/entry"],
        "summary": "Find recently used timesheet activities.",
        "description": "",
        "operationId": "TimesheetEntryRecentActivities_getRecentActivities",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find activities for. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "ID of project to find activities for",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/>totalHours": {
      "get": {
        "tags": ["timesheet/entry"],
        "summary": "Find total hours registered on an employee in a specific period.",
        "description": "",
        "operationId": "TimesheetEntryTotalHours_getTotalHours",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "ID of employee to find hours for. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBigDecimal"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/entry/{id}": {
      "get": {
        "tags": ["timesheet/entry"],
        "summary": "Find timesheet entry by ID.",
        "description": "",
        "operationId": "TimesheetEntry_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["timesheet/entry"],
        "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
        "description": "",
        "operationId": "TimesheetEntry_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["timesheet/entry"],
        "summary": "Delete timesheet entry by ID.",
        "description": "",
        "operationId": "TimesheetEntry_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:approve": {
      "put": {
        "tags": ["timesheet/month"],
        "summary": "approve month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthApprove_approve",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          },
          {
            "name": "approvedUntilDate",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.. Defaults to end of month",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:unapprove": {
      "put": {
        "tags": ["timesheet/month"],
        "summary": "unapprove month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthUnapprove_unapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:reopen": {
      "put": {
        "tags": ["timesheet/month"],
        "summary": "reopen month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthReopen_reopen",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/byMonthNumber": {
      "get": {
        "tags": ["timesheet/month"],
        "summary": "Find monthly status for given month.",
        "description": "",
        "operationId": "TimesheetMonthByMonthNumber_getByMonthNumber",
        "parameters": [
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": true,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/:complete": {
      "put": {
        "tags": ["timesheet/month"],
        "summary": "complete month(s).  If id is provided the other args are ignored",
        "description": "",
        "operationId": "TimesheetMonthComplete_complete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs. Defaults to ID of token owner.",
            "required": false,
            "type": "string"
          },
          {
            "name": "monthYear",
            "in": "query",
            "description": "2020-01",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/month/{id}": {
      "get": {
        "tags": ["timesheet/month"],
        "summary": "Find monthly status entry by ID.",
        "description": "",
        "operationId": "TimesheetMonth_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification": {
      "get": {
        "tags": ["timesheet/salaryTypeSpecification"],
        "summary": "[BETA] Get list of timesheet SalaryType Specifications",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_search",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["timesheet/salaryTypeSpecification"],
        "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_post",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/salaryTypeSpecification/{id}": {
      "get": {
        "tags": ["timesheet/salaryTypeSpecification"],
        "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["timesheet/salaryTypeSpecification"],
        "summary": "[BETA] Update a timesheet SalaryType Specification",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_put",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["timesheet/salaryTypeSpecification"],
        "summary": "[BETA] Delete a timesheet SalaryType Specification",
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/settings": {
      "get": {
        "tags": ["timesheet/settings"],
        "summary": "[BETA] Get timesheet settings of logged in company.",
        "description": "",
        "operationId": "TimesheetSettings_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock": {
      "get": {
        "tags": ["timesheet/timeClock"],
        "summary": "Find time clock entries corresponding with sent data.",
        "description": "",
        "operationId": "TimesheetTimeClock_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "hourId",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isRunning",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/present": {
      "get": {
        "tags": ["timesheet/timeClock"],
        "summary": "Find a user’s present running time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockPresent_getPresent",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}": {
      "get": {
        "tags": ["timesheet/timeClock"],
        "summary": "Find time clock entry by ID.",
        "description": "",
        "operationId": "TimesheetTimeClock_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["timesheet/timeClock"],
        "summary": "Update time clock by ID.",
        "description": "",
        "operationId": "TimesheetTimeClock_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimeClock"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/:start": {
      "put": {
        "tags": ["timesheet/timeClock"],
        "summary": "Start time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockStart_start",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Employee ID. Defaults to ID of token owner.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Project ID",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "activityId",
            "in": "query",
            "description": "Activity ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Optional. Default is today’s date",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/timeClock/{id}/:stop": {
      "put": {
        "tags": ["timesheet/timeClock"],
        "summary": "Stop time clock.",
        "description": "",
        "operationId": "TimesheetTimeClockStop_stop",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Number of current version",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:approve": {
      "put": {
        "tags": ["timesheet/week"],
        "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekApprove_approve",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:unapprove": {
      "put": {
        "tags": ["timesheet/week"],
        "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekUnapprove_unapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:reopen": {
      "put": {
        "tags": ["timesheet/week"],
        "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekReopen_reopen",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week/:complete": {
      "put": {
        "tags": ["timesheet/week"],
        "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
        "description": "",
        "operationId": "TimesheetWeekComplete_complete",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/timesheet/week": {
      "get": {
        "tags": ["timesheet/week"],
        "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
        "description": "",
        "operationId": "TimesheetWeek_search",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "weekYear",
            "in": "query",
            "description": "ISO-8601 week-year",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          },
          {
            "name": "approvedBy",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance": {
      "get": {
        "tags": ["travelExpense/accommodationAllowance"],
        "summary": "[BETA] Find accommodation allowances corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_search",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense/accommodationAllowance"],
        "summary": "[BETA] Create accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/accommodationAllowance/{id}": {
      "get": {
        "tags": ["travelExpense/accommodationAllowance"],
        "summary": "[BETA] Get travel accommodation allowance by ID.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense/accommodationAllowance"],
        "summary": "[BETA] Update accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense/accommodationAllowance"],
        "summary": "[BETA] Delete accommodation allowance.",
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost": {
      "get": {
        "tags": ["travelExpense/cost"],
        "summary": "[BETA] Find costs corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseCost_search",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "vatTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "currencyId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense/cost"],
        "summary": "[BETA] Create cost.",
        "description": "",
        "operationId": "TravelExpenseCost_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/cost/{id}": {
      "get": {
        "tags": ["travelExpense/cost"],
        "summary": "[BETA] Get cost by ID.",
        "description": "",
        "operationId": "TravelExpenseCost_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense/cost"],
        "summary": "[BETA] Update cost.",
        "description": "",
        "operationId": "TravelExpenseCost_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense/cost"],
        "summary": "[BETA] Delete cost.",
        "description": "",
        "operationId": "TravelExpenseCost_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance": {
      "get": {
        "tags": ["travelExpense/mileageAllowance"],
        "summary": "[BETA] Find mileage allowances corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_search",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "kmFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "kmTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "departureLocation",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "destination",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "isCompanyCar",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense/mileageAllowance"],
        "summary": "[BETA] Create mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/mileageAllowance/{id}": {
      "get": {
        "tags": ["travelExpense/mileageAllowance"],
        "summary": "[BETA] Get mileage allowance by ID.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense/mileageAllowance"],
        "summary": "[BETA] Update mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense/mileageAllowance"],
        "summary": "[BETA] Delete mileage allowance.",
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger": {
      "get": {
        "tags": ["travelExpense/passenger"],
        "summary": "[BETA] Find passengers corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePassenger_search",
        "parameters": [
          {
            "name": "mileageAllowance",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense/passenger"],
        "summary": "[BETA] Create passenger.",
        "description": "",
        "operationId": "TravelExpensePassenger_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/passenger/{id}": {
      "get": {
        "tags": ["travelExpense/passenger"],
        "summary": "[BETA] Get passenger by ID.",
        "description": "",
        "operationId": "TravelExpensePassenger_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense/passenger"],
        "summary": "[BETA] Update passenger.",
        "description": "",
        "operationId": "TravelExpensePassenger_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense/passenger"],
        "summary": "[BETA] Delete passenger.",
        "description": "",
        "operationId": "TravelExpensePassenger_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation": {
      "get": {
        "tags": ["travelExpense/perDiemCompensation"],
        "summary": "[BETA] Find per diem compensations corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_search",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTypeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "overnightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "NONE",
              "HOTEL",
              "BOARDING_HOUSE_WITHOUT_COOKING",
              "BOARDING_HOUSE_WITH_COOKING"
            ]
          },
          {
            "name": "countFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "countTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "rateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "rateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "amountTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDeductionForBreakfast",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isLunchDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isDinnerDeduction",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense/perDiemCompensation"],
        "summary": "[BETA] Create per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/perDiemCompensation/{id}": {
      "get": {
        "tags": ["travelExpense/perDiemCompensation"],
        "summary": "[BETA] Get per diem compensation by ID.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense/perDiemCompensation"],
        "summary": "[BETA] Update per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense/perDiemCompensation"],
        "summary": "[BETA] Delete per diem compensation.",
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense": {
      "get": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Find travel expenses corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpense_search",
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "projectManagerId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "departureDateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "returnDateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "category",
            "required": false,
            "type": "string",
            "default": "ALL",
            "enum": ["ALL", "OPEN", "APPROVED", "SALARY_PAID", "DELIVERED"]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Create travel expense.",
        "description": "",
        "operationId": "TravelExpense_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:approve": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Approve travel expenses.",
        "description": "",
        "operationId": "TravelExpenseApprove_approve",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment": {
      "get": {
        "tags": ["travelExpense"],
        "summary": "Get attachment by travel expense ID.",
        "description": "",
        "operationId": "TravelExpenseAttachment_downloadAttachment",
        "produces": ["application/octet-stream"],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID from which PDF is downloaded.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["travelExpense"],
        "summary": "Upload attachment to travel expense.",
        "description": "",
        "operationId": "TravelExpenseAttachment_uploadAttachment",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "The file",
            "required": true,
            "type": "file"
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Delete attachment.",
        "description": "",
        "operationId": "TravelExpenseAttachment_deleteAttachment",
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "ID of attachment containing the attachment to delete.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "version",
            "in": "query",
            "description": "Version of voucher containing the attachment to delete.",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "format": "int32"
          },
          {
            "name": "sendToInbox",
            "in": "query",
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "split",
            "in": "query",
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:deliver": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Deliver travel expenses.",
        "description": "",
        "operationId": "TravelExpenseDeliver_deliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:undeliver": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Undeliver travel expenses.",
        "description": "",
        "operationId": "TravelExpenseUndeliver_undeliver",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:unapprove": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Unapprove travel expenses.",
        "description": "",
        "operationId": "TravelExpenseUnapprove_unapprove",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:createVouchers": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Create vouchers",
        "description": "",
        "operationId": "TravelExpenseCreateVouchers_createVouchers",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "ID of the elements",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "yyyy-MM-dd. Defaults to today.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment/list": {
      "post": {
        "tags": ["travelExpense"],
        "summary": "Upload multiple attachments to travel expense.",
        "description": "",
        "operationId": "TravelExpenseAttachmentList_uploadAttachments",
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "name": "travelExpenseId",
            "in": "path",
            "description": "Travel Expense ID to upload attachment to.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Multipart files",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormDataMultiPart"
            }
          },
          {
            "name": "createNewCost",
            "in": "query",
            "description": "Create new cost row when you add the attachment",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/{id}": {
      "get": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Get travel expense by ID.",
        "description": "",
        "operationId": "TravelExpense_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Update travel expense.",
        "description": "",
        "operationId": "TravelExpense_put",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Partial object describing what should be updated",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "delete": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Delete travel expense.",
        "description": "",
        "operationId": "TravelExpense_delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/:copy": {
      "put": {
        "tags": ["travelExpense"],
        "summary": "[BETA] Copy travel expense.",
        "description": "",
        "operationId": "TravelExpenseCopy_copy",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate": {
      "get": {
        "tags": ["travelExpense/rate"],
        "summary": "[BETA] Find rates corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRate_search",
        "parameters": [
          {
            "name": "rateCategoryId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": ["PER_DIEM", "ACCOMMODATION_ALLOWANCE", "MILEAGE_ALLOWANCE"]
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rate/{id}": {
      "get": {
        "tags": ["travelExpense/rate"],
        "summary": "[BETA] Get travel expense rate by ID.",
        "description": "",
        "operationId": "TravelExpenseRate_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory": {
      "get": {
        "tags": ["travelExpense/rateCategory"],
        "summary": "[BETA] Find rate categories corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRateCategory_search",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": ["PER_DIEM", "ACCOMMODATION_ALLOWANCE", "MILEAGE_ALLOWANCE"]
          },
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "travelReportRateCategoryGroupId",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ameldingWageCode",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "wageCodeNumber",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string"
          },
          {
            "name": "isValidDayTrip",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isValidDomestic",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "requiresZone",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "isRequiresOvernightAccommodation",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategory/{id}": {
      "get": {
        "tags": ["travelExpense/rateCategory"],
        "summary": "[BETA] Get travel expense rate category by ID.",
        "description": "",
        "operationId": "TravelExpenseRateCategory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup": {
      "get": {
        "tags": ["travelExpense/rateCategoryGroup"],
        "summary": "[BETA] Find rate categoriy groups corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroup_search",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isForeignTravel",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "From and including",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "To and excluding",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/rateCategoryGroup/{id}": {
      "get": {
        "tags": ["travelExpense/rateCategoryGroup"],
        "summary": "[BETA] Get travel report rate category group by ID.",
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroup_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory/{id}": {
      "get": {
        "tags": ["travelExpense/costCategory"],
        "summary": "[BETA] Get cost category by ID.",
        "description": "",
        "operationId": "TravelExpenseCostCategory_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/costCategory": {
      "get": {
        "tags": ["travelExpense/costCategory"],
        "summary": "[BETA] Find cost category corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseCostCategory_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType/{id}": {
      "get": {
        "tags": ["travelExpense/paymentType"],
        "summary": "[BETA] Get payment type by ID.",
        "description": "",
        "operationId": "TravelExpensePaymentType_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/paymentType": {
      "get": {
        "tags": ["travelExpense/paymentType"],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpensePaymentType_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "description": "Containing",
            "required": false,
            "type": "string"
          },
          {
            "name": "isInactive",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnEmployeeExpenses",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/settings": {
      "get": {
        "tags": ["travelExpense/settings"],
        "summary": "[BETA] Get travel expense settings of logged in company.",
        "description": "",
        "operationId": "TravelExpenseSettings_get",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/zone/{id}": {
      "get": {
        "tags": ["travelExpensezone"],
        "summary": "Get travel expense zone by ID.",
        "description": "",
        "operationId": "TravelExpenseZone_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/travelExpense/zone": {
      "get": {
        "tags": ["travelExpensezone"],
        "summary": "Find travel expense zones corresponding with sent data.",
        "description": "",
        "operationId": "TravelExpenseZone_search",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDisabled",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/voucherMessage": {
      "get": {
        "tags": ["voucherMessage"],
        "summary": "[BETA] Find voucherMessage (or a comment) put on a voucher by inputting voucher ids",
        "description": "",
        "operationId": "VoucherMessage_search",
        "parameters": [
          {
            "name": "voucherIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherMessage"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["voucherMessage"],
        "summary": "[BETA] Post new voucherMessage.",
        "description": "",
        "operationId": "VoucherMessage_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VoucherMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherMessage"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/voucherStatus": {
      "get": {
        "tags": ["voucherStatus"],
        "summary": "[BETA] Find voucherStatus corresponding with sent data. The voucherStatus is used to coordinate integration processes. Requires setup done by Tripletex, currently supports debt collection.",
        "description": "",
        "operationId": "VoucherStatus_search",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "voucherIds",
            "in": "query",
            "description": "List of IDs",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": [
              "WAITING",
              "DONE",
              "SKIPPED",
              "ERROR",
              "NONE",
              "PROCESSING",
              "RECLAIMED"
            ]
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equals",
            "required": false,
            "type": "string",
            "enum": ["TRIPLETEX", "SUPPLIERINVOICE_EXTERNAL", "DEBT_COLLECTION"]
          },
          {
            "name": "from",
            "in": "query",
            "description": "From index",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of elements to return",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Sorting pattern",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      },
      "post": {
        "tags": ["voucherStatus"],
        "summary": "[BETA] Post new voucherStatus.",
        "description": "",
        "operationId": "VoucherStatus_post",
        "consumes": ["application/json; charset=utf-8"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VoucherStatus"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    },
    "/voucherStatus/{id}": {
      "get": {
        "tags": ["voucherStatus"],
        "summary": "[BETA] Get voucherStatus by ID.",
        "description": "",
        "operationId": "VoucherStatus_get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Element ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Fields filter pattern",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "tokenAuthScheme": {
      "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
      "type": "basic"
    }
  },
  "definitions": {
    "Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "activityType": {
          "type": "string",
          "description": "PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.",
          "enum": [
            "GENERAL_ACTIVITY",
            "PROJECT_GENERAL_ACTIVITY",
            "PROJECT_SPECIFIC_ACTIVITY",
            "TASK"
          ]
        },
        "isProjectActivity": {
          "type": "boolean",
          "description": "Manipulate these with ActivityType",
          "readOnly": true
        },
        "isGeneral": {
          "type": "boolean",
          "description": "Manipulate these with ActivityType",
          "readOnly": true
        },
        "isTask": {
          "type": "boolean",
          "description": "Manipulate these with ActivityType",
          "readOnly": true
        },
        "isDisabled": {
          "type": "boolean",
          "readOnly": true
        },
        "isChargeable": {
          "type": "boolean"
        },
        "rate": {
          "type": "number"
        },
        "costPercentage": {
          "type": "number"
        }
      }
    },
    "Change": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "changeType": {
          "type": "string",
          "enum": [
            "CREATE",
            "UPDATE",
            "DELETE",
            "LOCKED",
            "REOPENED",
            "DO_NOT_SHOW"
          ]
        },
        "periodReopened": {
          "type": "string"
        },
        "periodLocked": {
          "type": "string"
        }
      }
    },
    "ResponseWrapper": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      }
    },
    "ResponseWrapperActivity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "ListResponse": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "ListResponseActivity": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        }
      }
    },
    "Addon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "maxLength": 1024
        },
        "redirectUrl": {
          "type": "string",
          "maxLength": 1024
        },
        "status": {
          "type": "string",
          "enum": ["IN_DEVELOPMENT", "PENDING", "REJECTED", "APPROVED"]
        },
        "wizardStep": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "isPublic": {
          "type": "boolean"
        },
        "apiConsumerId": {
          "type": "integer",
          "format": "int32"
        },
        "visibility": {
          "type": "string",
          "enum": ["COMPANY_WIDE", "PERSONAL"]
        }
      }
    },
    "ResponseWrapperAddon": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Addon"
        }
      }
    },
    "ListResponseAddon": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addon"
          }
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "country": {
          "$ref": "#/definitions/Country"
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "isoAlpha2Code": {
          "type": "string",
          "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true
        },
        "isoAlpha3Code": {
          "type": "string",
          "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true,
          "maxLength": 3
        },
        "isoNumericCode": {
          "type": "string",
          "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true
        }
      }
    },
    "DeliveryAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "Department": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "departmentNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "departmentManager": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "Division": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "municipalityDate": {
          "type": "string"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        }
      }
    },
    "Employee": {
      "type": "object",
      "required": ["firstName", "lastName"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        },
        "employeeNumber": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "dateOfBirth": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "phoneNumberMobileCountry": {
          "description": "The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian.",
          "$ref": "#/definitions/Country"
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberHome": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberWork": {
          "type": "string",
          "maxLength": 100
        },
        "nationalIdentityNumber": {
          "type": "string",
          "maxLength": 100
        },
        "dnumber": {
          "type": "string",
          "maxLength": 11
        },
        "internationalId": {
          "$ref": "#/definitions/InternationalId"
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "iban": {
          "type": "string",
          "description": "IBAN field"
        },
        "bic": {
          "type": "string",
          "description": "Bic (swift) field"
        },
        "creditorBankCountryId": {
          "type": "integer",
          "format": "int32",
          "description": "Country of creditor bank field"
        },
        "usesAbroadPayment": {
          "type": "boolean",
          "description": "UsesAbroadPayment field. Determines if we should use domestic or abroad remittance. To be able to use abroad remittance, one has to: 1: have Autopay 2: have valid combination of the fields Iban, Bic (swift) and Country of creditor bank. "
        },
        "userType": {
          "type": "string",
          "description": "Define the employee's user type.<br>STANDARD: Reduced access. Users with limited system entitlements.<br>EXTENDED: Users can be given all system entitlements.<br>NO_ACCESS: User with no log on access.<br>Users with access to Tripletex must confirm the email address.",
          "enum": ["STANDARD", "EXTENDED", "NO_ACCESS"]
        },
        "allowInformationRegistration": {
          "type": "boolean",
          "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
          "readOnly": true
        },
        "isContact": {
          "type": "boolean",
          "readOnly": true
        },
        "comments": {
          "type": "string"
        },
        "address": {
          "description": "Address tied to the employee",
          "$ref": "#/definitions/Address"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employments": {
          "type": "array",
          "description": "Employments tied to the employee",
          "items": {
            "$ref": "#/definitions/Employment"
          }
        },
        "holidayAllowanceEarned": {
          "$ref": "#/definitions/HolidayAllowanceEarned"
        },
        "employeeCategory": {
          "$ref": "#/definitions/EmployeeCategory"
        }
      }
    },
    "EmployeeCategory": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Employment": {
      "type": "object",
      "required": ["startDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employmentId": {
          "type": "string",
          "description": "Existing employment ID used by the current accounting system",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "employmentEndReason": {
          "type": "string",
          "description": "Define the employment end reason.",
          "enum": [
            "EMPLOYMENT_END_EXPIRED",
            "EMPLOYMENT_END_EMPLOYEE",
            "EMPLOYMENT_END_EMPLOYER",
            "EMPLOYMENT_END_WRONGLY_REPORTED",
            "EMPLOYMENT_END_SYSTEM_OR_ACCOUNTANT_CHANGE",
            "EMPLOYMENT_END_INTERNAL_CHANGE"
          ]
        },
        "division": {
          "$ref": "#/definitions/Division"
        },
        "lastSalaryChangeDate": {
          "type": "string"
        },
        "noEmploymentRelationship": {
          "type": "boolean",
          "description": "Activate pensions and other benefits with no employment relationship."
        },
        "isMainEmployer": {
          "type": "boolean",
          "description": "Determines if company is main employer for the employee. Default value is true.<br />Some values will be default set if not sent upon creation of employment: <br/> If isMainEmployer is NOT sent and tax deduction code loennFraHovedarbeidsgiver is sent, isMainEmployer will be set to true. <br /> If isMainEmployer is NOT sent and tax deduction code loennFraBiarbeidsgiver is sent, isMainEmployer will be set to false. <br /> If true and deduction code is NOT sent, value of tax deduction code will be set to loennFraHovedarbeidsgiver. <br /> If false and deduction code is NOT sent, value of tax deduction code will be set to loennFraBiarbeidsgiver. <br /> For other types of Tax Deduction Codes, isMainEmployer does not influence anything."
        },
        "taxDeductionCode": {
          "type": "string",
          "description": "EMPTY - represents that a tax deduction code is not set on the employment. It is illegal to set the field to this value.  <br /> Default value of this field is loennFraHovedarbeidsgiver or loennFraBiarbeidsgiver depending on boolean isMainEmployer",
          "enum": [
            "loennFraHovedarbeidsgiver",
            "loennFraBiarbeidsgiver",
            "pensjon",
            "loennTilUtenrikstjenestemann",
            "loennKunTrygdeavgiftTilUtenlandskBorger",
            "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
            "introduksjonsstoenad",
            "ufoereytelserFraAndre",
            "EMPTY"
          ]
        },
        "employmentDetails": {
          "type": "array",
          "description": "Employment types tied to the employment",
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        }
      }
    },
    "EmploymentDetails": {
      "type": "object",
      "required": ["percentageOfFullTimeEquivalent"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "date": {
          "type": "string"
        },
        "employmentType": {
          "type": "string",
          "description": "Define the employment type.",
          "enum": ["ORDINARY", "MARITIME", "FREELANCE"]
        },
        "employmentForm": {
          "type": "string",
          "description": "Define the employment form.",
          "enum": ["PERMANENT", "TEMPORARY"]
        },
        "maritimeEmployment": {
          "$ref": "#/definitions/MaritimeEmployment"
        },
        "remunerationType": {
          "type": "string",
          "description": "Define the remuneration type.",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "workingHoursScheme": {
          "type": "string",
          "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ]
        },
        "shiftDurationHours": {
          "type": "number"
        },
        "occupationCode": {
          "description": "To find the right value to enter in this field, you could go to GET /employee/employment/occupationCode to get a list of valid ID's.",
          "$ref": "#/definitions/OccupationCode"
        },
        "percentageOfFullTimeEquivalent": {
          "type": "number"
        },
        "annualSalary": {
          "type": "number"
        },
        "hourlyWage": {
          "type": "number"
        },
        "payrollTaxMunicipalityId": {
          "$ref": "#/definitions/Municipality"
        }
      }
    },
    "HolidayAllowanceEarned": {
      "type": "object",
      "properties": {
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "type": "number"
        },
        "basis": {
          "type": "number"
        },
        "amountExtraHolidayWeek": {
          "type": "number"
        }
      }
    },
    "InternationalId": {
      "type": "object",
      "properties": {
        "intAmeldingType": {
          "type": "string",
          "description": "Define the employee's International Identificator.<br>PASSPORT_NO<br>NATIONAL_INSURANCE_NO<br>TAX_IDENTIFICATION_NO<br>VALUE_ADDED_TAX_IDENTIFICATION_NO",
          "enum": [
            "PASSPORT_NO",
            "NATIONAL_INSURANCE_NO",
            "TAX_IDENTIFICATION_NO",
            "VALUE_ADDED_TAX_IDENTIFICATION_NO"
          ]
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "number": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "MaritimeEmployment": {
      "type": "object",
      "properties": {
        "shipRegister": {
          "type": "string",
          "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
          "enum": ["NIS", "NOR", "FOREIGN"]
        },
        "shipType": {
          "type": "string",
          "description": "Define the ship type.",
          "enum": ["OTHER", "DRILLING_PLATFORM", "TOURIST"]
        },
        "tradeArea": {
          "type": "string",
          "description": "Define the trade area.",
          "enum": ["DOMESTIC", "FOREIGN"]
        }
      }
    },
    "Municipality": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "string",
          "readOnly": true,
          "maxLength": 4
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "county": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "payrollTaxZone": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "OccupationCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 7
        }
      }
    },
    "ResponseWrapperDeliveryAddress": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/DeliveryAddress"
        }
      }
    },
    "ListResponseDeliveryAddress": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeliveryAddress"
          }
        }
      }
    },
    "LegacyAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "addressLine1": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperLegacyAddress": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LegacyAddress"
        }
      }
    },
    "ListResponseLegacyAddress": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegacyAddress"
          }
        }
      }
    },
    "ResponseWrapperInteger": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "stateful": {
          "type": "boolean"
        },
        "interruptable": {
          "type": "boolean"
        },
        "jobDetail": {
          "$ref": "#/definitions/JobDetailDTO"
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TriggerDTO"
          }
        }
      }
    },
    "JobDetailDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "jobclass": {
          "type": "string"
        },
        "jobData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResponseWrapperListJob": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        }
      }
    },
    "TriggerDTO": {
      "type": "object",
      "properties": {
        "calendarName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextFireTime": {
          "type": "string",
          "format": "date-time"
        },
        "previousFireTime": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperSystemMessage": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SystemMessage"
        }
      }
    },
    "SystemMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "Account": {
      "type": "object",
      "required": ["name", "number"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ASSETS",
            "EQUITY",
            "LIABILITIES",
            "OPERATING_REVENUES",
            "OPERATING_EXPENSES",
            "INVESTMENT_INCOME",
            "COST_OF_CAPITAL",
            "TAX_ON_ORDINARY_ACTIVITIES",
            "EXTRAORDINARY_INCOME",
            "EXTRAORDINARY_COST",
            "TAX_ON_EXTRAORDINARY_ACTIVITIES",
            "ANNUAL_RESULT",
            "TRANSFERS_AND_ALLOCATIONS"
          ]
        },
        "legalVatTypes": {
          "type": "array",
          "description": "List of legal vat types for this account.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/VatType"
          }
        },
        "ledgerType": {
          "type": "string",
          "description": "Supported ledger types, default is GENERAL. Only available for customers with the module multiple ledgers.",
          "enum": ["GENERAL", "CUSTOMER", "VENDOR", "EMPLOYEE", "ASSET"]
        },
        "vatType": {
          "description": "The default vat type for this account.",
          "$ref": "#/definitions/VatType"
        },
        "vatLocked": {
          "type": "boolean",
          "description": "True if all entries on this account must have the vat type given by vatType."
        },
        "currency": {
          "description": "If given, all entries on this account must have this currency.",
          "$ref": "#/definitions/Currency"
        },
        "isCloseable": {
          "type": "boolean",
          "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries."
        },
        "isApplicableForSupplierInvoice": {
          "type": "boolean",
          "description": "True if this account is applicable for supplier invoice registration."
        },
        "requireReconciliation": {
          "type": "boolean",
          "description": "True if this account must be reconciled before the accounting period closure."
        },
        "isInactive": {
          "type": "boolean",
          "description": "Inactive accounts will not show up in UI lists."
        },
        "isBankAccount": {
          "type": "boolean"
        },
        "isInvoiceAccount": {
          "type": "boolean"
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountCountry": {
          "$ref": "#/definitions/Country"
        },
        "bankName": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "Asset": {
      "type": "object",
      "required": ["dateOfAcquisition", "description", "name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "dateOfAcquisition": {
          "type": "string"
        },
        "acquisitionCost": {
          "type": "number",
          "description": "Acquisition cost."
        },
        "account": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 10
        },
        "description": {
          "type": "string",
          "maxLength": 100
        },
        "factor": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 100
        }
      }
    },
    "ResponseWrapperAsset": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "VatType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "percentage": {
          "type": "number"
        },
        "deductionPercentage": {
          "type": "number",
          "description": "Percentage of the VAT amount that is deducted. Always 100% for all predefined VAT types, but can be lower for custom types for relative VAT."
        },
        "parentType": {
          "description": "Only used on custom VAT types for relative VAT, gives the link to the parent VAT type. For most purposes the custom VAT type will behave like the parent VAT type, but with different deduction.",
          "$ref": "#/definitions/VatType"
        }
      }
    },
    "ListResponseAsset": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      }
    },
    "BalanceSheetAccount": {
      "type": "object",
      "properties": {
        "account": {
          "readOnly": true,
          "$ref": "#/definitions/Account"
        },
        "balanceIn": {
          "type": "number",
          "readOnly": true
        },
        "balanceChange": {
          "type": "number",
          "readOnly": true
        },
        "balanceOut": {
          "type": "number",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "description": "The start date for this period - inclusive.",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "description": "The end date for this period - exclusive.",
          "readOnly": true
        }
      }
    },
    "ListResponseBalanceSheetAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BalanceSheetAccount"
          }
        }
      }
    },
    "Bank": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Bank name",
          "readOnly": true,
          "maxLength": 255
        },
        "bankStatementFileFormatSupport": {
          "type": "array",
          "description": "Bank statement file formats supported.",
          "readOnly": true,
          "items": {
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV"
            ]
          }
        },
        "registerNumbers": {
          "type": "array",
          "description": "Register numbers belonging to bank.",
          "readOnly": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ResponseWrapperBank": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Bank"
        }
      }
    },
    "ListResponseBank": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bank"
          }
        }
      }
    },
    "BankAgreement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "iban": {
          "type": "string",
          "description": "The IBAN property.",
          "maxLength": 50
        },
        "bban": {
          "type": "string",
          "description": "The BBAN property.",
          "maxLength": 50
        },
        "description": {
          "type": "string",
          "description": "The description property.",
          "readOnly": true,
          "maxLength": 250
        },
        "account": {
          "description": "The account for bank agreement.",
          "$ref": "#/definitions/Account"
        },
        "uploaderEmployee": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "dateCreated": {
          "type": "string"
        },
        "bank": {
          "$ref": "#/definitions/Bank"
        },
        "country": {
          "readOnly": true,
          "$ref": "#/definitions/Country"
        },
        "currency": {
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "isActive": {
          "type": "boolean",
          "readOnly": true
        },
        "showAdviceCurrencyMismatch": {
          "type": "boolean",
          "description": "The showAdviceCurrencyMismatch property."
        },
        "accountInBankId": {
          "type": "string",
          "maxLength": 50
        },
        "division": {
          "type": "string",
          "maxLength": 50
        },
        "ccmAgreementId": {
          "type": "string",
          "maxLength": 50
        },
        "organisationNumber": {
          "type": "string",
          "maxLength": 50
        },
        "approveInOnlineBanking": {
          "type": "boolean"
        }
      }
    },
    "ListResponseBankAgreement": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankAgreement"
          }
        }
      }
    },
    "BankAgreementCreationDTO": {
      "type": "object",
      "required": ["bankAccounts", "bankId"],
      "properties": {
        "bankId": {
          "type": "integer",
          "format": "int32",
          "description": "Bank ID"
        },
        "accountInBankId": {
          "type": "string",
          "description": "Customer number in bank"
        },
        "ccmAgreementId": {
          "type": "string",
          "description": "Customer Id from Bank"
        },
        "division": {
          "type": "string",
          "description": "Division (DNB only)"
        },
        "organizationNumber": {
          "type": "string",
          "description": "Organization number"
        },
        "electronicCreation": {
          "type": "boolean",
          "description": "Electronic agreement creation initiated."
        },
        "approveInOnlineBanking": {
          "type": "boolean",
          "description": "Accounting approve payments"
        },
        "bankAccounts": {
          "type": "array",
          "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      }
    },
    "ResponseWrapperListString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseWrapperListInteger": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ElectronicSupportDTO": {
      "type": "object",
      "properties": {
        "bankId": {
          "type": "integer",
          "format": "int32",
          "description": "Bank ID"
        },
        "bankName": {
          "type": "string",
          "description": "Name of the bank"
        },
        "type": {
          "type": "string",
          "description": "Type of electronic agreement creation is supported by this bank.COMPLETE: Supports creating the agreement towards AutoPay and Tripletex though the bank.PARTIAL: Supports creating the agreement towards AutoPay only.",
          "enum": ["PARTIAL", "COMPLETE"]
        },
        "bankUrl": {
          "type": "string",
          "description": "Bank url for ordering electronic agreements for ElectronicSupportDTO of type PARTIAL."
        }
      }
    },
    "ResponseWrapperListElectronicSupportDTO": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElectronicSupportDTO"
          }
        }
      }
    },
    "ResponseWrapperBankAgreement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankAgreement"
        }
      }
    },
    "ResponseWrapperBrregStatusCode": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "enum": ["DENIED", "MANUAL_CHECK", "ACCEPTED"]
        }
      }
    },
    "ResponseWrapperElectronicSupportDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ElectronicSupportDTO"
        }
      }
    },
    "BankOnboardingAccessRequestDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "requesteeEmployeeId": {
          "type": "integer",
          "format": "int32"
        },
        "requesteeName": {
          "type": "string"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankOnboardingDTO": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankOnboardingStepDTO"
          }
        },
        "accessRequest": {
          "$ref": "#/definitions/BankOnboardingAccessRequestDTO"
        },
        "hasFullAccess": {
          "type": "boolean"
        },
        "companyOrgnr": {
          "type": "string"
        },
        "lockedCurrenciesMap": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "userIsAutoPayProvisioned": {
          "type": "boolean"
        }
      }
    },
    "BankOnboardingStepDTO": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "type": "string",
          "enum": ["INCOMPLETE", "COMPLETED", "PROCESSING"]
        },
        "accessible": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperBankOnboardingDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankOnboardingDTO"
        }
      }
    },
    "AccommodationAllowance": {
      "type": "object",
      "required": ["location"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "zone": {
          "type": "string"
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "address": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "AccountingPeriod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0,
          "maximum": 11
        },
        "start": {
          "type": "string",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "readOnly": true
        },
        "isClosed": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "BankReconciliation": {
      "type": "object",
      "required": ["account", "accountingPeriod", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "voucher": {
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "transactions": {
          "type": "array",
          "description": "Bank transactions tied to the bank reconciliation",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "isClosed": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Type of Bank Reconciliation.",
          "enum": ["MANUAL", "AUTOMATIC"]
        },
        "bankAccountClosingBalanceCurrency": {
          "type": "number"
        },
        "closedDate": {
          "type": "string",
          "readOnly": true
        },
        "closedByContact": {
          "readOnly": true,
          "$ref": "#/definitions/Contact"
        },
        "closedByEmployee": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "approvable": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "BankStatement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "openingBalanceCurrency": {
          "type": "number",
          "description": "Opening balance on the account.",
          "readOnly": true
        },
        "closingBalanceCurrency": {
          "type": "number",
          "description": "Closing balance on the account.",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "description": "Bank statement file name.",
          "readOnly": true
        },
        "bank": {
          "description": "Bank",
          "readOnly": true,
          "$ref": "#/definitions/Bank"
        },
        "fromDate": {
          "type": "string",
          "readOnly": true
        },
        "toDate": {
          "type": "string",
          "readOnly": true
        },
        "transactions": {
          "type": "array",
          "description": "Bank transactions tied to the bank statement",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        }
      }
    },
    "BankTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "postedDate": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "amountCurrency": {
          "type": "number"
        },
        "bankStatement": {
          "$ref": "#/definitions/BankStatement"
        }
      }
    },
    "CloseGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "postings": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "CompanyBankAccountPresentation": {
      "type": "object",
      "properties": {
        "iban": {
          "type": "string",
          "description": "Iban-number"
        },
        "bban": {
          "type": "string",
          "description": "Bban-number"
        },
        "bic": {
          "type": "string",
          "description": "BIC/SWIFT for this bankaccount"
        },
        "country": {
          "readOnly": true,
          "$ref": "#/definitions/Country"
        },
        "provider": {
          "type": "string",
          "readOnly": true,
          "enum": ["NETS", "AUTOPAY"]
        }
      }
    },
    "Contact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 100
        },
        "phoneNumberMobileCountry": {
          "description": "The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian.",
          "$ref": "#/definitions/Country"
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberWork": {
          "type": "string",
          "maxLength": 100
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "department": {
          "$ref": "#/definitions/Department"
        }
      }
    },
    "Cost": {
      "type": "object",
      "required": ["amountCurrencyIncVat", "paymentType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "costCategory": {
          "$ref": "#/definitions/TravelCostCategory"
        },
        "paymentType": {
          "$ref": "#/definitions/TravelPaymentType"
        },
        "category": {
          "type": "string",
          "maxLength": 100
        },
        "comments": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "amountCurrencyIncVat": {
          "type": "number"
        },
        "amountNOKInclVAT": {
          "type": "number"
        },
        "amountNOKInclVATLow": {
          "type": "number",
          "readOnly": true
        },
        "amountNOKInclVATMedium": {
          "type": "number",
          "readOnly": true
        },
        "amountNOKInclVATHigh": {
          "type": "number",
          "readOnly": true
        },
        "isPaidByEmployee": {
          "type": "boolean",
          "readOnly": true
        },
        "isChargeable": {
          "type": "boolean"
        },
        "date": {
          "type": "string"
        },
        "predictions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Prediction"
          }
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "isSupplier": {
          "type": "boolean",
          "description": "Defines if the customer is also a supplier."
        },
        "isCustomer": {
          "type": "boolean",
          "readOnly": true
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        },
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "invoiceEmail": {
          "type": "string",
          "minLength": 0,
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
          "minLength": 0,
          "maxLength": 254
        },
        "bankAccounts": {
          "type": "array",
          "description": "[DEPRECATED] List of the bank account numbers for this customer. Norwegian bank account numbers only.",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "language": {
          "type": "string",
          "enum": ["NO", "EN", "SV"]
        },
        "isPrivateIndividual": {
          "type": "boolean"
        },
        "singleCustomerInvoice": {
          "type": "boolean",
          "description": "Enables various orders on one customer invoice."
        },
        "invoiceSendMethod": {
          "type": "string",
          "description": "Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>MANUAL: User will have to send invocie manually.<br>",
          "enum": ["EMAIL", "EHF", "EFAKTURA", "VIPPS", "PAPER", "MANUAL"]
        },
        "emailAttachmentType": {
          "type": "string",
          "description": "Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>",
          "enum": ["LINK", "ATTACHMENT"]
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "category1": {
          "description": "Category 1 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "description": "Category 2 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "description": "Category 3 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "invoicesDueIn": {
          "type": "integer",
          "format": "int32",
          "description": "Number of days/months in which invoices created from this customer is due",
          "minimum": 0,
          "maximum": 10000
        },
        "invoicesDueInType": {
          "type": "string",
          "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
          "enum": ["DAYS", "MONTHS", "RECURRING_DAY_OF_MONTH"]
        },
        "currency": {
          "description": "The preferred currency for this customer",
          "$ref": "#/definitions/Currency"
        },
        "bankAccountPresentation": {
          "type": "array",
          "description": "List of bankAccount for this customer",
          "items": {
            "$ref": "#/definitions/CompanyBankAccountPresentation"
          }
        }
      }
    },
    "CustomerCategory": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        }
      }
    },
    "Document": {
      "type": "object",
      "required": ["fileName"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "description": "The name of the document.",
          "maxLength": 255
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the document in bytes.",
          "readOnly": true,
          "minimum": 0
        },
        "mimeType": {
          "type": "string",
          "example": "type/subtype of resource. E.g. application/pdf",
          "description": "Type of the document",
          "readOnly": true,
          "maxLength": 100
        }
      }
    },
    "Inventory": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "isMainInventory": {
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "email": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "phone": {
          "type": "string",
          "minLength": 0,
          "maxLength": 255
        },
        "deletable": {
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "lastStocking": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "InventoryLocation": {
      "type": "object",
      "required": ["inventory", "name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "isInactive": {
          "type": "boolean"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "required": ["invoiceDate", "invoiceDueDate", "orders"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "invoiceNumber": {
          "type": "integer",
          "format": "int32",
          "description": "If value is set to 0, the invoice number will be generated.",
          "minimum": 0
        },
        "invoiceDate": {
          "type": "string"
        },
        "customer": {
          "description": "The invoice customer",
          "readOnly": true,
          "$ref": "#/definitions/Customer"
        },
        "creditedInvoice": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the original invoice if this is a credit note.",
          "readOnly": true
        },
        "isCredited": {
          "type": "boolean",
          "readOnly": true
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "kid": {
          "type": "string",
          "description": "KID - Kundeidentifikasjonsnummer.",
          "maxLength": 25
        },
        "invoiceComment": {
          "type": "string",
          "description": "Comment text for the invoice. This was specified on the order as invoiceComment.",
          "readOnly": true
        },
        "comment": {
          "type": "string",
          "description": "Comment text for the specific invoice."
        },
        "orders": {
          "type": "array",
          "description": "Related orders. Only one order per invoice is supported at the moment.",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "orderLines": {
          "type": "array",
          "description": "Orderlines connected to the invoice.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "travelReports": {
          "type": "array",
          "description": "Travel reports connected to the invoice.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TravelExpense"
          }
        },
        "projectInvoiceDetails": {
          "type": "array",
          "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          }
        },
        "voucher": {
          "description": "The invoice voucher.",
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "deliveryDate": {
          "type": "string",
          "description": "The delivery date.",
          "readOnly": true
        },
        "amount": {
          "type": "number",
          "description": "In the company’s currency, typically NOK.",
          "readOnly": true
        },
        "amountCurrency": {
          "type": "number",
          "description": "In the specified currency.",
          "readOnly": true
        },
        "amountExcludingVat": {
          "type": "number",
          "description": "Amount excluding VAT (NOK).",
          "readOnly": true
        },
        "amountExcludingVatCurrency": {
          "type": "number",
          "description": "Amount excluding VAT in the specified currency.",
          "readOnly": true
        },
        "amountRoundoff": {
          "type": "number",
          "description": "Amount of round off to nearest integer.",
          "readOnly": true
        },
        "amountRoundoffCurrency": {
          "type": "number",
          "description": "Amount of round off to nearest integer in the specified currency.",
          "readOnly": true
        },
        "amountOutstanding": {
          "type": "number",
          "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
          "readOnly": true
        },
        "amountCurrencyOutstanding": {
          "type": "number",
          "description": "The amountCurrency outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
          "readOnly": true
        },
        "amountOutstandingTotal": {
          "type": "number",
          "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
          "readOnly": true
        },
        "amountCurrencyOutstandingTotal": {
          "type": "number",
          "description": "The amountCurrency outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
          "readOnly": true
        },
        "sumRemits": {
          "type": "number",
          "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
          "readOnly": true
        },
        "currency": {
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "isCreditNote": {
          "type": "boolean",
          "readOnly": true
        },
        "isCharged": {
          "type": "boolean",
          "readOnly": true
        },
        "isApproved": {
          "type": "boolean",
          "readOnly": true
        },
        "postings": {
          "type": "array",
          "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "reminders": {
          "type": "array",
          "description": "Invoice debt collection and reminders.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Reminder"
          }
        },
        "invoiceRemarks": {
          "type": "string",
          "description": "Invoice remarks - automatically stops reminder/notice of debt collection if specified."
        },
        "paymentTypeId": {
          "type": "integer",
          "format": "int32",
          "description": "[BETA] Optional. Used to specify payment type for prepaid invoices. Payment type can be specified here, or as a parameter to the /invoice API endpoint.",
          "minimum": 0
        },
        "paidAmount": {
          "type": "number",
          "description": "[BETA] Optional. Used to specify the prepaid amount of the invoice. The paid amount can be specified here, or as a parameter to the /invoice API endpoint."
        },
        "ehfSendStatus": {
          "type": "string",
          "description": "[Deprecated] EHF (Peppol) send status. This only shows status for historic EHFs.",
          "enum": [
            "DO_NOT_SEND",
            "SEND",
            "SENT",
            "SEND_FAILURE_RECIPIENT_NOT_FOUND"
          ]
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "rel": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["POST", "PUT", "GET", "DELETE"]
        },
        "href": {
          "type": "string"
        }
      }
    },
    "MileageAllowance": {
      "type": "object",
      "required": ["date", "departureLocation", "destination"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "date": {
          "type": "string"
        },
        "departureLocation": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "km": {
          "type": "number"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "isCompanyCar": {
          "type": "boolean"
        },
        "passengers": {
          "type": "array",
          "description": "Link to individual passengers.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Passenger"
          }
        },
        "passengerSupplement": {
          "description": "Passenger mileage allowance associated with this mileage allowance.",
          "$ref": "#/definitions/MileageAllowance"
        },
        "tollCost": {
          "description": "Toll cost associated with this mileage allowance.",
          "$ref": "#/definitions/Cost"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": ["customer", "deliveryDate", "orderDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "attn": {
          "$ref": "#/definitions/Contact"
        },
        "receiverEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "reference": {
          "type": "string",
          "maxLength": 255
        },
        "ourContact": {
          "description": "If the contact is not an employee",
          "$ref": "#/definitions/Contact"
        },
        "ourContactEmployee": {
          "description": "If the contact is an employee",
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "orderDate": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "invoiceComment": {
          "type": "string",
          "description": "Comment to be displayed in the invoice based on this order. Can be also found in Invoice.invoiceComment on Invoice objects."
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "invoicesDueIn": {
          "type": "integer",
          "format": "int32",
          "description": "Number of days/months in which invoices created from this order is due",
          "minimum": 0,
          "maximum": 10000
        },
        "invoicesDueInType": {
          "type": "string",
          "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
          "enum": ["DAYS", "MONTHS", "RECURRING_DAY_OF_MONTH"]
        },
        "isShowOpenPostsOnInvoices": {
          "type": "boolean",
          "description": "Show account statement - open posts on invoices created from this order"
        },
        "isClosed": {
          "type": "boolean",
          "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again."
        },
        "deliveryDate": {
          "type": "string"
        },
        "deliveryAddress": {
          "description": "Delivery address of this order. This can be a new or existing address\n(useful to know, especially if the delivery is to a private person: if 'deliveryAddress.name' is set, we ignore the state of 'customer.id')",
          "$ref": "#/definitions/DeliveryAddress"
        },
        "deliveryComment": {
          "type": "string"
        },
        "isPrioritizeAmountsIncludingVat": {
          "type": "boolean"
        },
        "orderLineSorting": {
          "type": "string",
          "enum": ["ID", "PRODUCT", "CUSTOM"]
        },
        "orderLines": {
          "type": "array",
          "description": "Order lines tied to the order. New OrderLines may be embedded here, in some endpoints.",
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "isSubscription": {
          "type": "boolean",
          "description": "If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method."
        },
        "subscriptionDuration": {
          "type": "integer",
          "format": "int32",
          "description": "Number of months/years the subscription shall run",
          "minimum": 0
        },
        "subscriptionDurationType": {
          "type": "string",
          "description": "The time unit of subscriptionDuration",
          "enum": ["MONTHS", "YEAR"]
        },
        "subscriptionPeriodsOnInvoice": {
          "type": "integer",
          "format": "int32",
          "description": "Number of periods on each invoice",
          "minimum": 0
        },
        "subscriptionPeriodsOnInvoiceType": {
          "type": "string",
          "description": "The time unit of subscriptionPeriodsOnInvoice",
          "readOnly": true,
          "enum": ["MONTHS"]
        },
        "subscriptionInvoicingTimeInAdvanceOrArrears": {
          "type": "string",
          "description": "Invoicing in advance/in arrears",
          "enum": ["ADVANCE", "ARREARS"]
        },
        "subscriptionInvoicingTime": {
          "type": "integer",
          "format": "int32",
          "description": "Number of days/months invoicing in advance/in arrears",
          "minimum": 0
        },
        "subscriptionInvoicingTimeType": {
          "type": "string",
          "description": "The time unit of subscriptionInvoicingTime",
          "enum": ["DAYS", "MONTHS"]
        },
        "isSubscriptionAutoInvoicing": {
          "type": "boolean",
          "description": "Automatic invoicing. Starts when the subscription is approved"
        },
        "preliminaryInvoice": {
          "description": "[BETA] Preliminary invoice if order is not charged",
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        },
        "attachment": {
          "type": "array",
          "description": "[BETA] Attachments belonging to this order",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Document"
          }
        }
      }
    },
    "OrderGroup": {
      "type": "object",
      "required": ["order"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "title": {
          "type": "string",
          "maxLength": 255
        },
        "comment": {
          "type": "string"
        },
        "sortIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum 1. Defines the presentation order of the orderGroups. Does not need to be, and is often not continuous.",
          "minimum": 0
        }
      }
    },
    "OrderLine": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "description": "Inventory location field -- beta program",
          "$ref": "#/definitions/InventoryLocation"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number"
        },
        "unitCostCurrency": {
          "type": "number",
          "description": "Unit price purchase (cost) excluding VAT in the order's currency"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number",
          "description": "Unit price of purchase excluding VAT in the order's currency"
        },
        "currency": {
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "markup": {
          "type": "number",
          "description": "Markup given as a percentage (%)"
        },
        "discount": {
          "type": "number",
          "description": "Discount given as a percentage (%)"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amountExcludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line excluding VAT in the order's currency",
          "readOnly": true
        },
        "amountIncludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true
        },
        "order": {
          "description": "The related Order for this OrderLine. This field is required when creating a new OrderLine in the API.",
          "$ref": "#/definitions/Order"
        },
        "unitPriceIncludingVatCurrency": {
          "type": "number",
          "description": "Unit price of purchase including VAT in the order's currency"
        },
        "isSubscription": {
          "type": "boolean"
        },
        "subscriptionPeriodStart": {
          "type": "string"
        },
        "subscriptionPeriodEnd": {
          "type": "string"
        },
        "orderGroup": {
          "$ref": "#/definitions/OrderGroup"
        }
      }
    },
    "Passenger": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "mileageAllowance": {
          "$ref": "#/definitions/MileageAllowance"
        }
      }
    },
    "Payslip": {
      "type": "object",
      "required": ["employee"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "transaction": {
          "$ref": "#/definitions/SalaryTransaction"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "date": {
          "type": "string",
          "description": "Voucher date."
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "specifications": {
          "type": "array",
          "description": "Link to salary specifications.",
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          }
        },
        "vacationAllowanceAmount": {
          "type": "number",
          "readOnly": true
        },
        "grossAmount": {
          "type": "number",
          "readOnly": true
        },
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0
        }
      }
    },
    "PerDiemCompensation": {
      "type": "object",
      "required": ["location"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "countryCode": {
          "type": "string"
        },
        "travelExpenseZoneId": {
          "type": "integer",
          "format": "int32",
          "description": "Optional travel expense zone id. If not specified, the value from field zone will be used."
        },
        "overnightAccommodation": {
          "type": "string",
          "description": "Set what sort of accommodation was had overnight.",
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ]
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "address": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "isDeductionForBreakfast": {
          "type": "boolean"
        },
        "isDeductionForLunch": {
          "type": "boolean"
        },
        "isDeductionForDinner": {
          "type": "boolean"
        }
      }
    },
    "Posting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "voucher": {
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountGross": {
          "type": "number"
        },
        "amountGrossCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "closeGroup": {
          "$ref": "#/definitions/CloseGroup"
        },
        "invoiceNumber": {
          "type": "string",
          "maxLength": 100
        },
        "termOfPayment": {
          "type": "string"
        },
        "row": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "INCOMING_PAYMENT",
            "INCOMING_PAYMENT_OPPOSITE",
            "INVOICE_EXPENSE",
            "OUTGOING_INVOICE_CUSTOMER_POSTING"
          ]
        },
        "systemGenerated": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "Prediction": {
      "type": "object",
      "properties": {
        "predictedValue": {
          "type": "string"
        },
        "confidence": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "ean": {
          "type": "string",
          "maxLength": 14
        },
        "elNumber": {
          "type": "string",
          "readOnly": true,
          "maxLength": 14
        },
        "nrfNumber": {
          "type": "string",
          "readOnly": true,
          "maxLength": 14
        },
        "costExcludingVatCurrency": {
          "type": "number",
          "description": "Price purchase (cost) excluding VAT in the product's currency"
        },
        "expenses": {
          "type": "number"
        },
        "expensesInPercent": {
          "type": "number",
          "readOnly": true
        },
        "costPrice": {
          "type": "number",
          "description": "Cost price of purchase",
          "readOnly": true
        },
        "profit": {
          "type": "number",
          "readOnly": true
        },
        "profitInPercent": {
          "type": "number",
          "readOnly": true
        },
        "priceExcludingVatCurrency": {
          "type": "number",
          "description": "Price of purchase excluding VAT in the product's currency"
        },
        "priceIncludingVatCurrency": {
          "type": "number",
          "description": "Price of purchase including VAT in the product's currency"
        },
        "isInactive": {
          "type": "boolean"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "isStockItem": {
          "type": "boolean"
        },
        "stockOfGoods": {
          "type": "number",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "discountPrice": {
          "type": "number",
          "readOnly": true
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "ProductUnit": {
      "type": "object",
      "required": ["commonCode", "name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "nameShort": {
          "type": "string",
          "maxLength": 50
        },
        "commonCode": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "Project": {
      "type": "object",
      "required": ["isInternal", "name", "projectManager", "startDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "displayName": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "customer": {
          "description": "The project's customer",
          "$ref": "#/definitions/Customer"
        },
        "isClosed": {
          "type": "boolean"
        },
        "isReadyForInvoicing": {
          "type": "boolean"
        },
        "isInternal": {
          "type": "boolean"
        },
        "isOffer": {
          "type": "boolean",
          "readOnly": true
        },
        "isFixedPrice": {
          "type": "boolean",
          "description": "Project is fixed price if set to true, hourly rate if set to false."
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "displayNameFormat": {
          "type": "string",
          "description": "Defines project name presentation in overviews.",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ]
        },
        "reference": {
          "type": "string",
          "maxLength": 255
        },
        "externalAccountsNumber": {
          "type": "string",
          "maxLength": 100
        },
        "discountPercentage": {
          "type": "number",
          "description": "Project discount percentage.",
          "readOnly": true
        },
        "vatType": {
          "description": "The default vat type for this project.",
          "$ref": "#/definitions/VatType"
        },
        "fixedprice": {
          "type": "number",
          "description": "Fixed price amount, in the project's currency."
        },
        "contributionMarginPercent": {
          "type": "number",
          "readOnly": true
        },
        "numberOfSubProjects": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numberOfProjectParticipants": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "orderLines": {
          "type": "array",
          "description": "Order lines tied to the order",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          }
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "markUpOrderLines": {
          "type": "number",
          "description": "Set mark-up (%) for order lines."
        },
        "markUpFeesEarned": {
          "type": "number",
          "description": "Set mark-up (%) for fees earned."
        },
        "isPriceCeiling": {
          "type": "boolean",
          "description": "Set to true if an hourly rate project has a price ceiling."
        },
        "priceCeilingAmount": {
          "type": "number",
          "description": "Price ceiling amount, in the project's currency."
        },
        "projectHourlyRates": {
          "type": "array",
          "description": "Project Rate Types tied to the project.",
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          }
        },
        "forParticipantsOnly": {
          "type": "boolean",
          "description": "Set to true if only project participants can register information on the project"
        },
        "participants": {
          "type": "array",
          "description": "Link to individual project participants.",
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          }
        },
        "contact": {
          "description": "Customer contact person.",
          "$ref": "#/definitions/Contact"
        },
        "attention": {
          "description": "Customer in attention of person",
          "$ref": "#/definitions/Contact"
        },
        "invoiceComment": {
          "type": "string",
          "description": "Comment for project invoices"
        },
        "invoicingPlan": {
          "type": "array",
          "description": "Invoicing plans tied to the project",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        },
        "preliminaryInvoice": {
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        },
        "generalProjectActivitiesPerProjectOnly": {
          "type": "boolean",
          "description": "Set to true if a general project activity must be linked to project to allow time tracking."
        },
        "projectActivities": {
          "type": "array",
          "description": "Project Activities",
          "items": {
            "$ref": "#/definitions/ProjectActivity"
          }
        },
        "hierarchyNameAndNumber": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ProjectActivity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "activity": {
          "description": "Add existing project activity or create new project specific activity",
          "$ref": "#/definitions/Activity"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean"
        },
        "budgetHours": {
          "type": "number",
          "description": "Set budget hours"
        },
        "budgetHourlyRateCurrency": {
          "type": "number",
          "description": "Set budget hourly rate"
        },
        "budgetFeeCurrency": {
          "type": "number",
          "description": "Set budget fee"
        }
      }
    },
    "ProjectCategory": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        }
      }
    },
    "ProjectHourlyRate": {
      "type": "object",
      "required": ["hourlyRateModel", "startDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "showInProjectOrder": {
          "type": "boolean",
          "description": "Show on contract confirmation/offers"
        },
        "hourlyRateModel": {
          "type": "string",
          "description": "Defines the model used for the hourly rate.",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ]
        },
        "projectSpecificRates": {
          "type": "array",
          "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          }
        },
        "fixedRate": {
          "type": "number",
          "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
        }
      }
    },
    "ProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "project": {
          "description": "The Project related to the Invoice and ProjectInvoiceAdditionalInfo.",
          "readOnly": true,
          "$ref": "#/definitions/Project"
        },
        "feeAmount": {
          "type": "number",
          "description": "Fee amount of the project. For example: 100 NOK.",
          "readOnly": true
        },
        "feeAmountCurrency": {
          "type": "number",
          "description": "Fee amount of the project in the invoice currency.",
          "readOnly": true
        },
        "markupPercent": {
          "type": "number",
          "description": "The percentage value of mark-up of amountFee. For example: 10%.",
          "readOnly": true
        },
        "markupAmount": {
          "type": "number",
          "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
          "readOnly": true
        },
        "markupAmountCurrency": {
          "type": "number",
          "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
          "readOnly": true
        },
        "amountOrderLinesAndReinvoicing": {
          "type": "number",
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
          "readOnly": true
        },
        "amountOrderLinesAndReinvoicingCurrency": {
          "type": "number",
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
          "readOnly": true
        },
        "amountTravelReportsAndExpenses": {
          "type": "number",
          "description": "The amount of travel costs and expenses on the project invoice.",
          "readOnly": true
        },
        "amountTravelReportsAndExpensesCurrency": {
          "type": "number",
          "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
          "readOnly": true
        },
        "feeInvoiceText": {
          "type": "string",
          "description": "The fee comment on the project invoice.",
          "readOnly": true
        },
        "invoiceText": {
          "type": "string",
          "description": "The comment on the project invoice.",
          "readOnly": true
        },
        "includeOrderLinesAndReinvoicing": {
          "type": "boolean",
          "description": "Determines if extra costs should be included on the project invoice.",
          "readOnly": true
        },
        "includeHours": {
          "type": "boolean",
          "description": "Determines if hours should be included on the project invoice.",
          "readOnly": true
        },
        "includeOnAccountBalance": {
          "type": "boolean",
          "description": "Determines if akonto should be included on the project invoice.",
          "readOnly": true
        },
        "onAccountBalanceAmount": {
          "type": "number",
          "description": "The akonto amount on the project invoice.",
          "readOnly": true
        },
        "onAccountBalanceAmountCurrency": {
          "type": "number",
          "description": "The akonto amount on the project invoice in the invoice currency.",
          "readOnly": true
        },
        "vatType": {
          "description": "The VAT type of the project invoice.",
          "readOnly": true,
          "$ref": "#/definitions/VatType"
        },
        "invoice": {
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ProjectOrderLine": {
      "type": "object",
      "required": ["date", "project"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "description": "Inventory location field -- beta program",
          "$ref": "#/definitions/InventoryLocation"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number"
        },
        "unitCostCurrency": {
          "type": "number",
          "description": "Unit price purchase (cost) excluding VAT in the order's currency"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number",
          "description": "Unit price of purchase excluding VAT in the order's currency"
        },
        "currency": {
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "markup": {
          "type": "number",
          "description": "Markup given as a percentage (%)"
        },
        "discount": {
          "type": "number",
          "description": "Discount given as a percentage (%)"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "amountExcludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line excluding VAT in the order's currency",
          "readOnly": true
        },
        "amountIncludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "date": {
          "type": "string"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "isBudget": {
          "type": "boolean",
          "readOnly": true
        },
        "invoice": {
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ProjectParticipant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "adminAccess": {
          "type": "boolean"
        }
      }
    },
    "ProjectSpecificRate": {
      "type": "object",
      "required": ["hourlyRate", "projectHourlyRate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "hourlyRate": {
          "type": "number"
        },
        "hourlyCostPercentage": {
          "type": "number"
        },
        "projectHourlyRate": {
          "$ref": "#/definitions/ProjectHourlyRate"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "Reminder": {
      "type": "object",
      "required": ["termOfPayment", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "reminderDate": {
          "type": "string",
          "description": "Creation date of the invoice reminder.",
          "readOnly": true
        },
        "charge": {
          "type": "number",
          "description": "The fee part of the reminder, in the company's currency.",
          "readOnly": true
        },
        "chargeCurrency": {
          "type": "number",
          "description": "The fee part of the reminder, in the invoice currency.",
          "readOnly": true
        },
        "totalCharge": {
          "type": "number",
          "description": "The total fee part of all reminders, in the company's currency.",
          "readOnly": true
        },
        "totalChargeCurrency": {
          "type": "number",
          "description": "The total fee part of all reminders, in the invoice currency.",
          "readOnly": true
        },
        "totalAmountCurrency": {
          "type": "number",
          "description": "The total amount to pay in reminder's currency.",
          "readOnly": true
        },
        "interests": {
          "type": "number",
          "description": "The interests part of the reminder.",
          "readOnly": true
        },
        "interestRate": {
          "type": "number",
          "description": "The reminder interest rate.",
          "readOnly": true
        },
        "termOfPayment": {
          "type": "string",
          "description": "The reminder term of payment date."
        },
        "currency": {
          "description": "The reminder currency.",
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "type": {
          "type": "string",
          "enum": [
            "SOFT_REMINDER",
            "REMINDER",
            "NOTICE_OF_DEBT_COLLECTION",
            "DEBT_COLLECTION"
          ]
        },
        "comment": {
          "type": "string"
        },
        "kid": {
          "type": "string",
          "description": "KID - Kundeidentifikasjonsnummer.",
          "maxLength": 25
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 255
        },
        "bank": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "ResponseWrapperBankReconciliation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliation"
        }
      }
    },
    "SalarySpecification": {
      "type": "object",
      "required": ["count", "rate", "salaryType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "rate": {
          "type": "number"
        },
        "count": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "description": {
          "type": "string"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "type": "number"
        }
      }
    },
    "SalaryTransaction": {
      "type": "object",
      "required": ["month", "payslips", "year"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string",
          "description": "Voucher date."
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "isHistorical": {
          "type": "boolean",
          "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance."
        },
        "paySlipsAvailableDate": {
          "type": "string",
          "description": "The date payslips are made available to the employee. Defaults to voucherDate."
        },
        "payslips": {
          "type": "array",
          "description": "Link to individual payslip objects.",
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        }
      }
    },
    "SalaryType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "showInTimesheet": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "Supplier": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32"
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32"
        },
        "isSupplier": {
          "type": "boolean",
          "readOnly": true
        },
        "isCustomer": {
          "type": "boolean",
          "description": "Determine if the supplier is also a customer"
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "bankAccounts": {
          "type": "array",
          "description": "[DEPRECATED] List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
          "items": {
            "type": "string"
          }
        },
        "invoiceEmail": {
          "type": "string",
          "format": "email",
          "minLength": 0,
          "maxLength": 254
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
          "minLength": 0,
          "maxLength": 254
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "isPrivateIndividual": {
          "type": "boolean"
        },
        "showProducts": {
          "type": "boolean"
        },
        "accountManager": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "category1": {
          "description": "Category 1 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "description": "Category 2 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "description": "Category 3 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "bankAccountPresentation": {
          "type": "array",
          "description": "List of bankAccount for this supplier",
          "items": {
            "$ref": "#/definitions/CompanyBankAccountPresentation"
          }
        }
      }
    },
    "TravelCostCategory": {
      "type": "object",
      "required": ["description"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "isVatLocked": {
          "type": "boolean",
          "readOnly": true
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "readOnly": true
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "readOnly": true
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "TravelDetails": {
      "type": "object",
      "properties": {
        "isForeignTravel": {
          "type": "boolean"
        },
        "isDayTrip": {
          "type": "boolean"
        },
        "isCompensationFromRates": {
          "type": "boolean"
        },
        "departureDate": {
          "type": "string"
        },
        "returnDate": {
          "type": "string"
        },
        "detailedJourneyDescription": {
          "type": "string"
        },
        "departureFrom": {
          "type": "string",
          "maxLength": 255
        },
        "destination": {
          "type": "string",
          "maxLength": 255
        },
        "departureTime": {
          "type": "string",
          "maxLength": 20
        },
        "returnTime": {
          "type": "string",
          "maxLength": 20
        },
        "purpose": {
          "type": "string"
        }
      }
    },
    "TravelExpense": {
      "type": "object",
      "required": ["employee"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "approvedBy": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "completedBy": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "payslip": {
          "readOnly": true,
          "$ref": "#/definitions/Payslip"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "paymentCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "travelDetails": {
          "$ref": "#/definitions/TravelDetails"
        },
        "voucher": {
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "attachment": {
          "readOnly": true,
          "$ref": "#/definitions/Document"
        },
        "isCompleted": {
          "type": "boolean",
          "readOnly": true
        },
        "isApproved": {
          "type": "boolean",
          "readOnly": true
        },
        "isChargeable": {
          "type": "boolean"
        },
        "isFixedInvoicedAmount": {
          "type": "boolean"
        },
        "isIncludeAttachedReceiptsWhenReinvoicing": {
          "type": "boolean"
        },
        "completedDate": {
          "type": "string",
          "readOnly": true
        },
        "approvedDate": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string",
          "readOnly": true
        },
        "travelAdvance": {
          "type": "number"
        },
        "fixedInvoicedAmount": {
          "type": "number"
        },
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "paymentAmount": {
          "type": "number",
          "readOnly": true
        },
        "chargeableAmount": {
          "type": "number",
          "readOnly": true
        },
        "lowRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "mediumRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "highRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "paymentAmountCurrency": {
          "type": "number",
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "invoice": {
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        },
        "title": {
          "type": "string",
          "maxLength": 255
        },
        "perDiemCompensations": {
          "type": "array",
          "description": "Link to individual per diem compensations.",
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          }
        },
        "mileageAllowances": {
          "type": "array",
          "description": "Link to individual mileage allowances.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          }
        },
        "accommodationAllowances": {
          "type": "array",
          "description": "Link to individual accommodation allowances.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          }
        },
        "costs": {
          "type": "array",
          "description": "Link to individual costs.",
          "items": {
            "$ref": "#/definitions/Cost"
          }
        },
        "attachmentCount": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0,
          "maximum": 2147483647
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": ["ALL", "OPEN", "APPROVED", "SALARY_PAID", "DELIVERED"]
        },
        "actions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "isSalaryAdmin": {
          "type": "boolean",
          "readOnly": true
        },
        "showPayslip": {
          "type": "boolean",
          "readOnly": true
        },
        "accountingPeriodClosed": {
          "type": "boolean",
          "readOnly": true
        },
        "accountingPeriodVATClosed": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "TravelExpenseRate": {
      "type": "object",
      "required": ["rateCategory", "zone"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "zone": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "breakfastDeductionRate": {
          "type": "number"
        },
        "lunchDeductionRate": {
          "type": "number"
        },
        "dinnerDeductionRate": {
          "type": "number"
        }
      }
    },
    "TravelExpenseRateCategory": {
      "type": "object",
      "required": ["fromDate", "toDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "ameldingWageCode": {
          "type": "integer",
          "format": "int32"
        },
        "wageCodeNumber": {
          "type": "string",
          "maxLength": 10
        },
        "isValidDayTrip": {
          "type": "boolean"
        },
        "isValidAccommodation": {
          "type": "boolean"
        },
        "isValidDomestic": {
          "type": "boolean"
        },
        "isValidForeignTravel": {
          "type": "boolean"
        },
        "isRequiresZone": {
          "type": "boolean"
        },
        "isRequiresOvernightAccommodation": {
          "type": "boolean"
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["PER_DIEM", "ACCOMMODATION_ALLOWANCE", "MILEAGE_ALLOWANCE"]
        }
      }
    },
    "TravelPaymentType": {
      "type": "object",
      "required": ["description"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "readOnly": true
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "readOnly": true
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "Voucher": {
      "type": "object",
      "required": ["date", "description", "postings"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "System generated number that cannot be changed.",
          "readOnly": true,
          "minimum": 0
        },
        "tempNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Temporary voucher number.",
          "readOnly": true,
          "minimum": 0
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "description": "System generated number that cannot be changed.",
          "readOnly": true,
          "minimum": 0
        },
        "description": {
          "type": "string"
        },
        "voucherType": {
          "description": "Voucher type. Must not be of type 'Utgående faktura' ('Outgoing Invoice') on new vouchers, instead use voucherType=null or use the Invoice endpoint.",
          "$ref": "#/definitions/VoucherType"
        },
        "reverseVoucher": {
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "postings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "document": {
          "description": "If the documentation for the voucher has been generated by the system (e.g. an invoice) then this is a reference to the generated document. This document is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        },
        "attachment": {
          "description": "If the documentation for the voucher has been provided from an external source (e.g. another system via API or a user upload) then this is a reference to the document. This is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        },
        "ediDocument": {
          "description": "If the voucher is created based on a machine readable document (such as EHF or EFO/NELFO) then this is a reference to that document. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        }
      }
    },
    "VoucherType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseBankReconciliation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliation"
          }
        }
      }
    },
    "BankReconciliationAdjustment": {
      "type": "object",
      "required": ["paymentType"],
      "properties": {
        "paymentType": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        },
        "bankTransactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "postingDate": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "minimum": 0
        },
        "postings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "bankReconciliationMatch": {
          "readOnly": true,
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      }
    },
    "BankReconciliationMatch": {
      "type": "object",
      "required": ["bankReconciliation"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "bankReconciliation": {
          "$ref": "#/definitions/BankReconciliation"
        },
        "type": {
          "type": "string",
          "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
          "enum": [
            "MANUAL",
            "PENDING_SUGGESTION",
            "REJECTED_SUGGESTION",
            "APPROVED_SUGGESTION",
            "ADJUSTMENT",
            "AUTO_MATCHED",
            "REJECTED_AUTO_MATCH"
          ]
        },
        "transactions": {
          "type": "array",
          "description": "Match transactions",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "postings": {
          "type": "array",
          "description": "Match postings",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "BankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description",
          "readOnly": true,
          "maxLength": 255
        },
        "debitAccount": {
          "description": "Debit account",
          "readOnly": true,
          "$ref": "#/definitions/Account"
        },
        "creditAccount": {
          "description": "Credit account",
          "readOnly": true,
          "$ref": "#/definitions/Account"
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ListResponseBankReconciliationAdjustment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationAdjustment"
          }
        }
      }
    },
    "FileIdForIncomingPaymentsDTO": {
      "type": "object",
      "properties": {
        "fileId": {
          "type": "integer",
          "format": "int32",
          "description": "FileId corresponding to an Incoming Payment PDF.",
          "readOnly": true
        },
        "date": {
          "type": "string",
          "format": "date",
          "description": "Date on incoming payments file.",
          "readOnly": true
        },
        "accountNumber": {
          "type": "string",
          "description": "Account number.",
          "readOnly": true
        },
        "postingIds": {
          "type": "array",
          "description": "List of postingIds correlated to this fileId",
          "readOnly": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ResponseWrapperListFileIdForIncomingPaymentsDTO": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileIdForIncomingPaymentsDTO"
          }
        }
      }
    },
    "ResponseWrapperBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      }
    },
    "ListResponseBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationMatch"
          }
        }
      }
    },
    "ResponseWrapperBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        }
      }
    },
    "ListResponseBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationPaymentType"
          }
        }
      }
    },
    "BankSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "taxBankAgreement": {
          "$ref": "#/definitions/BankAgreement"
        },
        "remitNumberOfAcceptors": {
          "type": "integer",
          "format": "int32",
          "description": "The remit number of acceptors.",
          "minimum": 1
        },
        "showAdviceCurrencyMismatch": {
          "type": "boolean",
          "description": "The showAdviceCurrencyMismatch property."
        },
        "parsePaymentsWithUnknownKID": {
          "type": "boolean",
          "description": "Setting for whether incoming AutoPay payments without KID should be automatically posted."
        },
        "employeesWithDirectRemitAccess": {
          "type": "array",
          "description": "Employees with payment access",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      }
    },
    "ResponseWrapperBankSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankSettings"
        }
      }
    },
    "ResponseWrapperBankStatement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatement"
        }
      }
    },
    "BankStatementBalanceDTO": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "description": "Balance on the given date.",
          "readOnly": true
        },
        "date": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperBankStatementBalanceDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatementBalanceDTO"
        }
      }
    },
    "ListResponseBankStatement": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankStatement"
          }
        }
      }
    },
    "BankBalanceEstimation": {
      "type": "object",
      "required": ["category", "description", "recurrence"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "java.lang.String",
          "maxLength": 255
        },
        "voucherId": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceId": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceNumber": {
          "type": "string"
        },
        "invoiceAmount": {
          "description": "BigDecimal",
          "$ref": "#/definitions/TlxNumber"
        },
        "isIncomingInvoice": {
          "type": "boolean",
          "description": "boolean"
        },
        "recurrence": {
          "type": "string",
          "description": "Recurrence type",
          "enum": ["NONE", "DAILY", "WEEKLY", "MONTHLY"]
        },
        "category": {
          "type": "string",
          "description": "Category",
          "enum": [
            "STARTING_BALANCE",
            "NONE",
            "SALARY",
            "ENI",
            "TAX",
            "VAT_RETURNS"
          ]
        },
        "vendorOrCustomerName": {
          "type": "string"
        },
        "isManuallyAdded": {
          "type": "boolean",
          "description": "boolean"
        },
        "batchId": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "TlxNumber": {
      "type": "object"
    },
    "ResponseWrapperBankBalanceEstimation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankBalanceEstimation"
        }
      }
    },
    "ResponseWrapperListBankBalanceEstimation": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankBalanceEstimation"
          }
        }
      }
    },
    "ListResponseBankBalanceEstimation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankBalanceEstimation"
          }
        }
      }
    },
    "ResponseWrapperObject": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      }
    },
    "ResponseWrapperBankTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankTransaction"
        }
      }
    },
    "ListResponseBankTransaction": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        }
      }
    },
    "Banner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "bannerType": {
          "type": "string",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "button": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "link": {
          "type": "string",
          "readOnly": true
        },
        "tag": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "done": {
          "type": "boolean",
          "readOnly": true
        },
        "cancellable": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperBanner": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Banner"
        }
      }
    },
    "ListResponseBanner": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Banner"
          }
        }
      }
    },
    "ApiConsumer": {
      "type": "object",
      "required": ["consumerName", "emails"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "consumerName": {
          "type": "string",
          "minLength": 5,
          "maxLength": 100
        },
        "emails": {
          "type": "string",
          "format": "email",
          "maxLength": 255
        }
      }
    },
    "ResponseWrapperApiConsumer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ApiConsumer"
        }
      }
    },
    "ListResponseApiConsumer": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiConsumer"
          }
        }
      }
    },
    "ConsumerToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperConsumerToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ConsumerToken"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "developerMessage": {
          "type": "string"
        },
        "validationMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiValidationMessage"
          }
        },
        "requestId": {
          "type": "string"
        }
      }
    },
    "ApiValidationMessage": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "rootId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Company": {
      "type": "object",
      "required": ["address", "name", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "faxNumber": {
          "type": "string",
          "maxLength": 100
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        }
      }
    },
    "EmployeeCompanyDTO": {
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ListResponseEmployeeCompanyDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeCompanyDTO"
          }
        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": ["appSecret", "password", "username"],
      "properties": {
        "username": {
          "type": "string",
          "description": "Users username (email)"
        },
        "password": {
          "type": "string",
          "description": "Users password"
        },
        "appSecret": {
          "type": "string",
          "description": "App secret"
        },
        "mfaCode": {
          "type": "integer",
          "format": "int32",
          "description": "Optional mfa auth code"
        }
      }
    },
    "EmployeeToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "token": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        }
      }
    },
    "EmployeeTokenBundle": {
      "type": "object",
      "properties": {
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "robotEmployee": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ResponseWrapperEmployeeTokenBundle": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeTokenBundle"
        }
      }
    },
    "ResponseWrapperEmployeeToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeToken"
        }
      }
    },
    "MobileAppLogin": {
      "type": "object",
      "required": ["appSecret", "expirationDate", "password", "username"],
      "properties": {
        "username": {
          "type": "string",
          "description": "Users username (email)"
        },
        "password": {
          "type": "string",
          "description": "Users password"
        },
        "appSecret": {
          "type": "string",
          "description": "App secret"
        },
        "mfaCode": {
          "type": "integer",
          "format": "int32",
          "description": "Optional mfa auth code"
        },
        "expirationDate": {
          "type": "string",
          "description": "Expiration date for the combined token"
        },
        "employeeId": {
          "type": "integer",
          "format": "int32",
          "description": "Optional employee ID. Default employee is used when null"
        }
      }
    },
    "AutoLogin": {
      "type": "object",
      "properties": {
        "loginUrl": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperAutoLogin": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AutoLogin"
        }
      }
    },
    "AutoLoginPayloadDTO": {
      "type": "object",
      "properties": {
        "redirectPath": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperSessionToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SessionToken"
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "required": ["expirationDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "consumerToken": {
          "$ref": "#/definitions/ConsumerToken"
        },
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "expirationDate": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "encryptionKey": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        }
      }
    },
    "LoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "companyId": {
          "type": "integer",
          "format": "int32"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperLoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LoggedInUserInfoDTO"
        }
      }
    },
    "ListResponseCompany": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        }
      }
    },
    "ResponseWrapperCompany": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Company"
        }
      }
    },
    "AltinnCompanyModule": {
      "type": "object",
      "required": ["altInnId", "altInnPassword"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "altInnId": {
          "type": "integer",
          "format": "int32"
        },
        "altInnPassword": {
          "type": "string",
          "minLength": 1,
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperAltinnCompanyModule": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AltinnCompanyModule"
        }
      }
    },
    "CompanyAuthorityDTO": {
      "type": "object",
      "properties": {
        "hasCompanyAuthority": {
          "type": "string",
          "enum": ["DENIED", "MANUAL_CHECK", "ACCEPTED"]
        }
      }
    },
    "ResponseWrapperCompanyAuthorityDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyAuthorityDTO"
        }
      }
    },
    "Modules": {
      "type": "object",
      "properties": {
        "accounting": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "invoice": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "salary": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "salaryStartDate": {
          "type": "string",
          "format": "date"
        },
        "project": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "ocr": {
          "type": "boolean"
        },
        "remit": {
          "type": "boolean"
        },
        "electronicVouchers": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "electro": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "vvs": {
          "type": "boolean",
          "description": "Not readable. Only for input."
        },
        "agro": {
          "type": "boolean"
        },
        "mamut": {
          "type": "boolean"
        },
        "approveVoucher": {
          "type": "boolean",
          "description": "Only readable for now",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperModules": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Modules"
        }
      }
    },
    "ResponseWrapperSalesModuleDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesModuleDTO"
        }
      }
    },
    "SalesModuleDTO": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "MAMUT",
            "MAMUT_WITH_WAGE",
            "AGRO_LICENCE",
            "AGRO_CLIENT",
            "AGRO_DOCUMENT_CENTER",
            "AGRO_INVOICE",
            "AGRO_INVOICE_MIGRATED",
            "AGRO_WAGE",
            "NO1TS",
            "NO1TS_TRAVELREPORT",
            "NO1TS_ACCOUNTING",
            "BASIS",
            "SMART",
            "KOMPLETT",
            "VVS",
            "ELECTRO",
            "ACCOUNTING_OFFICE",
            "SMART_WAGE",
            "SMART_TIME_TRACKING",
            "SMART_PROJECT",
            "OCR",
            "ELECTRONIC_VOUCHERS",
            "UP_TO_500_VOUCHERS",
            "UP_TO_1000_VOUCHERS",
            "UP_TO_2000_VOUCHERS",
            "UP_TO_3500_VOUCHERS",
            "UP_TO_5000_VOUCHERS",
            "UP_TO_10000_VOUCHERS",
            "UNLIMITED_VOUCHERS"
          ]
        },
        "costStartDate": {
          "type": "string"
        }
      }
    },
    "ListResponseSalesModuleDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          }
        }
      }
    },
    "ResponseWrapperContact": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ListResponseContact": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        }
      }
    },
    "ResponseWrapperCountry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Country"
        }
      }
    },
    "ListResponseCountry": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      }
    },
    "ResponseWrapperCurrency": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Currency"
        }
      }
    },
    "ListResponseCurrency": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          }
        }
      }
    },
    "CurrencyExchangeRate": {
      "type": "object",
      "required": ["sourceCurrency", "targetCurrency"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "targetCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "sourceCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "rate": {
          "type": "number",
          "minimum": 0
        },
        "source": {
          "type": "string",
          "description": "Source of exchange rates, i.e Norges Bank",
          "enum": ["NORGES_BANK", "HALLONEN"]
        },
        "date": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperCurrencyExchangeRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CurrencyExchangeRate"
        }
      }
    },
    "ResponseWrapperCustomer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "ListResponseCustomer": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        }
      }
    },
    "ResponseWrapperCustomerCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomerCategory"
        }
      }
    },
    "ListResponseCustomerCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerCategory"
          }
        }
      }
    },
    "DashboardDTO": {
      "type": "object",
      "required": ["content", "version"],
      "properties": {
        "version": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "content": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "ResponseWrapperDashboardDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/DashboardDTO"
        }
      }
    },
    "ResponseWrapperDepartment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Department"
        }
      }
    },
    "ListResponseDepartment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Department"
          }
        }
      }
    },
    "ResponseWrapperDivision": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Division"
        }
      }
    },
    "ListResponseDivision": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Division"
          }
        }
      }
    },
    "ResponseWrapperDocument": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "DocumentArchive": {
      "type": "object",
      "required": ["fileName", "mimeType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "fileName": {
          "type": "string",
          "description": "The name of the document.",
          "maxLength": 255
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the document in readable format.",
          "readOnly": true,
          "minimum": 0
        },
        "archiveDate": {
          "type": "string"
        },
        "mimeType": {
          "type": "string",
          "description": "Type of the document",
          "maxLength": 100
        }
      }
    },
    "ResponseWrapperDocumentArchive": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/DocumentArchive"
        }
      }
    },
    "ListResponseDocumentArchive": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentArchive"
          }
        }
      }
    },
    "ResponseWrapperEmployee": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ListResponseEmployee": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employee"
          }
        }
      }
    },
    "EmployeeEmail": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "Employee e-mail address",
          "minLength": 1
        }
      }
    },
    "ResponseWrapperEmployeeCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeCategory"
        }
      }
    },
    "ListResponseEmployeeCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmployeeCategory"
          }
        }
      }
    },
    "ResponseWrapperEmployment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employment"
        }
      }
    },
    "ListResponseEmployment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employment"
          }
        }
      }
    },
    "ResponseWrapperEmploymentDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmploymentDetails"
        }
      }
    },
    "ListResponseEmploymentDetails": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        }
      }
    },
    "EmploymentType": {
      "type": "object",
      "required": ["employmentType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employmentType": {
          "type": "string",
          "description": "Defines the employment type option. ",
          "enum": ["ORDINARY", "MARITIME", "FREELANCE"]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseEmploymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentType"
          }
        }
      }
    },
    "LeaveOfAbsence": {
      "type": "object",
      "required": ["percentage", "startDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "leaveOfAbsenceId": {
          "type": "string",
          "description": "Existing leave of absence ID used by the current accounting system",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "percentage": {
          "type": "number"
        },
        "isWageDeduction": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "description": "Define the leave of absence type.",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE"
          ]
        }
      }
    },
    "ResponseWrapperLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LeaveOfAbsence"
        }
      }
    },
    "ListResponseLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaveOfAbsence"
          }
        }
      }
    },
    "LeaveOfAbsenceType": {
      "type": "object",
      "required": ["leaveOfAbsenceType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "leaveOfAbsenceType": {
          "type": "string",
          "description": "Defines the leave of absence type option.",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseLeaveOfAbsenceType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaveOfAbsenceType"
          }
        }
      }
    },
    "ListResponseOccupationCode": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OccupationCode"
          }
        }
      }
    },
    "ListResponseRemunerationType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationType"
          }
        }
      }
    },
    "RemunerationType": {
      "type": "object",
      "required": ["remunerationType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "remunerationType": {
          "type": "string",
          "description": "Defines the remuneration type option. ",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "ListResponseWorkingHoursScheme": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkingHoursScheme"
          }
        }
      }
    },
    "WorkingHoursScheme": {
      "type": "object",
      "required": ["workingHoursScheme"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "workingHoursScheme": {
          "type": "string",
          "description": "Defines the working hours scheme option.",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "HourlyCostAndRate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "date": {
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "budgetRate": {
          "type": "number"
        },
        "hourCostRate": {
          "type": "number"
        }
      }
    },
    "ResponseWrapperHourlyCostAndRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/HourlyCostAndRate"
        }
      }
    },
    "ListResponseHourlyCostAndRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HourlyCostAndRate"
          }
        }
      }
    },
    "NextOfKin": {
      "type": "object",
      "required": ["name", "phoneNumber"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 20
        },
        "address": {
          "type": "string",
          "maxLength": 255
        },
        "typeOfRelationship": {
          "type": "string",
          "description": "Define the employee's next of kin relationtype.<br>SPOUSE<br>PARTNER<br>PARENT<br>CHILD<br>SIBLING",
          "enum": ["SPOUSE", "PARTNER", "PARENT", "CHILD", "SIBLING"]
        }
      }
    },
    "ResponseWrapperNextOfKin": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/NextOfKin"
        }
      }
    },
    "ListResponseNextOfKin": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NextOfKin"
          }
        }
      }
    },
    "ResponseWrapperStandardTime": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/StandardTime"
        }
      }
    },
    "StandardTime": {
      "type": "object",
      "required": ["fromDate", "hoursPerDay"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fromDate": {
          "type": "string"
        },
        "hoursPerDay": {
          "type": "number"
        }
      }
    },
    "ListResponseStandardTime": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StandardTime"
          }
        }
      }
    },
    "Entitlement": {
      "type": "object",
      "required": ["customer", "employee", "entitlementId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "description": "Employee which has this privilege",
          "$ref": "#/definitions/Employee"
        },
        "name": {
          "type": "string",
          "description": "Descriptive name for the privilege. Might change between releases.",
          "readOnly": true
        },
        "entitlementId": {
          "type": "integer",
          "format": "int32",
          "description": "Unique id for the type of privilege."
        },
        "customer": {
          "description": "The company this role applies for",
          "$ref": "#/definitions/Company"
        }
      }
    },
    "ResponseWrapperEntitlement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Entitlement"
        }
      }
    },
    "ListResponseEntitlement": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        }
      }
    },
    "RestrictedEntitlementChangeDTO": {
      "type": "object",
      "properties": {
        "change": {
          "type": "string"
        },
        "customerId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EventInfoDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        },
        "examples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebHookWrapper"
          }
        }
      }
    },
    "ResponseWrapperEventInfoDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EventInfoDTO"
        }
      }
    },
    "WebHookWrapper": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        },
        "event": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EventInfoDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperMapStringEventInfoDescription": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EventInfoDescription"
          }
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": ["date", "message", "title", "type"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "maxLength": 100
        },
        "message": {
          "type": "string",
          "maxLength": 255
        },
        "type": {
          "type": "string",
          "maxLength": 50
        },
        "category": {
          "type": "string"
        },
        "link": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "ResponseWrapperNotification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Notification"
        }
      }
    },
    "ResponseWrapperUnreadCountDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/UnreadCountDTO"
        }
      }
    },
    "UnreadCountDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "readCursor": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ListResponseNotification": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        }
      }
    },
    "ResponseWrapperSubscription": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": ["event", "targetUrl"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "event": {
          "type": "string",
          "example": "customer.create",
          "description": "Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
          "minLength": 1,
          "maxLength": 255
        },
        "targetUrl": {
          "type": "string",
          "example": "https://username:password@myintegration.example/tripletexCallback",
          "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.",
          "minLength": 1,
          "maxLength": 255
        },
        "fields": {
          "type": "string",
          "example": "id,version,number",
          "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
          "maxLength": 255
        },
        "status": {
          "type": "string",
          "description": "The status of the subscription.",
          "readOnly": true,
          "enum": [
            "ACTIVE",
            "DISABLED",
            "DISABLED_TOO_MANY_ERRORS",
            "DISABLED_RATE_LIMIT_EXCEEDED",
            "DISABLED_MISUSE"
          ]
        },
        "authHeaderName": {
          "type": "string",
          "example": "Authorization",
          "description": "Custom authentication header name",
          "maxLength": 255
        },
        "authHeaderValue": {
          "type": "string",
          "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
          "description": "Custom authentication header value (write only)",
          "maxLength": 4096
        }
      }
    },
    "ListResponseSubscription": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        }
      }
    },
    "AutoPayMessageDTO": {
      "type": "object",
      "required": ["message", "messageId", "messageType"],
      "properties": {
        "messageId": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ApproveResponseDTO": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string",
          "description": "The redirect URL to AutoPay 2FA after payments are sent to be approved"
        },
        "toBeApproved": {
          "type": "array",
          "description": "List of payments that will be sent to AutoPay approval",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        },
        "notApproved": {
          "type": "array",
          "description": "List of payments that won't be sent to AutoPay approval",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        }
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "paymentDate": {
          "type": "string",
          "readOnly": true
        },
        "bookingDate": {
          "type": "string",
          "readOnly": true
        },
        "valueDate": {
          "type": "string",
          "readOnly": true
        },
        "amountCurrency": {
          "type": "number",
          "description": "In the specified currency.",
          "readOnly": true
        },
        "currency": {
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "creditorBankName": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "creditorBankAddress": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "creditorBankPostalCode": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "creditorBankPostalCity": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "status": {
          "type": "string",
          "description": "The payment status.NOT_APPROVED: Payment not approved yet.<br>APPROVED: Payment approved, but not yet sent to bank.<br>SENT_TO_AUTOPAY: Payment sent to bank.<br>RECEIVED_BY_BANK: Payment received by the bank.<br>ACCEPTED_BY_BANK: Payment that was accepted by the bank.<br>FAILED: Payment that failed.<br>CANCELLED: Cancelled payment.<br>SUCCESS: Payment that ended successfully.<br>",
          "readOnly": true,
          "enum": [
            "NOT_APPROVED",
            "APPROVED",
            "SENT_TO_AUTOPAY",
            "RECEIVED_BY_BANK",
            "ACCEPTED_BY_BANK",
            "FAILED",
            "CANCELLED",
            "SUCCESS"
          ]
        },
        "isFinalStatus": {
          "type": "boolean",
          "readOnly": true
        },
        "isForeignPayment": {
          "type": "boolean",
          "readOnly": true
        },
        "isSalary": {
          "type": "boolean",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "kid": {
          "type": "string",
          "description": "KID - Kundeidentifikasjonsnummer.",
          "readOnly": true,
          "maxLength": 25
        },
        "receiverReference": {
          "type": "string",
          "readOnly": true,
          "maxLength": 250
        },
        "sourceVoucher": {
          "description": "Vouchere that was paid.",
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "postings": {
          "description": "The payment posting.",
          "readOnly": true,
          "$ref": "#/definitions/Posting"
        },
        "account": {
          "description": "The payment account.",
          "readOnly": true,
          "$ref": "#/definitions/Account"
        },
        "amountInAccountCurrency": {
          "type": "number",
          "description": "Amount specified in the currency of the bank agreements account.",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperApproveResponseDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ApproveResponseDTO"
        }
      }
    },
    "ResponseWrapperPayment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Payment"
        }
      }
    },
    "ListResponsePayment": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payment"
          }
        }
      }
    },
    "LinkMobilityReportDTO": {
      "type": "object",
      "properties": {
        "refId": {
          "type": "string"
        },
        "operator": {
          "type": "string"
        },
        "resultCode": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PG2CallbackDTO": {
      "type": "object",
      "required": [
        "ODPCompanyID",
        "ODPCustomerID",
        "autoPayKey",
        "autoPayKeyLastGeneratedDate",
        "pgRequestId",
        "tenantId"
      ],
      "properties": {
        "odpcustomerID": {
          "type": "integer",
          "format": "int32"
        },
        "odpcompanyID": {
          "type": "integer",
          "format": "int32"
        },
        "pgRequestId": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        },
        "ODPCustomerID": {
          "type": "integer",
          "format": "int32"
        },
        "ODPCompanyID": {
          "type": "integer",
          "format": "int32"
        },
        "autoPayKey": {
          "type": "string"
        },
        "autoPayKeyLastGeneratedDate": {
          "type": "string",
          "format": "date"
        }
      }
    },
    "ResponseWrapperInventory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Inventory"
        }
      }
    },
    "ListResponseInventory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        }
      }
    },
    "Inventories": {
      "type": "object",
      "properties": {
        "product": {
          "readOnly": true,
          "$ref": "#/definitions/Product"
        },
        "stock": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Stock"
          }
        }
      }
    },
    "ListResponseInventories": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventories"
          }
        }
      }
    },
    "Stock": {
      "type": "object",
      "properties": {
        "inventory": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "openingStock": {
          "type": "number",
          "readOnly": true
        },
        "changesInPeriod": {
          "type": "number",
          "readOnly": true
        },
        "closingStock": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperInventoryLocation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/InventoryLocation"
        }
      }
    },
    "ListResponseInventoryLocation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InventoryLocation"
          }
        }
      }
    },
    "ResponseWrapperStocktaking": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Stocktaking"
        }
      }
    },
    "Stocktaking": {
      "type": "object",
      "required": ["date", "inventory"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "typeOfStocktaking": {
          "type": "string",
          "description": "[Deprecated] Define the type of stoctaking.<br>ALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.<br>INCLUDE_PRODUCTS: Create a stocktaking which includes all products.<br>NO_PRODUCTS: Create a stocktaking without products.<br>If not specified, the value 'ALL_PRODUCTS_WITH_INVENTORIES' is used.",
          "enum": [
            "ALL_PRODUCTS_WITH_INVENTORIES",
            "INCLUDE_PRODUCTS",
            "NO_PRODUCTS"
          ]
        },
        "inventory": {
          "description": "The inventory this applies for",
          "$ref": "#/definitions/Inventory"
        },
        "isCompleted": {
          "type": "boolean"
        }
      }
    },
    "ListResponseStocktaking": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Stocktaking"
          }
        }
      }
    },
    "ProductLine": {
      "type": "object",
      "required": ["product", "stocktaking"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "stocktaking": {
          "$ref": "#/definitions/Stocktaking"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "count": {
          "type": "number"
        },
        "unitCostCurrency": {
          "type": "number",
          "description": "Unit price purchase (cost) excluding VAT in the order's currency"
        },
        "costCurrency": {
          "type": "number",
          "readOnly": true
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperProductLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductLine"
        }
      }
    },
    "ListResponseProductLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductLine"
          }
        }
      }
    },
    "ResponseWrapperInvoice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ListResponseInvoice": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        }
      }
    },
    "MaventaEventDataDTO": {
      "type": "object",
      "required": [
        "destination",
        "id",
        "invoice_id",
        "invoice_number",
        "network",
        "profiles",
        "recipient_bid",
        "recipient_name"
      ],
      "properties": {
        "invoice_id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "recipient_name": {
          "type": "string"
        },
        "recipient_bid": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error_message": {
          "type": "string"
        }
      }
    },
    "MaventaStatusDTO": {
      "type": "object",
      "required": ["company_id", "event", "event_data", "event_timestamp"],
      "properties": {
        "event": {
          "type": "string"
        },
        "company_id": {
          "type": "string"
        },
        "event_timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "event_data": {
          "$ref": "#/definitions/MaventaEventDataDTO"
        }
      }
    },
    "PaymentType": {
      "type": "object",
      "required": ["description"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "debitAccount": {
          "$ref": "#/definitions/Account"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "customer": {
          "readOnly": true,
          "$ref": "#/definitions/Customer"
        },
        "supplier": {
          "readOnly": true,
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "ResponseWrapperPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentType"
        }
      }
    },
    "ListResponsePaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentType"
          }
        }
      }
    },
    "ResponseWrapperProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectInvoiceDetails"
        }
      }
    },
    "ListResponseProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          }
        }
      }
    },
    "LedgerAccount": {
      "type": "object",
      "properties": {
        "account": {
          "readOnly": true,
          "$ref": "#/definitions/Account"
        },
        "sumAmount": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "sumAmountCurrency": {
          "type": "number",
          "readOnly": true
        },
        "openingBalance": {
          "type": "number",
          "readOnly": true
        },
        "openingBalanceCurrency": {
          "type": "number",
          "readOnly": true
        },
        "closingBalance": {
          "type": "number",
          "readOnly": true
        },
        "closingBalanceCurrency": {
          "type": "number",
          "readOnly": true
        },
        "postings": {
          "type": "array",
          "description": "Link to postings on this account.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ListResponseLedgerAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LedgerAccount"
          }
        }
      }
    },
    "ListResponseSupplierBalance": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupplierBalance"
          }
        }
      }
    },
    "SupplierBalance": {
      "type": "object",
      "properties": {
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "balanceIn": {
          "type": "number",
          "readOnly": true
        },
        "balanceChange": {
          "type": "number",
          "readOnly": true
        },
        "balanceOut": {
          "type": "number",
          "readOnly": true
        },
        "balanceInCurrencies": {
          "type": "array",
          "description": "Currencies that have been used prior to this period, for the given filter",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Currency"
          }
        },
        "sumAmountNegative": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "ListResponseAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        }
      }
    },
    "ResponseWrapperAccountingPeriod": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountingPeriod"
        }
      }
    },
    "ListResponseAccountingPeriod": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountingPeriod"
          }
        }
      }
    },
    "AnnualAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperAnnualAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AnnualAccount"
        }
      }
    },
    "ListResponseAnnualAccount": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnualAccount"
          }
        }
      }
    },
    "ResponseWrapperCloseGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CloseGroup"
        }
      }
    },
    "ListResponseCloseGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloseGroup"
          }
        }
      }
    },
    "PaymentTypeOut": {
      "type": "object",
      "required": ["creditAccount", "description"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "isBruttoWageDeduction": {
          "type": "boolean",
          "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "showIncomingInvoice": {
          "type": "boolean",
          "description": "true if the payment type should be available in supplier invoices"
        },
        "showWagePayment": {
          "type": "boolean",
          "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting"
        },
        "showVatReturns": {
          "type": "boolean",
          "description": "true if the payment type should be available in vat returns"
        },
        "showWagePeriodTransaction": {
          "type": "boolean",
          "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting"
        },
        "requiresSeparateVoucher": {
          "type": "boolean",
          "description": "true if a separate voucher is required"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "determines in which order the types should be listed. No 1 is listed first"
        },
        "isInactive": {
          "type": "boolean",
          "description": "true if the payment type should be hidden from available payment types"
        }
      }
    },
    "ResponseWrapperPaymentTypeOut": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentTypeOut"
        }
      }
    },
    "ListResponsePaymentTypeOut": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentTypeOut"
          }
        }
      }
    },
    "ListResponsePosting": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "ResponseWrapperPosting": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Posting"
        }
      }
    },
    "ResponseWrapperVatType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VatType"
        }
      }
    },
    "ListResponseVatType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VatType"
          }
        }
      }
    },
    "ResponseWrapperVoucher": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Voucher"
        }
      }
    },
    "ListResponseVoucher": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        }
      }
    },
    "Delete": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "description": "Is the delete operation available for this Voucher?",
          "readOnly": true
        },
        "reasons": {
          "type": "array",
          "description": "If the delete operation is not available then this is a list of reasons why. Otherwise the list will be empty",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseWrapperVoucherOptions": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherOptions"
        }
      }
    },
    "VoucherOptions": {
      "type": "object",
      "properties": {
        "delete": {
          "description": "A data structure containing information about the delete operation.",
          "readOnly": true,
          "$ref": "#/definitions/Delete"
        }
      }
    },
    "VoucherSearchResponse": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "totalNumberOfPostings": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Number of postings returned (if postings are returned)"
        }
      }
    },
    "ResponseWrapperVoucherType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherType"
        }
      }
    },
    "ListResponseVoucherType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoucherType"
          }
        }
      }
    },
    "ListResponseSearchCompletionDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchCompletionDTO"
          }
        }
      }
    },
    "SearchCompletionDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        },
        "id": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "ListResponsePersonAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonAutoCompleteDTO"
          }
        }
      }
    },
    "PersonAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        },
        "reserved": {
          "type": "boolean"
        }
      }
    },
    "CompanyAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        },
        "companyCode": {
          "type": "string"
        },
        "companyType": {
          "type": "integer",
          "format": "int32"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ListResponseCompanyAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAutoCompleteDTO"
          }
        }
      }
    },
    "ResponseWrapperTripDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripDTO"
        }
      }
    },
    "TripDTO": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "number"
        },
        "travelTimeInMinutes": {
          "type": "number"
        },
        "sumTollNOK": {
          "type": "number"
        }
      }
    },
    "AppSpecific": {
      "type": "object",
      "properties": {
        "hourRegistrationEnabled": {
          "type": "boolean"
        },
        "projectEnabled": {
          "type": "boolean"
        },
        "departmentEnabled": {
          "type": "boolean"
        },
        "userIsAllowedToRegisterHours": {
          "type": "boolean"
        },
        "payrollAccountingEnabled": {
          "type": "boolean"
        },
        "userIsAuthWageMenu": {
          "type": "boolean"
        },
        "userIsAuthMySalary": {
          "type": "boolean"
        },
        "electronicVouchersEnabled": {
          "type": "boolean"
        },
        "travelExpenseEnabled": {
          "type": "boolean"
        },
        "documentArchiveEnabled": {
          "type": "boolean"
        },
        "archiveReceptionEnabled": {
          "type": "boolean"
        },
        "userIsPayslipOnly": {
          "type": "boolean"
        },
        "travelExpenseRatesEnabled": {
          "type": "boolean"
        },
        "taxFreeMileageRatesEnabled": {
          "type": "boolean"
        },
        "approveTravelExpenseEnabled": {
          "type": "boolean"
        },
        "userIsAuthProjectInfo": {
          "type": "boolean"
        },
        "userIsAuthTravelAndExpenseApprove": {
          "type": "boolean"
        },
        "userIsAuthEmployeeInfo": {
          "type": "boolean"
        },
        "userIsAuthVoucherApprove": {
          "type": "boolean"
        },
        "userIsAuthRemitApprove": {
          "type": "boolean"
        },
        "userIsAuthInvoicing": {
          "type": "boolean"
        },
        "userIsAuthCreateOrder": {
          "type": "boolean"
        },
        "vatOnForCompany": {
          "type": "boolean"
        },
        "taxFreeDietRatesEnabled": {
          "type": "boolean"
        },
        "travelDietIgnorePostingEnabled": {
          "type": "boolean"
        },
        "employeeEnabled": {
          "type": "boolean"
        },
        "hourBalanceEnabledForEmployee": {
          "type": "boolean"
        },
        "vacationBalanceEnabledForEmployee": {
          "type": "boolean"
        },
        "userIsAuthCreateCustomer": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperAppSpecific": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AppSpecific"
        }
      }
    },
    "ListResponseMunicipality": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Municipality"
          }
        }
      }
    },
    "PageOptions": {
      "type": "object",
      "required": ["data"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "key": {
          "type": "string",
          "description": "The lookup key for this PageOptions entry",
          "maxLength": 255
        },
        "type": {
          "type": "string",
          "description": "The type that `data` is",
          "enum": ["IncomingInvoiceViewOptions", "PurchaseOrderOverviewOptions"]
        },
        "level": {
          "type": "string",
          "description": "The level that `data` is stored at",
          "enum": ["Employee", "Company"]
        },
        "data": {
          "type": "object",
          "description": "The actual options as a JSON blob",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ResponseWrapperPageOptions": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PageOptions"
        }
      }
    },
    "ResponseWrapperOrder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "ListResponseOrder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "OrderOffer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "offerDate": {
          "type": "string"
        },
        "customer": {
          "description": "The offer's customer",
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "ResponseWrapperOrderOffer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderOffer"
        }
      }
    },
    "ListResponseOrderOffer": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderOffer"
          }
        }
      }
    },
    "ResponseWrapperOrderGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderGroup"
        }
      }
    },
    "ListResponseOrderGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderGroup"
          }
        }
      }
    },
    "ResponseWrapperOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderLine"
        }
      }
    },
    "ListResponseOrderLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        }
      }
    },
    "ExternalProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "elNumber": {
          "type": "string",
          "maxLength": 14
        },
        "nrfNumber": {
          "type": "string",
          "maxLength": 14
        },
        "costExcludingVatCurrency": {
          "type": "number",
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "readOnly": true
        },
        "priceExcludingVatCurrency": {
          "type": "number",
          "description": "Price of purchase excluding VAT in the product's currency"
        },
        "priceIncludingVatCurrency": {
          "type": "number",
          "description": "Price of purchase including VAT in the product's currency"
        },
        "isInactive": {
          "type": "boolean"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "isStockItem": {
          "type": "boolean"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "discountPrice": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperExternalProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ExternalProduct"
        }
      }
    },
    "ListResponseExternalProduct": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalProduct"
          }
        }
      }
    },
    "ResponseWrapperProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "ListResponseProduct": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        }
      }
    },
    "ListResponseProductNews": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductNews"
          }
        }
      }
    },
    "ProductNews": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "publish_date": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "permalink": {
          "type": "string"
        }
      }
    },
    "ProductInventoryLocation": {
      "type": "object",
      "required": ["inventory", "product"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "$ref": "#/definitions/InventoryLocation"
        },
        "isMainLocation": {
          "type": "boolean"
        },
        "stockOfGoods": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProductInventoryLocation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductInventoryLocation"
        }
      }
    },
    "ListResponseProductInventoryLocation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductInventoryLocation"
          }
        }
      }
    },
    "LogisticsSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "hasWarehouseLocation": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperLogisticsSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LogisticsSettings"
        }
      }
    },
    "ProductGroup": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Product group name",
          "maxLength": 255
        },
        "parentGroup": {
          "description": "Product group parent",
          "$ref": "#/definitions/ProductGroup"
        },
        "isDeletable": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProductGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroup"
        }
      }
    },
    "ListResponseProductGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductGroup"
          }
        }
      }
    },
    "ProductGroupRelation": {
      "type": "object",
      "required": ["product", "productGroup"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productGroup": {
          "$ref": "#/definitions/ProductGroup"
        }
      }
    },
    "ResponseWrapperProductGroupRelation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroupRelation"
        }
      }
    },
    "ListResponseProductGroupRelation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductGroupRelation"
          }
        }
      }
    },
    "ListResponseProductPrice": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        }
      }
    },
    "ProductPrice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "purchasePrice": {
          "description": "Purchase Price excluding VAT",
          "$ref": "#/definitions/TlxNumber"
        },
        "costPrice": {
          "description": "Cost Price",
          "$ref": "#/definitions/TlxNumber"
        },
        "salesPriceExcludingVat": {
          "description": "Sales Price excluding VAT",
          "$ref": "#/definitions/TlxNumber"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "salesPriceIncludingVat": {
          "description": "Sales Price including VAT",
          "$ref": "#/definitions/TlxNumber"
        }
      }
    },
    "ResponseWrapperProductUnit": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnit"
        }
      }
    },
    "ListResponseProductUnit": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductUnit"
          }
        }
      }
    },
    "ProductUnitMaster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "nameShort": {
          "type": "string",
          "readOnly": true,
          "maxLength": 50
        },
        "commonCode": {
          "type": "string",
          "readOnly": true,
          "maxLength": 50
        },
        "peppolName": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "peppolSymbol": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "isInactive": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProductUnitMaster": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnitMaster"
        }
      }
    },
    "ListResponseProductUnitMaster": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductUnitMaster"
          }
        }
      }
    },
    "ResponseWrapperProject": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ListResponseProject": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        }
      }
    },
    "ResponseWrapperLong": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResponseWrapperBoolean": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperProjectCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectCategory"
        }
      }
    },
    "ListResponseProjectCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectCategory"
          }
        }
      }
    },
    "ResponseWrapperProjectOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectOrderLine"
        }
      }
    },
    "ListResponseProjectOrderLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          }
        }
      }
    },
    "ResponseWrapperProjectParticipant": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectParticipant"
        }
      }
    },
    "ListResponseProjectParticipant": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          }
        }
      }
    },
    "ProjectPeriodInvoicingReserve": {
      "type": "object",
      "properties": {
        "invoiceFeeReserveCurrency": {
          "type": "number",
          "readOnly": true
        },
        "periodOrderLinesIncomeCurrency": {
          "type": "number",
          "readOnly": true
        },
        "invoiceExtracostsReserveCurrency": {
          "type": "number",
          "readOnly": true
        },
        "invoiceAkontoReserveAmountCurrency": {
          "type": "number",
          "readOnly": true
        },
        "invoiceReserveTotalAmountCurrency": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProjectPeriodInvoicingReserve": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoicingReserve"
        }
      }
    },
    "ProjectPeriodInvoiced": {
      "type": "object",
      "properties": {
        "sumAmountPaid": {
          "type": "number",
          "readOnly": true
        },
        "sumAmountOutstanding": {
          "type": "number",
          "readOnly": true
        },
        "sumAmountDue": {
          "type": "number",
          "readOnly": true
        },
        "sumAmountDueOutstanding": {
          "type": "number",
          "readOnly": true
        },
        "sumAmount": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProjectPeriodInvoiced": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoiced"
        }
      }
    },
    "ProjectPeriodOverallStatus": {
      "type": "object",
      "properties": {
        "income": {
          "type": "number",
          "readOnly": true
        },
        "costs": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProjectPeriodOverallStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodOverallStatus"
        }
      }
    },
    "ListResponseProjectPeriodMonthlyStatus": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectPeriodMonthlyStatus"
          }
        }
      }
    },
    "ProjectPeriodMonthlyStatus": {
      "type": "object",
      "properties": {
        "income": {
          "type": "number",
          "readOnly": true
        },
        "costs": {
          "type": "number",
          "readOnly": true
        },
        "dateFrom": {
          "type": "string",
          "readOnly": true
        },
        "dateTo": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ProjectPeriodHourlyReport": {
      "type": "object",
      "properties": {
        "chargeableHours": {
          "type": "number",
          "readOnly": true
        },
        "nonChargeableHours": {
          "type": "number",
          "readOnly": true
        },
        "approvedButUnchargedHours": {
          "type": "number",
          "readOnly": true
        },
        "nonApprovedHours": {
          "type": "number",
          "readOnly": true
        },
        "registeredHours": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProjectPeriodHourlyReport": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodHourlyReport"
        }
      }
    },
    "ResponseWrapperProjectActivity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectActivity"
        }
      }
    },
    "ProjectControlForm": {
      "type": "object",
      "required": ["comment", "title"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 255
        },
        "comment": {
          "type": "string",
          "minLength": 1
        },
        "completed": {
          "type": "boolean"
        },
        "signatureRequired": {
          "type": "boolean",
          "readOnly": true
        },
        "signed": {
          "type": "boolean",
          "readOnly": true
        },
        "controlForm": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProjectControlForm": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectControlForm"
        }
      }
    },
    "ListResponseProjectControlForm": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectControlForm"
          }
        }
      }
    },
    "ProjectControlFormType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "ResponseWrapperProjectControlFormType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectControlFormType"
        }
      }
    },
    "ListResponseProjectControlFormType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          }
        }
      }
    },
    "ResponseWrapperProjectHourlyRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectHourlyRate"
        }
      }
    },
    "ListResponseProjectHourlyRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          }
        }
      }
    },
    "ResponseWrapperProjectSpecificRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectSpecificRate"
        }
      }
    },
    "ListResponseProjectSpecificRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          }
        }
      }
    },
    "ProjectSettings": {
      "type": "object",
      "properties": {
        "approveHourLists": {
          "type": "boolean"
        },
        "approveInvoices": {
          "type": "boolean"
        },
        "markReadyForInvoicing": {
          "type": "boolean"
        },
        "historicalInformation": {
          "type": "boolean"
        },
        "projectForecast": {
          "type": "boolean"
        },
        "budgetOnSubcontracts": {
          "type": "boolean"
        },
        "projectCategories": {
          "type": "boolean"
        },
        "referenceFee": {
          "type": "boolean"
        },
        "sortOrderProjects": {
          "type": "string",
          "enum": ["SORT_ORDER_NAME_AND_NUMBER", "SORT_ORDER_NAME"]
        },
        "hideInactiveProjects": {
          "type": "boolean"
        },
        "autoCloseInvoicedProjects": {
          "type": "boolean"
        },
        "mustApproveRegisteredHours": {
          "type": "boolean"
        },
        "showProjectOrderLinesToAllProjectParticipants": {
          "type": "boolean"
        },
        "hourCostPercentage": {
          "type": "boolean"
        },
        "fixedPriceProjectsFeeCalcMethod": {
          "type": "string",
          "enum": [
            "FIXED_PRICE_PROJECTS_CALC_METHOD_INVOICED_FEE",
            "FIXED_PRICE_PROJECTS_CALC_METHOD_PERCENT_COMPLETED"
          ]
        },
        "fixedPriceProjectsInvoiceByProgress": {
          "type": "boolean"
        },
        "projectBudgetReferenceFee": {
          "type": "boolean"
        },
        "allowMultipleProjectInvoiceVat": {
          "type": "boolean"
        },
        "standardReinvoicing": {
          "type": "boolean"
        },
        "isCurrentMonthDefaultPeriod": {
          "type": "boolean"
        },
        "autoGenerateProjectNumber": {
          "type": "boolean"
        },
        "autoGenerateStartingNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "projectNameScheme": {
          "type": "string",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ]
        },
        "projectTypeOfContract": {
          "type": "string",
          "enum": ["PROJECT_FIXED_PRICE", "PROJECT_HOUR_RATES"]
        },
        "projectOrderLinesSortOrder": {
          "type": "string",
          "enum": [
            "SORT_ORDER_ID",
            "SORT_ORDER_DATE",
            "SORT_ORDER_PRODUCT",
            "SORT_ORDER_CUSTOM"
          ]
        },
        "projectHourlyRateModel": {
          "type": "string",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ]
        },
        "onlyProjectMembersCanRegisterInfo": {
          "type": "boolean"
        },
        "onlyProjectActivitiesTimesheetRegistration": {
          "type": "boolean"
        },
        "hourlyRateProjectsWriteUpDown": {
          "type": "boolean"
        },
        "defaultProjectContractComment": {
          "type": "string"
        },
        "defaultProjectInvoicingComment": {
          "type": "string"
        },
        "resourcePlanning": {
          "type": "boolean"
        },
        "resourceGroups": {
          "type": "boolean"
        },
        "holidayPlan": {
          "type": "boolean"
        },
        "resourcePlanPeriod": {
          "type": "string",
          "enum": ["PERIOD_MONTH", "PERIOD_WEEK", "PERIOD_DAY"]
        },
        "controlFormsRequiredForInvoicing": {
          "type": "array",
          "description": "Control forms required for invoicing",
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          }
        },
        "controlFormsRequiredForHourTracking": {
          "type": "array",
          "description": "Control forms required for hour tracking",
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          }
        },
        "useLoggedInUserEmailOnProjectBudget": {
          "type": "boolean"
        },
        "emailOnProjectBudget": {
          "type": "string"
        },
        "useLoggedInUserEmailOnProjectContract": {
          "type": "boolean"
        },
        "emailOnProjectContract": {
          "type": "string"
        },
        "useLoggedInUserEmailOnDocuments": {
          "type": "boolean"
        },
        "emailOnDocuments": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperProjectSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectSettings"
        }
      }
    },
    "ListResponseTask": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ProjectHourlyRateTemplate": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string"
        },
        "showInProjectOrder": {
          "type": "boolean",
          "description": "Show on contract confirmation/offers"
        },
        "hourlyRateModel": {
          "type": "string",
          "description": "Defines the model used for the hourly rate.",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ]
        },
        "projectSpecificRates": {
          "type": "array",
          "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRateTemplate"
          }
        },
        "fixedRate": {
          "type": "number",
          "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE."
        }
      }
    },
    "ProjectSpecificRateTemplate": {
      "type": "object",
      "properties": {
        "hourlyRate": {
          "type": "number"
        },
        "hourlyCostPercentage": {
          "type": "number"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "ProjectTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "isInternal": {
          "type": "boolean"
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "displayNameFormat": {
          "type": "string",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ]
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "reference": {
          "type": "string",
          "maxLength": 255
        },
        "externalAccountsNumber": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string"
        },
        "invoiceComment": {
          "type": "string",
          "description": "Comment for project invoices"
        },
        "attention": {
          "description": "Customer in attention of person",
          "$ref": "#/definitions/Contact"
        },
        "contact": {
          "description": "Customer contact person.",
          "$ref": "#/definitions/Contact"
        },
        "customer": {
          "description": "The project's customer",
          "$ref": "#/definitions/Customer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "vatType": {
          "description": "The default vat type for this project.",
          "$ref": "#/definitions/VatType"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "markUpOrderLines": {
          "type": "number",
          "description": "Set mark-up (%) for order lines."
        },
        "markUpFeesEarned": {
          "type": "number",
          "description": "Set mark-up (%) for fees earned."
        },
        "isFixedPrice": {
          "type": "boolean",
          "description": "Project is fixed price if set to true, hourly rate if set to false."
        },
        "fixedprice": {
          "type": "number",
          "description": "Fixed price amount, in the project's currency."
        },
        "isPriceCeiling": {
          "type": "boolean",
          "description": "Set to true if an hourly rate project has a price ceiling."
        },
        "priceCeilingAmount": {
          "type": "number",
          "description": "Price ceiling amount, in the project's currency."
        },
        "generalProjectActivitiesPerProjectOnly": {
          "type": "boolean",
          "description": "Set to true if a general project activity must be linked to project to allow time tracking."
        },
        "forParticipantsOnly": {
          "type": "boolean",
          "description": "Set to true if only project participants can register information on the project"
        },
        "projectHourlyRates": {
          "type": "array",
          "description": "Project Rate Types tied to the project.",
          "items": {
            "$ref": "#/definitions/ProjectHourlyRateTemplate"
          }
        }
      }
    },
    "ResponseWrapperProjectTemplate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectTemplate"
        }
      }
    },
    "Prospect": {
      "type": "object",
      "required": ["createdDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "description": {
          "type": "string"
        },
        "createdDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "salesEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "isClosed": {
          "type": "boolean"
        },
        "closedReason": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "closedDate": {
          "type": "string"
        },
        "competitor": {
          "type": "string",
          "maxLength": 255
        },
        "prospectType": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "project": {
          "description": "The project connected to this prospect.",
          "$ref": "#/definitions/Project"
        },
        "projectOffer": {
          "description": "The project offer connected to this prospect.",
          "$ref": "#/definitions/Project"
        },
        "finalIncomeDate": {
          "type": "string",
          "description": "The estimated start date for income on the prospect."
        },
        "finalInitialValue": {
          "type": "number",
          "description": "The estimated startup fee on this prospect."
        },
        "finalMonthlyValue": {
          "type": "number",
          "description": "The estimated monthly fee on this prospect."
        },
        "finalAdditionalServicesValue": {
          "type": "number",
          "description": "Tripletex specific."
        },
        "totalValue": {
          "type": "number",
          "description": "The estimated total fee on this prospect.",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperProspect": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Prospect"
        }
      }
    },
    "ListResponseProspect": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prospect"
          }
        }
      }
    },
    "PickupPoint": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "code": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "transportType": {
          "readOnly": true,
          "$ref": "#/definitions/TransportType"
        }
      }
    },
    "ResponseWrapperPickupPoint": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PickupPoint"
        }
      }
    },
    "TransportType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "nameKey": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "code": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "isPickUp": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ListResponsePickupPoint": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PickupPoint"
          }
        }
      }
    },
    "PurchaseOrder": {
      "type": "object",
      "required": ["deliveryDate", "ourContact", "supplier"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "string",
          "description": "Purchase order number",
          "readOnly": true,
          "maxLength": 100
        },
        "receiverEmail": {
          "type": "string",
          "description": "Email when purchase order is send by email.",
          "maxLength": 100
        },
        "discount": {
          "type": "number",
          "description": "Discount Percentage"
        },
        "packingNoteMessage": {
          "type": "string",
          "description": "Message on packing note.Wholesaler specific.",
          "maxLength": 50
        },
        "transporterMessage": {
          "type": "string",
          "description": "Message to transporter.Wholesaler specific.",
          "maxLength": 255
        },
        "comments": {
          "type": "string",
          "description": "Delivery information and invoice comments"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "deliveryDate": {
          "type": "string"
        },
        "orderLines": {
          "type": "array",
          "description": "Order lines tied to the purchase order",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/PurchaseOrderline"
          }
        },
        "project": {
          "description": "Project/order",
          "$ref": "#/definitions/Project"
        },
        "department": {
          "description": "Department/order",
          "$ref": "#/definitions/Department"
        },
        "deliveryAddress": {
          "description": "Delivery address",
          "$ref": "#/definitions/Address"
        },
        "creationDate": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean"
        },
        "ourContact": {
          "$ref": "#/definitions/Employee"
        },
        "supplierContact": {
          "description": "Recipient when purchase order is send by email.",
          "$ref": "#/definitions/Employee"
        },
        "attention": {
          "description": "Attention",
          "$ref": "#/definitions/Employee"
        },
        "status": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "STATUS_OPEN",
            "STATUS_SENT",
            "STATUS_RECEIVING",
            "STATUS_CONFIRMED_DEVIATION_DETECTED",
            "STATUS_DEVIATION_OPEN",
            "STATUS_DEVIATION_CONFIRMED",
            "STATUS_CONFIRMED"
          ]
        },
        "currency": {
          "description": "Company currency",
          "$ref": "#/definitions/Currency"
        },
        "restorder": {
          "readOnly": true,
          "$ref": "#/definitions/PurchaseOrder"
        },
        "transportType": {
          "description": "Transport type",
          "$ref": "#/definitions/TransportType"
        },
        "pickupPoint": {
          "description": "Pickup point, wholesaler specific",
          "$ref": "#/definitions/PickupPoint"
        },
        "document": {
          "description": "The PDF representing this PurchaseOrder",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        },
        "attachment": {
          "description": "The attachments on this PurchaseOrder (if any)",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        },
        "ediDocument": {
          "description": "The machine readable document (such as EHF or EFO/NELFO) this PurchaseOrder is based on (if any)",
          "readOnly": true,
          "$ref": "#/definitions/Document"
        }
      }
    },
    "PurchaseOrderline": {
      "type": "object",
      "required": ["purchaseOrder"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "purchaseOrder": {
          "description": "The purchase order to attach the orderline.",
          "$ref": "#/definitions/PurchaseOrder"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "description": {
          "type": "string"
        },
        "count": {
          "type": "number",
          "minimum": 1
        },
        "unitCostCurrency": {
          "type": "number",
          "description": "Unit price purchase (cost) excluding VAT in the order's currency"
        },
        "unitPriceExcludingVatCurrency": {
          "type": "number",
          "description": "Unit price of purchase excluding VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO"
        },
        "currency": {
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true,
          "$ref": "#/definitions/Currency"
        },
        "discount": {
          "type": "number",
          "description": "Discount given as a percentage (%)"
        },
        "amountExcludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line excluding VAT in the order's currency",
          "readOnly": true
        },
        "amountIncludingVatCurrency": {
          "type": "number",
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperPurchaseOrder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      }
    },
    "ListResponsePurchaseOrder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseOrder"
          }
        }
      }
    },
    "ResponseWrapperTransportType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TransportType"
        }
      }
    },
    "ListResponseTransportType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransportType"
          }
        }
      }
    },
    "Deviation": {
      "type": "object",
      "required": ["date", "purchaseOrderLine"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "purchaseOrderLine": {
          "$ref": "#/definitions/OrderLine"
        },
        "date": {
          "type": "string"
        },
        "cause": {
          "type": "string",
          "enum": [
            "CAUSE_DEFECT",
            "CAUSE_TOO_FEW",
            "CAUSE_TOO_MANY",
            "CAUSE_REPLACEMENT"
          ]
        },
        "action": {
          "type": "string",
          "enum": [
            "ACTION_IGNORE",
            "ACTION_GENERATE_RESTORDER",
            "ACTION_RETURN",
            "ACTION_RETURN_GENERATE_RESTORDER"
          ]
        },
        "comment": {
          "type": "string"
        },
        "receivedBy": {
          "type": "string",
          "readOnly": true
        },
        "quantityOrdered": {
          "type": "number",
          "readOnly": true
        },
        "quantityReceived": {
          "type": "number",
          "readOnly": true
        },
        "deviation": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperDeviation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Deviation"
        }
      }
    },
    "ListResponseDeviation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Deviation"
          }
        }
      }
    },
    "GoodsReceipt": {
      "type": "object",
      "required": ["goodsReceiptLines", "registrationDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "registrationDate": {
          "type": "string"
        },
        "receivedBy": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "status": {
          "type": "string",
          "readOnly": true,
          "enum": ["STATUS_OPEN", "STATUS_CONFIRMED"]
        },
        "goodsReceiptLines": {
          "type": "array",
          "description": "Purchase Order lines tied to the goods receipt",
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          }
        }
      }
    },
    "GoodsReceiptLine": {
      "type": "object",
      "required": ["product", "quantityReceived"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "inventory": {
          "description": "If not entered, the default warehouse will be used",
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "description": "Inventory location field -- pilot program",
          "$ref": "#/definitions/InventoryLocation"
        },
        "quantityOrdered": {
          "type": "number",
          "readOnly": true
        },
        "quantityReceived": {
          "type": "number"
        },
        "quantityRest": {
          "type": "number",
          "readOnly": true
        },
        "deviation": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperGoodsReceipt": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceipt"
        }
      }
    },
    "ListResponseGoodsReceipt": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoodsReceipt"
          }
        }
      }
    },
    "ResponseWrapperGoodsReceiptLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceiptLine"
        }
      }
    },
    "ListResponseGoodsReceiptLine": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          }
        }
      }
    },
    "PurchaseOrderIncomingInvoiceRelation": {
      "type": "object",
      "required": ["orderOut", "voucher"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "orderOut": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        }
      }
    },
    "ResponseWrapperPurchaseOrderIncomingInvoiceRelation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
        }
      }
    },
    "ListResponsePurchaseOrderIncomingInvoiceRelation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
          }
        }
      }
    },
    "ResponseWrapperPurchaseOrderline": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderline"
        }
      }
    },
    "ResponseWrapperReminder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Reminder"
        }
      }
    },
    "ListResponseReminder": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reminder"
          }
        }
      }
    },
    "Report": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the report",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "groups": {
          "type": "array",
          "description": "The report must have exactly two groups. The first specifies the columns, the second specifies the rows.",
          "items": {
            "$ref": "#/definitions/ReportGroup"
          }
        }
      }
    },
    "ReportFilterAccount": {
      "type": "object",
      "properties": {
        "rangeFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterRange"
          }
        },
        "singularFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterCustomer": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterDepartment": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterEmployee": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterPeriod": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "string",
          "format": "date"
        },
        "end": {
          "type": "string",
          "format": "date"
        },
        "relativeToPerpendicular": {
          "type": "boolean"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterProduct": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterProject": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterRange": {
      "type": "object",
      "properties": {
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "to": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterSingular": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFilterSupplier": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportGroup": {
      "type": "object",
      "required": ["autoGroupType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name to be shown for the column or row.",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "Currently not in use"
        },
        "autoGroupType": {
          "type": "string",
          "description": "Subgroups that should be automatically generated",
          "enum": [
            "None",
            "Account",
            "Department",
            "Customer",
            "Supplier",
            "Employee",
            "Product",
            "Project",
            "PeriodMonths",
            "PeriodYears",
            "PeriodQuarters",
            "PeriodVATTerms",
            "PeriodWeeks",
            "PeriodDays"
          ]
        },
        "expression": {
          "type": "string",
          "description": "Expression / formula according to Rule Engine Expression Language"
        },
        "variableName": {
          "type": "string",
          "description": "Variable name that can be used to reference this group",
          "maxLength": 100
        },
        "precedence": {
          "type": "integer",
          "format": "int32",
          "description": "Used to select expression if both column and row expression is set. The bigger value wins."
        },
        "valueFormat": {
          "type": "string",
          "description": "Format string for value (how to print number, date etc)",
          "maxLength": 100
        },
        "cellFormat": {
          "type": "string",
          "description": "Format string for cell (indentation, font size etc)",
          "maxLength": 255
        },
        "hideSelf": {
          "type": "boolean",
          "description": "Hide this group?"
        },
        "filter": {
          "$ref": "#/definitions/ReportGroupFilter"
        },
        "children": {
          "type": "array",
          "description": "Child groups",
          "items": {
            "$ref": "#/definitions/ReportGroup"
          }
        }
      }
    },
    "ReportGroupFilter": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/ReportFilterAccount"
        },
        "customer": {
          "$ref": "#/definitions/ReportFilterCustomer"
        },
        "department": {
          "$ref": "#/definitions/ReportFilterDepartment"
        },
        "employee": {
          "$ref": "#/definitions/ReportFilterEmployee"
        },
        "period": {
          "$ref": "#/definitions/ReportFilterPeriod"
        },
        "product": {
          "$ref": "#/definitions/ReportFilterProduct"
        },
        "project": {
          "$ref": "#/definitions/ReportFilterProject"
        },
        "supplier": {
          "$ref": "#/definitions/ReportFilterSupplier"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseWrapperReport": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Report"
        }
      }
    },
    "ListResponseReport": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Report"
          }
        }
      }
    },
    "ResponseWrapperReportGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ReportGroup"
        }
      }
    },
    "ListResponseSystemReportCategoryDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SystemReportCategoryDTO"
          }
        }
      }
    },
    "SystemReportCategoryDTO": {
      "type": "object",
      "properties": {
        "textKey": {
          "type": "string",
          "description": "The text key for the name of the report category"
        },
        "theme": {
          "type": "string",
          "description": "The theme of the report category"
        },
        "icon": {
          "type": "string",
          "description": "The icon for the report category"
        },
        "reports": {
          "type": "array",
          "description": "The reports in this report category",
          "items": {
            "$ref": "#/definitions/SystemReportDTO"
          }
        },
        "subCategories": {
          "type": "array",
          "description": "The report categories in this report category",
          "items": {
            "$ref": "#/definitions/SystemReportCategoryDTO"
          }
        }
      }
    },
    "SystemReportDTO": {
      "type": "object",
      "properties": {
        "textKey": {
          "type": "string",
          "description": "The text key for the name of the report"
        },
        "text": {
          "type": "string",
          "description": "The name of the report"
        },
        "path": {
          "type": "string",
          "description": "The path to the report"
        }
      }
    },
    "ResponseWrapperResultBudget": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ResultBudget"
        }
      }
    },
    "ResultBudget": {
      "type": "object",
      "required": ["account", "accountingPeriod"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "amount": {
          "type": "number"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ListResponseResultBudget": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultBudget"
          }
        }
      }
    },
    "ResponseWrapperSalaryType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryType"
        }
      }
    },
    "ListResponseSalaryType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalaryType"
          }
        }
      }
    },
    "ResponseWrapperSalaryCompilation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryCompilation"
        }
      }
    },
    "SalaryCompilation": {
      "type": "object",
      "properties": {
        "employee": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "vacationPayBasis": {
          "type": "number",
          "readOnly": true
        },
        "wages": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        },
        "expenses": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        },
        "taxDeductions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        },
        "mandatoryTaxDeductions": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          }
        }
      }
    },
    "SalaryCompilationLine": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "readOnly": true
        },
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "taxable": {
          "type": "boolean",
          "readOnly": true
        },
        "taxableDescription": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResponseWrapperPayslip": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Payslip"
        }
      }
    },
    "ListResponsePayslip": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        }
      }
    },
    "ResponseWrapperSalarySettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySettings"
        }
      }
    },
    "SalarySettings": {
      "type": "object",
      "required": ["payrollTaxCalcMethod"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "payrollTaxCalcMethod": {
          "type": "string",
          "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
          "enum": ["AA", "BB", "CC", "DD", "EE", "GG", "JJ", "EMPTY"]
        }
      }
    },
    "CompanyHoliday": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "year": {
          "type": "integer",
          "format": "int32"
        },
        "days": {
          "type": "number"
        },
        "vacationPayPercentage1": {
          "type": "number"
        },
        "vacationPayPercentage2": {
          "type": "number"
        },
        "isMaxPercentage2Amount6G": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperCompanyHoliday": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyHoliday"
        }
      }
    },
    "ListResponseCompanyHoliday": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyHoliday"
          }
        }
      }
    },
    "PensionScheme": {
      "type": "object",
      "required": ["number", "startDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "number": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperPensionScheme": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PensionScheme"
        }
      }
    },
    "ListResponsePensionScheme": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PensionScheme"
          }
        }
      }
    },
    "ResponseWrapperSalarySpecification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySpecification"
        }
      }
    },
    "ListResponseSalarySpecification": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          }
        }
      }
    },
    "ResponseWrapperSalaryTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryTransaction"
        }
      }
    },
    "ListResponseSalaryTransaction": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalaryTransaction"
          }
        }
      }
    },
    "ResponseWrapperSupplier": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "ListResponseSupplier": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Supplier"
          }
        }
      }
    },
    "ResponseWrapperSupplierInvoice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SupplierInvoice"
        }
      }
    },
    "SupplierInvoice": {
      "type": "object",
      "required": ["invoiceDate", "invoiceDueDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "invoiceNumber": {
          "type": "string",
          "description": "Invoice number",
          "maxLength": 100
        },
        "invoiceDate": {
          "type": "string"
        },
        "supplier": {
          "description": "The invoice supplier",
          "$ref": "#/definitions/Supplier"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "kidOrReceiverReference": {
          "type": "string",
          "description": "KID or message"
        },
        "voucher": {
          "description": "The invoice voucher.",
          "$ref": "#/definitions/Voucher"
        },
        "amount": {
          "type": "number",
          "description": "In the company’s currency, typically NOK. Is 0 if value is missing.",
          "readOnly": true
        },
        "amountCurrency": {
          "type": "number",
          "description": "In the specified currency."
        },
        "amountExcludingVat": {
          "type": "number",
          "description": "Amount excluding VAT (NOK). Is 0 if value is missing.",
          "readOnly": true
        },
        "amountExcludingVatCurrency": {
          "type": "number",
          "description": "Amount excluding VAT in the specified currency. Is 0 if value is missing.",
          "readOnly": true
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "isCreditNote": {
          "type": "boolean",
          "readOnly": true
        },
        "orderLines": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "payments": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "originalInvoiceDocumentId": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0
        },
        "approvalListElements": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/VoucherApprovalListElement"
          }
        }
      }
    },
    "VoucherApprovalListElement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "voucher": {
          "description": "The voucher.",
          "readOnly": true,
          "$ref": "#/definitions/Voucher"
        },
        "employee": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0
        },
        "organisationLevel": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "minimum": 0
        },
        "department": {
          "readOnly": true,
          "$ref": "#/definitions/Department"
        },
        "project": {
          "readOnly": true,
          "$ref": "#/definitions/Project"
        },
        "comment": {
          "type": "string"
        },
        "commentFromOriginator": {
          "type": "string"
        },
        "actionDate": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ListResponseSupplierInvoice": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupplierInvoice"
          }
        }
      }
    },
    "OrderLinePostingDTO": {
      "type": "object",
      "required": ["posting"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "posting": {
          "$ref": "#/definitions/Posting"
        },
        "orderLine": {
          "$ref": "#/definitions/OrderLine"
        }
      }
    },
    "ResponseWrapperVoucherApprovalListElement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherApprovalListElement"
        }
      }
    },
    "ResponseWrapperTimesheetEntry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetEntry"
        }
      }
    },
    "TimeClock": {
      "type": "object",
      "required": [
        "date",
        "employee",
        "timeStart",
        "timeStop",
        "timesheetEntry"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "timesheetEntry": {
          "$ref": "#/definitions/TimesheetEntry"
        },
        "date": {
          "type": "string"
        },
        "timeStart": {
          "type": "string"
        },
        "timeStop": {
          "type": "string"
        },
        "hoursStart": {
          "type": "number",
          "minimum": 0
        }
      }
    },
    "TimesheetEntry": {
      "type": "object",
      "required": ["activity", "date", "employee", "hours"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "date": {
          "type": "string"
        },
        "hours": {
          "type": "number"
        },
        "chargeableHours": {
          "type": "number",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "timeClocks": {
          "type": "array",
          "description": "Link to stop watches on this hour.",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimeClock"
          }
        },
        "comment": {
          "type": "string"
        },
        "locked": {
          "type": "boolean",
          "description": "Indicates if the hour can be changed.",
          "readOnly": true
        },
        "chargeable": {
          "type": "boolean",
          "readOnly": true
        },
        "invoice": {
          "readOnly": true,
          "$ref": "#/definitions/Invoice"
        },
        "hourlyRate": {
          "type": "number",
          "readOnly": true
        },
        "hourlyCost": {
          "type": "number",
          "readOnly": true
        },
        "hourlyCostPercentage": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ListResponseTimesheetEntry": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        }
      }
    },
    "ResponseWrapperBigDecimal": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number"
        }
      }
    },
    "TimesheetEntrySearchResponse": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "sumAllHours": {
          "type": "number"
        }
      }
    },
    "EmployeePeriod": {
      "type": "object",
      "properties": {
        "incomingVacationBalance": {
          "type": "number",
          "readOnly": true
        },
        "outgoingVacationBalance": {
          "type": "number",
          "readOnly": true
        },
        "vacationTakenInPeriod": {
          "type": "number",
          "readOnly": true
        },
        "vacationTakenThisYear": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "FlexSummary": {
      "type": "object",
      "properties": {
        "incomingHourBalance": {
          "type": "number",
          "readOnly": true
        },
        "outgoingHourBalance": {
          "type": "number",
          "readOnly": true
        },
        "change": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "HourSummary": {
      "type": "object",
      "properties": {
        "sumHours": {
          "type": "number",
          "readOnly": true
        },
        "hoursWithPay": {
          "type": "number",
          "readOnly": true
        },
        "hourlyWageHoursWithPay": {
          "type": "number",
          "readOnly": true
        },
        "standardTime": {
          "type": "number",
          "readOnly": true
        },
        "nonChargeableHours": {
          "type": "number",
          "readOnly": true
        },
        "chargeableHours": {
          "type": "number",
          "readOnly": true
        },
        "nonChargeableHoursWithPay": {
          "type": "number",
          "readOnly": true
        },
        "budgetChargeableHours": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "ListResponseMonthlyStatus": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonthlyStatus"
          }
        }
      }
    },
    "MonthlyStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "timesheetEntries": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "approvedDate": {
          "type": "string",
          "readOnly": true
        },
        "completed": {
          "type": "boolean",
          "readOnly": true
        },
        "approvedBy": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "approved": {
          "type": "boolean",
          "readOnly": true
        },
        "approvedUntilDate": {
          "type": "string",
          "readOnly": true
        },
        "monthYear": {
          "type": "string",
          "readOnly": true
        },
        "hoursPayout": {
          "type": "number"
        },
        "vacationPayout": {
          "type": "number"
        },
        "hourSummary": {
          "readOnly": true,
          "$ref": "#/definitions/HourSummary"
        },
        "flexSummary": {
          "readOnly": true,
          "$ref": "#/definitions/FlexSummary"
        },
        "vacationSummary": {
          "readOnly": true,
          "$ref": "#/definitions/EmployeePeriod"
        }
      }
    },
    "ResponseWrapperMonthlyStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MonthlyStatus"
        }
      }
    },
    "ResponseWrapperTimesheetSalaryTypeSpecification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
        }
      }
    },
    "TimesheetSalaryTypeSpecification": {
      "type": "object",
      "required": ["count", "date", "employee", "salaryType"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "description": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "count": {
          "type": "number"
        }
      }
    },
    "ListResponseTimesheetSalaryTypeSpecification": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
          }
        }
      }
    },
    "ResponseWrapperTimesheetSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSettings"
        }
      }
    },
    "TimesheetSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "timeClock": {
          "type": "boolean"
        },
        "timesheetCompleted": {
          "type": "boolean"
        },
        "flexBalance": {
          "type": "boolean"
        },
        "vacationBalance": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperTimeClock": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimeClock"
        }
      }
    },
    "ListResponseTimeClock": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeClock"
          }
        }
      }
    },
    "ResponseWrapperWeek": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Week"
        }
      }
    },
    "Week": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "employee": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "timesheetEntries": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "week": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "completed": {
          "type": "boolean",
          "readOnly": true
        },
        "approved": {
          "type": "boolean",
          "readOnly": true
        },
        "approvedBy": {
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "approvedDate": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ListResponseWeek": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Week"
          }
        }
      }
    },
    "ResponseWrapperAccommodationAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccommodationAllowance"
        }
      }
    },
    "ListResponseAccommodationAllowance": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          }
        }
      }
    },
    "ResponseWrapperCost": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Cost"
        }
      }
    },
    "ListResponseCost": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cost"
          }
        }
      }
    },
    "ResponseWrapperMileageAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MileageAllowance"
        }
      }
    },
    "ListResponseMileageAllowance": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          }
        }
      }
    },
    "ResponseWrapperPassenger": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Passenger"
        }
      }
    },
    "ListResponsePassenger": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Passenger"
          }
        }
      }
    },
    "ResponseWrapperPerDiemCompensation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PerDiemCompensation"
        }
      }
    },
    "ListResponsePerDiemCompensationTransientDTO": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerDiemCompensationTransientDTO"
          }
        }
      }
    },
    "PerDiemCompensationTransientDTO": {
      "type": "object",
      "properties": {
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "countryCode": {
          "type": "string"
        },
        "travelExpenseZoneId": {
          "type": "integer",
          "format": "int32"
        },
        "overnightAccommodation": {
          "type": "string",
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ]
        },
        "location": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "rate": {
          "type": "number"
        },
        "amount": {
          "type": "number"
        },
        "isDeductionForBreakfast": {
          "type": "boolean"
        },
        "isDeductionForLunch": {
          "type": "boolean"
        },
        "isDeductionForDinner": {
          "type": "boolean"
        }
      }
    },
    "ListResponsePerDiemCompensation": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          }
        }
      }
    },
    "ResponseWrapperTravelExpense": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpense"
        }
      }
    },
    "ListResponseTravelExpense": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpense"
          }
        }
      }
    },
    "BodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "ContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "FormDataBodyPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "simple": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "FormDataContentDisposition": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "fileName": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "modificationDate": {
          "type": "string",
          "format": "date-time"
        },
        "readDate": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FormDataMultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "fields": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            }
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "MediaType": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "subtype": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "wildcardType": {
          "type": "boolean"
        },
        "wildcardSubtype": {
          "type": "boolean"
        }
      }
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "MultiPart": {
      "type": "object",
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "bodyParts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BodyPart"
          }
        },
        "parameterizedHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            }
          }
        }
      }
    },
    "ParameterizedHeader": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Providers": {
      "type": "object"
    },
    "ResponseWrapperTravelExpenseRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRate"
        }
      }
    },
    "ListResponseTravelExpenseRate": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRate"
          }
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        }
      }
    },
    "ListResponseTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategory"
          }
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
        }
      }
    },
    "TravelExpenseRateCategoryGroup": {
      "type": "object",
      "required": ["fromDate", "toDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "isForeignTravel": {
          "type": "boolean"
        },
        "fromDate": {
          "type": "string"
        },
        "toDate": {
          "type": "string"
        }
      }
    },
    "ListResponseTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
          }
        }
      }
    },
    "ResponseWrapperTravelCostCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelCostCategory"
        }
      }
    },
    "ListResponseTravelCostCategory": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelCostCategory"
          }
        }
      }
    },
    "ResponseWrapperTravelPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelPaymentType"
        }
      }
    },
    "ListResponseTravelPaymentType": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelPaymentType"
          }
        }
      }
    },
    "ResponseWrapperTravelExpenseSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseSettings"
        }
      }
    },
    "TravelExpenseSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "useRates": {
          "type": "boolean"
        },
        "approvalRequired": {
          "type": "boolean"
        },
        "taxFreePerDiemRates": {
          "type": "boolean"
        },
        "taxFreeMileageRates": {
          "type": "boolean"
        },
        "perDiemNotCompensated": {
          "type": "boolean"
        },
        "accommodationNotCompensated": {
          "type": "boolean"
        },
        "mileageNotCompensated": {
          "type": "boolean"
        }
      }
    },
    "ResponseWrapperTravelExpenseZone": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseZone"
        }
      }
    },
    "TravelExpenseZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "countryCode": {
          "type": "string",
          "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true
        },
        "zoneName": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "isDisabled": {
          "type": "boolean",
          "readOnly": true
        },
        "governmentName": {
          "type": "string",
          "description": "The Government name ",
          "readOnly": true,
          "maxLength": 255
        },
        "continent": {
          "type": "string",
          "readOnly": true,
          "maxLength": 50
        }
      }
    },
    "ListResponseTravelExpenseZone": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseZone"
          }
        }
      }
    },
    "ResponseWrapperTripletexAccountReturn": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexAccountReturn"
        }
      }
    },
    "TripletexAccountReturn": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/Company"
        },
        "administrator": {
          "$ref": "#/definitions/Employee"
        },
        "administratorApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "companyOwnedApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "companyOwnedApiTokenRobotId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TripletexAccount": {
      "type": "object",
      "required": [
        "accountType",
        "administratorPassword",
        "company",
        "modules",
        "numberOfVouchers"
      ],
      "properties": {
        "company": {
          "description": "Information about the company to create. Supply as much info as you have, but at least name, type and address.",
          "$ref": "#/definitions/Company"
        },
        "administrator": {
          "description": "Employee to create. Department on this object will also be created if supplied. If null a dummy user and department will be created instead",
          "$ref": "#/definitions/Employee"
        },
        "accountType": {
          "type": "string",
          "description": "Is this a test account or a paying account?",
          "enum": ["TEST", "PAYING"]
        },
        "modules": {
          "description": "Modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
          "$ref": "#/definitions/Modules"
        },
        "administratorPassword": {
          "type": "string",
          "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
        },
        "sendEmails": {
          "type": "boolean",
          "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true"
        },
        "autoValidateUserLogin": {
          "type": "boolean",
          "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS."
        },
        "createAdministratorApiToken": {
          "type": "boolean",
          "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response."
        },
        "createCompanyOwnedApiToken": {
          "type": "boolean",
          "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response."
        },
        "mayCreateTripletexAccounts": {
          "type": "boolean",
          "description": "Should the company we are creating be able to create new Tripletex accounts?"
        },
        "numberOfVouchers": {
          "type": "string",
          "description": "Used to calculate prices.",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ]
        },
        "chartOfAccountsType": {
          "type": "string",
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        },
        "accountingOffice": {
          "type": "boolean"
        },
        "auditor": {
          "type": "boolean"
        },
        "reseller": {
          "type": "boolean"
        }
      }
    },
    "TripletexAccount2": {
      "type": "object",
      "required": [
        "accountType",
        "administratorPassword",
        "company",
        "modules",
        "numberOfVouchers"
      ],
      "properties": {
        "company": {
          "description": "Information about the company to create. Supply as much info as you have, but at least name, type and address.",
          "$ref": "#/definitions/Company"
        },
        "administrator": {
          "description": "Employee to create. Department on this object will also be created if supplied. If null a dummy user and department will be created instead",
          "$ref": "#/definitions/Employee"
        },
        "accountType": {
          "type": "string",
          "description": "Is this a test account or a paying account?",
          "enum": ["TEST", "PAYING"]
        },
        "modules": {
          "type": "array",
          "description": "Sales modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          }
        },
        "administratorPassword": {
          "type": "string",
          "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)"
        },
        "sendEmails": {
          "type": "boolean",
          "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true"
        },
        "autoValidateUserLogin": {
          "type": "boolean",
          "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS."
        },
        "createAdministratorApiToken": {
          "type": "boolean",
          "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response."
        },
        "createCompanyOwnedApiToken": {
          "type": "boolean",
          "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response."
        },
        "mayCreateTripletexAccounts": {
          "type": "boolean",
          "description": "Should the company we are creating be able to create new Tripletex accounts?"
        },
        "numberOfVouchers": {
          "type": "string",
          "description": "Used to calculate prices.",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ]
        },
        "chartOfAccountsType": {
          "type": "string",
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        },
        "vatStatusType": {
          "type": "string",
          "description": "VAT type",
          "enum": ["VAT_REGISTERED", "VAT_NOT_REGISTERED", "VAT_APPLICANT"]
        },
        "bankAccount": {
          "type": "string",
          "description": "Main bank account"
        },
        "postAccount": {
          "type": "string",
          "description": "Swedish post account number (PlusGirot)"
        },
        "numberOfPrepaidUsers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of users Prepaid. Only available for some consumers."
        },
        "accountingOffice": {
          "type": "boolean"
        },
        "auditor": {
          "type": "boolean"
        },
        "reseller": {
          "type": "boolean"
        }
      }
    },
    "CustomerTripletexAccount": {
      "type": "object",
      "required": ["accountType", "modules", "numberOfVouchers", "type"],
      "properties": {
        "administrator": {
          "description": "Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company",
          "$ref": "#/definitions/Employee"
        },
        "customerId": {
          "type": "integer",
          "format": "int32",
          "description": "The customer id to an already created customer to create a Tripletex account for.",
          "minimum": 1
        },
        "accountType": {
          "type": "string",
          "enum": ["TEST", "PAYING"]
        },
        "modules": {
          "$ref": "#/definitions/Modules"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        },
        "sendEmails": {
          "type": "boolean",
          "description": "Should the emails normally sent during creation be sent in this case?"
        },
        "autoValidateUserLogin": {
          "type": "boolean",
          "description": "Should the user be automatically validated?"
        },
        "createApiToken": {
          "type": "boolean",
          "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this."
        },
        "sendInvoiceToCustomer": {
          "type": "boolean",
          "description": "Should the invoices for this account be sent to the customer?"
        },
        "customerInvoiceEmail": {
          "type": "string",
          "description": "The address to send the invoice to at the customer."
        },
        "numberOfEmployees": {
          "type": "integer",
          "format": "int32",
          "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet."
        },
        "numberOfVouchers": {
          "type": "string",
          "description": "Number of vouchers each year. Used to calculate prices.",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ]
        },
        "administratorPassword": {
          "type": "string",
          "description": "The password of the administrator user."
        },
        "chartOfAccountsType": {
          "type": "string",
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        }
      }
    },
    "CustomerTripletexAccount2": {
      "type": "object",
      "required": ["accountType", "modules", "type"],
      "properties": {
        "administrator": {
          "description": "Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company",
          "$ref": "#/definitions/Employee"
        },
        "customerId": {
          "type": "integer",
          "format": "int32",
          "description": "The customer id to an already created customer to create a Tripletex account for."
        },
        "accountType": {
          "type": "string",
          "enum": ["TEST", "PAYING"]
        },
        "modules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        },
        "sendEmails": {
          "type": "boolean",
          "description": "Should the emails normally sent during creation be sent in this case?"
        },
        "autoValidateUserLogin": {
          "type": "boolean",
          "description": "Should the user be automatically validated?"
        },
        "createApiToken": {
          "type": "boolean",
          "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this."
        },
        "sendInvoiceToCustomer": {
          "type": "boolean",
          "description": "Should the invoices for this account be sent to the customer?"
        },
        "customerInvoiceEmail": {
          "type": "string",
          "description": "The address to send the invoice to at the customer."
        },
        "numberOfEmployees": {
          "type": "integer",
          "format": "int32",
          "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet."
        },
        "administratorPassword": {
          "type": "string",
          "description": "The password of the administrator user."
        },
        "chartOfAccountsType": {
          "type": "string",
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        },
        "vatStatusType": {
          "type": "string",
          "description": "VAT type",
          "enum": ["VAT_REGISTERED", "VAT_NOT_REGISTERED", "VAT_APPLICANT"]
        }
      }
    },
    "ResponseWrapperTripletexCompanyModules": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexCompanyModules"
        }
      }
    },
    "TripletexCompanyModules": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "companyId": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "modulehourlist": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleTravelExpense": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoice": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleaccountinginternal": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAccountingExternal": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleproject": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleproduct": {
          "type": "boolean",
          "readOnly": true
        },
        "modulecustomer": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleemployee": {
          "type": "boolean",
          "readOnly": true
        },
        "moduledepartment": {
          "type": "boolean",
          "readOnly": true
        },
        "approveinvoices": {
          "type": "boolean",
          "readOnly": true
        },
        "approvehourlists": {
          "type": "boolean",
          "readOnly": true
        },
        "approvetravelreports": {
          "type": "boolean",
          "readOnly": true
        },
        "modulebudget": {
          "type": "boolean",
          "readOnly": true
        },
        "modulenote": {
          "type": "boolean",
          "readOnly": true
        },
        "moduletask": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleresourceallocation": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleprojecteconomy": {
          "type": "boolean",
          "readOnly": true
        },
        "modulereferencefee": {
          "type": "boolean",
          "readOnly": true
        },
        "modulehistorical": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleprojectcategory": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleprojectlocation": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProjectBudget": {
          "type": "boolean",
          "readOnly": true
        },
        "modulesubscription": {
          "type": "boolean",
          "readOnly": true
        },
        "completeweeklyhourlists": {
          "type": "boolean",
          "readOnly": true
        },
        "completemonthlyhourlists": {
          "type": "boolean",
          "readOnly": true
        },
        "approvemonthlyhourlists": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleprojectprognosis": {
          "type": "boolean",
          "readOnly": true
        },
        "modulebunches": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleVacationBalance": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAccountingReports": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCustomerCategories": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCustomerCategory1": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCustomerCategory2": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCustomerCategory3": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleprojectsubcontract": {
          "type": "boolean",
          "readOnly": true
        },
        "modulePayrollAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleTimeBalance": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleWorkingHours": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCurrency": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleWageExport": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAutoCustomerNumber": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAutoVendorNumber": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProvisionSalary": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderNumber": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderDiscount": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderMarkup": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderLineCost": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleStopWatch": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleContact": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAutoProjectNumber": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleSwedish": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleResourceGroups": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOcr": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleTravelExpenseRates": {
          "type": "boolean",
          "readOnly": true
        },
        "monthlyHourlistMinusTimeWarning": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleVoucherScanning": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceScanning": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProjectParticipants": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleHolydayPlan": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleEmployeeCategory": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProductInvoice": {
          "type": "boolean",
          "readOnly": true
        },
        "autoInvoicing": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceFeeComment": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleEmployeeAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleDepartmentAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProjectAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProductAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleSubscriptionAddressList": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleElectro": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleNrf": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleGtin": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleElproffen": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleRorkjop": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderExt": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleResultBudget": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAmortization": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleChangeDebtCollector": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleVoucherTypes": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOnninen123": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleElektroUnion": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAhlsellPartner": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleArchive": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleWarehouse": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleProjectBudgetReferenceFee": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleNetsEboks": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleNetsPrintSalary": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleNetsPrintInvoice": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceImport": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleEmail": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOcrAutoPay": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleEhf": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleApproveVoucher": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleApproveDepartmentVoucher": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleApproveProjectVoucher": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOrderOut": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleMesan": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleDivisions": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleBoligmappa": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAdditionProjectMarkup": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleWageProjectAccounting": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAccountantConnectClient": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleWageAmortization": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleSubscriptionsPeriodisation": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleActivityHourlyWageWageCode": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCRM": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleApi20": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleControlSchemaRequiredInvoicing": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleControlSchemaRequiredHourTracking": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleFinanceTax": {
          "type": "boolean",
          "readOnly": true
        },
        "modulePensionreport": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAgro": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleMamut": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceOptionPaper": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleSmartScan": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleOffer": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleAutoBankReconciliation": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleVoucherAutomation": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleEncryptedPaySlip": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceOptionVipps": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceOptionEfaktura": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceOptionAvtaleGiro": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleFactoringAprila": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleCashCreditAprila": {
          "type": "boolean",
          "readOnly": true
        },
        "moduleInvoiceOptionAutoinvoiceEhf": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "ListResponseTripletexCompanyModules": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TripletexCompanyModules"
          }
        }
      }
    },
    "ResponseWrapperTripletexAccountPricesReturnDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexAccountPricesReturnDTO"
        }
      }
    },
    "TripletexAccountPricesReturnDTO": {
      "type": "object",
      "properties": {
        "allPrices": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/TlxNumber"
            }
          }
        },
        "sumStartupCategory1Users": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumServiceCategory1Users": {
          "$ref": "#/definitions/TlxNumber"
        },
        "listPriceCategory1UserStartup": {
          "$ref": "#/definitions/TlxNumber"
        },
        "listPriceCategory1UserService": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumStartup": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumService": {
          "$ref": "#/definitions/TlxNumber"
        }
      }
    },
    "ResponseWrapperSalesForceAccountInfo": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceAccountInfo"
        }
      }
    },
    "SalesForceAccountInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "customerId": {
          "type": "integer",
          "format": "int32"
        },
        "customerCompanyId": {
          "type": "integer",
          "format": "int32"
        },
        "isReseller": {
          "type": "boolean"
        },
        "isAccountant": {
          "type": "boolean"
        },
        "isAuditor": {
          "type": "boolean"
        },
        "isSuspended": {
          "type": "boolean"
        },
        "registerDate": {
          "type": "string",
          "description": "Tripletex account register Date",
          "readOnly": true
        },
        "startDate": {
          "type": "string",
          "description": "Tripletex account start Date",
          "readOnly": true
        },
        "endDate": {
          "type": "string",
          "description": "Tripletex account end Date",
          "readOnly": true
        }
      }
    },
    "ListResponseSalesForceAccountInfo": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesForceAccountInfo"
          }
        }
      }
    },
    "ResponseWrapperSalesForceEmployeeRole": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceEmployeeRole"
        }
      }
    },
    "SalesForceEmployeeRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "companyId": {
          "type": "integer",
          "format": "int32"
        },
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "tripletexCustomerId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseWrapperSalesForceOpportunity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceOpportunity"
        }
      }
    },
    "SalesForceOpportunity": {
      "type": "object",
      "properties": {
        "allPrices": {
          "type": "object",
          "description": "A nested map of all active sales modules. The key in the outer map is the sales module, whilst the inner map contains the different pricing types for the given sales module. A pricing type could be PER_USE(10).",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            }
          }
        },
        "sumStartupCategory1Users": {
          "type": "number",
          "description": "The total startup price for users of category 1."
        },
        "sumServiceCategory1Users": {
          "type": "number",
          "description": "The total price per monthly price for users of category 1."
        },
        "listPriceCategory1UserStartup": {
          "type": "number",
          "description": "The startup list price per user."
        },
        "listPriceCategory1UserService": {
          "type": "number",
          "description": "The monthly list price per user."
        },
        "sumStartup": {
          "type": "number",
          "description": "The startup price for the company."
        },
        "sumService": {
          "type": "number",
          "description": "The monthly price for the company."
        },
        "sumAdditionalServices": {
          "type": "number",
          "description": "The total startup price for additional services."
        },
        "accountantStartupProvision": {
          "type": "number",
          "description": "The initial provision for the accountant of the startup price (percentage)"
        },
        "accountantMonthlyProvision": {
          "type": "number",
          "description": "The monthly provision for the accountant of the monthly price (percentage)"
        },
        "noOfUsersPrepaid": {
          "type": "integer",
          "format": "int32",
          "description": "The number of users prepaid when creating the company."
        },
        "noOfUsersIncluded": {
          "type": "integer",
          "format": "int32",
          "description": "The number of users included for free in the purchased module."
        }
      }
    },
    "ResponseWrapperSalesForceEmployee": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceEmployee"
        }
      }
    },
    "SalesForceAddress": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "addressLine1": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "addressLine2": {
          "type": "string",
          "readOnly": true,
          "maxLength": 255
        },
        "postalCode": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "city": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "country": {
          "readOnly": true,
          "$ref": "#/definitions/SalesForceCountry"
        }
      }
    },
    "SalesForceCountry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "isoAlpha2Code": {
          "type": "string",
          "readOnly": true
        },
        "isoAlpha3Code": {
          "type": "string",
          "readOnly": true,
          "maxLength": 3
        },
        "isoNumericCode": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SalesForceEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "firstName": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "lastName": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "email": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "phoneNumberHome": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "phoneNumberWork": {
          "type": "string",
          "readOnly": true,
          "maxLength": 100
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "companyId": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "customerId": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "phoneNumberSmsCertified": {
          "type": "string",
          "readOnly": true
        },
        "isUserAdministrator": {
          "type": "boolean",
          "readOnly": true
        },
        "isAccountAdministrator": {
          "type": "boolean",
          "readOnly": true
        },
        "allowLogin": {
          "type": "boolean",
          "readOnly": true
        },
        "isExternal": {
          "type": "boolean",
          "readOnly": true
        },
        "isTripletexCertified": {
          "type": "boolean",
          "readOnly": true
        },
        "isDefaultLogin": {
          "type": "boolean",
          "readOnly": true
        },
        "loginEndDate": {
          "type": "string",
          "description": "Login end date",
          "readOnly": true
        },
        "address": {
          "readOnly": true,
          "$ref": "#/definitions/SalesForceAddress"
        }
      }
    },
    "ListResponseSalesForceEmployee": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesForceEmployee"
          }
        }
      }
    },
    "ResponseWrapperVoucherMessage": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherMessage"
        }
      }
    },
    "VoucherMessage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "voucherId": {
          "type": "integer",
          "format": "int32",
          "description": "The voucher to connect the message to, only set on create"
        },
        "content": {
          "type": "string",
          "description": "The message"
        },
        "sender": {
          "description": "The employee that sent this message",
          "readOnly": true,
          "$ref": "#/definitions/Employee"
        },
        "sendTime": {
          "type": "string",
          "description": "The timestamp of the message"
        }
      }
    },
    "ListResponseVoucherMessage": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoucherMessage"
          }
        }
      }
    },
    "ResponseWrapperVoucherStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherStatus"
        }
      }
    },
    "VoucherStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Change"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "voucher": {
          "description": "The voucher.",
          "$ref": "#/definitions/Voucher"
        },
        "type": {
          "type": "string",
          "description": "The type of process",
          "readOnly": true,
          "enum": ["TRIPLETEX", "SUPPLIERINVOICE_EXTERNAL", "DEBT_COLLECTION"]
        },
        "status": {
          "type": "string",
          "description": "Process status",
          "enum": [
            "WAITING",
            "DONE",
            "SKIPPED",
            "ERROR",
            "NONE",
            "PROCESSING",
            "RECLAIMED"
          ]
        },
        "timestamp": {
          "type": "string",
          "description": "Time of last update",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "1 or 0 predefined status message",
          "enum": ["NONE", "ONGOING", "NEEDS_APPROVAL", "WITHDRAWN", "SETTLED"]
        },
        "externalObjectUrl": {
          "type": "string",
          "description": "Link to external object",
          "maxLength": 255
        },
        "comment": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string",
          "description": "reference number to external object",
          "maxLength": 255
        }
      }
    },
    "ListResponseVoucherStatus": {
      "type": "object",
      "properties": {
        "fullResultSize": {
          "type": "integer",
          "format": "int32",
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "versionDigest": {
          "type": "string",
          "description": "Used to know if the paginated list has changed."
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoucherStatus"
          }
        }
      }
    }
  }
}
